' eShopCONNECT for Connected Business
' Module: ImportExportProcessFacade.vb
'
' This software is the copyright of Connected Business and
' may not be copied, duplicated or modified other than as permitted
' in the licence agreement.  This software has been generated using 
' the Connected Business SDK and may incorporate certain intellectual 
' property of Interprise Solutions Inc. who's
' rights are hereby recognised.
    
'-------------------------------------------------------------------
'
' Updated 23 May 2014

Option Explicit On
Option Strict On

Imports Lerryn.Framework.ImportExport.Shared.ConfigConst
Imports Lerryn.Framework.ImportExport.Shared.Const
Imports Interprise.Facade.Base
Imports Interprise.Framework.Base.Shared.StoredProcedures
Imports Interprise.Framework.Base.Shared.Common
Imports Interprise.Framework.Base.Shared.Const
Imports Interprise.Framework.Base.Shared.Enum
Imports Interprise.Framework.Customer.Shared.Const ' TJS 22/09/10
Imports Microsoft.VisualBasic ' TJS 08/02/09
Imports System.Xml.Linq ' TJS 02/12/11
Imports System.Xml.XPath ' TJS 02/12/11

#Region " ImportExportProcessFacade "
	Public Class ImportExportProcessFacade
		Inherits Interprise.Facade.Base.BaseFacade
		Implements Interprise.Extendable.Base.Facade.IBaseInterface

#Region " Variables "
    Private m_ImportExportDataset As Lerryn.Framework.ImportExport.DatasetGateway.ImportExportDatasetGateway
    Private m_ImportExportRule As Lerryn.Facade.ImportExport.ImportExportFacade
    Private m_ImportExportConfigFacade As Lerryn.Facade.ImportExport.ImportExportConfigFacade
    Private CreditCardReceiptDataset As Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway ' TJS 03/02/09
    Private CreditCardReceiptFacade As Interprise.Facade.Customer.ReceiptFacade ' TJS 03/02/09
    Private SourceReceiptDataset As Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway ' TJS 30/12/09
    Private SourceReceiptFacade As Interprise.Facade.Customer.ReceiptFacade ' TJS 30/12/09
    Private TransactionDataset As Interprise.Framework.Customer.DatasetGateway.TransactionReceiptDatasetGateway ' TJS 29/05/09
    Private TransactionFacade As Interprise.Facade.Customer.TransactionReceiptFacade ' TJS 29/05/09
    Private WithEvents InvoiceDataset As Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway
    Private WithEvents SalesOrderDataset As Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway
    Private WithEvents CouponDataset As Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway ' TJS 07/06/09
    Private m_BaseProductCode As String
    Private m_BaseProductName As String
    Private AuthorisationResponse As String ' TJS 03/02/09
    Private CreditCardTransactionType As String ' TJS 29/05/09
    Private bCustomerCreditHoldOrOverLimit As Boolean ' TJS 06/10/09
    Private strCreditMessage As String ' TJS 06/10/09
#End Region

#Region " Properties "
#Region " CurrentDataset "
    Public Overrides ReadOnly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDataset
        Get
            Return m_ImportExportDataset
        End Get
    End Property
#End Region

#Region " CurrentBusinessRule "
    Public Overrides ReadOnly Property CurrentBusinessRule() As Interprise.Extendable.Base.Business.IBaseInterface
        Get
            Return m_ImportExportRule
        End Get
    End Property
#End Region

#Region " CurrentTransactionType "
    Public Overrides ReadOnly Property CurrentTransactionType() As Interprise.Framework.Base.Shared.Enum.TransactionType
        Get
            Return Nothing
        End Get
    End Property
#End Region

#Region " CurrentReportType "
    Public Overrides ReadOnly Property CurrentReportType() As Interprise.Framework.Base.Shared.Enum.ReportAction
        Get
            Return Nothing
        End Get
    End Property
#End Region

#Region " ConfigFacade "
    Public ReadOnly Property ConfigFacade() As Lerryn.Facade.ImportExport.ImportExportConfigFacade ' TJS 14/08/09
        Get
            Return m_ImportExportConfigFacade ' TJS 14/08/09
        End Get
    End Property
#End Region

#Region " SourceConfig "
    Public ReadOnly Property SourceConfig() As XDocument ' TJS 02/12/11
        Get
            Return m_ImportExportConfigFacade.SourceConfig
        End Get
    End Property
#End Region
#End Region

#Region " Methods "
#Region " Constructor "
    Public Sub New(ByRef p_ImportExportProcessDataset As Lerryn.Framework.ImportExport.DatasetGateway.ImportExportDatasetGateway, _
        ByRef p_ErrorNotification As Lerryn.Facade.ImportExport.ErrorNotification, ByVal p_BaseProductCode As String, ByVal p_BaseProductName As String) ' TJS 10/06/12
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 29/01/09 | TJS             | 2009.1.01 | Restructured to make separate OrderImporter product
        ' 10/06/12 | TJS             | 2012.1.05 | Added Error Notification object to simplify facade login/logout
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        MyBase.New()
        m_ImportExportDataset = p_ImportExportProcessDataset
        m_BaseProductCode = p_BaseProductCode
        m_BaseProductName = p_BaseProductName
        m_ImportExportRule = New Lerryn.Facade.ImportExport.ImportExportFacade(m_ImportExportDataset, p_ErrorNotification, p_BaseProductCode, p_BaseProductName) ' TJS 10/06/12
        m_ImportExportConfigFacade = New Lerryn.Facade.ImportExport.ImportExportConfigFacade(m_ImportExportDataset, p_ErrorNotification, p_BaseProductCode, p_BaseProductName) ' TJS 10/06/12
        MyBase.InitializeDataset()

        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.SystemShippingMethodGroupDetail.TableName, _
            "ReadSystemShippingMethodGroupDetailView_DEV000221"}}, Interprise.Framework.Base.Shared.ClearType.Specific)
    End Sub
#End Region

#Region " ValidateSource "
    Public Function ValidateSource(ByVal Handler As String, ByVal SourceCode As String, ByVal SourcePassword As String, ByVal Reprocess As Boolean) As Boolean ' TJS 06/10/09
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 06/10/09 | TJS             | 2009.3.07 | Modified to cater for reprocessing records
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        m_ImportExportConfigFacade.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.LerrynImportExportConfig_DEV000221.TableName, _
            "ReadLerrynImportExportConfig_DEV000221", "@SourceCode", SourceCode}}, Interprise.Framework.Base.Shared.ClearType.Specific)

        If Me.m_ImportExportDataset.LerrynImportExportConfig_DEV000221.Count = 1 Then
            Return m_ImportExportConfigFacade.ValidateSource(Handler, SourceCode, SourcePassword, Reprocess) ' TJS 06/10/09
        Else
            SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ValidateSource", "Unknown Source Code " & SourceCode)
            Return False
        End If

    End Function
#End Region

#Region " XMLQuoteImport "
    Public Function XMLQuoteImport(ByVal GenericXMLFile As XDocument) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 30/12/09 | TJS             | 2010.0.00 | Function added
        ' 05/01/10 | TJS             | 2010.0.01 | Modified to cater for conversion of prospects to customers
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to permit up to 250 orders during an evaluation
        ' 09/07/11 | FA              | 2011.1.00 | Modified to add quote details to FetchCustomerRecord, to allow name and 
        '                                          address updates
        ' 18/07/11 | TJS/FA          | 2011.1.02 | Modified to call update customer details, if CustomerCode is present in the xml order
        '                                          Previously this meant that if an xml record had been entered as a quote, but the item not found
        '                                          in IS, then the customer details created by the quote (i.e. ".") would not be updated.
        ' 23/09/11 | TJS/FA          | 2011.1.05 | Don't run UpdateCustomerRecord if customer is default eShopCONNECT user
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim XMLTemp As XDocument
        Dim XMLQuoteList As System.Collections.Generic.IEnumerable(Of XElement), XMLQuoteNode As XElement
        Dim xmlQuoteResponseNode As XElement, xmlResponseDetailNode As XElement
        Dim strSourceCustomerID As String, strISCustomerCode As String, strSourceCode As String
        Dim strImportCount As String, strNewISCustomerCode As String ' TJS 19/08/10

        xmlQuoteResponseNode = New XElement("eShopCONNECT") ' TJS 02/12/11

        Try
            If m_ImportExportConfigFacade.IsActivated Then
                strSourceCode = GetXMLElementText(GenericXMLFile, GENERIC_XML_SOURCE_CODE)
                ' get list of Quotes 
                XMLQuoteList = GenericXMLFile.XPathSelectElements(GENERIC_XML_QUOTE_LIST)

                If XMLQuoteList IsNot Nothing Then
                    For Each XMLQuoteNode In XMLQuoteList
                        Try
                            XMLTemp = XDocument.Parse(XMLQuoteNode.ToString)
                            ' is product running as an evaluation copy ?
                            If Not m_ImportExportConfigFacade.IsFullActivation Then
                                ' yes, check how many records imported so far
                                strImportCount = m_ImportExportConfigFacade.GetField("SELECT COUNT(*) AS ImportedQuotes FROM CustomerSalesOrder INNER JOIN LerrynImportExportConfig_DEV000221 " & _
                                    "ON CustomerSalesOrder.SourceCode = LerrynImportExportConfig_DEV000221.SourceCode_DEV000221", CommandType.Text, Nothing)
                                If strImportCount <> "" Then
                                    If CInt(strImportCount) >= 250 Then ' TJS 18/03/11
                                        xmlQuoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Your Evaluation Activation Code only permits the import of 250 Sales Quotes.  Please contact Sales@lerryn if you have a specific reason for needing to import additional quote during your product evaluation.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLQuoteImport", GenericXMLFile.ToString))
                                        Return xmlQuoteResponseNode
                                    End If
                                End If
                            End If

                            'First check if customer exists
                            strSourceCustomerID = GetXMLElementText(XMLTemp, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/SourceCustomerID")
                            strISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/ISCustomerCode")
                            strNewISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/NewISCustomerCode") ' TJS 19/08/10
                            ' Either Source or IS Customer ID must be provided unless Config settings allow blank Source ID
                            If strSourceCustomerID <> "" Or strISCustomerCode <> "" Or GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_REQUIRE_SOURCE_CUSTOMER_ID).ToUpper = "NO" Then
                                ' has IS Customer ID been provided ?
                                If strISCustomerCode = "" Then
                                    ' no, has Source Coutomer ID been provided ?
                                    If strSourceCustomerID <> "" Then
                                        ' yes, see if Customer record exists
                                        strISCustomerCode = FetchCustomerRecord(XMLTemp, strSourceCustomerID, strSourceCode, "Quote", False) ' TJS 05/01/10
                                    End If
                                    ' has IS Customer ID been found ?
                                    If strISCustomerCode = "" Then
                                        'no, Customer does not exist, create it
                                        xmlResponseDetailNode = CreateCustomerRecord(XMLTemp, strSourceCustomerID, strNewISCustomerCode, strSourceCode, "Quote") ' TJS 19/08/10
                                        If xmlResponseDetailNode.Name.ToString = "CustomerCode" Then
                                            strISCustomerCode = xmlResponseDetailNode.Value
                                        Else
                                            xmlQuoteResponseNode.Add(xmlResponseDetailNode)
                                            Return xmlQuoteResponseNode
                                        End If

                                    ElseIf Me.m_ImportExportDataset.CustomerImportExportView_DEV000221.Count > 1 Then
                                        xmlQuoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "084", "Multiple customer records exist for SourceCustomerID " & strSourceCustomerID & ", SourceCode " & strSourceCode, _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLQuoteImport", GenericXMLFile.ToString))
                                        Return xmlQuoteResponseNode

                                    End If

                                ElseIf strISCustomerCode <> "DefaultECommerceShopper" Then ' TJS/FA 23/09/11
                                    UpdateCustomerRecord(XMLTemp, Me.m_ImportExportDataset.CustomerImportExportView_DEV000221(0).CustomerCode, "Quote") ' TJS/FA 18/07/11
                                End If

                                ' if IS Customer ref found or created then create quote
                                If strISCustomerCode <> "" Then
                                    ' quote creation returns an xml node for inclusion in the process response
                                    xmlResponseDetailNode = CreateQuote(XMLTemp, strISCustomerCode, strSourceCode)
                                    xmlQuoteResponseNode.Add(xmlResponseDetailNode)

                                Else
                                    xmlQuoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "012", "Failed to create customer code for Quote", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLQuoteImport", GenericXMLFile.ToString))
                                End If

                            Else
                                xmlQuoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "011", "No Customer ID found in Quote", _
                                   m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLQuoteImport", GenericXMLFile.ToString))
                            End If

                        Catch ex As Exception
                            xmlQuoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Quote record could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLQuoteImport", GenericXMLFile.ToString))

                        End Try
                    Next
                Else
                    xmlQuoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "003", "No Quote record found", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLQuoteImport", GenericXMLFile.ToString))
                End If
            Else
                xmlQuoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Source activation or validation error", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLQuoteImport", GenericXMLFile.ToString))
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLQuoteImport", ex, GenericXMLFile.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            xmlQuoteResponseNode.Add(xmlResponseDetailNode)

        End Try

        Return xmlQuoteResponseNode

    End Function
#End Region

#Region " XMLOrderImport "
    Public Function XMLOrderImport(ByVal GenericXMLFile As XDocument, ByVal QuoteToConvert As String) As XElement ' TJS 19/08/10 TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 24/01/09 | TJS             | 2009.1.00 | Modified to allow new customer creation without 
        '                                        | Source Customer ID if config settings do not require it
        ' 29/01/09 | TJS             | 2009.1.03 | Modified to cater for modified response structure from 
        '                                        | CreateOrder with optional warning message
        ' 09/03/09 | TJS             | 2009.1.09 | Modified to use BuildXMLErrorResponseNodeAndEmail for source error processing
        ' 03/04/09 | TJS             | 2009.2.00 | Modified to check module is activated and to limit number of orders imported on an evaluation code
        ' 29/05/09 | TJS             | 2009.2.09 | Added checks for XML load errors
        ' 07/06/09 | TJS             | 2009.2.10 | Added check for multiple customers matching Source Customer ID
        ' 14/07/09 | TJS             | 2009.3.01 | Modified call to CreateCustomerRecord to cater for Prospect Importer build
        ' 05/01/10 | TJS             | 2010.0.01 | Modified to cater for conversion of prospects to customers
        ' 19/08/10 | TJS             | 2010.1.00 | Modified to cater for Channel ADvisor now importing quotes and 
        '                                        | then converting them to orders when payment received
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to permit up to 250 orders during an evaluation 
        ' 09/07/11 | FA              | 2011.1.00 | Modified to add order details to FetchCustomerRecord, to allow name and 
        '                                          address updates
        ' 18/07/11 | TJS/FA          | 2011.1.02 | Modified to call update customer details, if CustomerCode is present in the xml order
        '                                          Previously this meant that if an order had been entered as a quote, but the item not found
        '                                          in IS, then the customer details created by the quote (i.e. ".") would not be updated.
        ' 23/09/11 | TJS/FA          | 2011.1.05 | Don't run UpdateCustomerRecord if customer is default eShopCONNECT user
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim XMLTemp As XDocument
        Dim XMLOrderList As System.Collections.Generic.IEnumerable(Of XElement), XMLOrderNode As XElement
        Dim xmlOrderResponseNode As XElement, xmlResponseDetailNode As XElement
        Dim strSourceCustomerID As String, strISCustomerCode As String, strSourceCode As String
        Dim strImportCount As String, strNewISCustomerCode As String ' TJS 03/04/09 TJS 19/08/10

        xmlOrderResponseNode = New XElement("eShopCONNECT")

        Try
            If m_ImportExportConfigFacade.IsActivated Then ' TJS 03/04/09
                strSourceCode = GetXMLElementText(GenericXMLFile, GENERIC_XML_SOURCE_CODE)
                ' get list of orders 
                XMLOrderList = GenericXMLFile.XPathSelectElements(GENERIC_XML_ORDER_LIST)

                If XMLOrderList IsNot Nothing Then ' TJS 09/03/09
                    For Each XMLOrderNode In XMLOrderList
                        Try
                            XMLTemp = XDocument.Parse(XMLOrderNode.ToString)
                            ' is product running as an evaluation copy ?
                            If Not m_ImportExportConfigFacade.IsFullActivation Then ' TJS 03/04/09
                                ' yes, check how many records imported so far
                                strImportCount = m_ImportExportConfigFacade.GetField("SELECT COUNT(*) AS ImportedOrders FROM CustomerSalesOrder INNER JOIN LerrynImportExportConfig_DEV000221 " & _
                                    "ON CustomerSalesOrder.SourceCode = LerrynImportExportConfig_DEV000221.SourceCode_DEV000221", CommandType.Text, Nothing) ' TJS 03/04/09
                                If strImportCount <> "" Then ' TJS 03/04/09
                                    If CInt(strImportCount) >= 250 Then ' TJS 03/04/09 TJS 18/03/11
                                        xmlOrderResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Your Evaluation Activation Code only permits the import of 250 Sales Orders.  Please contact Sales@lerryn if you have a specific reason for needing to import additional orders during your product evaluation.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLOrderImport", GenericXMLFile.ToString)) ' TJS 03/04/09
                                        Return xmlOrderResponseNode ' TJS 03/04/09
                                    End If
                                End If
                            End If

                            'First check if customer exists
                            strSourceCustomerID = GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/SourceCustomerID")
                            strISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/ISCustomerCode")
                            strNewISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/NewISCustomerCode") ' TJS 19/08/10
                            ' Either Source or IS Customer ID must be provided unless Config settings allow blank Source ID
                            If strSourceCustomerID <> "" Or strISCustomerCode <> "" Or GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_REQUIRE_SOURCE_CUSTOMER_ID).ToUpper = "NO" Then ' TJS 24/01/09
                                ' has IS Customer ID been provided ?
                                If strISCustomerCode = "" Then
                                    ' no, has Source Customer ID been provided ?
                                    If strSourceCustomerID <> "" Then ' TJS 24/01/09
                                        ' yes, see if Customer record exists
                                        strISCustomerCode = FetchCustomerRecord(XMLTemp, strSourceCustomerID, strSourceCode, "Order", True) ' TJS 05/01/10 'TJS/FA 09/07/11
                                    End If
                                    ' has IS Customer ID been found ?
                                    If strISCustomerCode = "" Then
                                        'no, Customer does not exist, create it
                                        xmlResponseDetailNode = CreateCustomerRecord(XMLTemp, strSourceCustomerID, strNewISCustomerCode, strSourceCode, "Order") ' TJS 14/07/09 TJS 19/08/10
                                        If xmlResponseDetailNode.Name.ToString = "CustomerCode" Then
                                            strISCustomerCode = xmlResponseDetailNode.Value
                                        Else
                                            xmlOrderResponseNode.Add(xmlResponseDetailNode)
                                            Return xmlOrderResponseNode
                                        End If

                                    ElseIf Me.m_ImportExportDataset.CustomerImportExportView_DEV000221.Count > 1 Then ' TJS 07/06/09
                                        xmlOrderResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "084", "Multiple customer records exist for SourceCustomerID " & strSourceCustomerID & ", SourceCode " & strSourceCode, _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLOrderImport", GenericXMLFile.ToString)) ' TJS 07/06/09
                                        Return xmlOrderResponseNode ' TJS 07/06/09

                                    End If

                                ElseIf strISCustomerCode <> "DefaultECommerceShopper" Then ' TJS/FA 23/09/11
                                    ' yes, check for updates to customer details
                                    UpdateCustomerRecord(XMLTemp, strISCustomerCode, "Order") 'TJS/FA 09/07/11
                                End If

                                ' if IS Customer ref found or created then create order or convert quote
                                If strISCustomerCode <> "" Then
                                    ' was order originally imported as Quote ?
                                    If QuoteToConvert = "" Then ' TJS 19/08/10
                                        'no, create order (creation returns an xml node for inclusion in the process response)
                                        xmlResponseDetailNode = CreateOrder(XMLTemp, strISCustomerCode, strSourceCode)
                                    Else
                                        ' yes, convert Quote to Order and add payment
                                        xmlResponseDetailNode = ConvertQuoteToOrder(XMLTemp, strISCustomerCode, QuoteToConvert, strSourceCode) ' TJS 19/08/10
                                    End If
                                    xmlOrderResponseNode.Add(xmlResponseDetailNode) ' TJS 29/01/09

                                Else
                                    xmlOrderResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "012", "Failed to create customer code for Order", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLOrderImport", GenericXMLFile.ToString)) ' TJS 09/03/09
                                End If

                            Else
                                xmlOrderResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "011", "No Customer ID found in Order", _
                                   m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLOrderImport", GenericXMLFile.ToString)) ' TJS 09/03/09
                            End If

                        Catch ex As Exception
                            xmlOrderResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Order record could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLOrderImport", GenericXMLFile.ToString)) ' TJS 29/05/09

                        End Try
                    Next
                Else
                    xmlOrderResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "003", "No Order record found", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLOrderImport", GenericXMLFile.ToString)) ' TJS 09/03/09
                End If
            Else
                xmlOrderResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Source activation or validation error", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLOrderImport", GenericXMLFile.ToString)) ' TJS 03/04/09
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLOrderImport", ex, GenericXMLFile.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            xmlOrderResponseNode.Add(xmlResponseDetailNode)

        End Try

        Return xmlOrderResponseNode

    End Function
#End Region

#Region " XMLInvoiceImport "
    Public Function XMLInvoiceImport(ByVal GenericXMLFile As XDocument) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 24/01/09 | TJS             | 2009.1.00 | Modified to allow new customer creation without 
        '                                        | Source Customer ID if config settings do not require it
        ' 29/01/09 | TJS             | 2009.1.03 | Modified to cater for modified response structure from 
        '                                        | CreateInvoice with optional warning message
        ' 09/03/09 | TJS             | 2009.1.09 | Modified to use BuildXMLErrorResponseNodeAndEmail for source error processing
        ' 03/04/09 | TJS             | 2009.2.00 | Modified to check module is activated and to limit number of orders imported on an evaluation code
        ' 29/05/09 | TJS             | 2009.2.09 | Added checks for XML load errors
        ' 07/06/09 | TJS             | 2009.2.10 | Added check for multiple customers matching Source Customer ID
        ' 14/07/09 | TJS             | 2009.3.01 | Modified call to CreateCustomerRecord to cater for Prospect Importer build
        ' 05/01/10 | TJS             | 2010.0.01 | Modified to cater for conversion of prospects to customers
        ' 19/08/10 | TJS             | 2010.1.00 | Modified to cater for Channel ADvisor now importing quotes 
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to permit up to 250 orders during an evaluation
        ' 09/07/11 | FA              | 2011.1.00 | Modified to add invoices details to FetchCustomerRecord, to allow name and 
        '                                          address updates
        ' 18/07/11 | TJS/FA          | 2011.1.02 | Modified to call update customer details, if CustomerCode is present in the xml order
        ' 23/09/11 | TJS/FA          | 2011.1.05 | Don't run UpdateCustomerRecord if customer is default eShopCONNECT user
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim XMLTemp As XDocument
        Dim XMLInvoiceList As System.Collections.Generic.IEnumerable(Of XElement), XMLInvoiceNode As XElement
        Dim xmlInvoiceResponseNode As XElement, xmlResponseDetailNode As XElement
        Dim strSourceCustomerID As String, strISCustomerCode As String, strSourceCode As String
        Dim strImportCount As String, strNewISCustomerCode As String ' TJS 03/04/09 TJS 19/08/10

        xmlInvoiceResponseNode = New XElement("eShopCONNECT")

        Try

            If m_ImportExportConfigFacade.IsActivated Then ' TJS 03/04/09
                strSourceCode = GetXMLElementText(GenericXMLFile, GENERIC_XML_SOURCE_CODE)
                ' get list of Invoices 
                XMLInvoiceList = GenericXMLFile.XPathSelectElements(GENERIC_XML_INVOICE_LIST)

                If XMLInvoiceList IsNot Nothing Then ' TJS 09/03/09
                    For Each XMLInvoiceNode In XMLInvoiceList
                        Try
                            XMLTemp = XDocument.Parse(XMLInvoiceNode.ToString)
                            ' is product running as an evaluation copy ?
                            If Not m_ImportExportConfigFacade.IsFullActivation Then ' TJS 03/04/09
                                ' yes, check how many records imported so far
                                strImportCount = m_ImportExportConfigFacade.GetField("SELECT COUNT(*) AS ImportedInvoices FROM CustomerInvoice INNER JOIN LerrynImportExportConfig_DEV000221 " & _
                                    "ON CustomerInvoice.SourceCode = LerrynImportExportConfig_DEV000221.SourceCode_DEV000221 WHERE Type = 'Invoice'", CommandType.Text, Nothing) ' TJS 03/04/09
                                If strImportCount <> "" Then ' TJS 03/04/09
                                    If CInt(strImportCount) >= 250 Then ' TJS 03/04/09 TJS 18/03/11
                                        xmlInvoiceResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Your Evaluation Activation Code only permits the import of 250 Invoices.  Please contact Sales@lerryn if you have a specific reason for needing to import additional invoices during your product evaluation.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLInvoiceImport", GenericXMLFile.ToString)) ' TJS 03/04/09
                                        Return xmlInvoiceResponseNode ' TJS 03/04/09
                                    End If
                                End If
                            End If

                            'First check if customer exists
                            strSourceCustomerID = GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/SourceCustomerID")
                            strISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/ISCustomerCode")
                            strNewISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/NewISCustomerCode") ' TJS 19/08/10
                            ' Either Source or IS Customer ID must be provided unless Config settings allow blank Source ID
                            If strSourceCustomerID <> "" Or strISCustomerCode <> "" Or GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_REQUIRE_SOURCE_CUSTOMER_ID).ToUpper = "NO" Then ' TJS 24/01/09
                                ' has IS Customer ID been provided ?
                                If strISCustomerCode = "" Then
                                    ' no, has Source Coutomer ID been provided ?
                                    If strSourceCustomerID <> "" Then ' TJS 24/01/09
                                        ' yes, see if Customer record exists
                                        strISCustomerCode = FetchCustomerRecord(XMLTemp, strSourceCustomerID, strSourceCode, "Invoice", True) ' TJS 05/01/10
                                    End If
                                    ' has IS Customer ID been found ?
                                    If strISCustomerCode = "" Then
                                        'no, Customer does not exist, create it
                                        xmlResponseDetailNode = CreateCustomerRecord(XMLTemp, strSourceCustomerID, strNewISCustomerCode, strSourceCode, "Invoice") ' TJS 14/07/09 TJS 19/08/10
                                        If xmlResponseDetailNode.Name.ToString = "CustomerCode" Then
                                            strISCustomerCode = xmlResponseDetailNode.Value
                                        Else
                                            xmlInvoiceResponseNode.Add(xmlResponseDetailNode)
                                            Return xmlInvoiceResponseNode
                                        End If

                                    ElseIf Me.m_ImportExportDataset.CustomerImportExportView_DEV000221.Count > 1 Then ' TJS 07/06/09
                                        xmlInvoiceResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "084", "Multiple customer records exist for SourceCustomerID " & strSourceCustomerID & ", SourceCode " & strSourceCode, _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLInvoiceImport", GenericXMLFile.ToString)) ' TJS 07/06/09
                                        Return xmlInvoiceResponseNode ' TJS 07/06/09

                                    End If
                                ElseIf strISCustomerCode <> "DefaultECommerceShopper" Then ' TJS/FA 23/09/11
                                    ' yes, check for updates to customer details
                                    UpdateCustomerRecord(XMLTemp, strISCustomerCode, "Invoice") 'TJS/FA 09/07/11
                                End If

                                ' if IS Customer ref found or created then create Invoice
                                If strISCustomerCode <> "" Then
                                    ' Invoice creation returns an xml node for inclusion in the process response
                                    xmlResponseDetailNode = CreateInvoice(XMLTemp, strISCustomerCode, strSourceCode)
                                    xmlInvoiceResponseNode.Add(xmlResponseDetailNode) ' TJS 29/01/09

                                Else
                                    xmlInvoiceResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "032", "Failed to create customer code for Invoice", _
                                       m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLInvoiceImport", GenericXMLFile.ToString)) ' TJS 09/03/09

                                End If
                            Else
                                xmlInvoiceResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "031", "No Customer ID found in Invoice", _
                               m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLInvoiceImport", GenericXMLFile.ToString)) ' TJS 09/03/09

                            End If

                        Catch ex As Exception
                            xmlInvoiceResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Invoice record could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLInvoiceImport", GenericXMLFile.ToString)) ' TJS 29/05/09

                        End Try
                    Next
                Else
                    xmlInvoiceResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "003", "No Invoice record found", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLInvoiceImport", GenericXMLFile.ToString)) ' TJS 09/03/09
                End If
            Else
                xmlInvoiceResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Source activation or validation error", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLInvoiceImport", GenericXMLFile.ToString)) ' TJS 03/04/09
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLInvoiceImport", ex, GenericXMLFile.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            xmlInvoiceResponseNode.Add(xmlResponseDetailNode)

        End Try

        Return xmlInvoiceResponseNode

    End Function
#End Region

#Region " XMLCreditNoteImport "
    Public Function XMLCreditNoteImport(ByVal GenericXMLFile As XDocument) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 29/01/09 | TJS             | 2009.1.03 | Modified to cater for modified response structure from 
        '                                        | CreateCreditNote with optional warning message
        ' 09/03/09 | TJS             | 2009.1.09 | Modified to use BuildXMLErrorResponseNodeAndEmail for source error processing
        ' 03/04/09 | TJS             | 2009.2.00 | Modified to check module is activated and to limit number of orders imported on an evaluation code
        ' 29/05/09 | TJS             | 2009.2.09 | Added checks for XML load errors
        ' 07/06/09 | TJS             | 2009.2.10 | Added check for multiple customers matching Source Customer ID
        ' 18/06/09 | TJS             | 2009.2.14 | Removed confusing error about failing to create customer if not found
        ' 05/01/10 | TJS             | 2010.0.01 | Modified to cater for conversion of prospects to customers
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to permit up to 250 orders during an evaluation
        ' 09/07/11 | FA              | 2011.1.00 | Modified to add credit note details to FetchCustomerRecord, to allow name and 
        '                                          address updates
        ' 23/09/11 | TJS/FA          | 2011.1.05 | Don't run UpdateCustomerRecord if customer is default eShopCONNECT user
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim XMLTemp As XDocument
        Dim XMLCreditNoteList As System.Collections.Generic.IEnumerable(Of XElement), XMLCreditNoteNode As XElement
        Dim xmlCreditNoteResponseNode As XElement, xmlResponseDetailNode As XElement
        Dim strSourceCustomerID As String, strISCustomerCode As String, strSourceCode As String
        Dim strImportCount As String ' TJS 03/04/09

        xmlCreditNoteResponseNode = New XElement("eShopCONNECT")

        Try

            If m_ImportExportConfigFacade.IsActivated Then ' TJS 03/04/09
                strSourceCode = GetXMLElementText(GenericXMLFile, GENERIC_XML_SOURCE_CODE)
                ' get list of Credit Notes 
                XMLCreditNoteList = GenericXMLFile.XPathSelectElements(GENERIC_XML_CREDITNOTE_LIST)

                If XMLCreditNoteList IsNot Nothing Then ' TJS 09/03/09
                    For Each XMLCreditNoteNode In XMLCreditNoteList
                        Try
                            XMLTemp = XDocument.Parse(XMLCreditNoteNode.ToString)
                            ' is product running as an evaluation copy ?
                            If Not m_ImportExportConfigFacade.IsFullActivation Then ' TJS 03/04/09
                                ' yes, check how many records imported so far
                                strImportCount = m_ImportExportConfigFacade.GetField("SELECT COUNT(*) AS ImportedInvoices FROM CustomerInvoice INNER JOIN LerrynImportExportConfig_DEV000221 " & _
                                    "ON CustomerInvoice.SourceCode = LerrynImportExportConfig_DEV000221.SourceCode_DEV000221 WHERE Type = 'Credit Memo'", CommandType.Text, Nothing) ' TJS 03/04/09
                                If strImportCount <> "" Then ' TJS 03/04/09
                                    If CInt(strImportCount) >= 250 Then ' TJS 03/04/09 TJS 18/03/11
                                        xmlCreditNoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Your Evaluation Activation Code only permits the import of 250 Credit Notes.  Please contact Sales@lerryn if you have a specific reason for needing to import additional credit notes during your product evaluation.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCreditNoteImport", GenericXMLFile.ToString)) ' TJS 03/04/09
                                        Return xmlCreditNoteResponseNode ' TJS 03/04/09
                                    End If
                                End If
                            End If

                            'First check if customer exists
                            strSourceCustomerID = GetXMLElementText(XMLTemp, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/SourceCustomerID")
                            strISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/ISCustomerCode")
                            ' NOTE DO NOT ALLOW CREDIT NOTE GENERATION WITHOUT A CUSTOMER ID (Source or IS)
                            If strSourceCustomerID <> "" Or strISCustomerCode <> "" Then
                                ' has IS Customer ID been provided ?
                                If strISCustomerCode = "" Then
                                    ' no, see if Customer record exists for Source Customer ID
                                    strISCustomerCode = FetchCustomerRecord(XMLTemp, strSourceCustomerID, strSourceCode, "CreditNote", True) ' TJS 05/01/10 TJS/FA 09/07/11
                                    ' has IS Customer ID been found ?
                                    If strISCustomerCode = "" Then
                                        'Customer does not exist, don't create it
                                        xmlCreditNoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "051", "Customer not found for Credit Note", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCreditNoteImport", GenericXMLFile.ToString)) ' TJS 09/03/09

                                    ElseIf Me.m_ImportExportDataset.CustomerImportExportView_DEV000221.Count > 1 Then ' TJS 07/06/09
                                        xmlCreditNoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "084", "Multiple customer records exist for SourceCustomerID " & strSourceCustomerID & ", SourceCode " & strSourceCode, _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCreditNoteImport", GenericXMLFile.ToString)) ' TJS 07/06/09

                                    End If

                                ElseIf strISCustomerCode <> "DefaultECommerceShopper" Then ' TJS/FA 23/09/11
                                    ' yes, check for updates to customer details
                                    UpdateCustomerRecord(XMLTemp, strISCustomerCode, "CreditNote") 'TJS/FA 09/07/11
                                End If

                                ' if IS Customer ref found, then create Credit Note
                                If strISCustomerCode <> "" Then
                                    ' Credit Note creation returns an xml node for inclusion in the process response
                                    xmlResponseDetailNode = CreateCreditNote(XMLTemp, strISCustomerCode, strSourceCode)
                                    xmlCreditNoteResponseNode.Add(xmlResponseDetailNode) ' TJS 29/01/09

                                End If
                            Else
                                xmlCreditNoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "051", "No Customer ID found in Credit Note", _
                                  m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCreditNoteImport", GenericXMLFile.ToString)) ' TJS 09/03/09

                            End If

                        Catch ex As Exception
                            xmlCreditNoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Credit Note record could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCreditNoteImport", GenericXMLFile.ToString)) ' TJS 29/05/09

                        End Try
                    Next
                Else
                    xmlCreditNoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "003", "No Credit Note record found", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCreditNoteImport", GenericXMLFile.ToString)) ' TJS 09/03/09
                End If
            Else
                xmlCreditNoteResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Source activation or validation error", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCreditNoteImport", GenericXMLFile.ToString)) ' TJS 03/04/09
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCreditNoteImport", ex, GenericXMLFile.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            xmlCreditNoteResponseNode.Add(xmlResponseDetailNode)

        End Try

        Return xmlCreditNoteResponseNode

    End Function
#End Region

#Region " XMLLeadImport "
    Public Function XMLLeadImport(ByVal GenericXMLFile As XDocument) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 14/07/09 | TJS             | 2009.3.01 | Function added 
        ' 14/08/09 | TJS             | 2009.3.03 | Modified return xml
        ' 24/08/09 | TJS             | 2009.3.04 | Modified to cater for new activities on an existing Lead
        '                                        | and to activate Lead if marked as not active
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 02/04/12 | TJS             | 2011.2.12 | Corected detection of successful Activity generation
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim XMLTemp As XDocument, XMLActivityNode As XElement
        Dim XMLLeadList As System.Collections.Generic.IEnumerable(Of XElement), XMLOrderNode As XElement
        Dim xmlLeadResponseNode As XElement, xmlResponseDetailNode As XElement
        Dim strSourceLeadID As String, strISLeadCode As String, strSourceCode As String
        Dim strImportCount As String, strTempValue As String, strContactCode As String ' TJS 14/08/09 TJS 24/08/09
        Dim strISCustomerCode As String, bLeadNotActive As Boolean ' TJS 24/08/09

        xmlLeadResponseNode = New XElement("eShopCONNECT")

        Try
            If m_ImportExportConfigFacade.IsActivated Then
                strSourceCode = GetXMLElementText(GenericXMLFile, GENERIC_XML_SOURCE_CODE)
                ' get list of leads 
                XMLLeadList = GenericXMLFile.XPathSelectElements(GENERIC_XML_LEAD_LIST)

                If XMLLeadList IsNot Nothing Then
                    For Each XMLOrderNode In XMLLeadList
                        Try
                            XMLTemp = XDocument.Parse(XMLOrderNode.ToString)
                            ' is product running as an evaluation copy ?
                            If Not m_ImportExportConfigFacade.IsFullActivation Then
                                ' yes, check how many records imported so far
                                strImportCount = m_ImportExportConfigFacade.GetField("SELECT COUNT(*) AS ImportedLeads FROM CRMLead INNER JOIN LerrynImportExportConfig_DEV000221 " & _
                                    "ON CRMLead.SourceCode = LerrynImportExportConfig_DEV000221.SourceCode_DEV000221", CommandType.Text, Nothing)
                                If strImportCount <> "" Then
                                    If CInt(strImportCount) >= 50 Then
                                        xmlLeadResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Your Evaluation Activation Code only permits the import of 50 Leads.  Please contact Sales@lerryn if you have a specific reason for needing to import additional leads during your product evaluation.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLLeadImport", GenericXMLFile.ToString))
                                        Return xmlLeadResponseNode
                                    End If
                                End If
                            End If

                            'First check if lead exists
                            strSourceLeadID = GetXMLElementText(XMLTemp, GENERIC_XML_LEAD_SOURCE_LEAD_ID)
                            ' Lead ID must be provided unless Config settings allow blank Source ID
                            If strSourceLeadID <> "" Or GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_REQUIRE_SOURCE_CUSTOMER_ID).ToUpper = "NO" Then
                                ' no, has Source Coutomer ID been provided ?
                                strISLeadCode = ""
                                If strSourceLeadID <> "" Then
                                    ' yes, see if Lead record exists
                                    strISLeadCode = FetchLeadRecord(strSourceLeadID, strSourceCode)
                                End If
                                ' has IS Lead ID been found ?
                                If strISLeadCode = "" Then
                                    'no, Lead does not exist, create it
                                    xmlResponseDetailNode = CreateLeadRecord(XMLTemp, strSourceCode)
                                    If xmlResponseDetailNode.Name.ToString = "LeadCode" Then
                                        strISLeadCode = xmlResponseDetailNode.Value
                                        XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_LEAD_ACTIVITY)
                                        If XMLActivityNode IsNot Nothing Then
                                            xmlResponseDetailNode = CreateActivity(XMLTemp, "Lead", "Lead", strISLeadCode, strISLeadCode, strSourceCode) ' TJS 24/08/09
                                            If xmlResponseDetailNode.Name.ToString <> "ActivityCode" Then ' TJS 02/04/12
                                                xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                                Return xmlLeadResponseNode

                                            Else
                                                strTempValue = xmlResponseDetailNode.Value ' TJS 14/08/09
                                                xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 14/08/09
                                                xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 14/08/09
                                                xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode)) ' TJS 14/08/09
                                                xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue)) ' TJS 14/08/09
                                                xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                            End If

                                        Else
                                            xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 14/08/09
                                            xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 14/08/09
                                            xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode)) ' TJS 14/08/09
                                            xmlLeadResponseNode.Add(xmlResponseDetailNode)

                                        End If

                                    Else
                                        xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                        Return xmlLeadResponseNode
                                    End If

                                ElseIf Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221.Count > 1 Then
                                    xmlLeadResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "084", "Multiple lead records exist for SourceLeadID " & strSourceLeadID & ", SourceCode " & strSourceCode, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLLeadImport", GenericXMLFile.ToString))
                                    Return xmlLeadResponseNode

                                Else
                                    ' start of code added TJS 24/08/09
                                    ' has lead been converted to a Prospect/Customer ?
                                    If Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221(0).IsConvertedCustomerCodeNull Then
                                        ' no, is there an Activity to create ?
                                        strISLeadCode = Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221(0).LeadCode
                                        XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_LEAD_ACTIVITY)
                                        If XMLActivityNode IsNot Nothing Then
                                            ' yes, has activity been imported (Lead could have been imported previously)
                                            XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_LEAD_ACTIVITY & "/Subject")
                                            strTempValue = Me.GetField("ActivityCode", "CRMActivity", "EntityCode = '" & strISLeadCode & "' AND ContactCode = '" & strISLeadCode & "' AND ParentType = 'LeadActivity' AND Type = 'Call' AND Subject = '" & XMLActivityNode.Value & "'")
                                            If strTempValue = "" Then
                                                ' no, create activity
                                                xmlResponseDetailNode = CreateActivity(XMLTemp, "Lead", "Lead", strISLeadCode, strISLeadCode, strSourceCode) ' TJS 24/08/09
                                                If xmlResponseDetailNode.Name.ToString <> "ActivityCode" Then ' TJS 02/04/12
                                                    xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                                    Return xmlLeadResponseNode

                                                Else
                                                    strTempValue = xmlResponseDetailNode.Value
                                                    xmlResponseDetailNode = New XElement("ImportResponse")
                                                    xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                                    xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode))
                                                    xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue))
                                                    xmlResponseDetailNode.Add(New XElement("WarningMessage", "Lead with Source ID " & strSourceLeadID & " already imported"))
                                                    xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                                End If
                                            Else
                                                ' activity already exists with same subject etc
                                                xmlResponseDetailNode = New XElement("ImportResponse")
                                                xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                                xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode))
                                                xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue))
                                                xmlResponseDetailNode.Add(New XElement("WarningMessage", "Activity already imported for Lead with Source ID " & strSourceLeadID))
                                                xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                            End If
                                            ' is Lead marked as inactive ?
                                            bLeadNotActive = False
                                            If Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221(0).IsIsActiveNull Then
                                                bLeadNotActive = True
                                            ElseIf Not Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221(0).IsActive Then
                                                bLeadNotActive = True
                                            End If
                                            If bLeadNotActive Then
                                                ' yes, change to active
                                                Me.ExecuteNonQuery(CommandType.Text, "UPDATE dbo.CRMLead SET IsActive = 1, DateModified = getdate() WHERE LeadCode = '" & strISLeadCode & "'", Nothing)
                                            End If
                                            ' end of code added TJS 24/08/09

                                        Else
                                            ' no activity to create
                                            xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 14/08/09
                                            xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 14/08/09
                                            xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode)) ' TJS 14/08/09 TJS 24/08/09
                                            xmlResponseDetailNode.Add(New XElement("WarningMessage", "Lead with Source ID " & strSourceLeadID & " already imported")) ' TJS 14/08/09
                                            xmlLeadResponseNode.Add(xmlResponseDetailNode)

                                        End If
                                    Else
                                        ' yes, is there an Activity to create ?
                                        strISCustomerCode = Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221(0).ConvertedCustomerCode
                                        strContactCode = Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221(0).ConvertedContactCode
                                        XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_LEAD_ACTIVITY)
                                        If XMLActivityNode IsNot Nothing Then
                                            ' yes, has activity been imported on Lead (Lead could have been imported previously)
                                            XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_LEAD_ACTIVITY & "/Subject")
                                            strTempValue = Me.GetField("ActivityCode", "CRMActivity", "EntityCode = '" & strISLeadCode & "' AND ContactCode = '" & strISLeadCode & "' AND ParentType = 'LeadActivity' AND Type = 'Call' AND Subject = '" & XMLActivityNode.Value & "'")
                                            If strTempValue = "" Then
                                                ' no, has activity been imported on Prospect/Customer ?
                                                strTempValue = Me.GetField("ActivityCode", "CRMActivity", "EntityCode = '" & strISCustomerCode & "' AND ContactCode = '" & strContactCode & "' AND ParentType = 'LeadActivity' AND Type = 'Call' AND Subject = '" & XMLActivityNode.Value & "'")
                                                If strTempValue = "" Then
                                                    ' no, create activity
                                                    xmlResponseDetailNode = CreateActivity(XMLTemp, "Lead", "Prospect", strISCustomerCode, strContactCode, strSourceCode)
                                                    If xmlResponseDetailNode.Name.ToString <> "ActivityCode" Then ' TJS 02/04/12
                                                        xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                                        Return xmlLeadResponseNode

                                                    Else
                                                        strTempValue = xmlResponseDetailNode.Value
                                                        xmlResponseDetailNode = New XElement("ImportResponse")
                                                        xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                                        xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode))
                                                        xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue))
                                                        xmlResponseDetailNode.Add(New XElement("WarningMessage", "Lead with Source ID " & strSourceLeadID & " already imported and converted to Prospect/Customer ID " & strISCustomerCode))
                                                        xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                                    End If
                                                Else
                                                    ' activity already exists with same subject etc
                                                    xmlResponseDetailNode = New XElement("ImportResponse")
                                                    xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                                    xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode))
                                                    xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue))
                                                    xmlResponseDetailNode.Add(New XElement("WarningMessage", "Activity already imported for Lead with Source ID " & strSourceLeadID & " which has been converted to Prospect/Customer ID " & strISCustomerCode))
                                                    xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                                End If
                                            Else
                                                ' activity already exists with same subject etc
                                                xmlResponseDetailNode = New XElement("ImportResponse")
                                                xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                                xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode))
                                                xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue))
                                                xmlResponseDetailNode.Add(New XElement("WarningMessage", "Activity already imported for Lead with Source ID " & strSourceLeadID & ", but Lead now converted to Prospect/Customer ID " & strISCustomerCode))
                                                xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                            End If
                                            ' is Prospect/Customer marked as inactive ?
                                            bLeadNotActive = False
                                            If Me.GetField("IsActive", "Customer", "CustomerCode = '" & strISCustomerCode & "'") = "" Then
                                                bLeadNotActive = True
                                            ElseIf Not CBool(Me.GetField("IsActive", "Customer", "CustomerCode = '" & strISCustomerCode & "'")) Then
                                                bLeadNotActive = True
                                            End If
                                            If bLeadNotActive Then
                                                ' yes, change to active
                                                Me.ExecuteNonQuery(CommandType.Text, "UPDATE dbo.Customer SET IsActive = 1, DateModified = getdate() WHERE CustomerCode = '" & strISCustomerCode & "'", Nothing)
                                            End If
                                        Else
                                            ' no activity to create
                                            xmlResponseDetailNode = New XElement("ImportResponse")
                                            xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                            xmlResponseDetailNode.Add(New XElement("LeadCode", strISLeadCode))
                                            xmlResponseDetailNode.Add(New XElement("WarningMessage", "Lead with Source ID " & strSourceLeadID & " already imported and converted to Prospect/Customer ID " & strISCustomerCode))
                                            xmlLeadResponseNode.Add(xmlResponseDetailNode)
                                        End If
                                    End If
                                End If

                            Else
                                xmlLeadResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "011", "No Lead ID found in Lead record", _
                                   m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLLeadImport", GenericXMLFile.ToString))
                            End If

                        Catch ex As Exception
                            xmlLeadResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Lead record could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLLeadImport", GenericXMLFile.ToString))

                        End Try
                    Next
                Else
                    xmlLeadResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "003", "No Order record found", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLLeadImport", GenericXMLFile.ToString))
                End If
            Else
                xmlLeadResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Source activation or validation error", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLLeadImport", GenericXMLFile.ToString))
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLLeadImport", ex, GenericXMLFile.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            xmlLeadResponseNode.Add(xmlResponseDetailNode)

        End Try

        Return xmlLeadResponseNode

    End Function
#End Region

#Region " XMLCustomerProspectImport "
    Public Function XMLCustomerProspectImport(ByVal GenericXMLFile As XDocument, ByVal ProspectNotCustomer As Boolean) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 14/07/09 | TJS             | 2009.3.01 | Function added 
        ' 14/08/09 | TJS             | 2009.3.03 | Corrected sql when checking imported customer count,
        '                                        | XML path for Prospect and Customer Source IDs, modified 
        '                                        | return xml 
        ' 24/08/09 | TJS             | 2009.3.04 | Modified to cater for new activities on an existing Lead 
        '                                        | and to activate Prospect/Customer if marked as not active
        ' 05/01/10 | TJS             | 2010.0.01 | Modified to cater for conversion of prospects to customers
        ' 09/07/11 | FA              | 2011.1.00 | Modified to add Prospect/Customer details to FetchCustomerRecord, to allow name and 
        '                                          address updates
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 02/04/12 | TJS             | 2011.2.12 | Corected detection of successful Activity generation
        ' 19/04/12 | TJS             | 2012.1.01 | Corrected error when FetchCustomerRecord finds customer
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim XMLTemp As XDocument, XMLActivityNode As XElement
        Dim XMLCustomerList As System.Collections.Generic.IEnumerable(Of XElement), XMLOrderNode As XElement
        Dim xmlCustomerResponseNode As XElement, xmlResponseDetailNode As XElement
        Dim strSourceCustomerID As String, strISCustomerCode As String, strSourceCode As String
        Dim strImportCount As String, strBillingDetailsContactXMLPath As String
        Dim strBillingDetailsAddressXMLPath As String, strShippingDetailsContactXMLPath As String
        Dim strShippingDetailsAddressXMLPath As String, strTempValue As String, strContactCode As String ' TJS 24/08/09
        Dim bCustNotActive As Boolean, strNewISCustomerCode As String  ' TJS 24/08/09 TJS 19/08/10

        xmlCustomerResponseNode = New XElement("eShopCONNECT")

        Try
            If m_ImportExportConfigFacade.IsActivated Then
                strSourceCode = GetXMLElementText(GenericXMLFile, GENERIC_XML_SOURCE_CODE)
                If ProspectNotCustomer Then
                    ' get list of prospects 
                    XMLCustomerList = GenericXMLFile.XPathSelectElements(GENERIC_XML_PROSPECT_LIST)
                    strBillingDetailsContactXMLPath = GENERIC_XML_PROSPECT_BILLING_CONTACT_DETAILS
                    strBillingDetailsAddressXMLPath = GENERIC_XML_PROSPECT_BILLING_ADDRESS_DETAILS
                    strShippingDetailsContactXMLPath = GENERIC_XML_PROSPECT_SHIPPING_CONTACT_DETAILS
                    strShippingDetailsAddressXMLPath = GENERIC_XML_PROSPECT_SHIPPING_ADDRESS_DETAILS
                Else
                    ' get list of customers 
                    XMLCustomerList = GenericXMLFile.XPathSelectElements(GENERIC_XML_CUSTOMER_LIST)
                    strBillingDetailsContactXMLPath = GENERIC_XML_CUSTOMER_BILLING_CONTACT_DETAILS
                    strBillingDetailsAddressXMLPath = GENERIC_XML_CUSTOMER_BILLING_ADDRESS_DETAILS
                    strShippingDetailsContactXMLPath = GENERIC_XML_CUSTOMER_SHIPPING_CONTACT_DETAILS
                    strShippingDetailsAddressXMLPath = GENERIC_XML_CUSTOMER_SHIPPING_ADDRESS_DETAILS
                End If

                If XMLCustomerList IsNot Nothing Then
                    For Each XMLOrderNode In XMLCustomerList
                        Try
                            XMLTemp = XDocument.Parse(XMLOrderNode.ToString)
                            ' is product running as an evaluation copy ?
                            If Not m_ImportExportConfigFacade.IsFullActivation Then
                                ' yes, check how many records imported so far
                                strImportCount = m_ImportExportConfigFacade.GetField("SELECT COUNT(*) AS ImportedCustomers FROM Customer INNER JOIN LerrynImportExportConfig_DEV000221 " & _
                                    "ON Customer.ImportSourceID_DEV000221 = LerrynImportExportConfig_DEV000221.SourceCode_DEV000221", CommandType.Text, Nothing) ' TJS 14/08/09
                                If strImportCount <> "" Then
                                    If CInt(strImportCount) >= 50 Then
                                        xmlCustomerResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Your Evaluation Activation Code only permits the import of 50 Customers or Prospects.  Please contact Sales@lerryn if you have a specific reason for needing to import additional Customers or Prospects during your product evaluation.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCustomerProspectImport", GenericXMLFile.ToString))
                                        Return xmlCustomerResponseNode
                                    End If
                                End If
                            End If

                            'First check if customer exists
                            If ProspectNotCustomer Then
                                strSourceCustomerID = GetXMLElementText(XMLTemp, GENERIC_XML_PROSPECT_SOURCE_PROSPECT_ID) ' TJS 14/08/09
                                strNewISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_PROSPECT_NEW_CUSTOMER_CODE & "/NewISCustomerCode") ' TJS 19/08/10
                            Else
                                strSourceCustomerID = GetXMLElementText(XMLTemp, GENERIC_XML_CUSTOMER_SOURCE_CUSTOMER_ID) ' TJS 14/08/09
                                strNewISCustomerCode = GetXMLElementText(XMLTemp, GENERIC_XML_CUSTOMER_NEW_CUSTOMER_CODE & "/NewISCustomerCode") ' TJS 19/08/10
                            End If
                            ' Source Customer ID must be provided unless Config settings allow blank Source ID
                            If strSourceCustomerID <> "" Or GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_REQUIRE_SOURCE_CUSTOMER_ID).ToUpper = "NO" Then
                                ' no, has Source Customer ID been provided ?
                                strISCustomerCode = ""
                                If strSourceCustomerID <> "" Then
                                    ' yes, see if Prospect/Customer record exists
                                    If ProspectNotCustomer Then
                                        strISCustomerCode = FetchCustomerRecord(XMLTemp, strSourceCustomerID, strSourceCode, "Prospect", False) ' TJS 05/01/10 TJS/FA 09/07/11
                                    Else
                                        strISCustomerCode = FetchCustomerRecord(XMLTemp, strSourceCustomerID, strSourceCode, "Customer", False) ' TJS 05/01/10
                                    End If

                                    ' has IS Customer ID been found ?
                                    If strISCustomerCode = "" Then
                                        'no, Customer/Prospect does not exist, create it
                                        If ProspectNotCustomer Then
                                            xmlResponseDetailNode = CreateCustomerRecord(XMLTemp, strSourceCustomerID, strNewISCustomerCode, strSourceCode, "Prospect") ' TJS 19/08/10
                                        Else
                                            xmlResponseDetailNode = CreateCustomerRecord(XMLTemp, strSourceCustomerID, strNewISCustomerCode, strSourceCode, "Customer") ' TJS 19/08/10
                                        End If
                                        If xmlResponseDetailNode.Name.ToString = "CustomerCode" Then ' TJS 19/04/12
                                            strISCustomerCode = xmlResponseDetailNode.Value ' TJS 19/04/12
                                        End If
                                    End If
                                    If strISCustomerCode <> "" Then ' TJS 19/04/12
                                        If ProspectNotCustomer Then ' TJS 14/08/09
                                            XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_PROSPECT_ACTIVITY) ' TJS 14/08/09
                                        Else
                                            XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_CUSTOMER_ACTIVITY) ' TJS 14/08/09
                                        End If
                                        If XMLActivityNode IsNot Nothing Then
                                            strContactCode = Me.GetField("SELECT DefaultContact FROM Customer WHERE CustomerCode = '" & strISCustomerCode & "'", CommandType.Text, Nothing) ' TJS 24/08/09
                                            If ProspectNotCustomer Then ' TJS 14/08/09
                                                xmlResponseDetailNode = CreateActivity(XMLTemp, "Prospect", "Prospect", strISCustomerCode, strContactCode, strSourceCode) ' TJS 24/08/09
                                            Else
                                                xmlResponseDetailNode = CreateActivity(XMLTemp, "Customer", "Customer", strISCustomerCode, strContactCode, strSourceCode) ' TJS 24/08/09
                                            End If
                                            If xmlResponseDetailNode.Name.ToString <> "ActivityCode" Then ' TJS 02/04/12
                                                xmlCustomerResponseNode.Add(xmlResponseDetailNode)
                                                Return xmlCustomerResponseNode

                                            Else
                                                strTempValue = xmlResponseDetailNode.Value ' TJS 14/08/09
                                                xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 14/08/09
                                                xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 14/08/09
                                                If ProspectNotCustomer Then ' TJS 14/08/09
                                                    xmlResponseDetailNode.Add(New XElement("ProspectCode", strISCustomerCode)) ' TJS 14/08/09
                                                Else
                                                    xmlResponseDetailNode.Add(New XElement("CustomerCode", strISCustomerCode)) ' TJS 14/08/09
                                                End If
                                                xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue)) ' TJS 14/08/09
                                                xmlCustomerResponseNode.Add(xmlResponseDetailNode)
                                            End If

                                        Else
                                            xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 14/08/09
                                            xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 14/08/09
                                            If ProspectNotCustomer Then ' TJS 14/08/09
                                                xmlResponseDetailNode.Add(New XElement("ProspectCode", strISCustomerCode)) ' TJS 14/08/09
                                            Else
                                                xmlResponseDetailNode.Add(New XElement("CustomerCode", strISCustomerCode)) ' TJS 14/08/09
                                            End If
                                            xmlCustomerResponseNode.Add(xmlResponseDetailNode)

                                        End If
                                    Else
                                        xmlCustomerResponseNode.Add(xmlResponseDetailNode)
                                        Return xmlCustomerResponseNode
                                    End If

                                ElseIf Me.m_ImportExportDataset.CustomerImportExportView_DEV000221.Count > 1 Then
                                    xmlCustomerResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "084", "Multiple customer/prospect records exist for SourceCustomerID/SourceProspectID " & strSourceCustomerID & ", SourceCode " & strSourceCode, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCustomerProspectImport", GenericXMLFile.ToString))
                                    Return xmlCustomerResponseNode

                                Else
                                    ' start of code added TJS 24/08/09
                                    strISCustomerCode = Me.m_ImportExportDataset.CustomerImportExportView_DEV000221(0).CustomerCode
                                    If ProspectNotCustomer Then
                                        XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_PROSPECT_ACTIVITY)
                                    Else
                                        XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_CUSTOMER_ACTIVITY)
                                    End If
                                    If XMLActivityNode IsNot Nothing Then
                                        ' has activity been imported (Lead could have been imported previously)
                                        strContactCode = Me.GetField("SELECT DefaultContact FROM Customer WHERE CustomerCode = '" & strISCustomerCode & "'", CommandType.Text, Nothing)
                                        If ProspectNotCustomer Then
                                            XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_PROSPECT_ACTIVITY & "/Subject")
                                        Else
                                            XMLActivityNode = XMLTemp.XPathSelectElement(GENERIC_XML_CUSTOMER_ACTIVITY & "/Subject")
                                        End If
                                        strTempValue = Me.GetField("ActivityCode", "CRMActivity", "EntityCode = '" & strISCustomerCode & "' AND ContactCode = '" & strContactCode & "' AND ParentType = 'LeadActivity' AND Type = 'Call' AND Subject = '" & XMLActivityNode.Value & "'")
                                        If strTempValue = "" Then
                                            If ProspectNotCustomer Then
                                                xmlResponseDetailNode = CreateActivity(XMLTemp, "Prospect", "Prospect", strISCustomerCode, strContactCode, strSourceCode)
                                            Else
                                                xmlResponseDetailNode = CreateActivity(XMLTemp, "Customer", "Customer", strISCustomerCode, strContactCode, strSourceCode)
                                            End If
                                            If xmlResponseDetailNode.Name.ToString <> "ActivityCode" Then ' TJS 02/04/12
                                                xmlCustomerResponseNode.Add(xmlResponseDetailNode)
                                                Return xmlCustomerResponseNode

                                            Else
                                                strTempValue = xmlResponseDetailNode.Value
                                                xmlResponseDetailNode = New XElement("ImportResponse")
                                                xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                                If ProspectNotCustomer Then
                                                    xmlResponseDetailNode.Add(New XElement("ProspectCode", strISCustomerCode))
                                                Else
                                                    xmlResponseDetailNode.Add(New XElement("CustomerCode", strISCustomerCode))
                                                End If
                                                xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue))
                                                If ProspectNotCustomer Then
                                                    xmlResponseDetailNode.Add(New XElement("WarningMessage", "Prospect with Source ID " & strSourceCustomerID & " already imported"))
                                                Else
                                                    xmlResponseDetailNode.Add(New XElement("WarningMessage", "Customer with Source ID " & strSourceCustomerID & " already imported"))
                                                End If
                                                xmlCustomerResponseNode.Add(xmlResponseDetailNode)
                                            End If
                                        Else
                                            xmlResponseDetailNode = New XElement("ImportResponse")
                                            xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                            If ProspectNotCustomer Then
                                                xmlResponseDetailNode.Add(New XElement("ProspectCode", strISCustomerCode))
                                            Else
                                                xmlResponseDetailNode.Add(New XElement("CustomerCode", strISCustomerCode))
                                            End If
                                            xmlResponseDetailNode.Add(New XElement("ActivityCode", strTempValue))
                                            If ProspectNotCustomer Then
                                                xmlResponseDetailNode.Add(New XElement("WarningMessage", "Activity already imported for Prospect with Source ID " & strSourceCustomerID))
                                            Else
                                                xmlResponseDetailNode.Add(New XElement("WarningMessage", "Activity already imported for Customer with Source ID " & strSourceCustomerID))
                                            End If
                                            xmlCustomerResponseNode.Add(xmlResponseDetailNode)
                                        End If
                                        ' is Prospect/Customer marked as inactive ?
                                        bCustNotActive = False
                                        If Me.GetField("IsActive", "Customer", "CustomerCode = '" & strISCustomerCode & "'") = "" Then
                                            bCustNotActive = True
                                        ElseIf Not CBool(Me.GetField("IsActive", "Customer", "CustomerCode = '" & strISCustomerCode & "'")) Then
                                            bCustNotActive = True
                                        End If
                                        If bCustNotActive Then
                                            ' yes, change to active
                                            Me.ExecuteNonQuery(CommandType.Text, "UPDATE dbo.Customer SET IsActive = 1, DateModified = getdate() WHERE CustomerCode = '" & strISCustomerCode & "'", Nothing)
                                        End If
                                        ' end of code added TJS 24/08/09

                                    Else
                                        xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 14/08/09
                                        xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 14/08/09
                                        If ProspectNotCustomer Then ' TJS 14/08/09
                                            xmlResponseDetailNode.Add(New XElement("ProspectCode", strISCustomerCode)) ' TJS 14/08/09
                                            xmlResponseDetailNode.Add(New XElement("WarningMessage", "Prospect with Source ID " & strSourceCustomerID & " already imported")) ' TJS 14/08/09
                                        Else
                                            xmlResponseDetailNode.Add(New XElement("CustomerCode", strISCustomerCode)) ' TJS 14/08/09
                                            xmlResponseDetailNode.Add(New XElement("WarningMessage", "Customer with Source ID " & strSourceCustomerID & " already imported")) ' TJS 14/08/09
                                        End If
                                        xmlCustomerResponseNode.Add(xmlResponseDetailNode)
                                    End If
                                End If
                            Else
                                xmlCustomerResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "011", "No Customer/Prospect ID found in import record", _
                                   m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCustomerProspectImport", GenericXMLFile.ToString))
                            End If

                        Catch ex As Exception
                            xmlCustomerResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Prospect/Customer record could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCustomerProspectImport", GenericXMLFile.ToString))

                        End Try
                    Next
                Else
                    xmlCustomerResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "003", "No Order record found", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCustomerProspectImport", GenericXMLFile.ToString))
                End If
            Else
                xmlCustomerResponseNode.Add(m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "002", "Source activation or validation error", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCustomerProspectImport", GenericXMLFile.ToString))
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - XMLCustomerProspectImport", ex, GenericXMLFile.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            xmlCustomerResponseNode.Add(xmlResponseDetailNode)

        End Try

        Return xmlCustomerResponseNode

    End Function
#End Region

#Region " FetchCustomerRecord "
    Private Function FetchCustomerRecord(ByVal XMLInvoiceOrOrder As XDocument, ByVal SourceCustomerID As String, _
        ByVal SourceCode As String, ByVal ImportSourceType As String, ByVal ConvertIfProspect As Boolean) As String ' TJS 03/01/10 TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 07/05/09 | TJS             | 2009.2.05 | Removed .trim as GetElementText now preforms this
        ' 05/01/10 | TJS             | 2010.0.01 | Modified to check if customer is still a prospect and convert if appropriate
        ' 09/07/11 | TJS/FA          | 2011.1.00 | Added Customer detail update to FetchCustomer Record. Scenario can occur where
        '                                          an order comes in, the customer details are initially entered as ".", and one
        '                                          of the items fail (not in IS), before the customer details can be updated
        '                                          to the full address
        ' 12/07/11 | FA              | 2011.1.01 | Update country code (requires reloading the customer template)
        ' 18/07/11 | TJS/FA          | 2011.1.02 | Modified to call update customer details, if CustomerCode is present in the xml order
        '                                          Previously this meant that if an order had been entered as a quote, but the item not found
        '                                          in IS, then the customer details created by the quote (i.e. ".") would not be updated.
        ' 23/09/11 | TJS/FA          | 2011.1.05 | Don't run UpdateCustomerRecord if customer is default eShopCONNECT user
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerImportExportView_DEV000221.TableName, _
            "ReadCustomerImportExportView_DEV000221", AT_IMPORT_CUSTOMER_ID, SourceCustomerID, AT_IMPORT_SOURCE_ID, SourceCode}}, _
            Interprise.Framework.Base.Shared.ClearType.Specific)

        If Me.m_ImportExportDataset.CustomerImportExportView_DEV000221.Count > 0 Then
            'The Customer exists, do not create it.  Set the Interprise customerID for use later.
            FetchCustomerRecord = Me.m_ImportExportDataset.CustomerImportExportView_DEV000221(0).CustomerCode
            If Me.m_ImportExportDataset.CustomerImportExportView_DEV000221(0).IsProspect And ConvertIfProspect Then ' TJS 05/01/10
                Me.ExecuteNonQuery(CommandType.Text, "UPDATE dbo.Customer SET IsProspect = 0 WHERE CustomerCode = '" & _
                    Me.m_ImportExportDataset.CustomerImportExportView_DEV000221(0).CustomerCode & "'", Nothing) ' TJS 05/01/10
            End If

            If FetchCustomerRecord <> "DefaultECommerceShopper" Then ' TJS/FA 23/09/11
                UpdateCustomerRecord(XMLInvoiceOrOrder, Me.m_ImportExportDataset.CustomerImportExportView_DEV000221(0).CustomerCode, ImportSourceType) ' TJS/FA 18/07/11
            End If

        Else
            FetchCustomerRecord = ""
        End If

    End Function
#End Region

#Region " FetchLeadRecord "
    Private Function FetchLeadRecord(ByVal SourceLeadID As String, ByVal SourceCode As String) As String
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 14/07/09 | TJS             | 2009.3.01 | Function added 
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221.TableName, _
            "ReadCRMLeadImportExportView_DEV000221", AT_IMPORT_LEAD_ID, SourceLeadID, AT_IMPORT_SOURCE_ID, SourceCode}}, _
            Interprise.Framework.Base.Shared.ClearType.Specific)

        If Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221.Count > 0 Then
            'The lead exists, do not create it.  Set the Interprise LeadCode for use later.
            FetchLeadRecord = Me.m_ImportExportDataset.CRMLeadImportExportView_DEV000221(0).LeadCode
        Else
            FetchLeadRecord = ""
        End If

    End Function
#End Region

#Region " CreateCustomerRecord "
    Private WithEvents NewCustomerFacade As Interprise.Facade.Base.Customer.NewCustomerDetailFacade ' TJS 17/05/09
    Private strCustomerValidationErrorMessage As String ' TJS 17/05/09

    Private Function CreateCustomerRecord(ByVal XMLInvoiceOrOrder As XDocument, ByVal SourceCustomerID As String, ByVal NewISCustomerCode As String, _
        ByVal SourceCode As String, ByVal ImportSourceType As String) As XElement ' TJS 14/07/09 TJS 19/08/10 TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   Creates an Interprise Customer record for new Invoices or Orders
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 24/01/09 | TJS             | 2009.1.00 | Modified to include Shipping Method details when 
        '                                        | rejecting Shipping Method/Group combination
        '                                        | and trim any leading or trailing spaces from Source Customer ID
        ' 08/02/09 | TJS             | 2009.1.06 | Modified to cater for Shipping Details being optional
        ' 20/02/09 | TJS             | 2009.1.08 | Renamed SOURCE_CONFIG_DEFAULT_CREDIT_CARD_PAYMENT_TERM to reflect underlying DB function
        '                                        | and added code to display any save errors
        ' 09/03/09 | TJS             | 2009.1.09 | Modified to convert Customer Business Class and use 
        '                                        | BuildXMLErrorResponseNodeAndEmail for source error processing
        ' 17/03/09 | TJS             | 2009.1.10 | Modified to cater for SOURCE_CONFIG_SHIPPING_MODULE_TO_USE config option
        '                                        | and to set currency
        ' 03/04/09 | TJS             | 2009.2.00 | Added support for Custom DB fields
        ' 08/04/09 | TJS             | 2009.2.02 | Trimmed spaces from Customer name elements
        ' 25/04/09 | TJS             | 2009.2.04 | Added currency validation 
        ' 07/05/09 | TJS             | 2009.2.05 | Removed .trim as GetElementText now preforms this
        ' 17/05/09 | TJS             | 2009.2.07 | Replaced ContactControl with ContactFacade and modified 
        '                                        | to enhance error logging when failing to save
        ' 29/05/09 | TJS             | 2009.2.09 | Added check for XML load errors
        ' 07/06/09 | TJS             | 2009.2.10 | Modified to cater for SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY config option
        ' 14/07/09 | TJS             | 2009.3.01 | Replaced InvoiceNotOrder with ImportSourceType and added options for Prospect Importer
        ' 14/08/09 | TJS             | 2009.3.03 | Modified to cater for Prospect and Customer import custom fields,
        '                                        | corrected import of Home phone number and added check for valid country
        ' 16/10/09 | TJS             | 2009.3.08 | Modified to trap failure to create NewCustomerDetailFacade as this can be due to licence issues
        ' 30/12/09 | TJS             | 2010.0.00 | Modified to cater for quote import and for new customer name fields added in SP5.3.4
        ' 13/01/10 | TJS             | 2010.0.04 | Modified to cater for SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE
        ' 27/02/10 | TJS             | 2010.0.06 | Corrected procuct and facade name in log/error messages
        ' 18/05/10 | FA              | 2010.0.07 | Modified to take into account the ISClassTemplate
        ' 19/08/10 | TJS             | 2010.1.00 | Modified to detect Shipping LAst Name blank and to allow setting of new CustomerCode
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to add creation of Web Login password
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2 and for IS 6
        ' 19/04/12 | TJS             | 2012.1.01 | Corrected setting of strCustomerTableCustomFieldPath for Prospects
        ' 10/06/12 | TJS             | 2012.1.05 | Corrected check for empty DefaultAPContact etc
        ' 08/07/12 | TJS             | 2012.1.09 | Modified to cater for UseShipToClassTemplate
        ' 02/08/12 | TJS             | 2012.1.11 | Modified to parse Last name field for individual name elements if no FirstName provided
        ' 10/08/12 | TJS             | 2012.1.12 | Corrected check on Last Name after parsing name string
        ' 24/08/12 | TJS             | 2012.1.14 | Modified for Connected Business 7 and to set default Class templates
        ' 29/01/13 | TJS             | 2013.0.00 | Modified for CB 13 using CRMContactView instead of CRMContact table
        ' 02/10/13 | TJS             | 2013.3.03 | Modified to parse billing name for Customer First, Middle and Last Name if no FirstName provided
        ' 14/01/14 | TJS             | 2013.4.05 | Corrected setting of XMLShippingDetails to be consistent with CreateOrder etc
        ' 13/02/14 | TJS             | 2014.0.00 | Modified references for CB 14
        '------------------------------------------------------------------------------------------

        Dim NewCustomerDataset As Interprise.Framework.Base.DatasetGateway.Customer.NewCustomerDetailDatasetGateway
        Dim rowGroupMethodDetail As Lerryn.Framework.ImportExport.DatasetGateway.ImportExportDatasetGateway.SystemShippingMethodGroupDetailRow
        Dim ContactDataset As Interprise.Framework.Base.DatasetGateway.CRM.ContactDatasetGateway ' TJS 17/05/09
        Dim ContactFacade As Interprise.Facade.Base.CRM.ContactFacade ' TJS 17/05/09
        Dim XMLTemp As XDocument ' TJS 03/04/09
        Dim XMLCustomFields As System.Collections.Generic.IEnumerable(Of XElement), XMLCustomField As XElement ' TJS 03/04/09
        Dim xmlResponseDetailNode As XElement, xmlShippingDetails As XElement ' TJS 08/02/09
        Dim strCustBusinessType As String, strCustBusinessClass As String, strBillingCustomerName As String
        Dim strBillingCompanyName As String, strBillingCountry As String, strShippingCompanyName As String
        Dim strShippingCustomerName As String, strTempValue As String, strCustomerCurrencyXMLPath As String ' TJS 17/03/09
        Dim strBillingDetailsCustomerXMLPath As String, strBillingDetailsAddressXMLPath As String
        Dim strShippingDetailsCustomerXMLPath As String, strShippingDetailsAddressXMLPath As String
        Dim strShippingDetailsMethodXMLPath As String, strShippingDetailsMethodGroupXMLPath As String
        Dim strShippingDetailsShippingDateXMLPath As String ' RCD 08/09/2019
        Dim strShippingDetailsLatestShippingDateXMLPath As String ' RCD 08/12/2019
        Dim strNotesXMLPath As String, strSalesAgencyXMLPath As String, strOrderTakeXMLPath As String ' RCD 2019/08/13
        Dim strBuyerNameXMLPath As String, strBuyerPhoneXMLPath As String, strBuyerEmailXMLPath As String ' RCD 2019/08/13
        Dim strCreditCardTokenXMLPath As String ' RCD 2019/08/13
        Dim strPaymentMethodXMLPath As String, strShippingMethod As String, strShippingMethodGroup As String
        Dim iTableLoop As Integer, iColumnLoop As Integer, iRowLoop As Integer, sTemp As String ' TJS 17/05/09
        Dim bCustomFieldExists As Boolean, bIsProspect As Boolean ' TJS 20/02/09 TJS 21/04/09 TJS 14/07/09
        Dim strCustomerTableCustomFieldPath As String, strSalutation As String = "", strFirstName As String = "" ' TJS 14/08/09 TJS 02/08/12
        Dim strMiddleName As String = "", strLastName As String = "", strSuffix As String = "" ' TJS 02/08/12

        Try
            Try ' TJS 16/10/09
                NewCustomerDataset = New Interprise.Framework.Base.DatasetGateway.Customer.NewCustomerDetailDatasetGateway
                NewCustomerFacade = New Interprise.Facade.Base.Customer.NewCustomerDetailFacade(NewCustomerDataset)

            Catch ex As Exception ' TJS 16/10/09
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "090", "Cannot create NewCustomerDetailFacade - suspect Interprise Solutions Licence error or User count exceeded", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 16/10/09 TJS 24/08/12
            End Try

            strCustBusinessType = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CUSTOMER_BUSINESS_TYPE)
            strCustBusinessClass = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CUSTOMER_BUSINESS_CLASS)
            If strCustBusinessType = "" Then
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "070", "Source Config Default Customer Business Type is blank", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

            ElseIf strCustBusinessType = "Consumer" Then ' TJS 09/03/09
                strCustBusinessType = "Retail" ' TJS 09/03/09

            ElseIf strCustBusinessType = "Business" Then ' TJS 09/03/09
                strCustBusinessType = "Wholesale" ' TJS 09/03/09
            End If

            If strCustBusinessClass = "" Then
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "071", "Source Config Default Customer Business Class is blank", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

            End If

            If ImportSourceType = "Invoice" Then ' TJS 14/07/09
                strBillingDetailsCustomerXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER
                strBillingDetailsAddressXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS
                xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER) ' TJS 08/02/09 TJS 14/01/14
                strShippingDetailsCustomerXMLPath = GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER
                strShippingDetailsAddressXMLPath = GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS
                strShippingDetailsMethodXMLPath = GENERIC_XML_INVOICE_SHIPPING_DETAILS_METHOD
                strShippingDetailsMethodGroupXMLPath = GENERIC_XML_INVOICE_SHIPPING_DETAILS_METHOD_GROUP
                strShippingDetailsShippingDateXMLPath = GENERIC_XML_INVOICE_SHIPPING_DETAILS_SHIPPING_DATE ' RCD 08/09/2019
                strShippingDetailsLatestShippingDateXMLPath = GENERIC_XML_INVOICE_SHIPPING_DETAILS_LATEST_SHIPPING_DATE ' RCD 08/12/2019
                strNotesXMLPath = GENERIC_XML_INVOICE_CUSTOMER_NOTES ' RCD 2019/08/13
                strSalesAgencyXMLPath = GENERIC_XML_INVOICE_CUSTOMER_SALES_AGENCY ' RCD 2019/08/13
                strOrderTakeXMLPath = GENERIC_XML_INVOICE_CUSTOMER_ORDER_TAKER ' RCD 2019/08/13
                strBuyerNameXMLPath = GENERIC_XML_INVOICE_CUSTOMER_BUYER_NAME ' RCD 2019/08/13
                strBuyerPhoneXMLPath = GENERIC_XML_INVOICE_CUSTOMER_BUYER_PHONE ' RCD 2019/08/13
                strBuyerEmailXMLPath = GENERIC_XML_INVOICE_CUSTOMER_BUYER_EMAIL ' RCD 2019/08/13
                strCreditCardTokenXMLPath = GENERIC_XML_INVOICE_CUSTOMER_CREDIT_CARD_TOKEN ' RCD 2019/08/13
                strPaymentMethodXMLPath = GENERIC_XML_INVOICE_PAYMENT_METHOD
                strCustomerCurrencyXMLPath = GENERIC_XML_INVOICE_CURRENCY ' TJS 17/03/09
                strCustomerTableCustomFieldPath = strBillingDetailsCustomerXMLPath & "/CustomField" ' TJS 14/08/09
                bIsProspect = False ' TJS 14/07/09

            ElseIf ImportSourceType = "Quote" Then ' TJS 30/12/09
                strBillingDetailsCustomerXMLPath = GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER ' TJS 30/12/09
                strBillingDetailsAddressXMLPath = GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS ' TJS 30/12/09
                xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER) ' TJS 30/12/09 TJS 14/01/14
                strShippingDetailsCustomerXMLPath = GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER ' TJS 30/12/09
                strShippingDetailsAddressXMLPath = GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS ' TJS 30/12/09
                strShippingDetailsMethodXMLPath = GENERIC_XML_QUOTE_SHIPPING_DETAILS_METHOD ' TJS 30/12/09
                strShippingDetailsMethodGroupXMLPath = GENERIC_XML_QUOTE_SHIPPING_DETAILS_METHOD_GROUP ' TJS 30/12/09
                strShippingDetailsShippingDateXMLPath = GENERIC_XML_QUOTE_SHIPPING_DETAILS_SHIPPING_DATE ' RCD 08/09/2019
                strShippingDetailsLatestShippingDateXMLPath = GENERIC_XML_QUOTE_SHIPPING_DETAILS_LATEST_SHIPPING_DATE ' RCD 08/12/2019
                strNotesXMLPath = GENERIC_XML_QUOTE_CUSTOMER_NOTES ' RCD 2019/08/13
                strSalesAgencyXMLPath = GENERIC_XML_QUOTE_CUSTOMER_SALES_AGENCY ' RCD 2019/08/13
                strOrderTakeXMLPath = GENERIC_XML_QUOTE_CUSTOMER_ORDER_TAKER ' RCD 2019/08/13
                strBuyerNameXMLPath = GENERIC_XML_QUOTE_CUSTOMER_BUYER_NAME ' RCD 2019/08/13
                strBuyerPhoneXMLPath = GENERIC_XML_QUOTE_CUSTOMER_BUYER_PHONE ' RCD 2019/08/13
                strBuyerEmailXMLPath = GENERIC_XML_QUOTE_CUSTOMER_BUYER_EMAIL ' RCD 2019/08/13
                strCreditCardTokenXMLPath = GENERIC_XML_QUOTE_CUSTOMER_CREDIT_CARD_TOKEN ' RCD 2019/08/13
                strPaymentMethodXMLPath = "" ' TJS 30/12/09
                strCustomerCurrencyXMLPath = GENERIC_XML_QUOTE_CURRENCY ' TJS 30/12/09
                strCustomerTableCustomFieldPath = strBillingDetailsCustomerXMLPath & "/CustomField" ' TJS 30/12/09
                bIsProspect = False ' TJS 30/12/09

            ElseIf ImportSourceType = "Order" Then ' TJS 14/07/09
                strBillingDetailsCustomerXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER
                strBillingDetailsAddressXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS
                xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER) ' TJS 08/02/09 TJS 14/01/14
                strShippingDetailsCustomerXMLPath = GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER
                strShippingDetailsAddressXMLPath = GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS
                strShippingDetailsMethodXMLPath = GENERIC_XML_ORDER_SHIPPING_DETAILS_METHOD
                strShippingDetailsMethodGroupXMLPath = GENERIC_XML_ORDER_SHIPPING_DETAILS_METHOD_GROUP
                strShippingDetailsShippingDateXMLPath = GENERIC_XML_ORDER_SHIPPING_DETAILS_SHIPPING_DATE ' RCD 08/09/2019
                strShippingDetailsLatestShippingDateXMLPath = GENERIC_XML_ORDER_SHIPPING_DETAILS_LATEST_SHIPPING_DATE ' RCD 08/12/2019
                strNotesXMLPath = GENERIC_XML_ORDER_CUSTOMER_NOTES ' RCD 2019/08/13
                strSalesAgencyXMLPath = GENERIC_XML_ORDER_CUSTOMER_SALES_AGENCY ' RCD 2019/08/13
                strOrderTakeXMLPath = GENERIC_XML_ORDER_CUSTOMER_ORDER_TAKER ' RCD 2019/08/13
                strBuyerNameXMLPath = GENERIC_XML_ORDER_CUSTOMER_BUYER_NAME ' RCD 2019/08/13
                strBuyerPhoneXMLPath = GENERIC_XML_ORDER_CUSTOMER_BUYER_PHONE ' RCD 2019/08/13
                strBuyerEmailXMLPath = GENERIC_XML_ORDER_CUSTOMER_BUYER_EMAIL ' RCD 2019/08/13
                strCreditCardTokenXMLPath = GENERIC_XML_ORDER_CUSTOMER_CREDIT_CARD_TOKEN ' RCD 2019/08/13
                strPaymentMethodXMLPath = GENERIC_XML_ORDER_PAYMENT_METHOD
                strCustomerCurrencyXMLPath = GENERIC_XML_ORDER_CURRENCY ' TJS 17/03/09
                strCustomerTableCustomFieldPath = strBillingDetailsCustomerXMLPath & "/CustomField" ' TJS 14/08/09
                bIsProspect = False ' TJS 14/07/09

            ElseIf ImportSourceType = "Prospect" Then ' TJS 14/07/09
                strBillingDetailsCustomerXMLPath = GENERIC_XML_PROSPECT_BILLING_CONTACT_DETAILS ' TJS 14/07/09
                strBillingDetailsAddressXMLPath = GENERIC_XML_PROSPECT_BILLING_ADDRESS_DETAILS ' TJS 14/07/09
                xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_PROSPECT_SHIPPING_CONTACT_DETAILS) ' TJS 14/07/09 TJS 14/01/14
                strShippingDetailsCustomerXMLPath = GENERIC_XML_PROSPECT_SHIPPING_CONTACT_DETAILS ' TJS 14/07/09
                strShippingDetailsAddressXMLPath = GENERIC_XML_PROSPECT_SHIPPING_ADDRESS_DETAILS ' TJS 14/07/09
                strShippingDetailsMethodXMLPath = GENERIC_XML_PROSPECT_SHIPPING_DETAILS & "/ShippingMethod" ' TJS 14/07/09
                strShippingDetailsMethodGroupXMLPath = GENERIC_XML_PROSPECT_SHIPPING_DETAILS & "/ShippingMethodGroup" ' TJS 14/07/09
                strPaymentMethodXMLPath = "" ' TJS 14/07/09
                strCustomerCurrencyXMLPath = GENERIC_XML_PROSPECT_CURRENCY ' TJS 14/07/09
                strCustomerTableCustomFieldPath = "Prospect/CustomField" ' TJS 14/08/09 TJS 19/04/12
                bIsProspect = True ' TJS 14/07/09

            ElseIf ImportSourceType = "Customer" Then ' TJS 14/07/09
                strBillingDetailsCustomerXMLPath = GENERIC_XML_CUSTOMER_BILLING_CONTACT_DETAILS ' TJS 14/07/09
                strBillingDetailsAddressXMLPath = GENERIC_XML_CUSTOMER_BILLING_ADDRESS_DETAILS ' TJS 14/07/09
                xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_CUSTOMER_SHIPPING_CONTACT_DETAILS) ' TJS 14/07/09 TJS 14/01/14
                strShippingDetailsCustomerXMLPath = GENERIC_XML_CUSTOMER_SHIPPING_CONTACT_DETAILS ' TJS 14/07/09
                strShippingDetailsAddressXMLPath = GENERIC_XML_CUSTOMER_SHIPPING_ADDRESS_DETAILS ' TJS 14/07/09
                strShippingDetailsMethodXMLPath = GENERIC_XML_CUSTOMER_SHIPPING_DETAILS & "/ShippingMethod" ' TJS 14/07/09
                strShippingDetailsMethodGroupXMLPath = GENERIC_XML_CUSTOMER_SHIPPING_DETAILS & "/ShippingMethodGroup" ' TJS 14/07/09
                strPaymentMethodXMLPath = "" ' TJS 14/07/09
                strCustomerCurrencyXMLPath = GENERIC_XML_CUSTOMER_CURRENCY ' TJS 14/07/09
                strCustomerTableCustomFieldPath = "Customer/CustomField" ' TJS 14/08/09
                bIsProspect = False ' TJS 14/07/09

            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "999", "Unkown Import Source Type " & ImportSourceType, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 14/07/09
            End If

            strBillingCustomerName = ""
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/NamePrefix")
            If strTempValue <> "" Then
                strBillingCustomerName = strBillingCustomerName & strTempValue & " "
            End If
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/FirstName")
            If strTempValue <> "" Then
                strBillingCustomerName = strBillingCustomerName & strTempValue & " "
            End If
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/LastName")
            If strTempValue <> "" Then
                strBillingCustomerName = strBillingCustomerName & strTempValue
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Last Name is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

            End If
            strBillingCompanyName = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/Company")
            strBillingCountry = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/Country")
            If strBillingCountry = "" Then ' TJS 09/03/09
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Billing Country is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09
            Else
                ' check Country is valid 
                If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strBillingCountry & "'") = "" Then ' TJS 14/08/09
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Billing Country is not a valid IS Country", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 14/08/09
                End If
            End If

            If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper = "YES" Then ' TJS 07/06/09
                NewCustomerFacade.AddCustomer(Interprise.Framework.Base.Shared.Const.TEMPORARY_DOCUMENTCODE, strBillingCompanyName, bIsProspect, strCustBusinessType) ' TJS 14/07/09
            Else
                NewCustomerFacade.AddCustomer(Interprise.Framework.Base.Shared.Const.TEMPORARY_DOCUMENTCODE, strBillingCustomerName, bIsProspect, strCustBusinessType) ' TJS 14/07/09
            End If


            ' has a new IS Customer code been provided >
            If NewISCustomerCode <> "" Then ' TJS 19/08/10
                NewCustomerDataset.CustomerView(0).CustomerCode = NewISCustomerCode ' TJS 19/08/10
            End If

            'Assign city, postal code and country in order to apply the correct class template
            NewCustomerDataset.CustomerView(0).City = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/Town_City")
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/PostalCode") ' TJS 09/03/09
            If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Billing Postal Code is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

            End If
            NewCustomerDataset.CustomerView(0).PostalCode = strTempValue ' TJS 09/03/09
            NewCustomerDataset.CustomerView(0).Country = strBillingCountry

            ' apply default class templates
            NewCustomerFacade.AssignDefaultClassTemplate(strCustBusinessType) ' TJS 24/08/12

            If GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/ISClassTemplate") <> "" Then ' FA 18/05/10
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerClassTemplateDetailView.TableName, _
                    "ReadCustomerClassTemplateDetailView_DEV000221", "@ClassDescription", GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/ISClassTemplate"), _
                    "@Country", strBillingCountry}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' FA 18/05/10
            Else
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerClassTemplateDetailView.TableName, _
                    "ReadCustomerClassTemplateDetailView_DEV000221", "@ClassDescription", strCustBusinessClass, "@Country", strBillingCountry}}, _
                    Interprise.Framework.Base.Shared.ClearType.Specific)
            End If
            If Me.m_ImportExportDataset.CustomerClassTemplateDetailView.Count > 0 Then
                NewCustomerFacade.ApplyClassTemplate(Me.m_ImportExportDataset.CustomerClassTemplateDetailView(0).ClassCode, _
                    Interprise.Framework.Base.Shared.TransactionType.CustomerClass, NewCustomerDataset.CustomerView)

                NewCustomerDataset.CustomerView(0).DefaultContactFullName = strBillingCustomerName
                strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/Address") ' TJS 09/03/09
                If strTempValue = "" Then ' TJS 09/03/09
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Billing Address is blank in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

                Else
                    ' need to convert any cr or lf to ensure they display correctly in IS
                    strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue) ' TJS 16/06/09
                    ' has company name been provided and config has customer as company option is not set ?
                    If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper <> "YES" Then ' TJS 08/02/09 TJS 16/06/09
                        ' yes, add company name to address
                        NewCustomerDataset.CustomerView(0).Address = strBillingCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 16/06/09
                    Else
                        ' no, use address as is
                        NewCustomerDataset.CustomerView(0).Address = strTempValue ' TJS 09/03/09 TJS 16/06/09
                    End If
                End If

                NewCustomerDataset.CustomerView(0).County = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/County")
                NewCustomerDataset.CustomerView(0).State = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/State")

                If strBillingCompanyName <> "" Then
                    NewCustomerDataset.CustomerView(0).Telephone = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/WorkPhone")
                Else
                    NewCustomerDataset.CustomerView(0).Telephone = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/HomePhone")
                End If
                NewCustomerDataset.CustomerView(0).Email = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/Email")

                ' now check for fields added in SP5.3.4
                If NewCustomerDataset.CustomerView.Columns.IndexOf("FirstName") >= 0 And NewCustomerDataset.CustomerView.Columns.IndexOf("LastName") >= 0 Then ' TJS 30/12/09 TJS 02/10/13
                    If GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/FirstName") <> "" Then ' TJS 02/10/13
                        NewCustomerDataset.CustomerView(0).FirstName = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/FirstName") ' TJS 30/12/09 TJS 02/10/13
                        NewCustomerDataset.CustomerView(0).LastName = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/LastName") ' TJS 30/12/09 TJS 02/10/13

                    ElseIf NewCustomerFacade.ParseName(strBillingCustomerName, strSalutation, strFirstName, strMiddleName, strLastName, strSuffix) Then ' TJS 02/10/13
                        NewCustomerDataset.CustomerView(0).FirstName = strFirstName ' TJS 02/10/13
                        NewCustomerDataset.CustomerView(0).MiddleName = strMiddleName ' TJS 02/10/13
                        NewCustomerDataset.CustomerView(0).LastName = strLastName ' TJS 02/10/13
                    End If

                End If

                ' copy fields into Ship To view
                NewCustomerFacade.CopyCustomerAddress()

                ' was a Shipping Details node found ?
                If xmlShippingDetails IsNot Nothing Then ' TJS 08/02/09
                    ' yes, insert details
                    strShippingCustomerName = ""
                    strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/NamePrefix")
                    If strTempValue <> "" Then
                        strShippingCustomerName = strShippingCustomerName & strTempValue & " "
                    End If
                    strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/FirstName")
                    If strTempValue <> "" Then
                        strShippingCustomerName = strShippingCustomerName & strTempValue & " "
                    End If
                    strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/LastName")
                    If strTempValue <> "" Then
                        strShippingCustomerName = strShippingCustomerName & strTempValue
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Shipping Last Name is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 19/08/10

                    End If
                    strShippingCompanyName = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/Company")
                    NewCustomerDataset.CustomerShipToView(0).ShipToName = strShippingCustomerName

                    strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Address") ' TJS 09/03/09
                    If strTempValue = "" Then ' TJS 09/03/09
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Shipping Address is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

                    Else
                        ' need to convert any cr or lf to ensure they display correctly in IS
                        strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue) ' TJS 09/03/09
                    End If
                    ' has company name been provided ?
                    If strShippingCompanyName <> "" Then ' TJS 08/02/09 
                        ' yes, add company name to address
                        NewCustomerDataset.CustomerShipToView(0).Address = strShippingCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 09/03/09
                    Else
                        ' no, use address as is
                        NewCustomerDataset.CustomerShipToView(0).Address = strTempValue ' TJS 09/03/09
                    End If
                    NewCustomerDataset.CustomerShipToView(0).City = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Town_City")
                    NewCustomerDataset.CustomerShipToView(0).County = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/County")
                    NewCustomerDataset.CustomerShipToView(0).State = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/State")
                    strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/PostalCode") ' TJS 09/03/09
                    If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Shipping Postal Code is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

                    End If
                    NewCustomerDataset.CustomerShipToView(0).PostalCode = strTempValue ' TJS 09/03/09
                    If GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Country") = "" Then ' TJS 09/03/09
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Shipping Country is blank in XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09
                    Else
                        ' check Country is valid 
                        If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Country") & "'") = "" Then ' TJS 14/08/09
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "72", "Customer Shipping Country is not a valid IS Country", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 14/08/09
                        End If
                    End If
                    NewCustomerDataset.CustomerShipToView(0).Country = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Country")
                    NewCustomerDataset.CustomerShipToView(0).Telephone = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/Telephone")
                    NewCustomerDataset.CustomerShipToView(0).Email = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/Email")
                Else
                    ' no, use Billing Details
                    NewCustomerDataset.CustomerShipToView(0).ShipToName = strBillingCustomerName ' TJS 08/02/09
                    If Not NewCustomerDataset.CustomerView(0).IsAddressNull Then ' TJS 08/02/09
                        NewCustomerDataset.CustomerShipToView(0).Address = NewCustomerDataset.CustomerView(0).Address ' TJS 08/02/09
                    Else
                        NewCustomerDataset.CustomerShipToView(0).SetAddressNull() ' TJS 08/02/09
                    End If
                    If Not NewCustomerDataset.CustomerView(0).IsCityNull Then ' TJS 08/02/09
                        NewCustomerDataset.CustomerShipToView(0).City = NewCustomerDataset.CustomerView(0).City ' TJS 08/02/09
                    Else
                        NewCustomerDataset.CustomerShipToView(0).SetCityNull() ' TJS 08/02/09
                    End If
                    If Not NewCustomerDataset.CustomerView(0).IsCountyNull Then ' TJS 08/02/09
                        NewCustomerDataset.CustomerShipToView(0).County = NewCustomerDataset.CustomerView(0).County ' TJS 08/02/09
                    Else
                        NewCustomerDataset.CustomerShipToView(0).SetCountyNull() ' TJS 08/02/09
                    End If
                    If Not NewCustomerDataset.CustomerView(0).IsStateNull Then ' TJS 08/02/09
                        NewCustomerDataset.CustomerShipToView(0).State = NewCustomerDataset.CustomerView(0).State ' TJS 08/02/09
                    Else
                        NewCustomerDataset.CustomerShipToView(0).SetStateNull() ' TJS 08/02/09
                    End If
                    If Not NewCustomerDataset.CustomerView(0).IsCountryNull Then ' TJS 08/02/09
                        NewCustomerDataset.CustomerShipToView(0).Country = NewCustomerDataset.CustomerView(0).Country ' TJS 08/02/09
                    Else
                        NewCustomerDataset.CustomerShipToView(0).SetCountryNull() ' TJS 08/02/09
                    End If
                    If Not NewCustomerDataset.CustomerView(0).IsTelephoneNull Then ' TJS 08/02/09
                        NewCustomerDataset.CustomerShipToView(0).Telephone = NewCustomerDataset.CustomerView(0).Telephone ' TJS 08/02/09
                    Else
                        NewCustomerDataset.CustomerShipToView(0).SetTelephoneNull() ' TJS 08/02/09
                    End If
                    If Not NewCustomerDataset.CustomerView(0).IsEmailNull Then ' TJS 08/02/09
                        NewCustomerDataset.CustomerShipToView(0).Email = NewCustomerDataset.CustomerView(0).Email ' TJS 08/02/09
                    Else
                        NewCustomerDataset.CustomerShipToView(0).SetEmailNull() ' TJS 08/02/09
                    End If
                End If

                NewCustomerDataset.CustomerView(0).SourceCode = SourceCode
                If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper <> "YES" Then ' TJS 08/07/12
                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SHIPPING_MODULE_TO_USE) = "KSI MultiShip" Then ' TJS 17/03/09
                        strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD) ' TJS 17/03/09
                        strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP) ' TJS 17/03/09

                    Else
                        strShippingMethod = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsMethodXMLPath)
                        If strShippingMethod = "" Then
                            strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                        End If
                        strShippingMethodGroup = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsMethodGroupXMLPath)
                        If strShippingMethodGroup = "" Then
                            strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                        End If
                        rowGroupMethodDetail = Me.m_ImportExportDataset.SystemShippingMethodGroupDetail.FindByShippingMethodGroupShippingMethodCode(strShippingMethodGroup, strShippingMethod)
                        If rowGroupMethodDetail Is Nothing Then
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "075", "Invalid Shipping Method and Shipping Method Group combination - " & strShippingMethod & ", " & strShippingMethodGroup, _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

                        End If
                    End If
                    'NewCustomerDataset.CustomerView(0).ShippingMethod = strShippingMethod ' TJS 02/12/11
                    'NewCustomerDataset.CustomerView(0).ShippingMethodGroup = strShippingMethodGroup ' TJS 02/12/11
                    NewCustomerDataset.CustomerShipToView(0).ShippingMethod = strShippingMethod
                    NewCustomerDataset.CustomerShipToView(0).ShippingMethodGroup = strShippingMethodGroup
                End If
                NewCustomerDataset.CustomerView(0)("ImportSourceID_DEV000221") = SourceCode
                NewCustomerDataset.CustomerView(0)("ImportCustomerID_DEV000221") = SourceCustomerID

                ' has a Currency Code been defined ?
                sTemp = GetXMLElementText(XMLInvoiceOrOrder, strCustomerCurrencyXMLPath) ' TJS 25/04/09
                If sTemp <> "" Then ' TJS 25/04/09
                    ' yes, check it matches an Active Currency Code in IS
                    Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.SystemCurrency.TableName, "ReadSystemCurrency", _
                        Interprise.Framework.Inventory.Shared.Const.AT_CURRENCY_CODE, sTemp}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 25/04/09 TJS 13/02/14
                    If Me.m_ImportExportDataset.SystemCurrency.Count = 0 Then ' TJS 25/04/09
                        ' no matching currency found
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "075", "Invalid Currency Code " & sTemp & " in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 25/04/09 TJS 27/02/10
                    ElseIf Not Me.m_ImportExportDataset.SystemCurrency(0).IsActive Then ' TJS 25/04/09
                        ' Currency found but is not marked as Active
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "075", "Currency Code " & sTemp & " is not Active.", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 25/04/09 TJS 27/02/10 TJS 24/08/12
                    Else
                        ' yes, use it
                        NewCustomerDataset.CustomerView(0).CurrencyCode = sTemp ' TJS 17/03/09
                    End If
                End If

                ' start of code added TJS 03/04/09
                ' Check for any Customer table Custom Fields
                XMLCustomFields = XMLInvoiceOrOrder.XPathSelectElements(strCustomerTableCustomFieldPath) ' TJS 14/08/09
                If XMLCustomFields IsNot Nothing Then
                    For Each XMLCustomField In XMLCustomFields
                        Try
                            XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                            ' has field name been defined ?
                            If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                ' does it exist ?
                                bCustomFieldExists = False ' TJS 21/04/09
                                For iColumnLoop = 0 To NewCustomerDataset.CustomerView.Columns.Count - 1 ' TJS 21/04/09
                                    If NewCustomerDataset.CustomerView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 21/04/09
                                        bCustomFieldExists = True ' TJS 21/04/09
                                        Exit For ' TJS 21/04/09
                                    End If
                                Next
                                If bCustomFieldExists Then ' TJS 21/04/09
                                    NewCustomerDataset.CustomerView(0)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerView", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 21/04/09

                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Field Name attribute not provided for Customer Billing Custom Field", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString)

                            End If

                        Catch ex As Exception
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                 m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 29/05/09

                        End Try
                    Next
                End If
                ' end of code added TJS 03/04/09

                ContactDataset = New Interprise.Framework.Base.DatasetGateway.CRM.ContactDatasetGateway ' TJS 17/05/09
                ContactFacade = New Interprise.Facade.Base.CRM.ContactFacade(ContactDataset) ' TJS 17/05/09

                ContactFacade.AddContact(TEMPORARY_DOCUMENTCODE, CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.CountryColumn.ColumnName), String.Empty)), _
                    CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.AddressColumn.ColumnName), String.Empty)), _
                    CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.CityColumn.ColumnName), String.Empty)), _
                    CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.StateColumn.ColumnName), String.Empty)), _
                    CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.PostalCodeColumn.ColumnName), String.Empty)), _
                    CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.CountyColumn.ColumnName), String.Empty)), _
                    CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.TelephoneColumn.ColumnName), String.Empty)), _
                    String.Empty, CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.TelephoneExtensionColumn.ColumnName), _
                    String.Empty)), CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.FaxColumn.ColumnName), String.Empty)), _
                    String.Empty, CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.FaxExtensionColumn.ColumnName), String.Empty)), _
                    CStr(IsNull(NewCustomerDataset.CustomerView(0)(NewCustomerDataset.CustomerView.EmailColumn.ColumnName), String.Empty)), _
                    Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerContact, strBillingCustomerName) ' TJS 17/05/09


                ' These lines don't work in SP4
                'ContactFacade.DefaultContactName = strBillingSupplierContact
                'ContactFacade.DefaultContactEmail = ContactDataset.CRMContact(0).Email1

                ContactDataset.CRMContactView(0).ContactFullName = strBillingCustomerName ' TJS 17/05/09 TJS 29/01/13
                If GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/FirstName") <> "" Then ' TJS 02/08/12
                    ContactDataset.CRMContactView(0).ContactFirstName = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/FirstName") ' TJS 17/05/09 TJS 29/01/13
                    ContactDataset.CRMContactView(0).ContactLastName = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/LastName") ' TJS 17/05/09 TJS 29/01/13
                    ContactDataset.CRMContactView(0).ContactSalutationCode = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/NamePrefix") ' TJS 17/05/09 TJS 29/01/13

                ElseIf ContactFacade.ParseName(strBillingCustomerName, strSalutation, strFirstName, strMiddleName, strLastName, strSuffix) Then ' TJS 02/08/12
                    If Not String.IsNullOrEmpty(strFirstName) And Not String.IsNullOrEmpty(strLastName) Then ' TJS 02/08/12 TJS 10/08/12
                        ContactDataset.CRMContactView(0).ContactSalutationCode = strSalutation ' TJS 02/08/12 TJS 29/01/13
                        ContactDataset.CRMContactView(0).ContactFirstName = strFirstName ' TJS 02/08/12 TJS 29/01/13
                        ContactDataset.CRMContactView(0).ContactMiddleName = strMiddleName ' TJS 02/08/12 TJS 29/01/13
                        ContactDataset.CRMContactView(0).ContactLastName = strLastName ' TJS 02/08/12 TJS 29/01/13
                        ContactDataset.CRMContactView(0).ContactSuffixCode = strSuffix ' TJS 02/08/12 TJS 29/01/13
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer First Name is blank in input XML and cannot be extracted from other name fields", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 02/08/12

                    End If

                Else
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer First Name is blank in input XML and cannot be extracted from other name fields", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 02/08/12

                End If
                ContactDataset.CRMContactView(0).HomePhone = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/HomePhone") ' TJS 17/05/09 TJS 14/08/09 TJS 29/01/13
                ContactDataset.CRMContactView(0).BusinessPhone = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/WorkPhone") ' TJS 17/05/09 TJS 29/01/13
                ContactDataset.CRMContactView(0).Mobile = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/MobilePhone") ' TJS 17/05/09 TJS 29/01/13

                ' start of code added TJS 18/03/11
                If GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/LoginPwd") <> "" Then
                    Dim crypto As New Interprise.Licensing.Base.Services.CryptoServiceProvider
                    Dim salt As Byte() = crypto.GenerateSalt
                    Dim vector As Byte() = crypto.GenerateVector

                    ContactDataset.CRMContactView(0).IsAllowWebAccess = True ' TJS 29/01/13
                    ContactDataset.CRMContactView(0).Password = crypto.Encrypt(GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/LoginPwd"), salt, vector) ' TJS 29/01/13
                    ContactDataset.CRMContactView(0).PasswordSalt = System.Convert.ToBase64String(salt) ' TJS 29/01/13
                    ContactDataset.CRMContactView(0).PasswordIV = System.Convert.ToBase64String(vector) ' TJS 29/01/13

                End If
                ' end of code added TJS 18/03/11

                NewCustomerFacade.DefaultContactDataset = ContactDataset

                If strPaymentMethodXMLPath <> "" Then ' TJS 14/07/09
                    If GetXMLElementText(XMLInvoiceOrOrder, strPaymentMethodXMLPath).ToUpper = "CREDIT CARD" Then
                        NewCustomerDataset.CustomerShipToView(0).PaymentTermCode = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_CREDIT_CARD_PAYMENT_TERM) ' TJS 20/02/09 TJS 02/12/11
                    End If
                End If

                ' now save records which allocated customer and contact codes
                strCustomerValidationErrorMessage = "" ' TJS 17/05/09
                If NewCustomerFacade.UpdateDataSet(New String()() {New String() {NewCustomerDataset.CustomerView.TableName, CREATECUSTOMER, UPDATECUSTOMER, DELETECUSTOMER}, _
                    New String() {NewCustomerDataset.CustomerShipToView.TableName, CREATECUSTOMERSHIPTO, UPDATECUSTOMERSHIPTO, DELETECUSTOMERSHIPTO}, _
                    New String() {NewCustomerDataset.CustomerAccount.TableName, CREATECUSTOMERACCOUNT, UPDATECUSTOMERACCOUNT, DELETECUSTOMERACCOUNT}, _
                    New String() {NewCustomerDataset.CustomerShipToAccount.TableName, CREATECUSTOMERACCOUNT, UPDATECUSTOMERACCOUNT, DELETECUSTOMERACCOUNT}}, _
                    Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerDetail, m_BaseProductName & " New Customer", False) Then

                    ' now update default contact codes
                    'Set default ship to, default contact and a/p contact.
                    NewCustomerDataset.CustomerView(0).BeginEdit()
                    NewCustomerDataset.CustomerView(0).DefaultShipToCode = NewCustomerDataset.CustomerShipToView(0).ShipToCode
                    NewCustomerDataset.CustomerView(0).DefaultContact = NewCustomerFacade.NewDefaultContactCode
                    If Not String.IsNullOrEmpty(NewCustomerFacade.NewDefaultAPContactCode) Then ' TJS 10/06/12
                        NewCustomerDataset.CustomerView(0).DefaultAPContact = NewCustomerFacade.NewDefaultAPContactCode
                    Else
                        NewCustomerDataset.CustomerView(0).DefaultAPContact = NewCustomerFacade.NewDefaultContactCode ' TJS 10/06/12
                    End If
                    NewCustomerDataset.CustomerView(0).EndEdit()
                    '
                    'Set ship to default contact.
                    NewCustomerDataset.CustomerShipToView(0).BeginEdit()
                    If Not String.IsNullOrEmpty(NewCustomerFacade.NewShipToContactCode) Then NewCustomerDataset.CustomerShipToView(0).ContactCode = NewCustomerFacade.NewShipToContactCode ' TJS 10/06/12
                    NewCustomerDataset.CustomerShipToView(0).EndEdit()

                    NewCustomerFacade.DefaultContactDataset = Nothing
                    NewCustomerFacade.DefaultAPContactDataset = Nothing

                    ' and save contact codes
                    NewCustomerFacade.UpdateDataSet(New String()() { _
                        New String() {NewCustomerDataset.CustomerView.TableName, CREATECUSTOMER, UPDATECUSTOMER, DELETECUSTOMER}, _
                        New String() {NewCustomerDataset.CustomerShipToView.TableName, CREATECUSTOMERSHIPTO, UPDATECUSTOMERSHIPTO, DELETECUSTOMERSHIPTO}}, _
                        Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerDetail, m_BaseProductName & " New Customer contact codes", False)

                    xmlResponseDetailNode = New XElement("CustomerCode")
                    xmlResponseDetailNode.Value = NewCustomerDataset.CustomerView(0).CustomerCode
                    Return xmlResponseDetailNode

                Else
                    For iTableLoop = 0 To NewCustomerDataset.Tables.Count - 1 ' TJS 17/05/09
                        For iRowLoop = 0 To NewCustomerDataset.Tables(iTableLoop).Rows.Count - 1 ' TJS 17/05/09
                            For iColumnLoop = 0 To NewCustomerDataset.Tables(iTableLoop).Columns.Count - 1 ' TJS 17/05/09
                                If NewCustomerDataset.Tables(iTableLoop).Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 17/05/09
                                    strCustomerValidationErrorMessage = strCustomerValidationErrorMessage & NewCustomerDataset.Tables(iTableLoop).TableName & _
                                        "." & NewCustomerDataset.Tables(iTableLoop).Columns(iColumnLoop).ColumnName & ", " & _
                                        NewCustomerDataset.Tables(iTableLoop).Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 17/05/09
                                End If
                            Next
                        Next
                    Next

                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "082", "Failed to save customer record - " & strCustomerValidationErrorMessage, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09 TJS 17/05/09

                End If

                If NewCustomerDataset.CustomerView.Count > 0 Then
                    xmlResponseDetailNode = New XElement("CustomerCode")
                    xmlResponseDetailNode.Value = NewCustomerDataset.CustomerView(0).CustomerCode
                    Return xmlResponseDetailNode
                Else
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "081", "Failed to create customer record", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

                End If
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "080", "Customer Class Template not found for ClassDescription " & strCustBusinessClass & ", Country " & strBillingCountry, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLInvoiceOrOrder.ToString) ' TJS 09/03/09

            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", ex, XMLInvoiceOrOrder.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try
    End Function

    Private Sub NewCustomerFacade_InvalidatedOnSaving(ByVal sender As Object, ByVal errorMessage As String) Handles NewCustomerFacade.InvalidatedOnSaving ' TJS 17/05/09

        strCustomerValidationErrorMessage = errorMessage & vbCrLf ' TJS 17/05/09

    End Sub

#End Region

#Region " CreateLeadRecord "
    Private WithEvents NewLeadFacade As Interprise.Facade.CRM.LeadFacade ' TJS 14/07/09
    Private strLeadValidationErrorMessage As String ' TJS 14/07/09

    Private Function CreateLeadRecord(ByVal XMLLead As XDocument, ByVal SourceCode As String) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 14/07/09 | TJS             | 2009.3.01 | Function added 
        ' 14/08/09 | TJS             | 2009.3.03 | Added check for valid country
        ' 25/08/09 | TJS             | 2009.3.05 | corrected entry of contact name etc
        ' 16/10/09 | TJS             | 2009.3.08 | Modified to trap failure to create LeadFacade as this can be due to licence issues
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 24/08/12 | TJS             | 2012.1.14 | Modified for Connected Business 7
        ' 29/01/13 | TJS             | 2013.0.00 | Modified for CB 13 using CRMContactView instead of CRMContact 
        ' 23/06/13 | TJS             | 2013.1.22 | Correced reporting of errors when trying to save record
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim NewLeadDataset As Interprise.Framework.CRM.DatasetGateway.LeadDatasetGateway
        Dim XMLTemp As XDocument, xmlResponseDetailNode As XElement
        Dim XMLCustomFields As System.Collections.Generic.IEnumerable(Of XElement), XMLCustomField As XElement
        Dim strLeadName As String, strCompanyName As String, strTempValue As String
        Dim iColumnLoop As Integer, bCustomFieldExists As Boolean

        Try
            Try ' TJS 16/10/09
                NewLeadDataset = New Interprise.Framework.CRM.DatasetGateway.LeadDatasetGateway
                NewLeadFacade = New Interprise.Facade.CRM.LeadFacade(NewLeadDataset)

            Catch ex As Exception ' TJS 16/10/09
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "090", "Cannot create LeadFacade - suspect Interprise Solutions Licence error or User count exceeded", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateLeadRecord", XMLLead.ToString) ' TJS 16/10/09 TJS 24/08/12
            End Try

            strLeadName = ""
            strTempValue = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/NamePrefix")
            If strTempValue <> "" Then
                strLeadName = strLeadName & strTempValue & " "
            End If
            strTempValue = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/FirstName")
            If strTempValue <> "" Then
                strLeadName = strLeadName & strTempValue & " "
            End If
            strTempValue = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/LastName")
            If strTempValue <> "" Then
                strLeadName = strLeadName & strTempValue
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Lead Last Name is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateLeadRecord", XMLLead.ToString)

            End If
            strCompanyName = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_ADDRESS_DETAILS & "/Company")

            If strCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper = "YES" Then
                NewLeadFacade.AddLead(Nothing, strCompanyName)
                NewLeadDataset.CRMLeadView(0)("ContactName") = strCompanyName ' TJS 29/01/13
            Else
                NewLeadFacade.AddLead(Nothing, strLeadName)
                NewLeadDataset.CRMLeadView(0)("ContactName") = strLeadName ' TJS 29/01/13
            End If

            strTempValue = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_ADDRESS_DETAILS & "/Address")
            If strTempValue <> "" Then
                ' need to convert any cr or lf to ensure they display correctly in IS
                strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue)
                ' has company name been provided and config has customer as company option is not set ?
                If strCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper <> "YES" Then
                    ' yes, add company name to address
                    NewLeadDataset.CRMLeadView(0).Address = strCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 29/01/13
                Else
                    ' no, use address as is
                    NewLeadDataset.CRMLeadView(0).Address = strTempValue ' TJS 29/01/13
                End If
            End If
            NewLeadDataset.CRMLeadView(0).City = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_ADDRESS_DETAILS & "/Town_City") ' TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).County = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_ADDRESS_DETAILS & "/County") ' TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).State = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_ADDRESS_DETAILS & "/State") ' TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).PostalCode = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_ADDRESS_DETAILS & "/PostalCode") ' TJS 29/01/13
            ' check Country is valid 
            If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & GetXMLElementText(XMLLead, GENERIC_XML_LEAD_ADDRESS_DETAILS & "/Country") & "'") = "" Then ' TJS 14/08/09
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "72", "Lead Country is not a valid IS Country", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateLeadRecord", XMLLead.ToString) ' TJS 14/08/09
            End If
            NewLeadDataset.CRMLeadView(0).Country = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_ADDRESS_DETAILS & "/Country") ' TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).PhoneNumber = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/Phone") ' TJS 25/08/09 TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).Fax = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/Fax") ' TJS 25/08/09 TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).MobileNumber = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/MobilePhone") ' TJS 25/08/09 TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).EMail = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/Email") ' TJS 25/08/09 TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).ContactSalutationCode = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/NamePrefix") ' TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).ContactFirstName = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/FirstName") ' TJS 25/08/09 TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).ContactLastName = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/LastName") ' TJS 25/08/09 TJS 29/01/13
            NewLeadDataset.CRMLeadView(0).WebAddress = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_CONTACT_DETAILS & "/Website") ' TJS 25/08/09 TJS 29/01/13

            NewLeadDataset.CRMLeadView(0)("ImportSourceID_DEV000221") = SourceCode ' TJS 29/01/13
            NewLeadDataset.CRMLeadView(0)("ImportLeadID_DEV000221") = GetXMLElementText(XMLLead, GENERIC_XML_LEAD_SOURCE_LEAD_ID) ' TJS 29/01/13
            strTempValue = GetXMLElementText(XMLLead, GENERIC_XML_LEAD & "/LeadNotes")
            If strTempValue <> "" Then
                NewLeadDataset.CRMLeadView(0).DetailsText = strTempValue ' TJS 29/01/13
                NewLeadDataset.CRMLeadView(0).DetailsRtf = strTempValue ' TJS 29/01/13
            End If

            ' Check for any Lead table Custom Fields
            XMLCustomFields = XMLLead.XPathSelectElements(GENERIC_XML_LEAD & "/CustomField")
            If XMLCustomFields IsNot Nothing Then
                For Each XMLCustomField In XMLCustomFields
                    Try
                        XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                        ' has field name been defined ?
                        If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                            ' does it exist ?
                            bCustomFieldExists = False
                            For iColumnLoop = 0 To NewLeadDataset.CRMLeadView.Columns.Count - 1 ' TJS 29/01/13
                                If NewLeadDataset.CRMLeadView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 29/01/13
                                    bCustomFieldExists = True
                                    Exit For
                                End If
                            Next
                            If bCustomFieldExists Then
                                NewLeadDataset.CRMLeadView(0)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField") ' TJS 29/01/13
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CRMLead table", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateLeadRecord", XMLLead.ToString)

                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Field Name attribute not provided for CRMLead Field", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateLeadRecord", XMLLead.ToString)

                        End If

                    Catch ex As Exception
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                             m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateLeadRecord", XMLLead.ToString)

                    End Try
                Next
            End If

            strLeadValidationErrorMessage = ""
            If NewLeadFacade.UpdateDataSet(New String()() {New String() {NewLeadDataset.CRMLeadView.TableName, CREATECRMLEAD, UPDATECRMLEAD, DELETECRMLEAD}}, _
                Interprise.Framework.Base.Shared.Enum.TransactionType.CRMLead, m_BaseProductName & " New Lead", False) Then ' TJS 29/01/13
                xmlResponseDetailNode = New XElement("LeadCode")
                xmlResponseDetailNode.Value = NewLeadDataset.CRMLeadView(0).LeadCode ' TJS 29/01/13
                Return xmlResponseDetailNode
            Else
                For iColumnLoop = 0 To NewLeadDataset.CRMLeadView.Columns.Count - 1 ' TJS 29/01/13
                    If NewLeadDataset.CRMLeadView.Rows(0).GetColumnError(iColumnLoop) <> "" Then ' TJS 29/01/13
                        strLeadValidationErrorMessage += NewLeadDataset.CRMLeadView.TableName & "." & NewLeadDataset.CRMLeadView.Columns(iColumnLoop).ColumnName & _
                        ", " & NewLeadDataset.CRMLeadView.Rows(0).GetColumnError(iColumnLoop) & vbCrLf ' TJS 29/01/13
                    End If
                Next

                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "082", "Failed to save lead record - " & strLeadValidationErrorMessage, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateLeadRecord", XMLLead.ToString) ' TJS 23/06/13

            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateLeadRecord", ex, XMLLead.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try

    End Function

    Private Sub NewLeadFacade_InvalidatedOnSaving(ByVal sender As Object, ByVal errorMessage As String) Handles NewLeadFacade.InvalidatedOnSaving

        strCustomerValidationErrorMessage = errorMessage & vbCrLf

    End Sub
#End Region

#Region " UpdateCustomerRecord "
    Private Sub UpdateCustomerRecord(ByVal XMLInvoiceOrOrder As XDocument, ByVal CustomerCode As String, ByVal ImportSourceType As String) ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 18/07/11 | TJS             | 2011.1.00 | Function added 
        ' 22/07/11 | FA              | 2011.1.04 | Added currency check
        ' 23/09/11 | TJS/FA          | 2011.2.02 | Added check for null value in address.  Default
        '                                          eShopCONNECT user will have no address
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 02/08/12 | TJS             | 2012.1.11 | Modified to parse Last name field for individual name elements if no FirstName provided
        ' 10/08/12 | TJS             | 2012.1.12 | Corrected check on Last Name after parsing name string
        ' 24/08/12 | TJS             | 2012.1.14 | Modified for Connected Business 7
        ' 29/01/13 | TJS             | 2013.0.00 | Modified for CB 13 using CRMContactView instead of CRMContact table
        ' 13/02/14 | TJS             | 2014.0.00 | Modified references for CB 14
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
        Dim ContactDataset As Interprise.Framework.Base.DatasetGateway.CRM.ContactDatasetGateway
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade
        Dim ContactFacade As Interprise.Facade.Base.CRM.ContactFacade
        Dim contactCode As String, strBillingCustomerName As String, strBillingCompanyName As String
        Dim strBillingCountry As String, strShippingCompanyName As String, strShippingCustomerName As String
        Dim strTempValue As String, strBillingDetailsCustomerXMLPath As String, strBillingDetailsAddressXMLPath As String
        Dim strShippingDetailsCustomerXMLPath As String, strShippingDetailsAddressXMLPath As String, strUpdateCustomer As String 'TJS/FA 09/07/11
        Dim strCustBusinessClass As String, strCustomerCurrency As String, strCustomerCurrencyXMLPath As String 'FA 12/07/11 FA 22/07/11
        Dim xmlShippingDetails As XElement, strSalutation As String = "", strFirstName As String = "" ' TJS 02/08/12
        Dim strMiddleName As String = "", strLastName As String = "", strSuffix As String = "" ' TJS 02/08/12

        ' create Customer dataset and facade
        Try
            CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
            CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset)

        Catch ex As Exception
            m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                "ImportExportProcessFacade - UpdateCustomerRecord", "Cannot create CustomerFacade - suspect Interprise Solutions Licence error or User count exceeded", XMLInvoiceOrOrder.ToString)
            Exit Sub
        End Try

        CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
            "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific)

        If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactNull Then
            contactCode = CustomerDetailDataset.CustomerView(0).DefaultContact
        Else
            contactCode = ""
        End If

        strUpdateCustomer = ""
        strBillingDetailsCustomerXMLPath = ""
        strBillingDetailsAddressXMLPath = ""
        strShippingDetailsCustomerXMLPath = ""
        strShippingDetailsAddressXMLPath = ""

        If ImportSourceType = "Invoice" Then
            strUpdateCustomer = GetXMLElementText(XMLInvoiceOrOrder, GENERIC_XML_INVOICE_UPDATE_CUSTOMER).ToUpper
            strBillingDetailsCustomerXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER
            strBillingDetailsAddressXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS
            xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_INVOICE_SHIPPING_DETAILS)
            strShippingDetailsCustomerXMLPath = GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER
            strShippingDetailsAddressXMLPath = GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS
            strCustomerCurrencyXMLPath = GENERIC_XML_INVOICE_CURRENCY ' FA 22/07/11

        ElseIf ImportSourceType = "Quote" Then
            strUpdateCustomer = GetXMLElementText(XMLInvoiceOrOrder, GENERIC_XML_QUOTE_UPDATE_CUSTOMER).ToUpper
            strBillingDetailsCustomerXMLPath = GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER
            strBillingDetailsAddressXMLPath = GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS
            xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_QUOTE_SHIPPING_DETAILS)
            strShippingDetailsCustomerXMLPath = GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER
            strShippingDetailsAddressXMLPath = GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS
            strCustomerCurrencyXMLPath = GENERIC_XML_QUOTE_CURRENCY ' FA 22/07/11

        ElseIf ImportSourceType = "Order" Then
            strUpdateCustomer = GetXMLElementText(XMLInvoiceOrOrder, GENERIC_XML_ORDER_UPDATE_CUSTOMER).ToUpper
            strBillingDetailsCustomerXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER
            strBillingDetailsAddressXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS
            xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_ORDER_SHIPPING_DETAILS)
            strShippingDetailsCustomerXMLPath = GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER
            strShippingDetailsAddressXMLPath = GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS
            strCustomerCurrencyXMLPath = GENERIC_XML_ORDER_CURRENCY ' FA 22/07/11

        ElseIf ImportSourceType = "Prospect" Then
            strBillingDetailsCustomerXMLPath = GENERIC_XML_PROSPECT_BILLING_CONTACT_DETAILS
            strBillingDetailsAddressXMLPath = GENERIC_XML_PROSPECT_BILLING_ADDRESS_DETAILS
            xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_PROSPECT_SHIPPING_DETAILS)
            strShippingDetailsCustomerXMLPath = GENERIC_XML_PROSPECT_SHIPPING_CONTACT_DETAILS
            strShippingDetailsAddressXMLPath = GENERIC_XML_PROSPECT_SHIPPING_ADDRESS_DETAILS
            strCustomerCurrencyXMLPath = GENERIC_XML_PROSPECT_CURRENCY ' FA 22/07/11

        ElseIf ImportSourceType = "Customer" Then
            strBillingDetailsCustomerXMLPath = GENERIC_XML_CUSTOMER_BILLING_CONTACT_DETAILS
            strBillingDetailsAddressXMLPath = GENERIC_XML_CUSTOMER_BILLING_ADDRESS_DETAILS
            xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_CUSTOMER_SHIPPING_DETAILS)
            strShippingDetailsCustomerXMLPath = GENERIC_XML_CUSTOMER_SHIPPING_CONTACT_DETAILS
            strShippingDetailsAddressXMLPath = GENERIC_XML_CUSTOMER_SHIPPING_ADDRESS_DETAILS
            strCustomerCurrencyXMLPath = GENERIC_XML_CUSTOMER_CURRENCY ' FA 22/07/11

        Else
            m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                "ImportExportProcessFacade - UpdateCustomerRecord", "Cannot create CustomerFacade - Unknown Source Type " & ImportSourceType, XMLInvoiceOrOrder.ToString)
        End If

        ' was customer generated with blank name and address where blanks replaced by .
        If (CustomerDetailDataset.CustomerView(0).CustomerName = "." AndAlso Not CustomerDetailDataset.CustomerView(0).IsAddressNull AndAlso _
            CustomerDetailDataset.CustomerView(0).Address = ".") Or strUpdateCustomer = "YES" Then ' TJS/FA 23/09/11

            'FA 12/07/11 start
            strBillingCountry = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/Country")
            If strBillingCountry = "" Then
                m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                    "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Billing Country is blank in input XML", XMLInvoiceOrOrder.ToString)
            Else
                ' check Country is valid 
                If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strBillingCountry & "'") = "" Then
                    m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                        "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Billing Country is not a valid IS Country", XMLInvoiceOrOrder.ToString)
                End If
            End If

            strCustBusinessClass = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CUSTOMER_BUSINESS_CLASS)
            If strCustBusinessClass = "" Then
                m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                    "ImportExportProcessFacade - UpdateCustomerRecord", "Source Config Default Customer Business Class is blank", XMLInvoiceOrOrder.ToString)
            End If

            If GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/ISClassTemplate") <> "" Then
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerClassTemplateDetailView.TableName, _
                    "ReadCustomerClassTemplateDetailView_DEV000221", "@ClassDescription", GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/ISClassTemplate"), _
                    "@Country", strBillingCountry}}, Interprise.Framework.Base.Shared.ClearType.Specific)
            Else
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerClassTemplateDetailView.TableName, _
                    "ReadCustomerClassTemplateDetailView_DEV000221", "@ClassDescription", strCustBusinessClass, "@Country", strBillingCountry}}, _
                    Interprise.Framework.Base.Shared.ClearType.Specific)
            End If

            If Me.m_ImportExportDataset.CustomerClassTemplateDetailView.Count > 0 Then
                CustomerDetailFacade.ApplyClassTemplate(Me.m_ImportExportDataset.CustomerClassTemplateDetailView(0).ClassCode, _
                    Interprise.Framework.Base.Shared.TransactionType.CustomerClass, CustomerDetailDataset.CustomerView)
            End If

            CustomerDetailDataset.CustomerView(0).Country = strBillingCountry   'FA 12/07/11
            'FA 12/07/11 end

            'FA 22/07/11 start
            ' has a Currency Code been defined ?
            strCustomerCurrency = GetXMLElementText(XMLInvoiceOrOrder, strCustomerCurrencyXMLPath)
            If strCustomerCurrency <> "" Then
                ' yes, check it matches an Active Currency Code in IS
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.SystemCurrency.TableName, "ReadSystemCurrency", _
                    Interprise.Framework.Inventory.Shared.Const.AT_CURRENCY_CODE, strCustomerCurrency}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                If Me.m_ImportExportDataset.SystemCurrency.Count = 0 Then
                    ' no matching currency found
                    m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                        "ImportExportProcessFacade - UpdateCustomerRecord", "Invalid Currency Code " & strCustomerCurrency & " in input XML", XMLInvoiceOrOrder.ToString)

                ElseIf Not Me.m_ImportExportDataset.SystemCurrency(0).IsActive Then
                    ' Currency found but is not marked as Active
                    m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                        "ImportExportProcessFacade - UpdateCustomerRecord", "Currency Code " & strCustomerCurrency & " is not Active.", XMLInvoiceOrOrder.ToString) ' TJS 24/08/12
                Else
                    ' yes, use it
                    CustomerDetailDataset.CustomerView(0).CurrencyCode = strCustomerCurrency
                End If
            End If
            'FA 22/07/11 end

            ' yes, need to update customer, contact and ship to
            strBillingCustomerName = ""
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/NamePrefix")
            If strTempValue <> "" Then
                strBillingCustomerName = strBillingCustomerName & strTempValue & " "
            End If
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/FirstName")
            If strTempValue <> "" Then
                strBillingCustomerName = strBillingCustomerName & strTempValue & " "
            End If
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/LastName")
            If strTempValue <> "" Then
                strBillingCustomerName = strBillingCustomerName & strTempValue
            Else
                m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                    "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Last Name is blank in input XML", XMLInvoiceOrOrder.ToString)
            End If
            strBillingCompanyName = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/Company")


            If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper = "YES" Then
                CustomerDetailDataset.CustomerView(0).CustomerName = strBillingCompanyName
            Else
                CustomerDetailDataset.CustomerView(0).CustomerName = strBillingCustomerName
            End If
            CustomerDetailDataset.CustomerView(0).DefaultContactFullName = strBillingCustomerName
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/Address")
            If strTempValue = "" Then
                m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                    "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Billing Address is blank in input XML", XMLInvoiceOrOrder.ToString)
            Else
                ' need to convert any cr or lf to ensure they display correctly in IS
                strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue)
                ' has company name been provided and config has customer as company option is not set ?
                If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper <> "YES" Then
                    ' yes, add company name to address
                    CustomerDetailDataset.CustomerView(0).Address = strBillingCompanyName & ChrW(13) & ChrW(10) & strTempValue
                Else
                    ' no, use address as is
                    CustomerDetailDataset.CustomerView(0).Address = strTempValue
                End If
            End If
            CustomerDetailDataset.CustomerView(0).City = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/Town_City")
            CustomerDetailDataset.CustomerView(0).County = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/County")
            CustomerDetailDataset.CustomerView(0).State = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/State")
            strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsAddressXMLPath & "/PostalCode")
            If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then
                m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                    "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Billing Postal Code is blank in input XML", XMLInvoiceOrOrder.ToString)
            End If
            CustomerDetailDataset.CustomerView(0).PostalCode = strTempValue
            If strBillingCompanyName <> "" Then
                CustomerDetailDataset.CustomerView(0).Telephone = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/WorkPhone")
            Else
                CustomerDetailDataset.CustomerView(0).Telephone = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/HomePhone")
            End If
            CustomerDetailDataset.CustomerView(0).Email = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/Email")

            CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerShipToView.TableName, _
                "ReadCustomerShipTo", AT_CUSTOMER_CODE, CustomerCode, AT_SHIP_TO_CODE, CustomerDetailDataset.CustomerView(0).DefaultShipToCode}}, _
                Interprise.Framework.Base.Shared.ClearType.Specific)

            xmlShippingDetails = XMLInvoiceOrOrder.XPathSelectElement(GENERIC_XML_ORDER_SHIPPING_DETAILS)
            ' was a Shipping Details node found ?
            If xmlShippingDetails IsNot Nothing Then
                ' yes, insert details
                strShippingCustomerName = ""
                strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/NamePrefix")
                If strTempValue <> "" Then
                    strShippingCustomerName = strShippingCustomerName & strTempValue & " "
                End If
                strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/FirstName")
                If strTempValue <> "" Then
                    strShippingCustomerName = strShippingCustomerName & strTempValue & " "
                End If
                strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/LastName")
                If strTempValue <> "" Then
                    strShippingCustomerName = strShippingCustomerName & strTempValue
                Else
                    m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                        "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Shipping Last Name is blank in input XML", XMLInvoiceOrOrder.ToString)

                End If
                strShippingCompanyName = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsCustomerXMLPath & "/Company")
                CustomerDetailDataset.CustomerShipToView(0).ShipToName = strShippingCustomerName

                strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Address")
                If strTempValue = "" Then
                    m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                        "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Shipping Address is blank in input XML", XMLInvoiceOrOrder.ToString)

                Else
                    ' need to convert any cr or lf to ensure they display correctly in IS
                    strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue)
                End If
                ' has company name been provided ?
                If strShippingCompanyName <> "" Then
                    ' yes, add company name to address
                    CustomerDetailDataset.CustomerShipToView(0).Address = strShippingCompanyName & ChrW(13) & ChrW(10) & strTempValue
                Else
                    ' no, use address as is
                    CustomerDetailDataset.CustomerShipToView(0).Address = strTempValue ' TJS 09/03/09
                End If
                CustomerDetailDataset.CustomerShipToView(0).City = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Town_City")
                CustomerDetailDataset.CustomerShipToView(0).County = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/County")
                CustomerDetailDataset.CustomerShipToView(0).State = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/State")
                strTempValue = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/PostalCode")
                If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then
                    m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                        "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Shipping Postal Code is blank in input XML", XMLInvoiceOrOrder.ToString)

                End If
                CustomerDetailDataset.CustomerShipToView(0).PostalCode = strTempValue
                If GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Country") = "" Then
                    m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                        "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Shipping Country is blank in input XML", XMLInvoiceOrOrder.ToString)
                Else
                    ' check Country is valid 
                    If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Country") & "'") = "" Then
                        m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                            "ImportExportProcessFacade - UpdateCustomerRecord", "Customer Shipping Country is not a valid IS Country", XMLInvoiceOrOrder.ToString)

                    End If
                End If
                CustomerDetailDataset.CustomerShipToView(0).Country = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Country")
                CustomerDetailDataset.CustomerShipToView(0).Telephone = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Telephone")
                CustomerDetailDataset.CustomerShipToView(0).Email = GetXMLElementText(XMLInvoiceOrOrder, strShippingDetailsAddressXMLPath & "/Email")
            Else
                ' no, use Billing Details
                CustomerDetailDataset.CustomerShipToView(0).ShipToName = strBillingCustomerName
                If Not CustomerDetailDataset.CustomerView(0).IsAddressNull Then
                    CustomerDetailDataset.CustomerShipToView(0).Address = CustomerDetailDataset.CustomerView(0).Address
                Else
                    CustomerDetailDataset.CustomerShipToView(0).SetAddressNull()
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsCityNull Then
                    CustomerDetailDataset.CustomerShipToView(0).City = CustomerDetailDataset.CustomerView(0).City
                Else
                    CustomerDetailDataset.CustomerShipToView(0).SetCityNull()
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsCountyNull Then
                    CustomerDetailDataset.CustomerShipToView(0).County = CustomerDetailDataset.CustomerView(0).County
                Else
                    CustomerDetailDataset.CustomerShipToView(0).SetCountyNull()
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsStateNull Then
                    CustomerDetailDataset.CustomerShipToView(0).State = CustomerDetailDataset.CustomerView(0).State
                Else
                    CustomerDetailDataset.CustomerShipToView(0).SetStateNull()
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsCountryNull Then
                    CustomerDetailDataset.CustomerShipToView(0).Country = CustomerDetailDataset.CustomerView(0).Country
                Else
                    CustomerDetailDataset.CustomerShipToView(0).SetCountryNull()
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsTelephoneNull Then
                    CustomerDetailDataset.CustomerShipToView(0).Telephone = CustomerDetailDataset.CustomerView(0).Telephone
                Else
                    CustomerDetailDataset.CustomerShipToView(0).SetTelephoneNull()
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsEmailNull Then
                    CustomerDetailDataset.CustomerShipToView(0).Email = CustomerDetailDataset.CustomerView(0).Email
                Else
                    CustomerDetailDataset.CustomerShipToView(0).SetEmailNull()
                End If
            End If

            ContactDataset = New Interprise.Framework.Base.DatasetGateway.CRM.ContactDatasetGateway
            ContactFacade = New Interprise.Facade.Base.CRM.ContactFacade(ContactDataset)

            ContactFacade.LoadDataSet(New String()() {New String() {ContactDataset.CRMContactView.TableName, _
                "ReadCRMContact", AT_CONTACT_CODE, CustomerDetailDataset.CustomerView(0).DefaultContact, AT_ENTITY_CODE, CustomerCode, _
                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "CustomerContact", AT_IS_ACTIVE, "1"}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 29/01/13 TJS 13/02/14

            ContactDataset.CRMContactView(0).ContactFullName = strBillingCustomerName ' TJS 29/01/13
            If GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/FirstName") <> "" Then ' TJS 02/08/12

                ContactDataset.CRMContactView(0).ContactFirstName = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/FirstName") ' TJS 29/01/13
                ContactDataset.CRMContactView(0).ContactLastName = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/LastName") ' TJS 29/01/13
                ContactDataset.CRMContactView(0).ContactSalutationCode = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/NamePrefix") ' TJS 29/01/13

            ElseIf ContactFacade.ParseName(strBillingCustomerName, strSalutation, strFirstName, strMiddleName, strLastName, strSuffix) Then ' TJS 02/08/12
                If Not String.IsNullOrEmpty(strFirstName) And Not String.IsNullOrEmpty(strLastName) Then ' TJS 02/08/12 TJS 10/08/12
                    ContactDataset.CRMContactView(0).ContactSalutationCode = strSalutation ' TJS 02/08/12 TJS 29/01/13
                    ContactDataset.CRMContactView(0).ContactFirstName = strFirstName ' TJS 02/08/12 TJS 29/01/13
                    ContactDataset.CRMContactView(0).ContactMiddleName = strMiddleName ' TJS 02/08/12 TJS 29/01/13
                    ContactDataset.CRMContactView(0).ContactLastName = strLastName ' TJS 02/08/12 TJS 29/01/13
                    ContactDataset.CRMContactView(0).ContactSuffixCode = strSuffix ' TJS 02/08/12 TJS 29/01/13
                Else
                    m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                        "ImportExportProcessFacade - UpdateCustomerRecord", "Customer First Name is blank in input XML and cannot be extracted from other name fields", XMLInvoiceOrOrder.ToString) ' TJS 02/08/12

                End If

            Else
                m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, _
                    "ImportExportProcessFacade - UpdateCustomerRecord", "Customer First Name is blank in input XML and cannot be extracted from other name fields", XMLInvoiceOrOrder.ToString) ' TJS 02/08/12

            End If
            ContactDataset.CRMContactView(0).HomePhone = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/HomePhone") ' TJS 29/01/13
            ContactDataset.CRMContactView(0).BusinessPhone = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/WorkPhone") ' TJS 29/01/13
            ContactDataset.CRMContactView(0).Mobile = GetXMLElementText(XMLInvoiceOrOrder, strBillingDetailsCustomerXMLPath & "/MobilePhone") ' TJS 29/01/13

            ContactFacade.UpdateDataSet(New String()() {New String() {ContactDataset.CRMContactView.TableName, CREATECRMCONTACT, UPDATECRMCONTACT, DELETECRMCONTACT}}, _
                Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerDetail, m_BaseProductName & " Update Customer", False) ' TJS 29/01/13

            CustomerDetailFacade.UpdateDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, CREATECUSTOMER, UPDATECUSTOMER, DELETECUSTOMER}, _
                New String() {CustomerDetailDataset.CustomerShipToView.TableName, CREATECUSTOMERSHIPTO, UPDATECUSTOMERSHIPTO, DELETECUSTOMERSHIPTO}}, _
                Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerDetail, m_BaseProductName & " Update Customer", False)

        End If

    End Sub
#End Region

#Region " CreateQuote "
    Private WithEvents SalesQuoteFacade As Interprise.Facade.Customer.SalesOrderFacade ' TJS 30/12/09
    Private strSalesQuoteValidationErrorMessage As String ' TJS 30/12/09

    Private Function CreateQuote(ByVal XMLGenericQuote As XDocument, ByVal CustomerCode As String, ByVal SourceCode As String) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 30/12/09 | TJS             | 2010.0.00 | Function added
        ' 13/01/10 | TJS             | 2010.0.04 | Modified to cater for SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE
        '                                        | and corrected transaction type to get quote saved with QU prefix
        ' 27/02/10 | TJS             | 2010.0.06 | Corrected procuct and facade name in log/error messages
        ' 19/08/10 | TJs             | 2010.1.00 | Modified to cater for GENERIC_XML_QUOTE_SOURCE_MERCHANT_ID when checking for existing records
        ' 22/09/10 | TJS             | 2010.1.01 | Modified to set SalesRepOrderCode and for Kit Items with fixed compositions
        ' 27/09/10 | TJS             | 2010.1.02 | Modified to set record type when checking for already imported quotes
        ' 04/10/10 | TJS             | 2010.1.05 | Corrected transaction type in AssignItemKit
        ' 03/11/10 | FA              | 2010.1.07 | Modified code to use the correct compute function for kit sales price
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to prevent error when iten details rows don't have matching 
        '                                        | TransactionItemTaxDetail(rows), corrected setting of ShipToCountry
        '                                        | and modified to cater for Item Pricing Kits
        ' 04/04/11 | TJS             | 2011.0.07 | Modified to handle Item Pricing kit where item prices are zero 
        ' 05/04/11 | TJS             | 2011.0.08 | Modified to cater for IS 4.8 build using conditional compilation
        ' 18/04/11 | TJS             | 2011.0.11 | Corrected XMLTemp to XMLItemTemp for item error message
        ' 17/10/11 | TJS/FA          | 2011.1.07 | Corrected sales tax calculation for kits with more than one item.  Process was 
        '                                        | multiplying the tax amount by the amount of items, resulting in negative tax values
        '                                        | on the invoices.
        ' 24/10/11 | FA              | 2011.1.08 | Modified Kit item calculation to take into account quantity of items specified for each 
        ' 26/10/11 | TJS             | 2011.1.xx | Corrected setting of source tax values and codes
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2, to handle items with no Unit of Measure record, 
        '                                        | to detect no valid tax rate when applying tax from source and for IS 6
        ' 24/02/12 | TJS             | 2011.2.08 | Modified to set IsTAOverridden on tax records where value set from source to prevent recalculation when Quote converted to Order
        ' 19/04/12 | TJS/FA          | 2012.1.01 | Implemented changes from IS 5.6 version 2011.1.17 (19/03/12) and 2011.1.18 (09/04/12)
        ' 10/06/12 | TJS             | 2012.1.05 | Modified to record SourceItemCommission and SourceItemFulfillmentCharge
        ' 08/07/12 | TJS             | 2012.1.09 | Modified to cater for UseShipToClassTemplate
        ' 20/07/12 | TJS             | 2012.1.10 | Corrected selection of Warehouse code from ShipToTemplate when UseShipToClassTemplate is set
        ' 24/08/12 | TJS             | 2012.1.14 | Modified for Connected Business 7
        ' 19/09/13 | TJS             | 2013.3.00 | Modified to cater for ImportMissingItemsAsNonStock
        ' 13/02/14 | TJS             | 2014.0.00 | Modified references for CB 14
        ' 02/04/14 | TJs             | 2014.0.01 | Modified to cater for Item Bundles and some additional CB fields
        '                                        | Corrected error when order has quantity > 1 for item priced kits
        ' 23/05/14 | TJS             | 2014.0.02 | Modified to cater for CB 14.0.01 replacing IsBase field with DefaultSelling field
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade
        Dim XMLItemTemp As XDocument, XMLTemp As XDocument ' TJS 18/03/11
        Dim XMLQuoteItems As System.Collections.Generic.IEnumerable(Of XElement), XMLCustomFields As System.Collections.Generic.IEnumerable(Of XElement)
        Dim XMLCustomField As XElement, XMLQuoteItem As XElement, xmlResponseDetailNode As XElement
        Dim xmlShippingDetails As XElement, commandSetRead As String()() ' TJS 19/08/10
        Dim rowGroupMethodDetail As Lerryn.Framework.ImportExport.DatasetGateway.ImportExportDatasetGateway.SystemShippingMethodGroupDetailRow
        Dim detailRows() As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway.SystemTaxSchemeDetailViewRow
        Dim taxFacade As Interprise.Facade.Base.TaxFacade, taxSchemeFacade As Interprise.Facade.Base.TaxSchemeFacade
        Dim taxSchemeDataset As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway
        Dim taxValue As Interprise.Facade.Base.TaxFacade.TaxValue, itemView As DataView
        Dim ItemKitDataset As Interprise.Framework.Base.DatasetGateway.ItemKitDatasetGateway ' TJS 22/09/10
        Dim ItemKitFacade As Interprise.Facade.Customer.CustomerItemKitFacade, itemKitDetailRows As DataRow() ' TJS 22/09/10
        Dim ItemBundleDataset As Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway ' TJS 02/04/14
        Dim ItemBundleFacade As Interprise.Facade.Customer.ItemBundleFacade ' TJS 02/04/14
        Dim ItemBundleRow As Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway.InventoryBundleConfiguratorViewRow ' TJS 02/04/14
        Dim shiptoCode As String, contactCode As String, contactFullName As String
        Dim index As Integer, iLineNum As Integer, dblQuoteTotal As Decimal, dblQuoteTotalRate As Decimal
        Dim dblQuoteTax As Decimal, dblQuoteTaxRate As Decimal, dblFreight As Decimal, dblFreightRate As Decimal
        Dim iTableLoop As Integer, iColumnLoop As Integer, iRowLoop As Integer, sTemp As String, strErrMsg As String
        Dim bQuoteExists As Boolean, strWarningMessage As String, strTempValue As String, strItemQty As String ' TJS 18/03/11
        Dim strItemPrice As String, strBillingCustomerName As String, strBillingCompanyName As String ' TJS 18/03/11
        Dim strShippingCustomerName As String, strShippingCompanyName As String, strItemID As String
        Dim strShippingMethod As String, strShippingMethodGroup As String, bCouponValid As Boolean
        Dim strShippingDate As String = String.Empty ' RCD 08/09/2019
        Dim strLatestShippingDate As String = String.Empty ' RCD 08/12/2019
        Dim strNotes As String = String.Empty ' RCD 08/13/2019
        Dim strSalesAgency As String = String.Empty ' RCD 08/13/2019
        Dim strOrderTaker As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerName As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerPhone As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerEmail As String = String.Empty ' RCD 08/13/2019
        Dim strCreditCardToken As String = String.Empty ' RCD 08/13/2019
        Dim strCustomerComments As String = String.Empty ' RCD 08/15/2019
        Dim bCustomFieldExists As Boolean, bSalesQuoteSaved As Boolean, dblCouponDiscount As Decimal
        Dim strWarehouseCode As String, strItemKitPricing As String, iItemPtr As Integer, iBundlePtr As Integer ' TJS 22/09/10 TJS 02/04/14
        Dim iItemRowsAdded As Integer, iTaxLoop As Integer, iBundleRow As Integer, decSalesPriceRate As Decimal ' TJS 18/03/11 TJS 02/04/14
        Dim decKitPriceSumRate As Decimal, decKitTotalPriceRate As Decimal, bTaxRecordFound As Boolean  ' TJS 18/03/11 TJS 02/12/11
        Dim decKitPriceTaxSumRate As Decimal, decBundleTotalPriceRate As Decimal, decBundlePriceSumRate As Decimal ' FA 17/10/11 TJS 02/04/14
        Dim strNegKitPriceMsg As String = "", decKitTotalRemaining As Decimal = 0   ' TJS/FA 19/04/12
        Dim decActualKitTotal As Decimal = 0, decKitDifferential As Decimal = 0 ' TJS/FA 19/04/12
        Dim bSkipUMCAandWarehouseCheck As Boolean ' TJS 19/09/13

        Try
            bCustomerCreditHoldOrOverLimit = False
            strCreditMessage = ""

            ' first check if Quote already entered but source hasn't received acknowledgement
            Me.m_ImportExportDataset.EnforceConstraints = False
            strWarningMessage = ""
            ' is there a Source Quote Ref ?
            If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF) <> "" Then
                ' yes, check if Quote already imported
                If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_IGNORE_VOIDED_ORDERS_AND_INVOICES).ToUpper = "YES" Then
                    ' is there a Store Merchant ID ?
                    If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_MERCHANT_ID) <> "" Then ' TJS 19/08/10
                        ' yes, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF) <> "" Then
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_MERCHANT_ID), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Quote"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_MERCHANT_ID), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Quote"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    Else
                        ' no, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF) <> "" Then
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Quote"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Quote"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    End If
                Else
                    ' is there a Store Merchant ID ?
                    If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_MERCHANT_ID) <> "" Then ' TJS 19/08/10
                        ' yes, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF) <> "" Then
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_MERCHANT_ID), Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Quote"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_MERCHANT_ID), Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Quote"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    Else
                        ' no, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF) <> "" Then
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF), Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Quote"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF), Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Quote"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    End If
                End If
                Me.LoadDataSet(commandSetRead, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 19/08/10
                If Me.m_ImportExportDataset.CustomerSalesOrder.Count > 0 Then
                    If Me.m_ImportExportDataset.CustomerSalesOrder(0).BillToCode = CustomerCode Then
                        bQuoteExists = True
                        strWarningMessage = "Quote with Source Ref " & GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF) & " already imported"
                    Else
                        bQuoteExists = True
                        strWarningMessage = "Quote with Source Ref " & GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF) & " already exists, but for CustomerCode " & Me.m_ImportExportDataset.CustomerSalesOrder(0).BillToCode & ", not " & CustomerCode
                    End If
                Else
                    bQuoteExists = False
                End If
            Else
                ' no source reference provided, always create new Quote
                bQuoteExists = False
            End If
            ' did we find a matching Quote
            If Not bQuoteExists Then
                ' no, create customer dataset and facade
                Try
                    CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
                    CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset)

                Catch ex As Exception
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "090", "Cannot create CustomerDetailFacade - suspect Interprise Solutions Licence error or User count exceeded", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                End Try

                taxFacade = New Interprise.Facade.Base.TaxFacade
                taxSchemeDataset = New Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway
                taxSchemeFacade = New Interprise.Facade.Base.TaxSchemeFacade(taxSchemeDataset, Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerSalesTaxScheme)

                CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
                    "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific)

                shiptoCode = CustomerDetailDataset.CustomerView(0).DefaultShipToCode
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerShipTo.TableName, _
                    "ReadCustomerShipTo", AT_CUSTOMER_CODE, CustomerCode, AT_SHIP_TO_CODE, shiptoCode}}, _
                    Interprise.Framework.Base.Shared.ClearType.Specific)

                If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactNull Then
                    contactCode = CustomerDetailDataset.CustomerView(0).DefaultContact
                Else
                    contactCode = ""
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactFullNameNull Then
                    contactFullName = CustomerDetailDataset.CustomerView(0).DefaultContactFullName
                Else
                    contactFullName = ""
                End If

                ' create Sales Order dataset 
                SalesOrderDataset = New Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway
                ' add handler so that we can set mandatory default values e.g. RootDocumentCode
                AddHandler SalesOrderDataset.CustomerSalesOrderView.ColumnChanged, AddressOf SalesOrderColumnChanged
                ' create Sales Order Facade
                SalesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(SalesOrderDataset)
                SalesOrderFacade.TransactionType = TransactionType.Quote

                ' create sales Quote core using customer details
                strErrMsg = ""
                SalesOrderFacade.AddSalesOrder(TransactionType.Quote, Me.m_ImportExportDataset.CustomerShipTo(0), contactCode, contactFullName, AddressOf SendOrderCreditHoldWarning, strErrMsg)
                ' did it work ?
                If strErrMsg = "ERR0018" Then
                    ' no
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", Interprise.Facade.Base.SimpleFacade.Instance.GetMessage(strErrMsg, New String() {"Customer and/or Ship To", "customer Ship To"}), _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                End If
                ' did we get a Credit Hold or Credit Limit warning which prevented Quote being created ?
                If bCustomerCreditHoldOrOverLimit Then
                    ' yes, abort Quote
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", strCreditMessage, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                End If

                sTemp = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_DATE)
                If sTemp = "" Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "No Quote Date found in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                ElseIf Not m_ImportExportConfigFacade.ValidateXMLDate(sTemp) Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Quote Date format invalid", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                End If
                With SalesOrderDataset
                    .CustomerSalesOrderView(0).SalesOrderDate = m_ImportExportConfigFacade.ConvertXMLDate(sTemp)
                    .CustomerSalesOrderView(0).SourceCode = SourceCode
                    .CustomerSalesOrderView(0).POCode = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF)
                    If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_REF) <> GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF) And _
                        GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF) <> "" Then ' TJS 22/09/10
                        .CustomerSalesOrderView(0).SalesRepOrderCode = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF) ' TJS 22/09/10
                    End If
                    .CustomerSalesOrderView(0).WebSiteCode = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_WEBSITE_REF)
                    .CustomerSalesOrderView(0)("StoreMerchantID_DEV000221") = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_MERCHANT_ID)
                    .CustomerSalesOrderView(0)("MerchantOrderID_DEV000221") = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SOURCE_QUOTE_REF)

                    ' has a Currency Code been defined ?
                    sTemp = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CURRENCY)
                    If sTemp <> "" Then
                        ' yes, check it matches an Active Currency Code in IS
                        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.SystemCurrency.TableName, _
                            "ReadSystemCurrency", Interprise.Framework.Inventory.Shared.Const.AT_CURRENCY_CODE, sTemp}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                        If Me.m_ImportExportDataset.SystemCurrency.Count = 0 Then
                            ' no matching currency found
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Invalid Currency Code " & sTemp & " in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 27/02/10
                        ElseIf Not Me.m_ImportExportDataset.SystemCurrency(0).IsActive Then
                            ' Currency found but is not marked as Active
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Currency Code " & sTemp & " is not Active", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 27/02/10 TJS 24/08/12
                        Else
                            ' yes, apply it
                            SalesOrderFacade.AssignCurrency(Me.m_ImportExportDataset.SystemCurrency(0), TransactionType.Quote) ' TJS 13/01/10
                        End If
                    End If

                    ' Check for any CustomerSalesOrder table Custom Fields
                    XMLCustomFields = XMLGenericQuote.XPathSelectElements(GENERIC_XML_QUOTE_CUSTOM_FIELDS)
                    If XMLCustomFields IsNot Nothing Then
                        For Each XMLCustomField In XMLCustomFields
                            Try
                                XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                                ' has field name been defined ?
                                If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                    ' does it exist ?
                                    bCustomFieldExists = False
                                    For iColumnLoop = 0 To .CustomerSalesOrderView.Columns.Count - 1
                                        If .CustomerSalesOrderView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then
                                            bCustomFieldExists = True
                                            Exit For
                                        End If
                                    Next
                                    If bCustomFieldExists Then
                                        .CustomerSalesOrderView(0)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerSalesOrderView", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                    End If
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Field Name attribute not provided for Quote Custom Field", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                End If

                            Catch ex As Exception
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                     m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                            End Try
                        Next
                    End If

                    strBillingCustomerName = ""
                    strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/NamePrefix")
                    If strTempValue <> "" Then
                        strBillingCustomerName = strBillingCustomerName & strTempValue & " "
                    End If
                    strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/FirstName")
                    If strTempValue <> "" Then
                        strBillingCustomerName = strBillingCustomerName & strTempValue & " "
                    End If
                    strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/LastName")
                    If strTempValue <> "" Then
                        strBillingCustomerName = strBillingCustomerName & strTempValue
                    ElseIf strBillingCustomerName <> "" Then
                        ' Last Name blank but other name elements not blank
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Last Name for Billing is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                    End If
                    strBillingCompanyName = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/Company")
                    ' has billing name been supplied ?
                    If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper = "YES" Then
                        ' yes, company name provided and config has customer as company option set, use it
                        .CustomerSalesOrderView(0).BillToName = strBillingCompanyName
                    ElseIf strBillingCustomerName <> "" Then
                        ' customer name provided, use it
                        .CustomerSalesOrderView(0).BillToName = strBillingCustomerName
                    End If

                    ' has billing address  been supplied ?
                    If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/Address") <> "" Or _
                        GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/Town_City") <> "" Or _
                        GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/County") <> "" Or _
                        GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/State") <> "" Or _
                        GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/PostalCode") <> "" Or _
                        GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/Country") <> "" Then
                        ' yes, copy address in case details are different from customer record
                        strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/Address")
                        If strTempValue = "" Then
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Billing Address is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                        Else
                            ' need to convert any cr or lf to ensure they display correctly
                            strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue)
                        End If
                        ' has company name been provided and config has customer as company option is not set ?
                        If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper <> "YES" Then
                            ' yes, add company name to address
                            .CustomerSalesOrderView(0).BillToAddress = strBillingCompanyName & ChrW(13) & ChrW(10) & strTempValue
                        Else
                            ' no, use address as is
                            .CustomerSalesOrderView(0).BillToAddress = strTempValue
                        End If
                        .CustomerSalesOrderView(0).BillToCity = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/Town_City")
                        .CustomerSalesOrderView(0).BillToCounty = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/County")
                        .CustomerSalesOrderView(0).BillToState = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/State")
                        strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/PostalCode")
                        If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 13/01/10
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Billing Postal Code is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                        End If
                        .CustomerSalesOrderView(0).BillToPostalCode = strTempValue
                        strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_ADDRESS & "/Country")
                        If strTempValue <> "" Then
                            ' check Country is valid 
                            If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strTempValue & "'") <> "" Then
                                .CustomerSalesOrderView(0).BillToCountry = strTempValue
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Billing Country is not a valid IS Country", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Billing Country is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                        End If
                    End If
                    If strBillingCompanyName <> "" And GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/WorkPhone") <> "" Then
                        .CustomerSalesOrderView(0).BillToPhone = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/WorkPhone")
                    ElseIf GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/HomePhone") <> "" Then
                        .CustomerSalesOrderView(0).BillToPhone = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_BILLING_DETAILS_CUSTOMER & "/HomePhone")
                    End If

                    ' is a Shipping Details Customer node present ?
                    xmlShippingDetails = XMLGenericQuote.XPathSelectElement(GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER)
                    If xmlShippingDetails IsNot Nothing Then
                        ' yes, get shipping name
                        strShippingCustomerName = ""
                        strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER & "/NamePrefix")
                        If strTempValue <> "" Then
                            strShippingCustomerName = strShippingCustomerName & strTempValue & " "
                        End If
                        strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER & "/FirstName")
                        If strTempValue <> "" Then
                            strShippingCustomerName = strShippingCustomerName & strTempValue & " "
                        End If
                        strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER & "/LastName")
                        If strTempValue <> "" Then
                            strShippingCustomerName = strShippingCustomerName & strTempValue
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Last Name for Shipping is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                        End If
                        strShippingCompanyName = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER & "/Company")
                        .CustomerSalesOrderView(0).ShipToName = strShippingCustomerName

                        ' has shipping address  been supplied ?
                        If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/Address") <> "" Or _
                            GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/Town_City") <> "" Or _
                            GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/County") <> "" Or _
                            GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/State") <> "" Or _
                            GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/PostalCode") <> "" Or _
                            GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/Country") <> "" Then
                            ' yes, copy address in case details are different from customer record
                            strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/Address")
                            If strTempValue = "" Then
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Shipping Address is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                            Else
                                ' need to convert any cr or lf to ensure they display correctly in IS
                                strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue)
                            End If
                            ' has company name been provided ?
                            If strShippingCompanyName <> "" Then
                                ' yes, add company name to address
                                .CustomerSalesOrderView(0).ShipToAddress = strShippingCompanyName & ChrW(13) & ChrW(10) & strTempValue
                            Else
                                ' no, use address as is
                                .CustomerSalesOrderView(0).ShipToAddress = strTempValue
                            End If
                            .CustomerSalesOrderView(0).ShipToCity = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/Town_City")
                            .CustomerSalesOrderView(0).ShipToCounty = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/County")
                            .CustomerSalesOrderView(0).ShipToState = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/State")
                            strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/PostalCode")
                            If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 13/01/10
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Shipping Postal Code is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                            End If
                            .CustomerSalesOrderView(0).ShipToPostalCode = strTempValue
                            strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_ADDRESS & "/Country")
                            If strTempValue <> "" Then
                                ' check Country is valid 
                                If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strTempValue & "'") <> "" Then
                                    .CustomerSalesOrderView(0).ShipToCountry = strTempValue ' TJS 18/03/11
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Shipping Country is not a valid IS Country", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Shipping Country is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                            End If
                            strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_CUSTOMER & "/Telephone")
                            If strTempValue <> "" Then
                                .CustomerSalesOrderView(0).ShipToPhone = strTempValue
                            End If
                        End If
                    End If

                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper <> "YES" Then ' TJS 08/07/12
                        ' is KSI MultiShip module enabled ?
                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SHIPPING_MODULE_TO_USE) = "KSI MultiShip" Then
                            'yes, set default values in IS fields and XML Value in KSI custom field
                            strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                            strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                            .CustomerSalesOrderView(0)("RZShippingMethodID") = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_METHOD)

                        Else
                            ' no, using IS standard shipping
                            strShippingMethod = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_METHOD)
                            If strShippingMethod = "" Then
                                strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                            End If
                            strShippingMethodGroup = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_METHOD_GROUP)
                            If strShippingMethodGroup = "" Then
                                strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                            End If
                            rowGroupMethodDetail = Me.m_ImportExportDataset.SystemShippingMethodGroupDetail.FindByShippingMethodGroupShippingMethodCode(strShippingMethodGroup, strShippingMethod)
                            If rowGroupMethodDetail Is Nothing Then
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "075", "Invalid Shipping Method and Shipping Method Group combination - " & strShippingMethod & ", " & strShippingMethodGroup, _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                            End If
                        End If
                        .CustomerSalesOrderView(0).ShippingMethodCode = strShippingMethod
                        .CustomerSalesOrderView(0).ShippingMethodGroup = strShippingMethodGroup

                        ' RCD 08/13/2019 Start
                        strShippingDate = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_SHIPPING_DATE)
                        If (Not String.IsNullOrEmpty(strShippingDate)) Then
                            Dim shippingDate As Date
                            If (Date.TryParseExact(strShippingDate, GENERIC_XML_YMD, System.Globalization.DateTimeFormatInfo.InvariantInfo, Globalization.DateTimeStyles.None, shippingDate)) Then
                                .CustomerSalesOrderView(0).ShippingDate = shippingDate
                            Else
                                Throw New Exception(GENERIC_XML_INVALID_SHIPPING_DATE)
                            End If
                        End If

                        strLatestShippingDate = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_SHIPPING_DETAILS_LATEST_SHIPPING_DATE)
                        If (Not String.IsNullOrEmpty(strLatestShippingDate)) Then
                            Dim latestShippingDate As Date
                            If (Date.TryParseExact(strLatestShippingDate, GENERIC_XML_YMD, System.Globalization.DateTimeFormatInfo.InvariantInfo, Globalization.DateTimeStyles.None, latestShippingDate)) Then
                                .CustomerSalesOrderView(0).LatestShipDate = latestShippingDate
                            Else
                                Throw New Exception(GENERIC_XML_INVALID_LATEST_SHIPPING_DATE)
                            End If
                        End If

                        Dim predefinedNotes As New StringBuilder()
                        strCustomerComments = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_COMMENTS)
                        If (Not String.IsNullOrEmpty(strCustomerComments)) Then
                            predefinedNotes.AppendLine(strCustomerComments)
                            predefinedNotes.AppendLine()
                        End If
                        strNotes = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_NOTES)
                        If (Not String.IsNullOrEmpty(strNotes)) Then
                            predefinedNotes.AppendLine(strNotes)
                            predefinedNotes.AppendLine()
                        End If
                        strSalesAgency = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_SALES_AGENCY)
                        If (Not String.IsNullOrEmpty(strSalesAgency)) Then
                            predefinedNotes.AppendLine(String.Format("Sales Agency : {0}", strSalesAgency))
                        End If
                        strOrderTaker = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_ORDER_TAKER)
                        If (Not String.IsNullOrEmpty(strOrderTaker)) Then
                            predefinedNotes.AppendLine(String.Format("Order Taker : {0}", strOrderTaker))
                        End If
                        strBuyerName = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_BUYER_NAME)
                        If (Not String.IsNullOrEmpty(strBuyerName)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Name : {0}", strBuyerName))
                        End If
                        strBuyerPhone = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_BUYER_PHONE)
                        If (Not String.IsNullOrEmpty(strBuyerPhone)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Phone : {0}", strBuyerPhone))
                        End If
                        strBuyerEmail = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_BUYER_EMAIL)
                        If (Not String.IsNullOrEmpty(strBuyerEmail)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Email : {0}", strBuyerEmail))
                        End If
                        strCreditCardToken = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_CREDIT_CARD_TOKEN)
                        If (Not String.IsNullOrEmpty(strCreditCardToken)) Then
                            predefinedNotes.AppendLine(String.Format("Credit Card Token : {0}", strCreditCardToken))
                        End If
                        .CustomerSalesOrderView(0).InternalNotes = predefinedNotes.ToString()
                        ' RCD 08/13/2019 End
                    End If

                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SET_DISABLE_FREIGHT_CALCULATION).ToUpper = "YES" Then
                        .CustomerSalesOrderView(0).IsFreightOverwrite = True
                    Else
                        .CustomerSalesOrderView(0).IsFreightOverwrite = False
                    End If
                    .CustomerSalesOrderView(0).Notes = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_COMMENTS)

                    ' Is there a Coupon Code and are coupons enabled ?
                    If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_SALES_COUPON) <> "" And _
                        GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ENABLE_COUPONS).ToUpper = "YES" Then
                        ' yes, has a Discount Coupon been included ?
                        If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_DISCOUNT_COUPON_DESCRIPTION) = "" And _
                            GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_DISCOUNT_COUPON_VALUE) = "" Then
                            ' no, check Coupon Code is valid for customer
                            Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerCouponView.TableName, _
                                "ReadCustomerCouponView_DEV000221", AT_COUPON_CODE, GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_SALES_COUPON), _
                                AT_CUSTOMER_CODE, CustomerCode, Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, _
                                GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                            If Me.m_ImportExportDataset.CustomerCouponView.Count > 0 Then
                                ' coupon valid for customer, check date range is valid
                                bCouponValid = True
                                If Not Me.m_ImportExportDataset.CustomerCouponView(0).IsStartingDateNull Then
                                    If Me.m_ImportExportDataset.CustomerCouponView(0).StartingDate > .CustomerSalesOrderView(0).SalesOrderDate Then
                                        bCouponValid = False
                                    End If
                                End If
                                If Not Me.m_ImportExportDataset.CustomerCouponView(0).IsExpirationDateNull Then
                                    If Me.m_ImportExportDataset.CustomerCouponView(0).ExpirationDate < .CustomerSalesOrderView(0).SalesOrderDate Then
                                        bCouponValid = False
                                    End If
                                End If
                                If bCouponValid Then
                                    SalesOrderFacade.AssignCoupon(Me.m_ImportExportDataset.CustomerCouponView(0), .CustomerSalesOrderView(0))
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "026", "Sales Coupon not valid on Quote Date", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "025", "Sales Coupon not valid or not valid for Customer", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "025", "Cannot have both a Sales Coupon and a Discount Coupon", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                        End If
                    End If

                    ' RCD 2019/08/12 Start - SalesRepGroupCode Node
                    Dim strSalesRepGroupCode = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_SALES_REP_GROUP_CODE)
                    If (Not String.IsNullOrEmpty(strSalesRepGroupCode)) Then
                        Dim salesRepRow As System.Data.DataRow = Interprise.Facade.Base.SimpleFacade.Instance.GetRow(New String() {"*"},
                                                                                                                     Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_TABLE,
                                                                                                                     String.Format(Interprise.Framework.Base.Shared.Const.FORMAT_FIELD_AND_VALUE,
                                                                                                                                   Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPCODE_COLUMN,
                                                                                                                                   strSalesRepGroupCode),
                                                                                                                     ConnectionStringType.Online)
                        If (salesRepRow IsNot Nothing) Then
                            .CustomerSalesRepCommissionView(0).SalesRepGroupCode = CStr(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPCODE_COLUMN))
                            .CustomerSalesRepCommissionView(0).SalesRepGroupName = CStr(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPNAME_COLUMN))
                            .CustomerSalesRepCommissionView(0).CommissionPercent = CDec(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_COMMISSIONPERCENT_COLUMN))

                            ' RCD 2019/08/15 Start - SalesRepCode Node
                            Dim strSalesRepCode = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_CUSTOMER_SALES_REP_CODE)
                            If (Not String.IsNullOrEmpty(strSalesRepCode)) Then
                                Dim salesRepContactCode As String = Interprise.Facade.Base.SimpleFacade.Instance.GetField(Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_CONTACTCODE_COLUMN, _
                                                                                                                Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_TABLE,
                                                                                                                String.Format(Interprise.Framework.Base.Shared.Const.FORMAT_FILTER_2, _
                                                                                                                              Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_ENTITYCODE_COLUMN, _
                                                                                                                              strSalesRepGroupCode, _
                                                                                                                              Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_CONTACTCODE_COLUMN, _
                                                                                                                              strSalesRepCode))
                                If (Not String.IsNullOrEmpty(salesRepContactCode)) Then
                                    .CustomerSalesRepCommissionView(0).ContactCode = salesRepContactCode
                                End If
                            End If
                            ' RCD 2019/08/15 End - SalesRepCode Node
                        End If
                    End If
                    ' RCD 2019/08/12 End - SalesRepGroupCode Node

                    taxSchemeFacade.LoadDataSet(New String()() {New String() {taxSchemeDataset.SystemTaxSchemeDetailView.TableName, _
                        "ReadSystemTaxSchemeDetail", AT_COUNTRY_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COUNTRY_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                        Interprise.Framework.Base.Shared.ClearType.Specific, Interprise.Framework.Base.Shared.ConnectionStringType.Offline)
                    XMLQuoteItems = XMLGenericQuote.XPathSelectElements(GENERIC_XML_QUOTE_ITEM_LIST)
                    dblQuoteTotal = 0
                    dblQuoteTotalRate = 0
                    dblQuoteTax = 0
                    dblQuoteTaxRate = 0
                    iLineNum = 1
                    If XMLQuoteItems IsNot Nothing Then
                        For Each XMLQuoteItem In XMLQuoteItems
                            Try
                                XMLItemTemp = XDocument.Parse(XMLQuoteItem.ToString)
                                ' has Item Code been provided
                                If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE) <> "" Then
                                    ' yes, use it
                                    Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", _
                                        Interprise.Framework.Inventory.Shared.Const.AT_ITEM_CODE, GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE),
                                        Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                        Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                                    strItemID = "Quote Item Code " & GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE)

                                ElseIf GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME) <> "" Then
                                    ' no, but Item Name has been
                                    Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", _
                                        AT_ITEM_NAME, GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME), Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, _
                                        GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                        Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                                    strItemID = "Quote Item Name " & GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME)

                                Else
                                    sTemp = "Both ISItemCode or ISItemName are blank"
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "017", sTemp, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                End If

                                ' start of code added TJS 19/09/13
                                bSkipUMCAandWarehouseCheck = False
                                ' did we find a matching Inventory Item ?
                                If Me.m_ImportExportDataset.SaleItemView.Count = 0 Then
                                    ' no, is Import Missing Items As NonStock set ?
                                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_IMPORT_MISSING_ITEMS_AS_NONSTOCK).ToUpper = "YES" Then
                                        ' yes, send error email
                                        m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", strItemID & " not found - Quote line item imported as Non-Stock.", XMLGenericQuote.ToString)
                                        ' get Non-Stock item record
                                        Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", AT_ITEM_NAME, "NONSTOCK", _
                                            Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                            Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                                        bSkipUMCAandWarehouseCheck = True
                                    End If
                                End If
                                ' end of code added TJS 19/09/13

                                If Me.m_ImportExportDataset.SaleItemView.Count > 0 Then
                                    iItemPtr = 0
                                    If Not bSkipUMCAandWarehouseCheck Then ' TJS 19/09/13
                                        ' has a Warehouse code been specified ?
                                        strWarehouseCode = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_WAREHOUSE)
                                        If strWarehouseCode = "" Then
                                            ' no, is UseShipToClassTemplate set ?
                                            If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper = "YES" Then ' TJS 08/07/12 TJS 20/07/12
                                                ' yes, get warehouse from Customer Ship To
                                                strWarehouseCode = .CustomerSalesOrderView(0).WarehouseCode ' TJS 08/07/12 TJS 20/07/12
                                            Else
                                                ' no, get default Warehouse code
                                                strWarehouseCode = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_WAREHOUSE)
                                            End If
                                        End If
                                        ' has a Unit Of Measure been specified ?
                                        strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UMC)
                                        If strTempValue <> "" Then
                                            ' yes, find relevent item details
                                            Do While Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("UnitMeasureCode").ToString.ToUpper <> strTempValue.ToUpper Or _
                                                (Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("WarehouseCode").ToString.ToUpper <> strWarehouseCode.ToUpper And _
                                                (Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsWarehouseCodeNull))
                                                iItemPtr += 1
                                                If iItemPtr > Me.m_ImportExportDataset.SaleItemView.Count - 1 Then
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "017", "Cannot find Unit of Measure " & strTempValue & " and Warehouse Code " & strWarehouseCode & " for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                End If
                                            Loop
                                        Else
                                            ' no, find base Unit of Measure
                                            Do While (Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsDefaultSellingNull OrElse Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).DefaultSelling) Or _
                                                (Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("WarehouseCode").ToString.ToUpper <> strWarehouseCode.ToUpper And _
                                                (Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsWarehouseCodeNull)) ' TJS 02/12/11 TJS 23/05/14
                                                iItemPtr += 1
                                                If iItemPtr > Me.m_ImportExportDataset.SaleItemView.Count - 1 Then
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "017", "Cannot find default UMC and Warehouse Code " & strWarehouseCode & " for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                End If
                                            Loop
                                        End If
                                    End If
                                    itemView = New DataView(SalesOrderDataset.CustomerSalesOrderDetailView)
                                    itemView.AddNew()

                                    ' need to set default value for linenum etc to prevent DBNull conversion error
                                    itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.RootDocumentCodeColumn.ColumnName) = .CustomerSalesOrderView(0).RootDocumentCode
                                    itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.SalesOrderCodeColumn.ColumnName) = .CustomerSalesOrderView(0).SalesOrderCode
                                    itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.LineNumColumn.ColumnName) = 0
                                    itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.SourceLineNumColumn.ColumnName) = 0

                                    ' start of code added TJS 10/06/12
                                    sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_SOURCE_COMMISSION)
                                    ' has source commission been supplied ?
                                    If sTemp <> "" Then
                                        ' yes, must be numeric and not contain any commas
                                        If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                                            itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221") = CDec(sTemp)
                                            itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.CommissionAmountColumn.ColumnName) = CDec(itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221"))
                                            itemView(iLineNum - 1)("SourceCommissionCharge_DEV000221") = RoundDecimalValue(CDec(itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221")) / .CustomerSalesOrderView(0).ExchangeRate)
                                            itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.CommissionAmountRateColumn.ColumnName) = CDec(itemView(iLineNum - 1)("SourceCommissionCharge_DEV000221"))
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Source Commission must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                        End If
                                    End If
                                    sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_SOURCE_FULFILLMENT)
                                    ' has source fulfillment been supplied ?
                                    If sTemp <> "" Then
                                        ' yes, must be numeric and not contain any commas
                                        If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                                            itemView(iLineNum - 1)("SourceFulfillmentCostRate_DEV000221") = CDec(sTemp)
                                            itemView(iLineNum - 1)("SourceFulfillmentCost_DEV000221") = RoundDecimalValue(CDec(itemView(iLineNum - 1)("SourceFulfillmentCostRate_DEV000221")) / .CustomerSalesOrderView(0).ExchangeRate)
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Source Fulfillment must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                        End If
                                    End If
                                    ' end of code added TJS 10/06/12

                                    sTemp = ""
                                    strItemKitPricing = "" ' TJS 18/03/11
                                    iItemRowsAdded = 1 ' TJS 18/03/11
                                    decKitPriceSumRate = 0 ' TJS 18/03/11
                                    decKitPriceTaxSumRate = 0 ' TJS/FA 17/10/11
                                    ' start of code added TJS 22/09/10
                                    If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_MATRIX_GROUP Then ' TJS 02/04/14
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "017", strItemID & " is a Matrix Group item.  Only individual Items whthin the Matrix Group can be added to a quote.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                    ElseIf Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_KIT Then ' TJS 02/04/14
                                        ItemKitDataset = New Interprise.Framework.Base.DatasetGateway.ItemKitDatasetGateway
                                        ItemKitFacade = New Interprise.Facade.Customer.CustomerItemKitFacade(ItemKitDataset)
                                        ItemKitFacade.CurrencyCode = .CustomerSalesOrderView(0).CurrencyCode
                                        ItemKitFacade.ExchangeRate = .CustomerSalesOrderView(0).ExchangeRate
                                        strItemKitPricing = ItemKitFacade.GetField("PricingType", "InventoryKit", "ItemKitCode = '" & Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode & "'")
                                        itemKitDetailRows = New DataRow() {}
                                        ItemKitFacade.InitializeKitConfigurator(Me.m_ImportExportDataset.SaleItemView(iItemPtr), strItemKitPricing, _
                                            CustomerCode, .CustomerSalesOrderView(0).SalesOrderDate, strWarehouseCode, itemKitDetailRows)
                                        ' get quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then
                                                    ' need to apply price to kit via configurator
                                                    ' start of code added TJS 18/03/11
                                                    decSalesPriceRate = 0
                                                    strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                                    ' has price been supplied ?
                                                    If strItemPrice <> "" Then
                                                        ' yes, must be numeric and not contain any commas
                                                        If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                            ' must not be negative
                                                            If CDec(strItemPrice) >= 0 Then
                                                                ' Unit price valid, overwrite Item price
                                                                ' do prices include tax >
                                                                If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                                    ' yes, get price before tax (Use freight tax calc as item row(s) not yet created for kit
                                                                    decSalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, .TransactionItemTaxDetailView, _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode, 0, CDec(strItemQty), CDec(strItemPrice), _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).SalesTaxCode, .CustomerSalesOrderView(0).CurrencyCode, _
                                                                        .CustomerSalesOrderView(0).ExchangeRate, .CustomerSalesOrderView(0).SalesOrderCode, True)
                                                                Else
                                                                    decSalesPriceRate = CDec(strItemPrice)
                                                                End If
                                                            Else
                                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must not be negative for " & strItemID, _
                                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                            End If
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must be numeric for " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                        End If
                                                    End If
                                                    dblQuoteTotalRate += (decSalesPriceRate * CDec(strItemQty)) ' TJS 02/04/14
                                                    dblQuoteTotal = RoundDecimalValue(dblQuoteTotalRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 02/04/14
                                                    ' end of code added TJS 18/03/11
                                                    ' quantity valid, apply to Kit
                                                    If strItemKitPricing = "Item Price" Then ' TJS 18/03/11
                                                        SalesOrderFacade.AssignItemKit(Me.m_ImportExportDataset.SaleItemView(iItemPtr), ItemKitFacade.KitItems, itemView(iLineNum - 1), strItemKitPricing, CDec(strItemQty), 0, TransactionType.Quote, sTemp, strWarehouseCode) ' TJS 18/03/11
                                                        iItemRowsAdded = ItemKitFacade.KitItems.Length ' TJS 18/03/11
                                                        decKitTotalPriceRate = ItemKitFacade.ComputeTotalByTotal ' TJS 18/03/11
                                                    Else
                                                        SalesOrderFacade.AssignItemKit(Me.m_ImportExportDataset.SaleItemView(iItemPtr), ItemKitFacade.KitItems, itemView(iLineNum - 1), strItemKitPricing, CDec(strItemQty), decSalesPriceRate, TransactionType.Quote, sTemp, strWarehouseCode)
                                                    End If
                                                    If sTemp <> "" Then
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "016", sTemp, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 09/03/09
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                        End If
                                        ' end of code added TJS 22/09/10

                                        ' start of code added TJS 02/04/14
                                    ElseIf Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_BUNDLE Then
                                        ' get quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then
                                                    ' quantity valid, get 
                                                    decSalesPriceRate = 0
                                                    strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                                    ' has price been supplied ?
                                                    If strItemPrice <> "" Then
                                                        ' yes, must be numeric and not contain any commas
                                                        If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                            ' must not be negative
                                                            If CDec(strItemPrice) >= 0 Then
                                                                ' Unit price valid, overwrite Item price
                                                                ' do prices include tax >
                                                                If GetXMLElementText(XMLGenericQuote, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                                    ' yes, get price before tax (Use freight tax calc as item row(s) not yet created for kit
                                                                    decSalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, .TransactionItemTaxDetailView, _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode, 0, CDec(strItemQty), CDec(strItemPrice), _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).SalesTaxCode, .CustomerSalesOrderView(0).CurrencyCode, _
                                                                        .CustomerSalesOrderView(0).ExchangeRate, .CustomerSalesOrderView(0).SalesOrderCode, True)
                                                                Else
                                                                    decSalesPriceRate = CDec(strItemPrice)
                                                                End If

                                                            Else
                                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must not be negative for " & strItemID, _
                                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                            End If
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must be numeric for " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                        End If
                                                    End If

                                                    ' get bundle details
                                                    ItemBundleDataset = New Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway
                                                    ItemBundleFacade = New Interprise.Facade.Customer.ItemBundleFacade(ItemBundleDataset)
                                                    ItemBundleFacade.LoadDataSet("ReadInventoryBundleConfigurator", New String() {"InventoryBundleConfiguratorView"}, _
                                                        New String()() {New String() {"@BundleCode", Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode}, _
                                                        New String() {"@DefaultPrice", CustomerDetailDataset.CustomerView(0).DefaultPrice}, _
                                                        New String() {"@LanguageCode", GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}, _
                                                        New String() {"@CurrencyCode", .CustomerSalesOrderView(0).CurrencyCode}, _
                                                        New String() {"@WarehouseCode", strWarehouseCode}}, ClearType.Specific)
                                                    iBundleRow = iLineNum - 1
                                                    ' get total of item prices in bundle
                                                    decBundleTotalPriceRate = 0
                                                    decBundlePriceSumRate = 0
                                                    For Each ItemBundleRow In ItemBundleDataset.InventoryBundleConfiguratorView.Rows
                                                        decBundleTotalPriceRate = decBundleTotalPriceRate + (CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICERATE_COLUMN)) * CDec(ItemBundleRow("Quantity")))
                                                    Next
                                                    iItemRowsAdded = ItemBundleDataset.InventoryBundleConfiguratorView.Count
                                                    iBundlePtr = 0
                                                    For Each ItemBundleRow In ItemBundleDataset.InventoryBundleConfiguratorView.Rows
                                                        SalesOrderFacade.AssignInventoryItem(ItemBundleRow, itemView(iBundleRow), sTemp)
                                                        .CustomerSalesOrderDetailView(iBundleRow).ItemCode = ItemBundleRow(CUSTOMERSALESORDERDETAIL_ITEMCODE_COLUMN).ToString
                                                        .CustomerSalesOrderDetailView(iBundleRow).ItemName = ItemBundleRow(INVENTORYITEMS_ITEMNAME_COLUMN).ToString
                                                        .CustomerSalesOrderDetailView(iBundleRow).ItemDescription = ItemBundleRow(INVENTORYITEMDESCRIPTION_ITEMDESCRIPTION_COLUMN).ToString
                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICERATE_COLUMN))
                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPrice = CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICE_COLUMN))
                                                        .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered = CDec(strItemQty) * CDec(ItemBundleRow("Quantity"))
                                                        .CustomerSalesOrderDetailView(iBundleRow).ItemType = ItemBundleRow(CUSTOMERSALESORDERDETAIL_ITEMTYPE_COLUMN).ToString
                                                        .CustomerSalesOrderDetailView(iBundleRow).ParentBundleItemCode = ItemBundleRow(BUNDLECODE).ToString

                                                        ' is this the last row of the bundle ?
                                                        If iBundlePtr <> ItemBundleDataset.InventoryBundleConfiguratorView.Count - 1 Then
                                                            ' no, set price as relevant fraction of total bundle price
                                                            If decBundleTotalPriceRate = 0 Then
                                                                ' is quantity ordered > 1 ?
                                                                If CInt(strItemQty) > 1 Then
                                                                    ' yes - CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered will be equal to Kit Item Qty 
                                                                    ' if there is only 1 of the item in the bundle
                                                                    ' Otherwise the Item Quantity Order figure will always be greater than the bundle Qty as it is 
                                                                    ' the bundle item Quantity / by the number of bundles in the order
                                                                    If (.CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((decSalesPriceRate / iItemRowsAdded) * (CDec(strItemQty) / .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered), 2)
                                                                    Else
                                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded), 2)
                                                                    End If
                                                                Else
                                                                    If .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded * .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered), 2)
                                                                    Else
                                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / iItemRowsAdded, 2)
                                                                    End If
                                                                End If
                                                            Else
                                                                ' is quantity ordered > 1 ?
                                                                If CInt(strItemQty) > 1 Then
                                                                    ' yes - CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered will be equal to Kit Item Qty 
                                                                    ' if there is only 1 of the item in the bundle
                                                                    ' Otherwise the Item Quantity Order figure will always be greater than the bundle Qty as it is 
                                                                    ' the bundle item Quantity / by the number of bundles in the order
                                                                    If (.CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((.CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate) / (decBundleTotalPriceRate * (.CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty))), 2)
                                                                    Else
                                                                        ' if there is only 1 of the item, then the unit price will be the percentage calculation for the individual item price.
                                                                        'Total for the item is then multiplied by the Kit item quantity
                                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((.CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate) / decBundleTotalPriceRate, 2)
                                                                    End If
                                                                Else
                                                                    'If .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                    ' TJS/FA 19/04/12 percentage of kit value divided by the number of items
                                                                    .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(.CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate / decBundleTotalPriceRate, 2)

                                                                End If
                                                            End If
                                                            If .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                decBundlePriceSumRate = decBundlePriceSumRate + .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate * .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered
                                                            Else
                                                                decBundlePriceSumRate = decBundlePriceSumRate + .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate
                                                            End If
                                                        Else
                                                            If .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                ' yes, set price as remainder to prevent rounding errors and divide by quantity ordered
                                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(((decSalesPriceRate * CInt(strItemQty)) - decBundlePriceSumRate) / .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered, 2)
                                                            Else
                                                                ' yes, set price as remainder to prevent rounding errors
                                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((decSalesPriceRate * CInt(strItemQty)) - decBundlePriceSumRate, 2)
                                                            End If
                                                        End If
                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPrice = RoundDecimalValue(.CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate / .CustomerSalesOrderView(0).ExchangeRate)

                                                        iBundleRow += 1
                                                        iBundlePtr += 1
                                                        If iBundlePtr <> ItemBundleDataset.InventoryBundleConfiguratorView.Count Then
                                                            itemView = New DataView(SalesOrderDataset.CustomerSalesOrderDetailView)
                                                            itemView.AddNew()

                                                            ' need to set default value for linenum etc to prevent DBNull conversion error
                                                            itemView(iBundleRow)(.CustomerSalesOrderDetailView.RootDocumentCodeColumn.ColumnName) = .CustomerSalesOrderView(0).RootDocumentCode
                                                            itemView(iBundleRow)(.CustomerSalesOrderDetailView.SalesOrderCodeColumn.ColumnName) = .CustomerSalesOrderView(0).SalesOrderCode
                                                            itemView(iBundleRow)(.CustomerSalesOrderDetailView.LineNumColumn.ColumnName) = 0
                                                            itemView(iBundleRow)(.CustomerSalesOrderDetailView.SourceLineNumColumn.ColumnName) = 0
                                                        End If
                                                    Next
                                                    dblQuoteTotalRate += (decSalesPriceRate * CDec(strItemQty))
                                                    dblQuoteTotal = RoundDecimalValue(dblQuoteTotalRate / .CustomerSalesOrderView(0).ExchangeRate)

                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                        End If
                                        ' end of code added TJS 02/04/14

                                    Else
                                        SalesOrderFacade.AssignInventoryItem(Me.m_ImportExportDataset.SaleItemView(iItemPtr), itemView(iLineNum - 1), sTemp)
                                        If sTemp <> "" Then
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "016", sTemp, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                        End If
                                        ' start of code moved TJS 22/09/10
                                        ' set quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then
                                                    ' quantity valid, apply to Item
                                                    .CustomerSalesOrderDetailView(iLineNum - 1).QuantityOrdered = CDec(strItemQty)
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                        End If

                                        ' now set default price and cost
                                        If Not SalesOrderFacade.SetSalesPrice(itemView(iLineNum - 1), False) Then
                                            sTemp = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("INF0101", New String() {CStr(itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.ItemNameColumn.ColumnName)), .CustomerSalesOrderView(0).CurrencyCode})
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "016", sTemp, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                        End If
                                        ' end of code moved TJS 22/09/10
                                    End If

                                    For iRowLoop = iLineNum - 1 To (iLineNum - 1) + (iItemRowsAdded - 1) ' TJS 18/03/11
                                        .CustomerSalesOrderDetailView(iRowLoop).WebSiteCode = .CustomerSalesOrderView(0).WebSiteCode
                                        sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_PURCHASE_ID)
                                        If sTemp <> "" Then
                                            .CustomerSalesOrderDetailView(iRowLoop)("SourcePurchaseID_DEV000221") = sTemp
                                        End If

                                        ' code to set quantity and price moved TJS 22/09/10
                                        .CustomerSalesOrderDetailView(iRowLoop).QuantityBackOrdered = 0
                                        .CustomerSalesOrderDetailView(iRowLoop).QuantityShipped = 0
                                        .CustomerSalesOrderDetailView(iRowLoop).QuantityToBeShipped = 0
                                        If m_ImportExportDataset.SaleItemView(0).ItemType = ITEM_TYPE_NON_STOCK Or _
                                            m_ImportExportDataset.SaleItemView(0).ItemType = ITEM_TYPE_SERVICE Or _
                                            m_ImportExportDataset.SaleItemView(0).ItemType = ITEM_TYPE_ELECTRONIC_DOWNLOAD Then
                                            .CustomerSalesOrderDetailView(iRowLoop).QuantityAllocated = .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered
                                        Else
                                            .CustomerSalesOrderDetailView(iRowLoop).QuantityAllocated = 0
                                        End If
                                        .CustomerSalesOrderDetailView(iRowLoop).QuantityAlReadyRMA = 0
                                        .CustomerSalesOrderDetailView(iRowLoop).QuantityReturned = 0
                                        .CustomerSalesOrderDetailView(iRowLoop).ContractQuantity = 0
                                        .CustomerSalesOrderDetailView(iRowLoop).ContractCalledOff = 0
                                        If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DESCRIPTION) <> "" And ((Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_KIT And _
                                            Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_BUNDLE) Or strItemKitPricing = "Kit Price") Then ' TJS 18/03/11 TJS 02/04/14
                                            .CustomerSalesOrderDetailView(iRowLoop).ItemDescription = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DESCRIPTION)
                                            .CustomerSalesOrderDetailView(iRowLoop).InventoryDescription = .CustomerSalesOrderDetailView(iRowLoop).ItemDescription
                                            .CustomerSalesOrderDetailView(iRowLoop).IsInventoryDescription = True
                                        End If
                                        ' only apply price here if not a kit (kit pricing handled above when pricing type is Kit and below for Item pricing
                                        If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_KIT And Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_BUNDLE Then ' TJS 18/03/11 TJS 02/04/14 
                                            strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                            ' has price been supplied ?
                                            If strItemPrice <> "" Then
                                                ' yes, must be numeric and not contain any commas
                                                If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                    ' must not be negative
                                                    If CDec(strItemPrice) >= 0 Then
                                                        ' Unit price valid, overwrite Item price
                                                        ' do prices include tax >
                                                        If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                            ' yes, get price before tax
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, _
                                                                .TransactionItemTaxDetailView, .CustomerSalesOrderDetailView(iRowLoop).ItemCode, _
                                                                .CustomerSalesOrderDetailView(iRowLoop).LineNum, .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered, _
                                                                CDec(strItemPrice), .CustomerSalesOrderDetailView(iRowLoop).TaxCode, .CustomerSalesOrderView(0).CurrencyCode, _
                                                                .CustomerSalesOrderView(0).ExchangeRate, .CustomerSalesOrderView(0).SalesOrderCode, False)
                                                        Else
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = CDec(strItemPrice)
                                                        End If
                                                        .CustomerSalesOrderDetailView(iRowLoop).Discount = 0
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                End If
                                            End If
                                            dblQuoteTotalRate += (.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered) ' TJS 26/05/09 TJS 02/04/14
                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPrice = RoundDecimalValue(.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate / .CustomerSalesOrderView(0).ExchangeRate)
                                            dblQuoteTotal = RoundDecimalValue(dblQuoteTotalRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 02/04/14

                                        ElseIf strItemKitPricing = "Item Price" Then ' TJS 18/03/11
                                            ' is this the last row of the kit ?
                                            If iRowLoop < (iLineNum - 1) + (iItemRowsAdded - 1) Then ' TJS 18/03/11
                                                ' no, set price as relevant fraction of total kit price
                                                If decKitTotalPriceRate = 0 Then ' TJS 04/04/11
                                                    If CInt(strItemQty) > 1 Then
                                                        ' TJS/FA 19/04/12
                                                        'CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered will be equal to Kit Item Qty 
                                                        'if there is only 1 of the item in the kit
                                                        'Otherwise the Item Quantity Order figure will always be greater than the Kit Qty as it is 
                                                        'the Kit item Quantity * by the number of kits in the order
                                                        If (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                            'TJS/FA 19/04/12
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decSalesPriceRate / iItemRowsAdded) * (CDec(strItemQty) / .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered), 2)
                                                        Else
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded), 2) ' TJS 04/04/11
                                                        End If
                                                        ' TJS/FA 19/04/12 end
                                                    Else
                                                        If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded * .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered), 2)
                                                        Else
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / iItemRowsAdded, 2) ' TJS 04/04/11
                                                        End If
                                                    End If
                                                Else
                                                    ' TJS/FA 19/04/12
                                                    ' AssignKit already set the SalesPriceRate to the IS kit price, we now need to adjust for the actual selling price
                                                    'i.e. kit price in order needs to reflect the percentage breakdown in IS
                                                    If CInt(strItemQty) > 1 Then
                                                        'CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered will be equal to Kit Item Qty 
                                                        'if there is only 1 of the item in the kit
                                                        'Otherwise the Item Quantity Order figure will always be greater than the Kit Qty as it is 
                                                        'the Kit item Quantity * by the number of kits in the order
                                                        If (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                            ' TJS/FA 19/04/12 divided by number of the item in kit
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate) / (decKitTotalPriceRate * (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty))), 2)
                                                        Else
                                                            ' TJS/FA 19/04/12 if there is only 1 of the item, then the unit price will be the percentage calculation for the individual item price.
                                                            'Total for the item is then multiplied by the Kit item quantity
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate) / decKitTotalPriceRate, 2)
                                                        End If
                                                    Else
                                                        'If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                        ' TJS/FA 19/04/12 percentage of kit value divided by the number of items
                                                        .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate / decKitTotalPriceRate, 2)

                                                    End If
                                                    ' TJS/FA 19/04/12 end
                                                End If
                                                If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then ' FA 24/10/11
                                                    decKitPriceSumRate = decKitPriceSumRate + .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) ' FA 24/10/11 TJS 01/05/14
                                                Else
                                                    decKitPriceSumRate = decKitPriceSumRate + .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate ' TJS 18/03/11
                                                End If
                                            Else
                                                ' TJS/FA 19/04/12
                                                'What is the remainder?
                                                decKitTotalRemaining = (decSalesPriceRate * CDec(strItemQty)) - decKitPriceSumRate
                                                ' TJS/FA 19/04/12
                                                If decKitTotalRemaining > 0 Then
                                                    If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                        ' yes, set price as remainder to prevent rounding errors and divide by quantity ordered
                                                        .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decKitTotalRemaining / .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered) - CDec(0.005), 2) ' FA Need to remove 0.005 in order to make sure saleitemprice always rounded down.
                                                    Else
                                                        ' yes, set price as remainder to prevent rounding errors
                                                        .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate - decKitPriceSumRate, 2) ' TJS 18/03/11
                                                    End If

                                                    If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                        decKitPriceSumRate = decKitPriceSumRate + (.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered)
                                                    Else
                                                        decKitPriceSumRate = decKitPriceSumRate + (.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate) ' TJS 18/03/11
                                                    End If

                                                    ' TJS/FA 19/04/12 The remaining figure should always be positive due to the substraction above
                                                    decKitTotalRemaining = RoundDecimalValue((decSalesPriceRate * CDec(strItemQty)) - decKitPriceSumRate, 2)
                                                Else
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = 0
                                                End If
                                                ' TJS/FA 19/04/12 start
                                                'Check that the last kit calculation is not returning a negative number. 
                                                'If it is, write a progress log with the price breakdown of the kit
                                                If .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate < 0 Then
                                                    For iKitRowLoop As Integer = 0 To iItemRowsAdded - 1
                                                        strNegKitPriceMsg = strNegKitPriceMsg & "Item" & iKitRowLoop & ": " & .CustomerSalesOrderDetailView(iKitRowLoop).SalesPriceRate & "; "
                                                    Next
                                                    m_ImportExportConfigFacade.WriteLogProgressRecord("Negative Sales Price value calculated in Kit - " & strNegKitPriceMsg)
                                                End If
                                                ' TJS/FA 19/04/12 end
                                            End If
                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPrice = RoundDecimalValue(.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 18/03/11
                                        End If

                                        ' FA 03/11/10 Modified to use the correct compute function for kits
                                        'Interprise code seems to call bothe the ComputeKit function and the Compute function as well
                                        If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_KIT Then ' TJS 02/04/14
                                            SalesOrderFacade.ComputeKitItemsSalesPrice(itemView(iRowLoop).Row) ' FA 03/11/10
                                        End If

                                        ' RCD 2019/08/13 Start SalesRepGroupCode
                                        .CustomerSalesOrderDetailView(iRowLoop).CommissionPercent = .CustomerSalesRepCommissionView(0).CommissionPercent
                                        ' RCD 2019/08/13 End SalesRepGroupCode

                                        SalesOrderFacade.Compute(itemView(iRowLoop).Row, TransactionType.Quote) ' TJS 13/01/10

                                        .CustomerSalesOrderDetailView(iRowLoop).IsConvert = False
                                        .CustomerSalesOrderDetailView(iRowLoop).IsConverted = False
                                        .CustomerSalesOrderDetailView(iRowLoop).IsPickingNotePrinted = False
                                        .CustomerSalesOrderDetailView(iRowLoop).IsPackingListPrinted = False
                                        .CustomerSalesOrderDetailView(iRowLoop).IsConfirmedPickedPacked = False

                                        ' is Item Drop Ship ?
                                        sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_IS_DROP_SHIP)
                                        If sTemp.ToUpper = "YES" Then
                                            ' yes, set flag
                                            .CustomerSalesOrderDetailView(iRowLoop).IsDropShip = True
                                            ' has a Drop Ship REference been supplied ?
                                            If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP_REF) <> "" Then
                                                ' yes, set it
                                                .CustomerSalesOrderDetailView(iRowLoop).DropShipReference = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP_REF)
                                            End If
                                        ElseIf sTemp.ToUpper <> "" And sTemp.ToUpper <> "NO" Then
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Drop Ship must be Yes, No or blank " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                        End If

                                        ' get Due Date offset config value
                                        sTemp = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DUE_DATE_OFFSET)
                                        If sTemp = "" Then
                                            sTemp = "1"
                                        End If
                                        .CustomerSalesOrderDetailView(iRowLoop).DueDate = .CustomerSalesOrderView(0).SalesOrderDate.AddDays(CDec(sTemp))
                                        .CustomerSalesOrderDetailView(iRowLoop).Pricing = CustomerDetailDataset.CustomerView(0).DefaultPrice
                                        ' now calculate Sales Tax (VAT)
                                        ReDim detailRows(taxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & .CustomerSalesOrderDetailView(iRowLoop).TaxCode & "'").Length - 1)
                                        index = 0
                                        'Get the detail rows for this tax code.
                                        For detailRowIndex As Integer = 0 To taxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
                                            If taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = .CustomerSalesOrderDetailView(iRowLoop).TaxCode.ToUpper Then
                                                detailRows(index) = taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                                                index += 1
                                            End If
                                        Next
                                        ' get tax values
                                        taxValue = taxFacade.CalculateItemTax(.CustomerSalesOrderDetailView(iRowLoop).TaxCode, .CustomerSalesOrderDetailView(iRowLoop).SalesPrice, _
                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate, .CustomerSalesOrderDetailView(iRowLoop).ItemCode, _
                                            .CustomerSalesOrderDetailView(iRowLoop).LineNum, .CustomerSalesOrderView(0).SalesOrderCode, detailRows, .TransactionItemTaxDetailView, _
                                            .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered, .CustomerSalesOrderDetailView(iRowLoop).ExtPrice, _
                                            .CustomerSalesOrderDetailView(iRowLoop).ExtPriceRate, .CustomerSalesOrderView(0).CurrencyCode, .CustomerSalesOrderView(0).ExchangeRate)
                                        ' are we accepting the source tax calculation ?
                                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ACCEPT_SOURCE_SALES_TAX_CALCULATION).ToUpper = "YES" Or _
                                            GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 26/10/11
                                            ' yes, get value
                                            strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_TAX)
                                            ' has tax value been supplied ?
                                            If strTempValue <> "" Then
                                                ' yes, must be numeric and not contain any commas
                                                If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then
                                                    ' must not be negative
                                                    If CDec(strTempValue) >= 0 Then
                                                        ' Unit price valid, use it
                                                        ' start of code added FA 17/10/11
                                                        If strItemKitPricing = "Item Price" Then
                                                            ' is this the last row of the kit ?
                                                            If iRowLoop < (iLineNum - 1) + (iItemRowsAdded - 1) Then
                                                                ' no, set tax as relevant fraction of total tax price
                                                                If decKitTotalPriceRate = 0 Then
                                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) / iItemRowsAdded, 2)
                                                                Else
                                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) * decSalesPriceRate / decKitTotalPriceRate, 2)
                                                                End If
                                                                decKitPriceTaxSumRate = decKitPriceTaxSumRate + .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate
                                                            Else
                                                                ' yes, set price as remainder to prevent rounding errors
                                                                .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) - decKitPriceTaxSumRate, 2)
                                                            End If
                                                        Else
                                                            ' end of code added FA 17/10/11
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = CDec(strTempValue)
                                                        End If
                                                        dblQuoteTaxRate += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate
                                                        .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount = RoundDecimalValue(.CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate / .CustomerSalesOrderView(0).ExchangeRate)
                                                        dblQuoteTax += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount
                                                        ' find relevant tax detail record
                                                        bTaxRecordFound = False ' TJS 02/12/11
                                                        For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                            If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerSalesOrderDetailView(iRowLoop).SalesOrderCode And _
                                                                .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerSalesOrderDetailView(iRowLoop).LineNum And _
                                                                .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerSalesOrderDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                                bTaxRecordFound = True ' TJS 02/12/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).TaxAmountRate = .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate ' TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).TaxAmount = .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount ' TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = True ' TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).IsTAOverridden = True ' TJS 24/02/12
                                                            End If
                                                        Next
                                                        If Not bTaxRecordFound Then ' TJS 02/12/11
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Cannot apply Sales Tax to an Item with no active Tax Code - " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 02/12/11
                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Tax Value must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Tax Value must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                                                End If
                                            Else
                                                ' no, use values from tax facade
                                                .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount = taxValue.taxAmount
                                                dblQuoteTax += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount
                                                .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = taxValue.taxAmountRate
                                                dblQuoteTaxRate += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate
                                                For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                    If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerSalesOrderDetailView(iRowLoop).SalesOrderCode And _
                                                        .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerSalesOrderDetailView(iRowLoop).LineNum And _
                                                        .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerSalesOrderDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                        .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = False ' TJS 18/03/11
                                                    End If
                                                Next
                                            End If
                                        Else
                                            ' no, use values from tax facade
                                            .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount = taxValue.taxAmount
                                            dblQuoteTax += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount
                                            .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = taxValue.taxAmountRate
                                            dblQuoteTaxRate += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate
                                            For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerSalesOrderDetailView(iRowLoop).SalesOrderCode And _
                                                    .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerSalesOrderDetailView(iRowLoop).LineNum And _
                                                    .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerSalesOrderDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                    .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = False ' TJS 18/03/11
                                                End If
                                            Next
                                            strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_TAX)
                                            ' has sales tax value been supplied ?
                                            If strTempValue <> "" Then
                                                ' yes, must be numeric
                                                If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then
                                                    ' must not be negative
                                                    If CDec(strTempValue) >= 0 Then
                                                        ' is value same as IS calculation (ignore roundings of 0.01 or less) ?
                                                        If CDec(strTempValue) > .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate + 0.01 Or CDec(strTempValue) < .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate - 0.01 Then
                                                            ' no, 
                                                            If strWarningMessage <> "" Then
                                                                strWarningMessage = strWarningMessage & vbCrLf
                                                            End If
                                                            strWarningMessage = strWarningMessage & "Sales Tax corrected for " & strItemID & ", XML file contained " & strTempValue & ", Tax Facade calculated " & .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate ' TJS 24/08/12
                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Tax Value must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 27/02/10
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Tax Value must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 27/02/10
                                                End If
                                            End If
                                        End If

                                        ' Check for any CustomerSalesOrderDetail table Custom Fields
                                        XMLCustomFields = XMLItemTemp.XPathSelectElements(GENERIC_XML_ORDER_INVOICE_ITEM_CUSTOM_FIELDS) ' TJS 02/12/11
                                        If XMLCustomFields IsNot Nothing Then
                                            For Each XMLCustomField In XMLCustomFields
                                                Try
                                                    XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                                                    ' has field name been defined ?
                                                    If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                                        ' does it exist ?
                                                        bCustomFieldExists = False
                                                        For iColumnLoop = 0 To .CustomerSalesOrderDetailView.Columns.Count - 1
                                                            If .CustomerSalesOrderDetailView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then
                                                                bCustomFieldExists = True
                                                                Exit For
                                                            End If
                                                        Next
                                                        If bCustomFieldExists Then
                                                            .CustomerSalesOrderDetailView(iRowLoop)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerSalesOrderDetailView", _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Field Name attribute not provided for Item Custom Field", _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                                    End If

                                                Catch ex As Exception
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                                End Try
                                            Next
                                        End If
                                        ' TJS/FA 19/04/12 Note for future  Add non stock correction figure here
                                        ' and reset the correction flag
                                        If decKitTotalRemaining <> 0 Then
                                            m_ImportExportConfigFacade.WriteLogProgressRecord("Rounding differential in Kit calculation - " & decKitTotalRemaining)
                                        End If

                                    Next
                                    iLineNum = iLineNum + iItemRowsAdded ' TJS 18/03/11

                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "015", strItemID & " not found", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)

                                End If

                            Catch ex As Exception
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Inventory Item could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                     m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 18/04/11

                            End Try
                        Next
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "No Quote Items found", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                    End If

                    ' RCD 2019/08/13 Start SalesRepGroupCode
                    Dim commissionTotal As Decimal = 0
                    Dim commissionTotalRate As Decimal = 0
                    For counter As Integer = 0 To .CustomerSalesOrderDetailView.Rows.Count - 1
                        commissionTotal += .CustomerSalesOrderDetailView(counter).CommissionAmount
                        commissionTotalRate += .CustomerSalesOrderDetailView(counter).CommissionAmountRate
                    Next
                    .CustomerSalesRepCommissionView(0).CommissionPercent = 100
                    .CustomerSalesRepCommissionView(0).CommissionTotal = commissionTotal
                    .CustomerSalesRepCommissionView(0).CommissionTotalRate = commissionTotalRate
                    ' RCD 2019/08/13 End SalesRepGroupCode

                    .CustomerSalesOrderView(0).SubTotal = dblQuoteTotal
                    .CustomerSalesOrderView(0).SubTotalRate = dblQuoteTotalRate

                    strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_TOTALS & "/Shipping")
                    ' has shipping charge been supplied ?
                    If strTempValue <> "" Then
                        ' yes, must be numeric and not contain any commas
                        If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then
                            ' must not be negative
                            If CDec(strTempValue) >= 0 Then
                                ' shipping charge valid, overwrite customer default
                                ' do prices include tax >
                                If GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                    ' yes, get price before tax
                                    .CustomerSalesOrderView(0).FreightRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, _
                                        .TransactionItemTaxDetailView, TRANSACTION_TAX_ITEM_FREIGHT, 0, 1, CDec(strTempValue), _
                                        .CustomerSalesOrderView(0).FreightTaxCode, .CustomerSalesOrderView(0).CurrencyCode, _
                                        .CustomerSalesOrderView(0).ExchangeRate, .CustomerSalesOrderView(0).SalesOrderCode, True)
                                Else
                                    .CustomerSalesOrderView(0).FreightRate = CDec(strTempValue)
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Quote Shipping charge must not be negative", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Quote Shipping charge must be numeric", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                        End If
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Quote Shipping charge is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                    End If
                    .CustomerSalesOrderView(0).Freight = RoundDecimalValue(.CustomerSalesOrderView(0).FreightRate / .CustomerSalesOrderView(0).ExchangeRate)
                    .CustomerSalesOrderView(0).FreightTaxCode = Me.m_ImportExportDataset.CustomerShipTo(0).FreightTax ' TJS 02/12/11

                    ' now calculate Sales Tax on freight (VAT)
                    ReDim detailRows(taxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & .CustomerSalesOrderView(0).FreightTaxCode & "'").Length - 1)
                    index = 0
                    ' Get the detail rows for freight tax code.
                    For detailRowIndex As Integer = 0 To taxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
                        If taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = .CustomerSalesOrderView(0).FreightTaxCode.ToUpper Then
                            detailRows(index) = taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                            index += 1
                        End If
                    Next
                    dblFreight = .CustomerSalesOrderView(0).Freight
                    dblFreightRate = .CustomerSalesOrderView(0).FreightRate
                    ' get tax values
                    taxValue = taxFacade.CalculateTransactionTax(.CustomerSalesOrderView(0).FreightTaxCode, dblFreight, _
                        dblFreightRate, TRANSACTION_TAX_ITEM_FREIGHT, .CustomerSalesOrderView(0).SalesOrderCode, _
                        detailRows, .TransactionItemTaxDetailView, .CustomerSalesOrderView(0).CurrencyCode, _
                        .CustomerSalesOrderView(0).ExchangeRate)
                    ' are we accepting the source tax calculation ?
                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ACCEPT_SOURCE_SALES_TAX_CALCULATION).ToUpper = "YES" Or _
                        GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 26/10/11
                        ' yes, get total tax value
                        strTempValue = GetXMLElementText(XMLGenericQuote, GENERIC_XML_QUOTE_TOTALS & "/Tax")
                        ' has tax value been supplied ?
                        If strTempValue <> "" Then
                            ' yes, must be numeric and not contain any commas
                            If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then
                                ' must not be negative
                                If CDec(strTempValue) >= 0 Then
                                    ' total tax value valid, use it
                                    .CustomerSalesOrderView(0).FreightTaxRate = CDec(strTempValue) - dblQuoteTaxRate
                                    .TransactionTaxDetailView(0).TaxAmountRate = .CustomerSalesOrderView(0).FreightTaxRate
                                    dblQuoteTaxRate += .CustomerSalesOrderView(0).FreightTaxRate
                                    .CustomerSalesOrderView(0).FreightTax = RoundDecimalValue(.CustomerSalesOrderView(0).FreightTaxRate / .CustomerSalesOrderView(0).ExchangeRate)
                                    .TransactionTaxDetailView(0).TaxAmount = .CustomerSalesOrderView(0).FreightTax
                                    dblQuoteTax += .CustomerSalesOrderView(0).FreightTax
                                    .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = True
                                    .TransactionTaxDetailView(0).IsTAOverridden = True ' TJS 24/02/12
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Quote Total Tax Value must not be negative", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 27/02/10
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Quote Total Tax Value must be numeric", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString) ' TJS 27/02/10
                            End If
                        Else
                            ' no, use values from tax facade
                            .CustomerSalesOrderView(0).FreightTax = taxValue.taxAmount
                            dblQuoteTax += .CustomerSalesOrderView(0).FreightTax
                            .CustomerSalesOrderView(0).FreightTaxRate = taxValue.taxAmountRate
                            dblQuoteTaxRate += .CustomerSalesOrderView(0).FreightTaxRate
                            .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = False
                        End If
                    Else
                        ' no, use values from tax facade
                        .CustomerSalesOrderView(0).FreightTax = taxValue.taxAmount
                        dblQuoteTax = dblQuoteTax + .CustomerSalesOrderView(0).FreightTax
                        .CustomerSalesOrderView(0).FreightTaxRate = taxValue.taxAmountRate
                        dblQuoteTaxRate = dblQuoteTaxRate + .CustomerSalesOrderView(0).FreightTaxRate
                        .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = False
                    End If

                    SalesOrderFacade.ComputeTotals()

                    dblCouponDiscount = 0

                    ' save quote - did it save ok ?
                    strSalesOrderValidationErrorMessage = ""
                    SalesOrderFacade.IncrementSaveCounterID() ' TJS 02/04/14
                    bSalesQuoteSaved = SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.Quote)), TransactionType.Quote, m_BaseProductName & " Create Quote", False) ' TJS 13/01/10
                    ' did it save and do we have a discount to apply ?
                    If bSalesQuoteSaved And dblCouponDiscount > 0 Then
                        ' yes, create discount coupon
                        strTempValue = CreateDiscountCoupon(dblCouponDiscount, .CustomerSalesOrderView(0).SalesOrderCode, CustomerCode, .CustomerSalesOrderView(0).CurrencyCode, .CustomerSalesOrderView(0).ExchangeRate, XMLGenericQuote, xmlResponseDetailNode)
                        ' was it created successfully ?
                        If strTempValue <> "" Then
                            ' yes,  use it
                            Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerCouponView.TableName, _
                                "ReadCustomerCouponView_DEV000221", AT_COUPON_CODE, strTempValue, AT_CUSTOMER_CODE, CustomerCode, _
                                Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/114
                            If Me.m_ImportExportDataset.CustomerCouponView.Count > 0 Then
                                ' coupon valid for customer, check date range is valid
                                SalesOrderFacade.AssignCoupon(Me.m_ImportExportDataset.CustomerCouponView(0), .CustomerSalesOrderView(0))
                                SalesOrderFacade.ComputeTotals()
                                strSalesOrderValidationErrorMessage = ""
                                bSalesQuoteSaved = SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.Quote)), TransactionType.Quote, m_BaseProductName & " Create Quote", False) ' TJS 13/01/10

                            Else
                                SalesOrderFacade.VoidOrder()
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "025", "Sales Coupon not valid or not valid for Customer", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                            End If
                        Else
                            SalesOrderFacade.VoidOrder()
                            Return xmlResponseDetailNode
                        End If
                    End If

                    If bSalesQuoteSaved Then
                        ' yes, 
                        ' no payment details provided 
                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_AUTHORISE_CARD_ON_IMPORT).ToUpper = "YES" Then
                            If strWarningMessage <> "" Then
                                strWarningMessage += vbCrLf & "Also, Card Authorisation enabled, but no Payment Details provided for card authorisation or Payment Method is not Credit Card"
                            Else
                                strWarningMessage = "Card Authorisation enabled, but no Payment Details provided  for card authorisation or Payment Method is not Credit Card"
                            End If
                        End If
                        xmlResponseDetailNode = New XElement("ImportResponse")
                        xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                        xmlResponseDetailNode.Add(New XElement("QuoteNumber", .CustomerSalesOrderView(0).SalesOrderCode))
                        xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode))
                        If strWarningMessage <> "" Then
                            xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage))
                        End If
                        Return xmlResponseDetailNode


                    Else
                        For iTableLoop = 0 To SalesOrderFacade.RelatedTables(TransactionType.Quote).Length - 1 ' TJS 13/01/10
                            For iRowLoop = 0 To .Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Rows.Count - 1 ' TJS 13/01/10
                                For iColumnLoop = 0 To .Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Columns.Count - 1 ' TJS 13/01/10
                                    If .Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 13/01/10
                                        strSalesOrderValidationErrorMessage = strSalesOrderValidationErrorMessage & .Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).TableName & _
                                            "." & .Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Columns(iColumnLoop).ColumnName & ", " & _
                                            .Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 13/01/10
                                    End If
                                Next
                            Next
                        Next

                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", "Failed to save Quote - " & strSalesOrderValidationErrorMessage, _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", XMLGenericQuote.ToString)
                    End If
                End With
                SalesOrderFacade.Dispose()
                SalesOrderDataset.Dispose()
                CustomerDetailFacade.Dispose()
                taxSchemeFacade.Dispose()
                taxFacade.Dispose()
                taxSchemeDataset.Dispose()

            Else
                xmlResponseDetailNode = New XElement("ImportResponse")
                xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                xmlResponseDetailNode.Add(New XElement("QuoteNumber", Me.m_ImportExportDataset.CustomerSalesOrder(0).SalesOrderCode))
                xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode))
                If strWarningMessage <> "" Then
                    xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage))
                End If
                Return xmlResponseDetailNode
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateQuote", ex, XMLGenericQuote.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try
    End Function

    Private Sub SalesQuoteFacade_InvalidatedOnSaving(ByVal sender As Object, ByVal errorMessage As String) Handles SalesQuoteFacade.InvalidatedOnSaving ' TJS 25/04/09
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 30/12/09 | TJS             | 2010.0.00 | Function added
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        strSalesQuoteValidationErrorMessage = errorMessage & vbCrLf

    End Sub

    Private Sub SalesQuoteColumnChanged(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 30/12/09 | TJS             | 2010.0.00 | Function added
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        If e.Row.Table Is SalesOrderDataset.CustomerSalesOrderView Then
            If e.Column Is SalesOrderDataset.CustomerSalesOrderView.SalesOrderCodeColumn Then
                e.Row(SalesOrderDataset.CustomerSalesOrderView.SourceSalesOrderCodeColumn.ColumnName) = e.ProposedValue
                e.Row(SalesOrderDataset.CustomerSalesOrderView.RootDocumentCodeColumn.ColumnName) = e.ProposedValue
            End If
        End If

    End Sub

    Private Function SendQuoteCreditHoldWarning(ByVal strMsgParam As String) As Integer
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 30/12/09 | TJS             | 2010.0.00 | Function added
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        bCustomerCreditHoldOrOverLimit = True
        strCreditMessage = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("INF0142", New String() {strMsgParam})

    End Function

    Private Function SendQuoteCreditLimitWarning(ByVal strMsgParam As String) As Integer
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 30/12/09 | TJS             | 2010.0.00 | Function added
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        bCustomerCreditHoldOrOverLimit = True
        strCreditMessage = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("QUE0042", New String() {strMsgParam})

    End Function
#End Region

#Region " CreateOrder "
    Private WithEvents SalesOrderFacade As Interprise.Facade.Customer.SalesOrderFacade ' TJS 21/04/09
    Private strSalesOrderValidationErrorMessage As String ' TJS 21/04/09

    Private Function CreateOrder(ByVal XMLGenericOrder As XDocument, ByVal CustomerCode As String, ByVal SourceCode As String) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 24/01/09 | TJs             | 2009.1.00 | Added initialisation of SalesOrderFacade.TransactionType
        '                                        | and trim any leading or trailing spaces from Source/Customer Order references
        ' 29/01/09 | TJS             | 2009.1.03 | Modified to check an existing order record is for the same customer
        '                                        | and changed return XML structure to include warning message option
        ' 03/02/09 | TJS             | 2009.1.04 | Added SalesOrderDataset and ContactCode parameters to AuthoriseCard
        ' 06/02/09 | TJS             | 2009.1.05 | modified to cater for AT_IS_VOIDED parameter on ReadCustomerSalesOrderImportExport_DEV000221
        '                                        | and to use new field MerchantOrderID_DEV000221 instead of SalesRepOrderCode 
        '                                        | which is actually constrained to be SalesRepGroupCode
        ' 08/02/09 | TJS             | 2009.1.06 | Modified to set address details in case different from customer record
        '                                        | and to check for a Source Order Ref before looking for a matching order
        ' 10/02/09 | TJS             | 2009.1.07 | Modified to add an alternative Item Identification element of the ItemName
        ' 20/02/09 | TJS             | 2009.1.08 | Renamed SOURCE_CONFIG_DEFAULT_CREDIT_CARD_PAYMENT_TERM to reflect underlying DB function
        '                                        | and corrected vbcrlf to vbcr when adding company name to address
        '                                        | Also modified to return success with a warning message if order saved, but card payment failed
        ' 09/03/09 | TJS             | 2009.1.09 | Modified to cater for Sales Coupons and use 
        '                                        | BuildXMLErrorResponseNodeAndEmail for source error processing
        ' 17/03/09 | TJS             | 2009.1.10 | Modified to cater for SOURCE_CONFIG_SET_DISABLE_FREIGHT_CALCULATION setting,
        '                                        | for GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP element, for 
        '                                        | KSI MultiShip module and to set Order Currency
        ' 03/04/09 | TJS             | 2009.2.00 | Modified to make name and address optional on imports with an
        '                                        | existing customer account and added support for Custom DB fields
        ' 08/04/09 | TJS             | 2009.2.02 | Trimmed spaces from Customer name elements
        ' 21/04/09 | TJS             | 2009.2.03 | Modified to use Facade Related tables function when creating failed to save error message,
        '                                        | to detect validation error messages on save and to check that Custom Fields actually exist
        ' 25/04/09 | TJS             | 2009.2.04 | Corrected variable used to build failure to save error message, added currency validation and exchange rate settings
        ' 07/05/09 | TJS             | 2009.2.05 | Removed .trim as GetElementText now preforms this
        ' 11/05/09 | TJS             | 2009.2.06 | Modified to cater for SOURCE_CONFIG_IGNORE_VOIDED_ORDERS_AND_INVOICES 
        '                                        | and blank GENERIC_XML_ORDER_CUSTOMER_ORDER_REF 
        ' 17/05/09 | TJS             | 2009.2.07 | Modified to use correct stored procedure when checking for already imported orders
        '                                        | to use the Item Tax Code when calculating Sales Tax (VAT) 
        ' 26/05/09 | TJS             | 2009.2.08 | Modified to use cater for AcceptSourceSalesTaxCalculation, corrected handling of 
        '                                        | currencies other than base, modified to use IS functions to calculate cost amd margin
        ' 29/05/09 | TJS             | 2009.2.09 | Modified to detect commas in numeric values and added checks for XML load errors
        ' 08/06/09 | TJS             | 2009.2.10 | Modified to cater for prices including tax, discount coupons and Item UMC
        ' 11/06/09 | TJS             | 2009.2.12 | Corrected processing of Freight tax when AcceptSourceSalesTaxCalculation is set
        ' 18/06/09 | TJS             | 2009.2.14 | Modified to cater for SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY config option when applying names to order
        ' 07/07/09 | TJS             | 2009.3.00 | Modified to cater for pre-authorised and full processed credit card transactions
        '                                        | Also set discount to 0 when item price is in XML file
        ' 14/07/09 | TJS             | 2009.3.01 | Modified to set custom field flag on TransactionTaxDetailView and 
        '                                        | TransactionItemTaxDetailView when source tax values are being used
        ' 14/08/09 | TJS             | 2009.3.03 | Modified to cater for Non-Stock, Kit and Service items not having a WarehouseCode 
        '                                        | and added check for valid country
        ' 06/10/09 | TJS             | 2009.3.07 | Modified to abort order processing if customer on Credit Hold or over Credit Limit
        ' 16/10/09 | TJS             | 2009.3.08 | Modified to trap failure to create CustomerDetailFacade as this can be due to licence issues
        ' 30/12/09 | TJS             | 2010.0.00 | Added support for source payments
        ' 13/01/10 | TJS             | 2010.0.04 | Modified to cater for SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE
        ' 27/02/10 | TJS             | 2010.0.06 | Corrected procuct and facade name in log/error messages
        ' 19/08/10 | TJs             | 2010.1.00 | Modified to cater for GENERIC_XML_ORDER_SOURCE_MERCHANT_ID when checking for existing records
        '                                        | and Kit Items with fixed compositions
        ' 22/09/10 | TJS             | 2010.1.01 | Modified to set SalesRepOrderCode and load ItemKitDetails rows
        ' 27/09/10 | TJS             | 2010.1.02 | Modified to set record type when checking for already imported orders and set Workflow stage 
        '                                        | to Print Pick Note if set to Approve Credit after successful payment because IS 5.5 
        '                                        | now does this if credit limit is zero
        ' 18/10/10 | FA              | 2010.1.06 | Modified code to use the correct compute function for kit sales price
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to prevent error when item details rows don't have matching 
        '                                        | TransactionItemTaxDetail(rows), corrected setting of ShipToCountry
        '                                        | and modified to cater for Item Pricing Kits
        ' 04/04/11 | TJS             | 2011.0.07 | Modified to handle Item Pricing kit where item prices are zero
        ' 05/04/11 | TJS             | 2011.0.08 | Modified to cater for IS 4.8 build using conditional compilation
        ' 18/04/11 | TJS             | 2011.0.11 | Corrected XMLTemp to XMLItemTemp for item error message
        ' 17/10/11 | TJS/            | 2011.1.07 | Corrected sales tax calculation for kits with more than one item.  Process was 
        '                                        | multiplying the tax amount by the amount of items, resulting in negative tax values
        '                                        | on the invoices.
        ' 24/10/11 | FA              | 2011.1.08 | Modified Kit item calculation to take into account quantity of items specified for each 
        ' 26/10/11 | TJS             | 2011.1.xx | Corrected setting of source tax values and codes
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2, to handle items with no Unit of Measure record, 
        '                                        | to detect no valid tax rate when applying tax from source, to cater for multiple payments and for IS 6
        ' 24/02/12 | TJS             | 2011.2.08 | Modified to set IsTAOverridden on tax records where value set from source to prevent recalculation when Order converted to Invoice
        ' 19/04/12 | TJS/FA          | 2012.1.01 | Implemented changes from IS 5.6 version 2011.1.16, 2011.1.17 (19/03/12) and 2011.1.18 (09/04/12)
        ' 10/06/12 | TJS             | 2012.1.05 | Modified to record SourceItemCommission and SourceItemFulfillmentCharge
        ' 08/07/12 | TJS             | 2012.1.09 | Modified to cater for UseShipToClassTemplate
        ' 20/07/12 | TJS             | 2012.1.10 | Corrected selection of Warehouse code from ShipToTemplate when UseShipToClassTemplate is set
        ' 24/08/12 | TJS             | 2012.1.14 | Modified for Connected Business 7
        ' 18/01/13 | TJS             | 2012.1.17 | Modified to cater for AllocateAndReserveStock and correction to credit card processing
        ' 19/09/13 | TJS             | 2013.3.00 | Modified to cater for ImportMissingItemsAsNonStock
        ' 29/01/14 | TJS             | 2013.4.07 | Modified to prevent error if RecordSourcePayment doesn't return anything
        ' 13/02/14 | TJS             | 2014.0.00 | Modified references for CB 14
        ' 02/04/14 | TJs             | 2014.0.01 | Modified to cater for Item Bundles and some additional CB fields
        '                                        | Corrected error when order has quantity > 1 for item priced kits
        ' 23/05/14 | TJS             | 2014.0.02 | Modified to cater for CB 14.0.01 replacing IsBase field with DefaultSelling field
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade
        Dim XMLItemTemp As XDocument, XMLTemp As XDocument, XMLOrderItems As System.Collections.Generic.IEnumerable(Of XElement) ' TJS 18/03/11
        Dim XMLPaymentDetails As System.Collections.Generic.IEnumerable(Of XElement), XMLCustomFields As System.Collections.Generic.IEnumerable(Of XElement) ' TJS 03/04/09 TJS 02/12/11
        Dim XMLCustomField As XElement, XMLOrderItem As XElement, xmlResponseDetailNode As XElement ' TJS 03/04/09
        Dim xmlShippingDetails As XElement, commandSetRead As String()() ' TJS 08/02/09 TJS 19/08/10
        Dim rowGroupMethodDetail As Lerryn.Framework.ImportExport.DatasetGateway.ImportExportDatasetGateway.SystemShippingMethodGroupDetailRow ' TJS 17/03/09
        Dim detailRows() As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway.SystemTaxSchemeDetailViewRow
        Dim taxFacade As Interprise.Facade.Base.TaxFacade, taxSchemeFacade As Interprise.Facade.Base.TaxSchemeFacade
        Dim taxSchemeDataset As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway
        Dim taxValue As Interprise.Facade.Base.TaxFacade.TaxValue, itemView As DataView
        Dim ItemKitDataset As Interprise.Framework.Base.DatasetGateway.ItemKitDatasetGateway ' TJS 19/08/10
        Dim ItemKitFacade As Interprise.Facade.Customer.CustomerItemKitFacade, itemKitDetailRows As DataRow() ' TJS 19/08/10 TJS 22/09/10
        Dim ItemBundleDataset As Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway ' TJS 02/04/14
        Dim ItemBundleFacade As Interprise.Facade.Customer.ItemBundleFacade ' TJS 02/04/14
        Dim ItemBundleRow As Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway.InventoryBundleConfiguratorViewRow ' TJS 02/04/14
        Dim shiptoCode As String, contactCode As String, contactFullName As String
        Dim index As Integer, iLineNum As Integer, dblOrderTotal As Decimal, dblOrderTotalRate As Decimal ' TJS 26/05/09
        Dim dblOrderTax As Decimal, dblOrderTaxRate As Decimal, dblFreight As Decimal, dblFreightRate As Decimal
        Dim iTableLoop As Integer, iColumnLoop As Integer, iRowLoop As Integer, sTemp As String, strErrMsg As String ' TJS 21/04/09
        Dim bOrderExists As Boolean, strWarningMessage As String, strTempValue As String, strItemQty As String ' TJS 29/01/09 TJS 08/02/09 TJS 18/03/11
        Dim strItemPrice As String, strBillingCustomerName As String, strBillingCompanyName As String ' TJS 08/02/09 TJS 18/03/11
        Dim strShippingCustomerName As String, strShippingCompanyName As String, strItemID As String ' TJS 08/02/09 TJS 09/03/09
        Dim strShippingMethod As String, strShippingMethodGroup As String, bCouponValid As Boolean ' TJS 09/03/09 TJS 17/03/09
        Dim strShippingDate As String = String.Empty ' RCD 08/09/2019
        Dim strLatestShippingDate As String = String.Empty ' RCD 08/12/2019
        Dim strNotes As String = String.Empty ' RCD 08/13/2019
        Dim strSalesAgency As String = String.Empty ' RCD 08/13/2019
        Dim strOrderTaker As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerName As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerPhone As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerEmail As String = String.Empty ' RCD 08/13/2019
        Dim strCreditCardToken As String = String.Empty ' RCD 08/13/2019
        Dim strCustomerComments As String = String.Empty ' RCD 08/15/2019
        Dim bCustomFieldExists As Boolean, bSalesOrderSaved As Boolean, dblCouponDiscount As Decimal ' TJS 21/04/09 TJS 08/06/09
        Dim strWarehouseCode As String, strItemKitPricing As String, iItemPtr As Integer, iBundlePtr As Integer ' TJS 08/06/09 TJS 19/08/10 TJS 02/04/14
        Dim iItemRowsAdded As Integer, iTaxLoop As Integer, iBundleRow As Integer, decSalesPriceRate As Decimal ' TJS 18/03/11 TJS 02/04/14
        Dim decKitPriceSumRate As Decimal, decKitTotalPriceRate As Decimal, bTaxRecordFound As Boolean  ' TJS 18/03/11 TJS 02/12/11
        Dim decKitPriceTaxSumRate As Decimal, decBundleTotalPriceRate As Decimal, decBundlePriceSumRate As Decimal ' FA 17/10/11 TJS 02/04/14
        Dim strNegKitPriceMsg As String = "", decKitTotalRemaining As Decimal = 0 '  TJS/FA 19/04/12
        Dim decActualKitTotal As Decimal = 0, decKitDifferential As Decimal = 0 '  TJS/FA 19/04/12
        Dim bSkipUMCAandWarehouseCheck As Boolean ' TJS 19/09/13

        Try
            bCustomerCreditHoldOrOverLimit = False ' TJS 06/10/09
            strCreditMessage = "" ' TJS 06/10/09

#If DEBUG Then
        System.Diagnostics.Debugger.Launch()
#End If

            ' first check if order already entered but source hasn't received acknowledgement
            Me.m_ImportExportDataset.EnforceConstraints = False
            strWarningMessage = "" ' TJS 29/01/09
            ' is there a Source Order Ref ?
            If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF) <> "" Then
                ' yes, check if order already imported
                If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_IGNORE_VOIDED_ORDERS_AND_INVOICES).ToUpper = "YES" Then ' TJS 11/05/09
                    ' is there a Store Merchant ID ?
                    If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_MERCHANT_ID) <> "" Then ' TJS 19/08/10
                        ' yes, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_MERCHANT_ID), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Sales Order"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_MERCHANT_ID), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Sales Order"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    Else
                        ' no, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Sales Order"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Sales Order"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    End If
                Else
                    ' is there a Store Merchant ID ?
                    If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_MERCHANT_ID) <> "" Then ' TJS 19/08/10
                        ' yes, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_MERCHANT_ID), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Sales Order"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_MERCHANT_ID), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Sales Order"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    Else
                        ' no, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Sales Order"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerSalesOrder.TableName, _
                                "ReadCustomerSalesOrderImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Sales Order"}} ' TJS 19/08/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    End If
                End If
                Me.LoadDataSet(commandSetRead, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 19/08/10
                If Me.m_ImportExportDataset.CustomerSalesOrder.Count > 0 Then ' TJS 29/01/09
                    If Me.m_ImportExportDataset.CustomerSalesOrder(0).BillToCode = CustomerCode Then ' TJS 29/01/09 TJS 20/02/09 TJS 11/05/09
                        bOrderExists = True ' TJS 29/01/09
                        strWarningMessage = "Order with Source Ref " & GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF) & " already imported" ' TJS 29/01/09
                    Else
                        bOrderExists = True ' TJS 29/01/09 TJS 11/05/09
                        strWarningMessage = "Order with Source Ref " & GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF) & " already exists, but for CustomerCode " & Me.m_ImportExportDataset.CustomerSalesOrder(0).BillToCode & ", not " & CustomerCode ' TJS 29/01/09
                    End If
                Else
                    bOrderExists = False ' TJS 29/01/09
                End If
            Else
                ' no source reference provided, always create new order
                bOrderExists = False ' TJS 08/02/09
            End If
            ' did we find a matching order
            If Not bOrderExists Then ' TJS 29/01/09
                ' no, create customer dataset and facade
                Try ' TJS 16/10/09
                    CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
                    CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset)

                Catch ex As Exception ' TJS 16/10/09
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "090", "Cannot create CustomerDetailFacade - suspect Interprise Solutions Licence error or User count exceeded", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 16/10/09
                End Try

                taxFacade = New Interprise.Facade.Base.TaxFacade
                taxSchemeDataset = New Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway
                taxSchemeFacade = New Interprise.Facade.Base.TaxSchemeFacade(taxSchemeDataset, Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerSalesTaxScheme)

                CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
                    "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific)

                shiptoCode = CustomerDetailDataset.CustomerView(0).DefaultShipToCode
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerShipTo.TableName, _
                    "ReadCustomerShipTo", AT_CUSTOMER_CODE, CustomerCode, AT_SHIP_TO_CODE, shiptoCode}}, _
                    Interprise.Framework.Base.Shared.ClearType.Specific)

                If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactNull Then
                    contactCode = CustomerDetailDataset.CustomerView(0).DefaultContact
                Else
                    contactCode = ""
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactFullNameNull Then
                    contactFullName = CustomerDetailDataset.CustomerView(0).DefaultContactFullName
                Else
                    contactFullName = ""
                End If

                ' create Sales Order dataset 
                SalesOrderDataset = New Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway
                ' add handler so that we can set mandatory default values e.g. RootDocumentCode
                AddHandler SalesOrderDataset.CustomerSalesOrderView.ColumnChanged, AddressOf SalesOrderColumnChanged
                ' create Sales Order Facade
                SalesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(SalesOrderDataset)
                SalesOrderFacade.TransactionType = TransactionType.SalesOrder ' TJS 24/01/09

                ' create sales order core using customer details
                strErrMsg = ""
                SalesOrderFacade.AddSalesOrder(TransactionType.SalesOrder, Me.m_ImportExportDataset.CustomerShipTo(0), contactCode, contactFullName, AddressOf SendOrderCreditHoldWarning, strErrMsg)
                ' did it work ?
                If strErrMsg = "ERR0018" Then
                    ' no
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", Interprise.Facade.Base.SimpleFacade.Instance.GetMessage(strErrMsg, New String() {"Customer and/or Ship To", "customer Ship To"}), _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 06/10/09
                End If
                ' did we get a Credit Hold or Credit Limit warning which prevented order being created ?
                If bCustomerCreditHoldOrOverLimit Then ' TJS 06/10/09
                    ' yes, abort order
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", strCreditMessage, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 06/10/09
                End If

                sTemp = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_DATE)
                If sTemp = "" Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "No Order Date found in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                ElseIf Not m_ImportExportConfigFacade.ValidateXMLDate(sTemp) Then ' TJS 29/01/09
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Order Date format invalid", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                End If
                With SalesOrderDataset
                    .CustomerSalesOrderView(0).SalesOrderDate = m_ImportExportConfigFacade.ConvertXMLDate(sTemp)
                    .CustomerSalesOrderView(0).SourceCode = SourceCode
                    .CustomerSalesOrderView(0).POCode = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF)
                    If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_REF) <> GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF) And _
                        GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF) <> "" Then ' TJS 22/09/10
                        .CustomerSalesOrderView(0).SalesRepOrderCode = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF) ' TJS 22/09/10
                    End If
                    .CustomerSalesOrderView(0).WebSiteCode = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_WEBSITE_REF)
                    .CustomerSalesOrderView(0)("StoreMerchantID_DEV000221") = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_MERCHANT_ID)
                    .CustomerSalesOrderView(0)("MerchantOrderID_DEV000221") = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SOURCE_ORDER_REF)

                    ' has a Currency Code been defined ?
                    sTemp = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CURRENCY) ' TJS 25/04/09
                    If sTemp <> "" Then ' TJS 25/04/09
                        ' yes, check it matches an Active Currency Code in IS
                        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.SystemCurrency.TableName, "ReadSystemCurrency", _
                            Interprise.Framework.Inventory.Shared.Const.AT_CURRENCY_CODE, sTemp}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 25/04/09
                        If Me.m_ImportExportDataset.SystemCurrency.Count = 0 Then ' TJS 25/04/09 TJS 13/02/14
                            ' no matching currency found
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Invalid Currency Code " & sTemp & " in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 25/04/09 TJS 27/02/10
                        ElseIf Not Me.m_ImportExportDataset.SystemCurrency(0).IsActive Then ' TJS 25/04/09
                            ' Currency found but is not marked as Active
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Currency Code " & sTemp & " is not Active.", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 25/04/09 TJS 27/02/10 TJS 24/08/12
                        Else
                            ' yes, apply it
                            SalesOrderFacade.AssignCurrency(Me.m_ImportExportDataset.SystemCurrency(0), TransactionType.SalesOrder) ' TJS 25/04/09
                        End If
                    End If

                    ' start of code added TJS 03/04/09
                    ' Check for any CustomerSalesOrder table Custom Fields
                    XMLCustomFields = XMLGenericOrder.XPathSelectElements(GENERIC_XML_ORDER_CUSTOM_FIELDS)
                    If XMLCustomFields IsNot Nothing Then
                        For Each XMLCustomField In XMLCustomFields
                            Try
                                XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                                ' has field name been defined ?
                                If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                    ' does it exist ?
                                    bCustomFieldExists = False ' TJS 21/04/09
                                    For iColumnLoop = 0 To .CustomerSalesOrderView.Columns.Count - 1 ' TJS 21/04/09
                                        If .CustomerSalesOrderView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 21/04/09
                                            bCustomFieldExists = True ' TJS 21/04/09
                                            Exit For ' TJS 21/04/09
                                        End If
                                    Next
                                    If bCustomFieldExists Then ' TJS 21/04/09
                                        .CustomerSalesOrderView(0)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerSalesOrderView", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 21/04/09

                                    End If
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Field Name attribute not provided for Order Custom Field", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)

                                End If

                            Catch ex As Exception
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                     m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 29/05/09

                            End Try
                        Next
                    End If
                    ' end of code added TJS 03/04/09

                    strBillingCustomerName = "" ' TJS 08/02/09
                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/NamePrefix") ' TJS 08/02/09 
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue & " " ' TJS 08/02/09
                    End If
                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/FirstName") ' TJS 08/02/09 
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue & " " ' TJS 08/02/09
                    End If
                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/LastName") ' TJS 08/02/09 
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue ' TJS 08/02/09
                    ElseIf strBillingCustomerName <> "" Then ' TJS 03/04/09
                        ' Last Name blank but other name elements not blank
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Last Name for Billing is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                    End If
                    strBillingCompanyName = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/Company") ' TJS 08/02/09
                    ' has billing name been supplied ?
                    If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper = "YES" Then ' TJS 18/06/09
                        ' yes, company name provided and config has customer as company option set, use it
                        .CustomerSalesOrderView(0).BillToName = strBillingCompanyName ' TJS 18/06/09
                    ElseIf strBillingCustomerName <> "" Then
                        ' customer name provided, use it
                        .CustomerSalesOrderView(0).BillToName = strBillingCustomerName ' TJS 08/02/09
                    End If

                    ' has billing address  been supplied ?
                    If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Address") <> "" Or _
                        GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Town_City") <> "" Or _
                        GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/County") <> "" Or _
                        GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/State") <> "" Or _
                        GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/PostalCode") <> "" Or _
                        GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Country") <> "" Then ' TJS 03/04/09
                        ' yes, copy address in case details are different from customer record
                        strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Address") ' TJS 09/03/09
                        If strTempValue = "" Then ' TJS 09/03/09
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Billing Address is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                        Else
                            ' need to convert any cr or lf to ensure they display correctly
                            strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue) ' TJS 09/03/09
                        End If
                        ' has company name been provided and config has customer as company option is not set ?
                        If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper <> "YES" Then ' TJS 08/02/09 TJS 18/06/09
                            ' yes, add company name to address
                            .CustomerSalesOrderView(0).BillToAddress = strBillingCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 09/03/09
                        Else
                            ' no, use address as is
                            .CustomerSalesOrderView(0).BillToAddress = strTempValue ' TJS 09/03/09
                        End If
                        .CustomerSalesOrderView(0).BillToCity = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Town_City") ' TJS 08/02/09
                        .CustomerSalesOrderView(0).BillToCounty = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/County") ' TJS 08/02/09
                        .CustomerSalesOrderView(0).BillToState = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/State") ' TJS 08/02/09
                        strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/PostalCode") ' TJS 09/03/09
                        If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Billing Postal Code is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                        End If
                        .CustomerSalesOrderView(0).BillToPostalCode = strTempValue ' TJS 09/03/09
                        strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Country") ' TJS 09/03/09
                        If strTempValue <> "" Then ' TJS 09/03/09
                            ' check Country is valid 
                            If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strTempValue & "'") <> "" Then ' TJS 14/08/09
                                .CustomerSalesOrderView(0).BillToCountry = strTempValue ' TJS 09/03/09
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Billing Country is not a valid IS Country", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 14/08/09
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Billing Country is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                        End If
                    End If
                    If strBillingCompanyName <> "" And GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/WorkPhone") <> "" Then ' TJS 09/03/09 TJS 03/04/09
                        .CustomerSalesOrderView(0).BillToPhone = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/WorkPhone") ' TJS 09/03/09
                    ElseIf GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/HomePhone") <> "" Then ' TJS 03/04/09
                        .CustomerSalesOrderView(0).BillToPhone = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/HomePhone") ' TJS 09/03/09
                    End If

                    ' is a Shipping Details Customer node present ?
                    xmlShippingDetails = XMLGenericOrder.XPathSelectElement(GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER) ' TJS 08/02/09 TJS 03/04/09
                    If xmlShippingDetails IsNot Nothing Then ' TJS 08/02/09
                        ' yes, get shipping name
                        strShippingCustomerName = "" ' TJS 08/02/09
                        strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/NamePrefix") ' TJS 08/02/09 
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue & " " ' TJS 08/02/09
                        End If
                        strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/FirstName") ' TJS 08/02/09 
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue & " " ' TJS 08/02/09
                        End If
                        strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/LastName") ' TJS 08/02/09 
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue ' TJS 08/02/09
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Last Name for Shipping is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                        End If
                        strShippingCompanyName = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/Company") ' TJS 08/02/09
                        .CustomerSalesOrderView(0).ShipToName = strShippingCustomerName ' TJS 08/02/09

                        ' has shipping address  been supplied ?
                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Address") <> "" Or _
                            GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Town_City") <> "" Or _
                            GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/County") <> "" Or _
                            GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/State") <> "" Or _
                            GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/PostalCode") <> "" Or _
                            GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Country") <> "" Then ' TJS 03/04/09
                            ' yes, copy address in case details are different from customer record
                            strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Address") ' TJS 09/03/09
                            If strTempValue = "" Then ' TJS 09/03/09
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Shipping Address is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                            Else
                                ' need to convert any cr or lf to ensure they display correctly in IS
                                strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue) ' TJS 09/03/09
                            End If
                            ' has company name been provided ?
                            If strShippingCompanyName <> "" Then ' TJS 08/02/09 
                                ' yes, add company name to address
                                .CustomerSalesOrderView(0).ShipToAddress = strShippingCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 09/03/09
                            Else
                                ' no, use address as is
                                .CustomerSalesOrderView(0).ShipToAddress = strTempValue ' TJS 09/03/09
                            End If
                            .CustomerSalesOrderView(0).ShipToCity = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Town_City") ' TJS 08/02/09
                            .CustomerSalesOrderView(0).ShipToCounty = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/County") ' TJS 08/02/09
                            .CustomerSalesOrderView(0).ShipToState = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/State") ' TJS 08/02/09
                            strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/PostalCode") ' TJS 09/03/09
                            If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Shipping Postal Code is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                            End If
                            .CustomerSalesOrderView(0).ShipToPostalCode = strTempValue ' TJS 09/03/09
                            strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Country") ' TJS 09/03/09
                            If strTempValue <> "" Then ' TJS 09/03/09
                                ' check Country is valid 
                                If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strTempValue & "'") <> "" Then ' TJS 14/08/09
                                    .CustomerSalesOrderView(0).ShipToCountry = strTempValue ' TJS 09/03/09 TJs 18/03/11
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Shipping Country is not a valid IS Country", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 14/08/09
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Customer Shipping Country is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                            End If
                            strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/Telephone") ' TJS 03/04/09
                            If strTempValue <> "" Then ' TJS 03/04/09
                                .CustomerSalesOrderView(0).ShipToPhone = strTempValue ' TJS 08/02/09 TJS 03/04/09
                            End If
                        End If
                    End If

                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper <> "YES" Then ' TJS 08/07/12
                        ' start of code added TJS 17/03/09
                        ' is KSI MultiShip module enabled ?
                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SHIPPING_MODULE_TO_USE) = "KSI MultiShip" Then
                            'yes, set default values in IS fields and XML Value in KSI custom field
                            strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                            strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                            .CustomerSalesOrderView(0)("RZShippingMethodID") = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_METHOD)

                        Else
                            ' no, using IS standard shipping
                            strShippingMethod = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_METHOD)
                            If strShippingMethod = "" Then
                                strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                            End If
                            strShippingMethodGroup = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_METHOD_GROUP)
                            If strShippingMethodGroup = "" Then
                                strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                            End If
                            rowGroupMethodDetail = Me.m_ImportExportDataset.SystemShippingMethodGroupDetail.FindByShippingMethodGroupShippingMethodCode(strShippingMethodGroup, strShippingMethod)
                            If rowGroupMethodDetail Is Nothing Then
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "075", "Invalid Shipping Method and Shipping Method Group combination - " & strShippingMethod & ", " & strShippingMethodGroup, _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)

                            End If
                        End If
                        .CustomerSalesOrderView(0).ShippingMethodCode = strShippingMethod
                        .CustomerSalesOrderView(0).ShippingMethodGroup = strShippingMethodGroup

                        ' RCD 08/09/2019 Start
                        strShippingDate = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_SHIPPING_DATE)
                        If (Not String.IsNullOrEmpty(strShippingDate)) Then
                            Dim shippingDate As Date
                            If (Date.TryParseExact(strShippingDate, GENERIC_XML_YMD, System.Globalization.DateTimeFormatInfo.InvariantInfo, Globalization.DateTimeStyles.None, shippingDate)) Then
                                .CustomerSalesOrderView(0).ShippingDate = shippingDate
                            Else
                                Throw New Exception(GENERIC_XML_INVALID_SHIPPING_DATE)
                            End If
                        End If

                        strLatestShippingDate = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_LATEST_SHIPPING_DATE)
                        If (Not String.IsNullOrEmpty(strLatestShippingDate)) Then
                            Dim latestShippingDate As Date
                            If (Date.TryParseExact(strLatestShippingDate, GENERIC_XML_YMD, System.Globalization.DateTimeFormatInfo.InvariantInfo, Globalization.DateTimeStyles.None, latestShippingDate)) Then
                                .CustomerSalesOrderView(0).LatestShipDate = latestShippingDate
                            Else
                                Throw New Exception(GENERIC_XML_INVALID_LATEST_SHIPPING_DATE)
                            End If
                        End If

                        Dim predefinedNotes As New StringBuilder()
                        strCustomerComments = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_COMMENTS)
                        If (Not String.IsNullOrEmpty(strCustomerComments)) Then
                            predefinedNotes.AppendLine(strCustomerComments)
                        End If
                        strNotes = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_NOTES)
                        If (Not String.IsNullOrEmpty(strNotes)) Then
                            predefinedNotes.AppendLine(strNotes)
                        End If
                        strSalesAgency = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_SALES_AGENCY)
                        If (Not String.IsNullOrEmpty(strSalesAgency)) Then
                            predefinedNotes.AppendLine(String.Format("Sales Agency : {0}", strSalesAgency))
                        End If
                        strOrderTaker = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_ORDER_TAKER)
                        If (Not String.IsNullOrEmpty(strOrderTaker)) Then
                            predefinedNotes.AppendLine(String.Format("Order Taker : {0}", strOrderTaker))
                        End If
                        strBuyerName = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_BUYER_NAME)
                        If (Not String.IsNullOrEmpty(strBuyerName)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Name : {0}", strBuyerName))
                        End If
                        strBuyerPhone = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_BUYER_PHONE)
                        If (Not String.IsNullOrEmpty(strBuyerPhone)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Phone : {0}", strBuyerPhone))
                        End If
                        strBuyerEmail = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_BUYER_EMAIL)
                        If (Not String.IsNullOrEmpty(strBuyerEmail)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Email : {0}", strBuyerEmail))
                        End If
                        strCreditCardToken = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_CREDIT_CARD_TOKEN)
                        If (Not String.IsNullOrEmpty(strCreditCardToken)) Then
                            predefinedNotes.AppendLine(String.Format("Credit Card Token : {0}", strCreditCardToken))
                        End If
                        .CustomerSalesOrderView(0).InternalNotes = predefinedNotes.ToString()
                        ' RCD 08/12/2019 End

                        ' end of code added TJS 17/03/09
                    End If

                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SET_DISABLE_FREIGHT_CALCULATION).ToUpper = "YES" Then ' TJS 17/03/09 TJS 08/06/09
                        .CustomerSalesOrderView(0).IsFreightOverwrite = True ' TJS 17/03/09
                    Else
                        .CustomerSalesOrderView(0).IsFreightOverwrite = False ' TJS 17/03/09
                    End If
                    .CustomerSalesOrderView(0).Notes = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_COMMENTS)
                    ' start of code added TJS 09/03/09
                    ' Is there a Coupon Code and are coupons enabled ?
                    If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_SALES_COUPON) <> "" And _
                        GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ENABLE_COUPONS).ToUpper = "YES" Then
                        ' yes, has a Discount Coupon been included ?
                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_DISCOUNT_COUPON_DESCRIPTION) = "" And _
                            GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_DISCOUNT_COUPON_VALUE) = "" Then ' TJS 08/06/09
                            ' no, check Coupon Code is valid for customer
                            Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerCouponView.TableName, _
                                "ReadCustomerCouponView_DEV000221", AT_COUPON_CODE, GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_SALES_COUPON), AT_CUSTOMER_CODE, CustomerCode, _
                                Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                            If Me.m_ImportExportDataset.CustomerCouponView.Count > 0 Then
                                ' coupon valid for customer, check date range is valid
                                bCouponValid = True
                                If Not Me.m_ImportExportDataset.CustomerCouponView(0).IsStartingDateNull Then
                                    If Me.m_ImportExportDataset.CustomerCouponView(0).StartingDate > .CustomerSalesOrderView(0).SalesOrderDate Then
                                        bCouponValid = False
                                    End If
                                End If
                                If Not Me.m_ImportExportDataset.CustomerCouponView(0).IsExpirationDateNull Then
                                    If Me.m_ImportExportDataset.CustomerCouponView(0).ExpirationDate < .CustomerSalesOrderView(0).SalesOrderDate Then
                                        bCouponValid = False
                                    End If
                                End If
                                If bCouponValid Then
                                    SalesOrderFacade.AssignCoupon(Me.m_ImportExportDataset.CustomerCouponView(0), .CustomerSalesOrderView(0))
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "026", "Sales Coupon not valid on Order Date", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "025", "Sales Coupon not valid or not valid for Customer", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "025", "Cannot have both a Sales Coupon and a Discount Coupon", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 08/06/09
                        End If
                    End If
                    ' end of code added TJS 09/03/09

                    ' RCD 2019/08/12 Start - SalesRepGroupCode Node
                    Dim strSalesRepGroupCode = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_SALES_REP_GROUP_CODE)
                    If (Not String.IsNullOrEmpty(strSalesRepGroupCode)) Then
                        Dim salesRepRow As System.Data.DataRow = Interprise.Facade.Base.SimpleFacade.Instance.GetRow(New String() {"*"},
                                                                                                                     Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_TABLE,
                                                                                                                     String.Format(Interprise.Framework.Base.Shared.Const.FORMAT_FIELD_AND_VALUE,
                                                                                                                                   Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPCODE_COLUMN,
                                                                                                                                   strSalesRepGroupCode),
                                                                                                                     ConnectionStringType.Online)
                        If (salesRepRow IsNot Nothing) Then
                            .CustomerSalesRepCommissionView(0).SalesRepGroupCode = CStr(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPCODE_COLUMN))
                            .CustomerSalesRepCommissionView(0).SalesRepGroupName = CStr(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPNAME_COLUMN))
                            .CustomerSalesRepCommissionView(0).CommissionPercent = CDec(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_COMMISSIONPERCENT_COLUMN))

                            ' RCD 2019/08/15 Start - SalesRepCode Node
                            Dim strSalesRepCode = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_SALES_REP_CODE)
                            If (Not String.IsNullOrEmpty(strSalesRepCode)) Then
                                Dim salesRepContactCode As String = Interprise.Facade.Base.SimpleFacade.Instance.GetField(Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_CONTACTCODE_COLUMN, _
                                                                                                                Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_TABLE,
                                                                                                                String.Format(Interprise.Framework.Base.Shared.Const.FORMAT_FILTER_2, _
                                                                                                                              Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_ENTITYCODE_COLUMN, _
                                                                                                                              strSalesRepGroupCode, _
                                                                                                                              Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_CONTACTCODE_COLUMN, _
                                                                                                                              strSalesRepCode))
                                If (Not String.IsNullOrEmpty(salesRepContactCode)) Then
                                    .CustomerSalesRepCommissionView(0).ContactCode = salesRepContactCode
                                End If
                            End If
                            ' RCD 2019/08/15 End - SalesRepCode Node
                        End If
                    End If
                    ' RCD 2019/08/12 End - SalesRepGroupCode Node

            taxSchemeFacade.LoadDataSet(New String()() {New String() {taxSchemeDataset.SystemTaxSchemeDetailView.TableName, _
                "ReadSystemTaxSchemeDetail", AT_COUNTRY_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COUNTRY_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                Interprise.Framework.Base.Shared.ClearType.Specific, Interprise.Framework.Base.Shared.ConnectionStringType.Offline)
            XMLOrderItems = XMLGenericOrder.XPathSelectElements(GENERIC_XML_ORDER_ITEM_LIST)
            dblOrderTotal = 0
            dblOrderTotalRate = 0 ' TJS 26/05/09
            dblOrderTax = 0
            dblOrderTaxRate = 0
            iLineNum = 1
            If XMLOrderItems IsNot Nothing Then ' TJE 09/03/09
                For Each XMLOrderItem In XMLOrderItems
                    Try
                        XMLItemTemp = XDocument.Parse(XMLOrderItem.ToString)
                        ' has Item Code been provided
                        If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE) <> "" Then
                            ' yes, use it
                            Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", _
                                Interprise.Framework.Inventory.Shared.Const.AT_ITEM_CODE, GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE), _
                                Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                            strItemID = "Order Item Code " & GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE)

                        ElseIf GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME) <> "" Then
                            ' no, but Item Name has been
                            Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", _
                                AT_ITEM_NAME, GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME), Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, _
                                GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 10/02/09 TJS 13/02/14
                            strItemID = "Order Item Name " & GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME)

                        Else
                            sTemp = "Both ISItemCode or ISItemName are blank" ' TJS 10/02/09
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "017", sTemp, _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                        End If

                        ' start of code added TJS 19/09/13
                        bSkipUMCAandWarehouseCheck = False
                        ' did we find a matching Inventory Item ?
                        If Me.m_ImportExportDataset.SaleItemView.Count = 0 Then
                            ' no, is Import Missing Items As NonStock set ?
                            If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_IMPORT_MISSING_ITEMS_AS_NONSTOCK).ToUpper = "YES" Then
                                ' yes, send error email
                                m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", strItemID & " not found - Order line item imported as Non-Stock.", XMLGenericOrder.ToString)
                                ' get Non-Stock item record
                                Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", AT_ITEM_NAME, "NONSTOCK", _
                                    Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                    Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                                bSkipUMCAandWarehouseCheck = True
                            End If
                        End If
                        ' end of code added TJS 19/09/13

                        If Me.m_ImportExportDataset.SaleItemView.Count > 0 Then
                            ' start of code added TJS 08/06/09
                            iItemPtr = 0
                            If Not bSkipUMCAandWarehouseCheck Then ' TJS 19/09/13
                                ' has a Warehouse code been specified ?
                                strWarehouseCode = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_WAREHOUSE)
                                If strWarehouseCode = "" Then
                                    ' no, is UseShipToClassTemplate set ?
                                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper = "YES" Then ' TJS 08/07/12 TJS 20/07/12
                                        ' yes, get warehouse from Customer Ship To
                                        strWarehouseCode = .CustomerSalesOrderView(0).WarehouseCode ' TJS 08/07/12 TJS 20/07/12
                                    Else
                                        ' no, get default Warehouse code
                                        strWarehouseCode = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_WAREHOUSE)
                                    End If
                                End If
                                ' has a Unit Of Measure been specified ?
                                strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UMC)
                                If strTempValue <> "" Then
                                    ' yes, find relevent item details
                                    Do While Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("UnitMeasureCode").ToString.ToUpper <> strTempValue.ToUpper Or _
                                        (Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("WarehouseCode").ToString.ToUpper <> strWarehouseCode.ToUpper And _
                                        (Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsWarehouseCodeNull)) ' TJS 04/07/09 TJS 14/08/09
                                        iItemPtr += 1
                                        If iItemPtr > Me.m_ImportExportDataset.SaleItemView.Count - 1 Then
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "017", "Cannot find Unit of Measure " & strTempValue & " and Warehouse Code " & strWarehouseCode & " for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                        End If
                                    Loop
                                Else
                                    ' no, find base Unit of Measure
                                    Do While (Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsDefaultSellingNull OrElse Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).DefaultSelling) Or _
                                        (Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("WarehouseCode").ToString.ToUpper <> strWarehouseCode.ToUpper And _
                                        (Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsWarehouseCodeNull)) ' TJS 14/08/09 TJS 02/12/11 TJS 23/05/14
                                        iItemPtr += 1
                                        If iItemPtr > Me.m_ImportExportDataset.SaleItemView.Count - 1 Then
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "017", "Cannot find default UMC and Warehouse Code " & strWarehouseCode & " for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                        End If
                                    Loop
                                End If
                            End If
                            ' end of code added TJS 08/06/09
                            itemView = New DataView(SalesOrderDataset.CustomerSalesOrderDetailView)
                            itemView.AddNew()

                            ' need to set default value for linenum etc to prevent DBNull conversion error
                            itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.RootDocumentCodeColumn.ColumnName) = .CustomerSalesOrderView(0).RootDocumentCode
                            itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.SalesOrderCodeColumn.ColumnName) = .CustomerSalesOrderView(0).SalesOrderCode
                            itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.LineNumColumn.ColumnName) = 0
                            itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.SourceLineNumColumn.ColumnName) = 0
                            ' save original Inventory Item description in order detail row
                            itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.InventoryDescriptionColumn.ColumnName) = Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemDescription ' TJS 02.04/14

                            ' start of code added TJS 10/06/12
                            sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_SOURCE_COMMISSION)
                            ' has source commission been supplied ?
                            If sTemp <> "" Then
                                ' yes, must be numeric and not contain any commas
                                If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                                    itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221") = CDec(sTemp)
                                    itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.CommissionAmountColumn.ColumnName) = CDec(itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221"))
                                    itemView(iLineNum - 1)("SourceCommissionCharge_DEV000221") = RoundDecimalValue(CDec(itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221")) / .CustomerSalesOrderView(0).ExchangeRate)
                                    itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.CommissionAmountRateColumn.ColumnName) = CDec(itemView(iLineNum - 1)("SourceCommissionCharge_DEV000221"))
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Source Commission must be numeric for " & strItemID, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                End If
                            End If
                            sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_SOURCE_FULFILLMENT)
                            ' has source fulfillment been supplied ?
                            If sTemp <> "" Then
                                ' yes, must be numeric and not contain any commas
                                If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                                    itemView(iLineNum - 1)("SourceFulfillmentCostRate_DEV000221") = CDec(sTemp)
                                    itemView(iLineNum - 1)("SourceFulfillmentCost_DEV000221") = RoundDecimalValue(CDec(itemView(iLineNum - 1)("SourceFulfillmentCostRate_DEV000221")) / .CustomerSalesOrderView(0).ExchangeRate)
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Source Fulfillment must be numeric for " & strItemID, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                End If
                            End If
                            ' end of code added TJS 10/06/12

                            sTemp = ""
                            strItemKitPricing = "" ' TJS 18/03/11
                            iItemRowsAdded = 1 ' TJS 18/03/11
                            decKitPriceSumRate = 0 ' TJS 18/03/11
                            decKitPriceTaxSumRate = 0 ' TJS/FA 17/10/11
                            If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_MATRIX_GROUP Then ' TJS 19/08/10 TJS 02/04/14
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "017", strItemID & " is a Matrix Group item.  Only individual Items whthin the Matrix Group can be added to an order.", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 19/08/10

                                ' start of code added TJS 19/08/10
                            ElseIf Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_KIT Then ' TJS 02/04/14
                                ItemKitDataset = New Interprise.Framework.Base.DatasetGateway.ItemKitDatasetGateway
                                ItemKitFacade = New Interprise.Facade.Customer.CustomerItemKitFacade(ItemKitDataset)
                                ItemKitFacade.CurrencyCode = .CustomerSalesOrderView(0).CurrencyCode
                                ItemKitFacade.ExchangeRate = .CustomerSalesOrderView(0).ExchangeRate
                                strItemKitPricing = ItemKitFacade.GetField("PricingType", "InventoryKit", "ItemKitCode = '" & Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode & "'")
                                itemKitDetailRows = New DataRow() {} ' TJS 22/09/10
                                ItemKitFacade.InitializeKitConfigurator(Me.m_ImportExportDataset.SaleItemView(iItemPtr), strItemKitPricing, _
                                    CustomerCode, .CustomerSalesOrderView(0).SalesOrderDate, strWarehouseCode, itemKitDetailRows) ' TJS 22/09/10
                                ' get quantity ordered
                                strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                ' has quantity been provided ?
                                If strItemQty <> "" Then
                                    ' yes, must be numeric and not contain any commas
                                    If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                        ' must be greater than 0
                                        If CDec(strItemQty) > 0 Then
                                            ' need to apply price to kit via configurator
                                            ' start of code added TJS 18/03/11
                                            decSalesPriceRate = 0
                                            strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                            ' has price been supplied ?
                                            If strItemPrice <> "" Then
                                                ' yes, must be numeric and not contain any commas
                                                If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                    ' must not be negative
                                                    If CDec(strItemPrice) >= 0 Then
                                                        ' Unit price valid, overwrite Item price
                                                        ' do prices include tax >
                                                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                            ' yes, get price before tax (Use freight tax calc as item row(s) not yet created for kit
                                                            decSalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, .TransactionItemTaxDetailView, _
                                                                Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode, 0, CDec(strItemQty), CDec(strItemPrice), _
                                                                Me.m_ImportExportDataset.SaleItemView(iItemPtr).SalesTaxCode, .CustomerSalesOrderView(0).CurrencyCode, _
                                                                .CustomerSalesOrderView(0).ExchangeRate, .CustomerSalesOrderView(0).SalesOrderCode, True)
                                                        Else
                                                            decSalesPriceRate = CDec(strItemPrice)
                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                                End If
                                            End If
                                            dblOrderTotalRate += (decSalesPriceRate * CDec(strItemQty)) ' TJS 02/04/14
                                            dblOrderTotal = RoundDecimalValue(dblOrderTotalRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 02/04/14
                                            ' end of code added TJS 18/03/11
                                            ' quantity valid, apply to Kit
                                            If strItemKitPricing = "Item Price" Then ' TJS 18/03/11
                                                SalesOrderFacade.AssignItemKit(Me.m_ImportExportDataset.SaleItemView(iItemPtr), ItemKitFacade.KitItems, itemView(iLineNum - 1), strItemKitPricing, CDec(strItemQty), 0, TransactionType.SalesOrder, sTemp, strWarehouseCode) ' TJS 18/03/11
                                                iItemRowsAdded = ItemKitFacade.KitItems.Length ' TJS 18/03/11
                                                decKitTotalPriceRate = ItemKitFacade.ComputeTotalByTotal ' TJS 18/03/11
                                            Else
                                                SalesOrderFacade.AssignItemKit(Me.m_ImportExportDataset.SaleItemView(iItemPtr), ItemKitFacade.KitItems, itemView(iLineNum - 1), strItemKitPricing, CDec(strItemQty), decSalesPriceRate, TransactionType.SalesOrder, sTemp, strWarehouseCode)
                                            End If
                                            If sTemp <> "" Then
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "016", sTemp, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be greater than 0 for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                        End If
                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be numeric for " & strItemID, _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                    End If
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity is blank in input XML for " & strItemID, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                End If
                                ' end of code added TJS 19/08/10

                                ' start of code added TJS 02/04/14
                            ElseIf Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_BUNDLE Then
                                ' get quantity ordered
                                strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                ' has quantity been provided ?
                                If strItemQty <> "" Then
                                    ' yes, must be numeric and not contain any commas
                                    If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                        ' must be greater than 0
                                        If CDec(strItemQty) > 0 Then
                                            ' quantity valid, get 
                                            decSalesPriceRate = 0
                                            strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                            ' has price been supplied ?
                                            If strItemPrice <> "" Then
                                                ' yes, must be numeric and not contain any commas
                                                If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                    ' must not be negative
                                                    If CDec(strItemPrice) >= 0 Then
                                                        ' Unit price valid, overwrite Item price
                                                        ' do prices include tax >
                                                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                            ' yes, get price before tax (Use freight tax calc as item row(s) not yet created for kit
                                                            decSalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, .TransactionItemTaxDetailView, _
                                                                Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode, 0, CDec(strItemQty), CDec(strItemPrice), _
                                                                Me.m_ImportExportDataset.SaleItemView(iItemPtr).SalesTaxCode, .CustomerSalesOrderView(0).CurrencyCode, _
                                                                .CustomerSalesOrderView(0).ExchangeRate, .CustomerSalesOrderView(0).SalesOrderCode, True)
                                                        Else
                                                            decSalesPriceRate = CDec(strItemPrice)
                                                        End If

                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                                End If
                                            End If

                                            ' get bundle details
                                            ItemBundleDataset = New Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway
                                            ItemBundleFacade = New Interprise.Facade.Customer.ItemBundleFacade(ItemBundleDataset)
                                            ItemBundleFacade.LoadDataSet("ReadInventoryBundleConfigurator", New String() {"InventoryBundleConfiguratorView"}, _
                                                New String()() {New String() {"@BundleCode", Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode}, _
                                                New String() {"@DefaultPrice", CustomerDetailDataset.CustomerView(0).DefaultPrice}, _
                                                New String() {"@LanguageCode", GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}, _
                                                New String() {"@CurrencyCode", .CustomerSalesOrderView(0).CurrencyCode}, _
                                                New String() {"@WarehouseCode", strWarehouseCode}}, ClearType.Specific)
                                            iBundleRow = iLineNum - 1
                                            ' get total of item prices in bundle
                                            decBundleTotalPriceRate = 0
                                            decBundlePriceSumRate = 0
                                            For Each ItemBundleRow In ItemBundleDataset.InventoryBundleConfiguratorView.Rows
                                                decBundleTotalPriceRate = decBundleTotalPriceRate + (CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICERATE_COLUMN)) * CDec(ItemBundleRow("Quantity")))
                                            Next
                                            iItemRowsAdded = ItemBundleDataset.InventoryBundleConfiguratorView.Count
                                            iBundlePtr = 0
                                            For Each ItemBundleRow In ItemBundleDataset.InventoryBundleConfiguratorView.Rows
                                                SalesOrderFacade.AssignInventoryItem(ItemBundleRow, itemView(iBundleRow), sTemp)
                                                .CustomerSalesOrderDetailView(iBundleRow).ItemCode = ItemBundleRow(CUSTOMERSALESORDERDETAIL_ITEMCODE_COLUMN).ToString
                                                .CustomerSalesOrderDetailView(iBundleRow).ItemName = ItemBundleRow(INVENTORYITEMS_ITEMNAME_COLUMN).ToString
                                                .CustomerSalesOrderDetailView(iBundleRow).ItemDescription = ItemBundleRow(INVENTORYITEMDESCRIPTION_ITEMDESCRIPTION_COLUMN).ToString
                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICERATE_COLUMN))
                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPrice = CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICE_COLUMN))
                                                .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered = CDec(strItemQty) * CDec(ItemBundleRow("Quantity"))
                                                .CustomerSalesOrderDetailView(iBundleRow).ItemType = ItemBundleRow(CUSTOMERSALESORDERDETAIL_ITEMTYPE_COLUMN).ToString
                                                .CustomerSalesOrderDetailView(iBundleRow).ParentBundleItemCode = ItemBundleRow(BUNDLECODE).ToString

                                                ' is this the last row of the bundle ?
                                                If iBundlePtr <> ItemBundleDataset.InventoryBundleConfiguratorView.Count - 1 Then
                                                    ' no, set price as relevant fraction of total bundle price
                                                    If decBundleTotalPriceRate = 0 Then
                                                        ' is quantity ordered > 1 ?
                                                        If CInt(strItemQty) > 1 Then
                                                            ' yes - CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered will be equal to Kit Item Qty 
                                                            ' if there is only 1 of the item in the bundle
                                                            ' Otherwise the Item Quantity Order figure will always be greater than the bundle Qty as it is 
                                                            ' the bundle item Quantity / by the number of bundles in the order
                                                            If (.CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((decSalesPriceRate / iItemRowsAdded) * (CDec(strItemQty) / .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered), 2)
                                                            Else
                                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded), 2)
                                                            End If
                                                        Else
                                                            If .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded * .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered), 2)
                                                            Else
                                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / iItemRowsAdded, 2)
                                                            End If
                                                        End If
                                                    Else
                                                        ' is quantity ordered > 1 ?
                                                        If CInt(strItemQty) > 1 Then
                                                            ' yes - CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered will be equal to Kit Item Qty 
                                                            ' if there is only 1 of the item in the bundle
                                                            ' Otherwise the Item Quantity Order figure will always be greater than the bundle Qty as it is 
                                                            ' the bundle item Quantity / by the number of bundles in the order
                                                            If (.CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((.CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate) / (decBundleTotalPriceRate * (.CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty))), 2)

                                                            Else
                                                                ' if there is only 1 of the item, then the unit price will be the percentage calculation for the individual item price.
                                                                'Total for the item is then multiplied by the Kit item quantity
                                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((.CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate) / decBundleTotalPriceRate, 2)
                                                            End If
                                                        Else
                                                            'If .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                            ' TJS/FA 19/04/12 percentage of kit value divided by the number of items
                                                            .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(.CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate / decBundleTotalPriceRate, 2)

                                                        End If
                                                    End If
                                                    If .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                        decBundlePriceSumRate = decBundlePriceSumRate + .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate * .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered
                                                    Else
                                                        decBundlePriceSumRate = decBundlePriceSumRate + .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate
                                                    End If
                                                Else
                                                    If .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                        ' yes, set price as remainder to prevent rounding errors and divide by quantity ordered
                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(((decSalesPriceRate * CInt(strItemQty)) - decBundlePriceSumRate) / .CustomerSalesOrderDetailView(iBundleRow).QuantityOrdered, 2)
                                                    Else
                                                        ' yes, set price as remainder to prevent rounding errors
                                                        .CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((decSalesPriceRate * CInt(strItemQty)) - decBundlePriceSumRate, 2)
                                                    End If
                                                End If
                                                .CustomerSalesOrderDetailView(iBundleRow).SalesPrice = RoundDecimalValue(.CustomerSalesOrderDetailView(iBundleRow).SalesPriceRate / .CustomerSalesOrderView(0).ExchangeRate)

                                                iBundleRow += 1
                                                iBundlePtr += 1
                                                If iBundlePtr <> ItemBundleDataset.InventoryBundleConfiguratorView.Count Then
                                                    itemView = New DataView(SalesOrderDataset.CustomerSalesOrderDetailView)
                                                    itemView.AddNew()

                                                    ' need to set default value for linenum etc to prevent DBNull conversion error
                                                    itemView(iBundleRow)(.CustomerSalesOrderDetailView.RootDocumentCodeColumn.ColumnName) = .CustomerSalesOrderView(0).RootDocumentCode
                                                    itemView(iBundleRow)(.CustomerSalesOrderDetailView.SalesOrderCodeColumn.ColumnName) = .CustomerSalesOrderView(0).SalesOrderCode
                                                    itemView(iBundleRow)(.CustomerSalesOrderDetailView.LineNumColumn.ColumnName) = 0
                                                    itemView(iBundleRow)(.CustomerSalesOrderDetailView.SourceLineNumColumn.ColumnName) = 0
                                                End If
                                            Next
                                            dblOrderTotalRate += (decSalesPriceRate * CDec(strItemQty))
                                            dblOrderTotal = RoundDecimalValue(dblOrderTotalRate / .CustomerSalesOrderView(0).ExchangeRate)

                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be greater than 0 for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                        End If
                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be numeric for " & strItemID, _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                    End If
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity is blank in input XML for " & strItemID, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                                End If
                                ' end of code added TJS 02/04/14

                            Else
                                SalesOrderFacade.AssignInventoryItem(Me.m_ImportExportDataset.SaleItemView(iItemPtr), itemView(iLineNum - 1), sTemp)
                                If sTemp <> "" Then
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "016", sTemp, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                                End If
                                ' start of code moved TJS 19/08/10
                                ' set quantity ordered
                                strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY) ' TJS 09/03/09
                                ' has quantity been provided ?
                                If strItemQty <> "" Then ' TJS 09/03/09
                                    ' yes, must be numeric and not contain any commas
                                    If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                                        ' must be greater than 0
                                        If CDec(strItemQty) > 0 Then ' TJS 09/03/09
                                            ' quantity valid, apply to Item
                                            .CustomerSalesOrderDetailView(iLineNum - 1).QuantityOrdered = CDec(strItemQty) ' TJS 09/03/09
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be greater than 0 for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                                        End If
                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be numeric for " & strItemID, _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                                    End If
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity is blank in input XML for " & strItemID, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                                End If

                                ' now set default price and cost
                                If Not SalesOrderFacade.SetSalesPrice(itemView(iLineNum - 1), False) Then ' TJS 26/05/09
                                    sTemp = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("INF0101", New String() {CStr(itemView(iLineNum - 1)(.CustomerSalesOrderDetailView.ItemNameColumn.ColumnName)), .CustomerSalesOrderView(0).CurrencyCode}) ' TJS 26/05/09
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "016", sTemp, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)  ' TJS 26/05/09
                                End If
                                ' end of code moved TJS 19/08/10
                            End If

                            For iRowLoop = iLineNum - 1 To (iLineNum - 1) + (iItemRowsAdded - 1) ' TJS 18/03/11
                                .CustomerSalesOrderDetailView(iRowLoop).WebSiteCode = .CustomerSalesOrderView(0).WebSiteCode
                                sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_PURCHASE_ID)
                                If sTemp <> "" Then
                                    .CustomerSalesOrderDetailView(iRowLoop)("SourcePurchaseID_DEV000221") = sTemp
                                End If

                                ' code to set quantity and price moved TJS 19/08/10
                                .CustomerSalesOrderDetailView(iRowLoop).QuantityBackOrdered = 0
                                .CustomerSalesOrderDetailView(iRowLoop).QuantityShipped = 0
                                .CustomerSalesOrderDetailView(iRowLoop).QuantityToBeShipped = 0
                                If m_ImportExportDataset.SaleItemView(0).ItemType = ITEM_TYPE_NON_STOCK Or _
                                    m_ImportExportDataset.SaleItemView(0).ItemType = ITEM_TYPE_SERVICE Or _
                                    m_ImportExportDataset.SaleItemView(0).ItemType = ITEM_TYPE_ELECTRONIC_DOWNLOAD Then ' TJS 17/05/09
                                    .CustomerSalesOrderDetailView(iRowLoop).QuantityAllocated = .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered ' TJS 17/05/09
                                Else
                                    .CustomerSalesOrderDetailView(iRowLoop).QuantityAllocated = 0
                                End If
                                .CustomerSalesOrderDetailView(iRowLoop).QuantityAlReadyRMA = 0
                                .CustomerSalesOrderDetailView(iRowLoop).QuantityReturned = 0
                                .CustomerSalesOrderDetailView(iRowLoop).ContractQuantity = 0
                                .CustomerSalesOrderDetailView(iRowLoop).ContractCalledOff = 0
                                If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DESCRIPTION) <> "" And ((Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_KIT And _
                                    Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_BUNDLE) Or strItemKitPricing = "Kit Price") Then ' TJS 18/03/11 TJS 02/04/14
                                    .CustomerSalesOrderDetailView(iRowLoop).ItemDescription = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DESCRIPTION)
                                    .CustomerSalesOrderDetailView(iRowLoop).InventoryDescription = .CustomerSalesOrderDetailView(iRowLoop).ItemDescription
                                    .CustomerSalesOrderDetailView(iRowLoop).IsInventoryDescription = True
                                End If
                                ' only apply price here if not a kit (kit pricing handled above when pricing type is Kit and below for Item pricing
                                ' or a bundle (bundle pricing is handled above)
                                If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_KIT And Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_BUNDLE Then ' TJS 18/03/11 TJS 02/04/14 
                                    strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE) ' TJS 09/03/09
                                    ' has price been supplied ?
                                    If strItemPrice <> "" Then ' TJS 09/03/09
                                        ' yes, must be numeric and not contain any commas
                                        If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                                            ' must not be negative
                                            If CDec(strItemPrice) >= 0 Then ' TJS 09/03/09
                                                ' Unit price valid, overwrite Item price
                                                ' do prices include tax >
                                                If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 08/06/09
                                                    ' yes, get price before tax
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, _
                                                        .TransactionItemTaxDetailView, .CustomerSalesOrderDetailView(iRowLoop).ItemCode, _
                                                        .CustomerSalesOrderDetailView(iRowLoop).LineNum, .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered, _
                                                        CDec(strItemPrice), .CustomerSalesOrderDetailView(iRowLoop).TaxCode, .CustomerSalesOrderView(0).CurrencyCode, _
                                                        .CustomerSalesOrderView(0).ExchangeRate, .CustomerSalesOrderView(0).SalesOrderCode, False) ' TJS 08/06/09
                                                Else
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = CDec(strItemPrice) ' TJS 09/03/09 TJS 26/05/09
                                                End If
                                                .CustomerSalesOrderDetailView(iRowLoop).Discount = 0 ' TJS 07/07/09
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must not be negative for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                                        End If
                                    End If
                                    dblOrderTotalRate += (.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered) ' TJS 26/05/09 TJS 02/04/14
                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPrice = RoundDecimalValue(.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 26/05/09
                                    dblOrderTotal = RoundDecimalValue(dblOrderTotalRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 02/04/14

                                ElseIf strItemKitPricing = "Item Price" Then ' TJS 18/03/11
                                    ' is this the last row of the kit ?
                                    If iRowLoop < (iLineNum - 1) + (iItemRowsAdded - 1) Then ' TJS 18/03/11
                                        ' no, set price as relevant fraction of total kit price
                                        If decKitTotalPriceRate = 0 Then ' TJS 04/04/11
                                            ' TJS/FA 19/04/12
                                            If CInt(strItemQty) > 1 Then
                                                ' TJS/FA 19/04/12
                                                'CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered will be equal to Kit Item Qty 
                                                'if there is only 1 of the item in the kit
                                                'Otherwise the Item Quantity Order figure will always be greater than the Kit Qty as it is 
                                                'the Kit item Quantity * by the number of kits in the order
                                                If (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                    ' TJS/FA 19/04/12
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decSalesPriceRate / iItemRowsAdded) * (CDec(strItemQty) / .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered), 2)
                                                    '.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decSalesPriceRate * CDec(strItemQty)) / iItemRowsAdded * (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)), 2) ' TJS/FA 19/04/12
                                                Else
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded), 2) ' TJS 04/04/11
                                                End If
                                            Else
                                                If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded * .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered), 2)
                                                Else
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / iItemRowsAdded, 2) ' TJS 04/04/11
                                                End If
                                            End If
                                        Else
                                            ' TJS/FA 19/04/12
                                            ' AssignKit already set the SalesPriceRate to the IS kit price, we now need to adjust for the actual selling price
                                            'i.e. kit price in order needs to reflect the percentage breakdown in IS
                                            If CInt(strItemQty) > 1 Then
                                                'CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered will be equal to Kit Item Qty 
                                                'if there is only 1 of the item in the kit
                                                'Otherwise the Item Quantity Order figure will always be greater than the Kit Qty as it is 
                                                'the Kit item Quantity * by the number of kits in the order
                                                ' TJS/FA 19/04/12 divided by number of the item in kit
                                                If (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate) / (decKitTotalPriceRate * (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty))), 2)
                                                Else
                                                    ' TJS/FA 19/04/12 if there is only 1 of the item, then the unit price will be the percentage calculation for the individual item price.
                                                    'Total for the item is then multiplied by the Kit item quantity
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate) / decKitTotalPriceRate, 2)
                                                End If
                                            Else
                                                'If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                ' TJS/FA 19/04/12 percentage of kit value divided by the number of items
                                                .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate / decKitTotalPriceRate, 2)

                                            End If
                                            ' TJS/FA 19/04/12 end
                                        End If
                                        If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then ' FA 24/10/11
                                            decKitPriceSumRate = decKitPriceSumRate + .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate * (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) ' FA 24/10/11 TJS 01/05/14
                                        Else
                                            decKitPriceSumRate = decKitPriceSumRate + .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate ' TJS 18/03/11
                                        End If
                                    Else
                                        If .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered > 1 Then ' FA 24/10/11
                                            ' yes, set price as remainder to prevent rounding errors and divide by kit quantity
                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decSalesPriceRate - decKitPriceSumRate) / (.CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)), 2) ' FA 24/10/11 TJS 01/05/14
                                        Else
                                            ' yes, set price as remainder to prevent rounding errors
                                            .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate - decKitPriceSumRate, 2) ' TJS 18/03/11
                                        End If
                                    End If
                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPrice = RoundDecimalValue(.CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 18/03/11
                                End If

                                'SalesOrderFacade.Compute(itemView(iRowLoop).Row, TransactionType.SalesOrder) ' TJS 26/05/09
                                'FA 18/10/10 Modified to use the correct compute function for kits
                                'Interprise code seems to call bothe the ComputeKit function and the Compute function as well
                                If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_KIT Then ' TJS 02/04/14
                                    SalesOrderFacade.ComputeKitItemsSalesPrice(itemView(iRowLoop).Row) ' FA 18/10/10
                                End If

                                ' RCD 2019/08/13 Start SalesRepGroupCode
                                .CustomerSalesOrderDetailView(iRowLoop).CommissionPercent = .CustomerSalesRepCommissionView(0).CommissionPercent
                                ' RCD 2019/08/13 End SalesRepGroupCode

                                SalesOrderFacade.Compute(itemView(iRowLoop).Row, TransactionType.SalesOrder) ' TJS 26/05/09

                                ' code removed TJS 26/05/09
                                .CustomerSalesOrderDetailView(iRowLoop).IsConvert = False
                                .CustomerSalesOrderDetailView(iRowLoop).IsConverted = False
                                .CustomerSalesOrderDetailView(iRowLoop).IsPickingNotePrinted = False
                                .CustomerSalesOrderDetailView(iRowLoop).IsPackingListPrinted = False
                                .CustomerSalesOrderDetailView(iRowLoop).IsConfirmedPickedPacked = False

                                ' is Item Drop Ship ?
                                sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_IS_DROP_SHIP) ' TJS 17/03/09
                                If sTemp.ToUpper = "YES" Then ' TJS 17/03/09
                                    ' yes, set flag
                                    .CustomerSalesOrderDetailView(iRowLoop).IsDropShip = True ' TJS 17/03/09
                                    ' has a Drop Ship REference been supplied ?
                                    If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP_REF) <> "" Then ' TJS 17/03/09
                                        ' yes, set it
                                        .CustomerSalesOrderDetailView(iRowLoop).DropShipReference = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP_REF) ' TJS 17/03/09
                                    End If
                                ElseIf sTemp.ToUpper <> "" And sTemp.ToUpper <> "NO" Then ' TJS 17/03/09
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Drop Ship must be Yes, No or blank " & strItemID, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 17/03/09
                                End If

                                ' get Due Date offset config value
                                sTemp = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DUE_DATE_OFFSET)
                                If sTemp = "" Then
                                    sTemp = "1"
                                End If
                                .CustomerSalesOrderDetailView(iRowLoop).DueDate = .CustomerSalesOrderView(0).SalesOrderDate.AddDays(CDec(sTemp))
                                .CustomerSalesOrderDetailView(iRowLoop).Pricing = CustomerDetailDataset.CustomerView(0).DefaultPrice
                                ' now calculate Sales Tax (VAT)
                                ReDim detailRows(taxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & .CustomerSalesOrderDetailView(iRowLoop).TaxCode & "'").Length - 1)
                                index = 0
                                'Get the detail rows for this tax code.
                                For detailRowIndex As Integer = 0 To taxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
                                    If taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = .CustomerSalesOrderDetailView(iRowLoop).TaxCode.ToUpper Then
                                        detailRows(index) = taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                                        index += 1
                                    End If
                                Next
                                ' get tax values
                                taxValue = taxFacade.CalculateItemTax(.CustomerSalesOrderDetailView(iRowLoop).TaxCode, .CustomerSalesOrderDetailView(iRowLoop).SalesPrice, _
                                    .CustomerSalesOrderDetailView(iRowLoop).SalesPriceRate, .CustomerSalesOrderDetailView(iRowLoop).ItemCode, _
                                    .CustomerSalesOrderDetailView(iRowLoop).LineNum, .CustomerSalesOrderView(0).SalesOrderCode, detailRows, .TransactionItemTaxDetailView, _
                                    .CustomerSalesOrderDetailView(iRowLoop).QuantityOrdered, .CustomerSalesOrderDetailView(iRowLoop).ExtPrice, _
                                    .CustomerSalesOrderDetailView(iRowLoop).ExtPriceRate, .CustomerSalesOrderView(0).CurrencyCode, _
                                    .CustomerSalesOrderView(0).ExchangeRate) ' TJS 17/05/09
                                ' are we accepting the source tax calculation ?
                                If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ACCEPT_SOURCE_SALES_TAX_CALCULATION).ToUpper = "YES" Or _
                                    GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 17/05/09 TJS 26/10/11
                                    ' yes, get value
                                    strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_TAX) ' TJS 17/05/09
                                    ' has tax value been supplied ?
                                    If strTempValue <> "" Then ' TJS 17/05/09
                                        ' yes, must be numeric and not contain any commas
                                        If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 17/05/09 TJS 29/05/09
                                            ' must not be negative
                                            If CDec(strTempValue) >= 0 Then ' TJS 17/05/09
                                                ' Unit price valid, use it
                                                ' start of code added FA 17/10/11
                                                If strItemKitPricing = "Item Price" Then
                                                    ' is this the last row of the kit ?
                                                    If iRowLoop < (iLineNum - 1) + (iItemRowsAdded - 1) Then
                                                        ' no, set tax as relevant fraction of total tax price
                                                        If decKitTotalPriceRate = 0 Then
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) / iItemRowsAdded, 2)
                                                        Else
                                                            .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) * decSalesPriceRate / decKitTotalPriceRate, 2)
                                                        End If
                                                        decKitPriceTaxSumRate = decKitPriceTaxSumRate + .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate
                                                    Else
                                                        ' yes, set price as remainder to prevent rounding errors
                                                        .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) - decKitPriceTaxSumRate, 2)
                                                    End If
                                                Else
                                                    ' end of code added FA 17/10/11
                                                    .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = CDec(strTempValue) ' TJS 17/05/09 TJS 26/05/09
                                                End If
                                                dblOrderTaxRate += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09
                                                .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount = RoundDecimalValue(.CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 17/05/09 TJS 26/05/09
                                                dblOrderTax += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09
                                                ' find relevant tax detail record
                                                bTaxRecordFound = False ' TJS 02/12/11
                                                For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                    If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerSalesOrderDetailView(iRowLoop).SalesOrderCode And _
                                                        .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerSalesOrderDetailView(iRowLoop).LineNum And _
                                                        .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerSalesOrderDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                        bTaxRecordFound = True ' TJS 02/12/11
                                                        .TransactionItemTaxDetailView(iTaxLoop).TaxAmountRate = .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09 TJS 18/03/11
                                                        .TransactionItemTaxDetailView(iTaxLoop).TaxAmount = .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09 TJS 26/05/09 TJS 18/03/11
                                                        .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = True ' TJS 14/07/09 TJS 18/03/11
                                                        .TransactionItemTaxDetailView(iTaxLoop).IsTAOverridden = True ' TJS 24/02/12
                                                    End If
                                                Next
                                                If Not bTaxRecordFound Then ' TJS 02/12/11
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Cannot apply Sales Tax to an Item with no active Tax Code - " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 02/12/11
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Tax Value must not be negative for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 17/05/09
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Tax Value must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 17/05/09
                                        End If
                                    Else
                                        ' no, use values from tax facade
                                        .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount = taxValue.taxAmount ' TJS 17/05/09
                                        dblOrderTax += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09
                                        .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = taxValue.taxAmountRate ' TJS 17/05/09
                                        dblOrderTaxRate += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09
                                        For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                            If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerSalesOrderDetailView(iRowLoop).SalesOrderCode And _
                                                .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerSalesOrderDetailView(iRowLoop).LineNum And _
                                                .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerSalesOrderDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 18/03/11
                                            End If
                                        Next
                                    End If
                                Else
                                    ' no, use values from tax facade
                                    .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount = taxValue.taxAmount
                                    dblOrderTax += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmount
                                    .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate = taxValue.taxAmountRate
                                    dblOrderTaxRate += .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate
                                    For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                        If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerSalesOrderDetailView(iRowLoop).SalesOrderCode And _
                                            .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerSalesOrderDetailView(iRowLoop).LineNum And _
                                            .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerSalesOrderDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                            .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 18/03/11
                                        End If
                                    Next
                                    ' start of code added TJS 14/07/09
                                    strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_TAX)
                                    ' has sales tax value been supplied ?
                                    If strTempValue <> "" Then
                                        ' yes, must be numeric
                                        If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then
                                            ' must not be negative
                                            If CDec(strTempValue) >= 0 Then
                                                ' is value same as IS calculation (ignore roundings of 0.01 or less) ?
                                                If CDec(strTempValue) > .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate + 0.01 Or CDec(strTempValue) < .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate - 0.01 Then
                                                    ' no, 
                                                    If strWarningMessage <> "" Then
                                                        strWarningMessage = strWarningMessage & vbCrLf
                                                    End If
                                                    strWarningMessage = strWarningMessage & "Sales Tax corrected for " & strItemID & ", XML file contained " & strTempValue & ", Tax Facade calculated " & .CustomerSalesOrderDetailView(iRowLoop).SalesTaxAmountRate ' TJS 24/08/12
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Tax Value must not be negative for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) '  TJS 27/02/10
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Tax Value must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) '  TJS 27/02/10
                                        End If
                                    End If
                                    ' end of code added TJS 14/07/09
                                End If

                                ' start of code added TJS 03/04/09
                                ' Check for any CustomerSalesOrderDetail table Custom Fields
                                XMLCustomFields = XMLItemTemp.XPathSelectElements(GENERIC_XML_ORDER_INVOICE_ITEM_CUSTOM_FIELDS)
                                If XMLCustomFields IsNot Nothing Then
                                    For Each XMLCustomField In XMLCustomFields
                                        Try
                                            XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                                            ' has field name been defined ?
                                            If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                                ' does it exist ?
                                                bCustomFieldExists = False ' TJS 21/04/09
                                                For iColumnLoop = 0 To .CustomerSalesOrderDetailView.Columns.Count - 1 ' TJS 21/04/09
                                                    If .CustomerSalesOrderDetailView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 21/04/09
                                                        bCustomFieldExists = True ' TJS 21/04/09
                                                        Exit For ' TJS 21/04/09
                                                    End If
                                                Next
                                                If bCustomFieldExists Then ' TJS 21/04/09
                                                    .CustomerSalesOrderDetailView(iRowLoop)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerSalesOrderDetailView", _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 21/04/09

                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Field Name attribute not provided for Item Custom Field", _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)

                                            End If

                                        Catch ex As Exception
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                                 m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 29/05/09

                                        End Try
                                    Next
                                End If
                                ' end of code added TJS 03/04/09

                                ' start of code added TJS 18/01/13
                                If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOCATE_AND_RESERVE_STOCK).ToUpper = "YES" Then
                                    SalesOrderFacade.AllocateStock(.CustomerSalesOrderDetailView(iRowLoop))
                                    SalesOrderFacade.ReserveStock(.CustomerSalesOrderDetailView(iRowLoop))
                                End If
                                ' end of code added TJS 18/01/13

                                ' TJS/FA 19/04/12 Note for future  Add non stock correction figure here
                                ' and reset the correction flag
                                If decKitTotalRemaining <> 0 Then
                                    m_ImportExportConfigFacade.WriteLogProgressRecord("Rounding differential in Kit calculation - " & decKitTotalRemaining)
                                End If
                            Next
                            iLineNum = iLineNum + iItemRowsAdded ' TJS 18/03/11

                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "015", strItemID & " not found", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09

                        End If

                    Catch ex As Exception
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Inventory Item could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                             m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 29/05/09 TJS 18/04/11

                    End Try
                Next
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "No Order Items found", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
            End If

            ' RCD 2019/08/13 Start SalesRepGroupCode
            Dim commissionTotal As Decimal = 0
            Dim commissionTotalRate As Decimal = 0
            For counter As Integer = 0 To .CustomerSalesOrderDetailView.Rows.Count - 1
                commissionTotal += .CustomerSalesOrderDetailView(counter).CommissionAmount
                commissionTotalRate += .CustomerSalesOrderDetailView(counter).CommissionAmountRate
            Next
            .CustomerSalesRepCommissionView(0).CommissionPercent = 100
            .CustomerSalesRepCommissionView(0).CommissionTotal = commissionTotal
            .CustomerSalesRepCommissionView(0).CommissionTotalRate = commissionTotalRate
            ' RCD 2019/08/13 End SalesRepGroupCode

            .CustomerSalesOrderView(0).SubTotal = dblOrderTotal
            .CustomerSalesOrderView(0).SubTotalRate = dblOrderTotalRate ' TJS 26/05/09

            strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_TOTALS & "/Shipping") ' TJS 09/03/09
            ' has shipping charge been supplied ?
            If strTempValue <> "" Then ' TJS 09/03/09
                ' yes, must be numeric and not contain any commas
                If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                    ' must not be negative
                    If CDec(strTempValue) >= 0 Then ' TJS 09/03/09
                        ' shipping charge valid, overwrite customer default
                        ' do prices include tax >
                        If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 08/06/09 
                            ' yes, get price before tax
                            .CustomerSalesOrderView(0).FreightRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, _
                                .TransactionItemTaxDetailView, TRANSACTION_TAX_ITEM_FREIGHT, 0, 1, CDec(strTempValue), _
                                .CustomerSalesOrderView(0).FreightTaxCode, .CustomerSalesOrderView(0).CurrencyCode, _
                                .CustomerSalesOrderView(0).ExchangeRate, .CustomerSalesOrderView(0).SalesOrderCode, True) ' TJS 08/06/09
                        Else
                            .CustomerSalesOrderView(0).FreightRate = CDec(strTempValue) ' TJS 09/03/09 TJS 26/05/09
                        End If
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Order Shipping charge must not be negative", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                    End If
                Else
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Order Shipping charge must be numeric", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
                End If
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Order Shipping charge is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09
            End If
            .CustomerSalesOrderView(0).Freight = RoundDecimalValue(.CustomerSalesOrderView(0).FreightRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 26/05/09
            .CustomerSalesOrderView(0).FreightTaxCode = Me.m_ImportExportDataset.CustomerShipTo(0).FreightTax ' TJS 02/12/11

            ' now calculate Sales Tax on freight (VAT)
            ReDim detailRows(taxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & .CustomerSalesOrderView(0).FreightTaxCode & "'").Length - 1)
            index = 0
            ' Get the detail rows for freight tax code.
            For detailRowIndex As Integer = 0 To taxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
                If taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = .CustomerSalesOrderView(0).FreightTaxCode.ToUpper Then
                    detailRows(index) = taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                    index += 1
                End If
            Next
            dblFreight = .CustomerSalesOrderView(0).Freight
            dblFreightRate = .CustomerSalesOrderView(0).FreightRate
            ' get tax values
            taxValue = taxFacade.CalculateTransactionTax(.CustomerSalesOrderView(0).FreightTaxCode, dblFreight, _
                dblFreightRate, TRANSACTION_TAX_ITEM_FREIGHT, .CustomerSalesOrderView(0).SalesOrderCode, _
                detailRows, .TransactionItemTaxDetailView, .CustomerSalesOrderView(0).CurrencyCode, _
                .CustomerSalesOrderView(0).ExchangeRate)
            ' are we accepting the source tax calculation ?
            If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ACCEPT_SOURCE_SALES_TAX_CALCULATION).ToUpper = "YES" Or _
                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 26/05/09 TJS 26/10/11
                ' yes, get total tax value
                strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_TOTALS & "/Tax") ' TJS 26/05/09
                ' has tax value been supplied ?
                If strTempValue <> "" Then ' TJS 26/05/09
                    ' yes, must be numeric and not contain any commas
                    If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 26/05/09 TJS 29/05/09
                        ' must not be negative
                        If CDec(strTempValue) >= 0 Then ' TJS 26/05/09
                            ' total tax value valid, use it
                            .CustomerSalesOrderView(0).FreightTaxRate = CDec(strTempValue) - dblOrderTaxRate ' TJS 26/05/09
                            .TransactionTaxDetailView(0).TaxAmountRate = .CustomerSalesOrderView(0).FreightTaxRate ' TJS 26/05/09 TJS 11/06/09
                            dblOrderTaxRate += .CustomerSalesOrderView(0).FreightTaxRate ' TJS 26/05/09
                            .CustomerSalesOrderView(0).FreightTax = RoundDecimalValue(.CustomerSalesOrderView(0).FreightTaxRate / .CustomerSalesOrderView(0).ExchangeRate) ' TJS 26/05/09
                            .TransactionTaxDetailView(0).TaxAmount = .CustomerSalesOrderView(0).FreightTax ' TJS 26/05/09 TJS 11/06/09
                            dblOrderTax += .CustomerSalesOrderView(0).FreightTax ' TJS 26/05/09
                            .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = True ' TJS 14/07/09
                            .TransactionTaxDetailView(0).IsTAOverridden = True ' TJS 24/02/12
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Order Total Tax Value must not be negative", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 26/05/09 TJS 27/02/10
                        End If
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Order Total Tax Value must be numeric", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 26/05/09 TJS 27/02/10
                    End If
                Else
                    ' no, use values from tax facade
                    .CustomerSalesOrderView(0).FreightTax = taxValue.taxAmount ' TJS 26/05/09
                    dblOrderTax += .CustomerSalesOrderView(0).FreightTax ' TJS 26/05/09
                    .CustomerSalesOrderView(0).FreightTaxRate = taxValue.taxAmountRate ' TJS 26/05/09
                    dblOrderTaxRate += .CustomerSalesOrderView(0).FreightTaxRate ' TJS 26/05/09
                    .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09
                End If
            Else
                ' no, use values from tax facade
                .CustomerSalesOrderView(0).FreightTax = taxValue.taxAmount
                dblOrderTax = dblOrderTax + .CustomerSalesOrderView(0).FreightTax
                .CustomerSalesOrderView(0).FreightTaxRate = taxValue.taxAmountRate
                dblOrderTaxRate = dblOrderTaxRate + .CustomerSalesOrderView(0).FreightTaxRate
                .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09
            End If

            SalesOrderFacade.ComputeTotals() ' TJS 08/06/09
            ' start of code removed TJS 08/06/09
            '.CustomerSalesOrderView(0).Tax = dblOrderTax
            '.CustomerSalesOrderView(0).TaxRate = dblOrderTaxRate
            '.CustomerSalesOrderView(0).Total = .CustomerSalesOrderView(0).SubTotal + .CustomerSalesOrderView(0).Freight + _
            '    .CustomerSalesOrderView(0).Tax + .CustomerSalesOrderView(0).FreightTax
            '.CustomerSalesOrderView(0).TotalRate = .CustomerSalesOrderView(0).SubTotalRate + .CustomerSalesOrderView(0).FreightRate + _
            '    .CustomerSalesOrderView(0).TaxRate + .CustomerSalesOrderView(0).FreightTaxRate
            '.CustomerSalesOrderView(0).Balance = .CustomerSalesOrderView(0).Total - .CustomerSalesOrderView(0).CouponDiscount ' TJS 08/06/09
            '.CustomerSalesOrderView(0).BalanceRate = .CustomerSalesOrderView(0).TotalRate - .CustomerSalesOrderView(0).CouponDiscountRate ' TJS 08/06/09
            ' end of code removed TJS 08/06/09

            If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_PAYMENT_METHOD).ToUpper = "CREDIT CARD" Then ' TJS 29/05/09
                .CustomerSalesOrderView(0).PaymentTermCode = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_CREDIT_CARD_PAYMENT_TERM) ' TJS 20/02/09
            End If

            ' start of code added TJS 08/06/09
            dblCouponDiscount = 0
            ' is there a Discount Coupon ?
            If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_DISCOUNT_COUPON_DESCRIPTION) <> "" Or _
                GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_DISCOUNT_COUPON_VALUE) <> "" Then
                ' yes, has a Coupon Code been included ?
                If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_CUSTOMER_SALES_COUPON) = "" Then
                    ' no, get discount value
                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_DISCOUNT_COUPON_VALUE)
                    ' has discount vale been supplied ?
                    If strTempValue <> "" Then
                        ' yes, must be numeric and not contain any commas
                        If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then
                            ' must not be negative
                            If CDbl(strTempValue) >= 0 Then
                                ' discount value valid, save it for later
                                dblCouponDiscount = CDec(strTempValue)
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "027", "Discount Coupon Value must not be negative", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 27/02/10
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "027", "Discount Coupon Value must be numeric", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 27/02/10
                        End If
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "027", "Discount Coupon Value must not be blank", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 27/02/10
                    End If
                Else
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "025", "Cannot have both a Sales Coupon and a Discount Coupon", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                End If
            End If
            ' end of code added TJS 08/06/09

            ' save order - did it save ok ?
            strSalesOrderValidationErrorMessage = "" ' TJS 21/04/09
            SalesOrderFacade.IncrementSaveCounterID() ' TJS 02/04/14
            bSalesOrderSaved = SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)), TransactionType.SalesOrder, m_BaseProductName & " Create Order", False) ' TJS 08/06/09
            ' start of code added TJS 08/06/09
            ' did it save and do we have a discount to apply ?
            If bSalesOrderSaved And dblCouponDiscount > 0 Then
                ' yes, create discount coupon
                strTempValue = CreateDiscountCoupon(dblCouponDiscount, .CustomerSalesOrderView(0).SalesOrderCode, CustomerCode, .CustomerSalesOrderView(0).CurrencyCode, .CustomerSalesOrderView(0).ExchangeRate, XMLGenericOrder, xmlResponseDetailNode)
                ' was it created successfully ?
                If strTempValue <> "" Then
                    ' yes,  use it
                    Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerCouponView.TableName, _
                        "ReadCustomerCouponView_DEV000221", AT_COUPON_CODE, strTempValue, AT_CUSTOMER_CODE, CustomerCode, _
                        Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                        Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                    If Me.m_ImportExportDataset.CustomerCouponView.Count > 0 Then
                        ' coupon valid for customer, check date range is valid
                        SalesOrderFacade.AssignCoupon(Me.m_ImportExportDataset.CustomerCouponView(0), .CustomerSalesOrderView(0))
                        SalesOrderFacade.ComputeTotals()
                        strSalesOrderValidationErrorMessage = ""
                        bSalesOrderSaved = SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)), TransactionType.SalesOrder, m_BaseProductName & " Create Order", False)

                    Else
                        SalesOrderFacade.VoidOrder()
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "025", "Sales Coupon not valid or not valid for Customer", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString)
                    End If
                Else
                    SalesOrderFacade.VoidOrder()
                    Return xmlResponseDetailNode
                End If
            End If
            ' end of code added TJS 08/06/09

            If bSalesOrderSaved Then ' TJS 08/06/09
                ' yes, are there any payment details nodes ?
                XMLPaymentDetails = XMLGenericOrder.XPathSelectElements(GENERIC_XML_ORDER_PAYMENT_DETAILS_LIST) ' TJS 02/12/11
                If GetXMLElementListCount(XMLPaymentDetails) > 0 Then ' TJS 07/07/09 TJS 02/12/11
                    ' yes
                    For Each XMLPaymentNode As XElement In XMLPaymentDetails ' TJS 02/12/11
                        XMLTemp = XDocument.Parse(XMLPaymentNode.ToString) ' TJS 02/12/11
                        ' is payment method set to Credit card ?
                        If GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_PAYMENT_METHOD).ToUpper = "CREDIT CARD" Then ' TJS 29/05/09 TJS 07/07/09 TJS 02/12/11
                            ' yes, is transaction status set for Card Authorisation
                            If GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "AUTHORISECARD" Or _
                                GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "" Then ' TJS 07/07/09
                                ' yes, is card authorisation enabled for this source ? TJS 02/12/11
                                If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_AUTHORISE_CARD_ON_IMPORT).ToUpper = "YES" Then ' TJS 07/07/09 TJS 02/12/11
                                    ' yes, process card
                                    xmlResponseDetailNode = AuthoriseCard(XMLGenericOrder, XMLTemp, SalesOrderFacade, SalesOrderDataset, CustomerCode, contactCode, .CustomerSalesOrderView(0).SalesOrderCode, .CustomerSalesOrderView(0).TotalRate, False) ' TJS 03/02/09 TJS 02/12/11 TJS 10/06/12 TJS 18/01/13

                                Else
                                    ' card processing not enabled for this source
                                    xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/01/09
                                    xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/01/09
                                    xmlResponseDetailNode.Add(New XElement("OrderNumber", .CustomerSalesOrderView(0).SalesOrderCode)) ' TJS 29/01/09
                                    xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/01/09
                                    If strWarningMessage <> "" Then ' TJS 29/01/09
                                        xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/01/09
                                    End If
                                    Return xmlResponseDetailNode
                                End If

                            ElseIf GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "CARDAUTHORISED" Or _
                                GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "PAYMENTRECEIVED" Then ' TJS 07/07/09 TJS 02/12/11
                                ' no, card has been processed by external system
                                ' has payment been captured ?
                                If GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "CARDAUTHORISED" Then ' TJS 07/07/09 TJS 02/12/11
                                    ' no
                                    xmlResponseDetailNode = RecordCardAuthorisation(XMLTemp, SalesOrderFacade, SalesOrderDataset, CustomerCode, contactCode, .CustomerSalesOrderView(0).SalesOrderCode, .CustomerSalesOrderView(0).TotalRate, False) ' TJS 07/07/09 TJS 02/12/11 TJS 10/06/12
                                Else
                                    ' yes
                                    xmlResponseDetailNode = RecordCardPayment(XMLTemp, SalesOrderFacade, SalesOrderDataset, CustomerCode, contactCode, .CustomerSalesOrderView(0).SalesOrderCode, .CustomerSalesOrderView(0).TotalRate, False) ' TJS 07/07/09 TJS 02/12/11 TJS 10/06/12
                                End If

                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "103", "Invalid Credit Card TransactionStatus - " & GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_CREDIT_CARD_TRANSACTION_STATUS), _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 07/07/09

                            End If
                            ' does response contain only a single node ?
                            If xmlResponseDetailNode.HasElements Then
                                ' no, update Order to Approve Credit stage and return error details as warning message
                                SalesOrderFacade.ExecuteNonQuery(CommandType.Text, "UPDATE dbo.CustomerSalesOrderWorkflow SET Stage = 'Approve Credit', DateModified = getdate() WHERE SalesOrderCode = '" & .CustomerSalesOrderView(0).SalesOrderCode & "'", Nothing) ' TJS 06/02/09
                                If strWarningMessage <> "" Then ' TJS 20/02/09
                                    strWarningMessage = strWarningMessage & vbCrLf ' TJS 20/02/09
                                End If
                                strWarningMessage = strWarningMessage & xmlResponseDetailNode.XPathSelectElement("/ErrorMessage").Value ' TJS 20/02/09

                            ElseIf .CustomerSalesOrderWorkflowView(0).Stage = "Approve Credit" Then ' TJS 27/09/10
                                SalesOrderFacade.ExecuteNonQuery(CommandType.Text, "UPDATE dbo.CustomerSalesOrderWorkflow SET Stage = 'Print Pick Note', DateModified = getdate() WHERE SalesOrderCode = '" & .CustomerSalesOrderView(0).SalesOrderCode & "'", Nothing) ' TJS 27/09/10
                            End If
                            xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/01/09
                            xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/01/09
                            xmlResponseDetailNode.Add(New XElement("OrderNumber", .CustomerSalesOrderView(0).SalesOrderCode)) ' TJS 29/01/09
                            xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/01/09
                            If strWarningMessage <> "" Then ' TJS 29/01/09
                                xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/01/09
                            End If
                            Return xmlResponseDetailNode

                        ElseIf GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_PAYMENT_METHOD).ToUpper = "SOURCE" Then ' TJS 30/12/09
                            ' no, payment is taken by source so create payment record 
                            xmlResponseDetailNode = RecordSourcePayment(XMLTemp, SalesOrderFacade, SalesOrderDataset, CustomerCode, contactCode, .CustomerSalesOrderView(0).SalesOrderCode, SalesOrderDataset.CustomerSalesOrderView(0).TotalRate, False, False) ' TJS 30/12/09 TJS 10/6/12 TJS 02/08/12
                            ' does response contain only a single node ?
                            If xmlResponseDetailNode IsNot Nothing AndAlso xmlResponseDetailNode.HasElements Then ' TJS 30/12/09 TJS 29/01/14
                                ' no, update Order to Approve Credit stage and return error details as warning message
                                SalesOrderFacade.ExecuteNonQuery(CommandType.Text, "UPDATE dbo.CustomerSalesOrderWorkflow SET Stage = 'Approve Credit', DateModified = getdate() WHERE SalesOrderCode = '" & .CustomerSalesOrderView(0).SalesOrderCode & "'", Nothing) ' TJS 30/12/09
                                If strWarningMessage <> "" Then  ' TJS 30/12/09
                                    strWarningMessage = strWarningMessage & vbCrLf ' TJS 30/12/09
                                End If
                                strWarningMessage = strWarningMessage & xmlResponseDetailNode.XPathSelectElement("/ErrorMessage").Value ' TJS 30/12/09

                            ElseIf .CustomerSalesOrderWorkflowView(0).Stage = "Approve Credit" Then ' TJS 27/09/10
                                SalesOrderFacade.ExecuteNonQuery(CommandType.Text, "UPDATE dbo.CustomerSalesOrderWorkflow SET Stage = 'Print Pick Note', DateModified = getdate() WHERE SalesOrderCode = '" & .CustomerSalesOrderView(0).SalesOrderCode & "'", Nothing) ' TJS 27/09/10
                            End If
                            xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 30/12/09
                            xmlResponseDetailNode.Add(New XElement("Status", "Success"))  ' TJS 30/12/09
                            xmlResponseDetailNode.Add(New XElement("OrderNumber", .CustomerSalesOrderView(0).SalesOrderCode)) ' TJS 30/12/09
                            xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 30/12/09
                            If strWarningMessage <> "" Then ' TJS 29/01/09
                                xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage))  ' TJS 30/12/09
                            End If
                            Return xmlResponseDetailNode ' TJS 30/12/09

                        Else
                            ' payment method not set to credit card
                            If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_AUTHORISE_CARD_ON_IMPORT).ToUpper = "YES" Then ' TJS 07/07/09
                                If strWarningMessage <> "" Then ' TJS 07/07/09
                                    strWarningMessage += vbCrLf & "Also, Card Authorisation enabled, but Payment Method is not Credit Card" ' TJS 07/07/09
                                Else
                                    strWarningMessage = "Card Authorisation enabled, but Payment Method is not Credit Card" ' TJS 07/07/09
                                End If
                            End If
                            xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 07/07/09
                            xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 07/07/09
                            xmlResponseDetailNode.Add(New XElement("OrderNumber", .CustomerSalesOrderView(0).SalesOrderCode)) ' TJS 07/07/09
                            xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 07/07/09
                            If strWarningMessage <> "" Then ' TJS 07/07/09
                                xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 07/07/09
                            End If
                            Return xmlResponseDetailNode ' TJS 07/07/09

                        End If
                    Next
                Else
                    ' no payment details provided 
                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_AUTHORISE_CARD_ON_IMPORT).ToUpper = "YES" Then ' TJS 07/07/09
                        If strWarningMessage <> "" Then ' TJS 29/01/09
                            strWarningMessage += vbCrLf & "Also, Card Authorisation enabled, but no Payment Details provided for card authorisation or Payment Method is not Credit Card" ' TJS 29/05/09 TJS 07/07/09
                        Else
                            strWarningMessage = "Card Authorisation enabled, but no Payment Details provided  for card authorisation or Payment Method is not Credit Card" ' TJS 29/05/09
                        End If
                    End If
                    xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/05/09
                    xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/05/09
                    xmlResponseDetailNode.Add(New XElement("OrderNumber", .CustomerSalesOrderView(0).SalesOrderCode)) ' TJS 29/05/09
                    xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/05/09
                    If strWarningMessage <> "" Then ' TJS 07/07/09
                        xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/05/09
                    End If
                    Return xmlResponseDetailNode ' TJS 29/05/09

                End If

            Else
                For iTableLoop = 0 To SalesOrderFacade.RelatedTables(TransactionType.SalesOrder).Length - 1 ' TJS 21/04/09
                    For iRowLoop = 0 To .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Rows.Count - 1 ' TJS 21/04/09
                        For iColumnLoop = 0 To .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Columns.Count - 1 ' TJS 21/04/09
                            If .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 10/02/09 TJS 21/04/09
                                strSalesOrderValidationErrorMessage = strSalesOrderValidationErrorMessage & .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).TableName & _
                                    "." & .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Columns(iColumnLoop).ColumnName & ", " & _
                                    .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 10/02/09 TJS 21/04/09 TJS 25/04/09
                            End If
                        Next
                    Next
                Next

                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", "Failed to save Order - " & strSalesOrderValidationErrorMessage, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", XMLGenericOrder.ToString) ' TJS 09/03/09 TJS 25/04/09
            End If
                End With
                SalesOrderFacade.Dispose()
                SalesOrderDataset.Dispose()
                CustomerDetailFacade.Dispose()
                taxSchemeFacade.Dispose()
                taxFacade.Dispose()
                taxSchemeDataset.Dispose()

            Else
                xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("OrderNumber", Me.m_ImportExportDataset.CustomerSalesOrder(0).SalesOrderCode)) ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/01/09
                If strWarningMessage <> "" Then ' TJS 29/01/09
                    xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/01/09
                End If
                Return xmlResponseDetailNode
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateOrder", ex, XMLGenericOrder.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try
    End Function

    Private Sub SalesOrderFacade_InvalidatedOnSaving(ByVal sender As Object, ByVal errorMessage As String) Handles SalesOrderFacade.InvalidatedOnSaving ' TJS 25/04/09

        strSalesOrderValidationErrorMessage = errorMessage & vbCrLf ' TJS 25/04/09

    End Sub

    Private Sub SalesOrderColumnChanged(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)

        If e.Row.Table Is SalesOrderDataset.CustomerSalesOrderView Then
            If e.Column Is SalesOrderDataset.CustomerSalesOrderView.SalesOrderCodeColumn Then
                e.Row(SalesOrderDataset.CustomerSalesOrderView.SourceSalesOrderCodeColumn.ColumnName) = e.ProposedValue
                e.Row(SalesOrderDataset.CustomerSalesOrderView.RootDocumentCodeColumn.ColumnName) = e.ProposedValue
            End If
        End If

    End Sub

    Private Function SendOrderCreditHoldWarning(ByVal strMsgParam As String) As Integer

        bCustomerCreditHoldOrOverLimit = True ' TJS 06/10/09
        strCreditMessage = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("INF0142", New String() {strMsgParam}) ' TJS 06/10/09

    End Function

    Private Function SendOrderCreditLimitWarning(ByVal strMsgParam As String) As Integer

        bCustomerCreditHoldOrOverLimit = True ' TJS 06/10/09
        strCreditMessage = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("QUE0042", New String() {strMsgParam}) ' TJS 06/10/09

    End Function
#End Region

#Region " CreateInvoice "
    Private WithEvents InvoiceFacade As Interprise.Facade.Customer.InvoiceFacade ' TJS 21/04/09
    Private strInvoiceValidationErrorMessage As String ' TJS 21/04/09

    Private Function CreateInvoice(ByVal XMLGenericInvoice As XDocument, ByVal CustomerCode As String, ByVal SourceCode As String) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 24/01/09 | TJs             | 2009.1.00 | Modified to trim any leading or trailing spaces from Source/Customer Order references
        ' 29/01/09 | TJS             | 2009.1.03 | Modified to check an existing invoice record is for the same customer
        '                                        | and changed return XML structure to include warning message option
        ' 03/02/09 | TJS             | 2009.1.04 | Added SalesOrderDataset and ContactCode parameters to AuthoriseCard
        ' 06/02/09 | TJS             | 2009.1.05 | modified to cater for AT_IS_VOIDED parameter on ReadCustomerInvoiceImportExport_DEV000221
        '                                        | and to use new field MerchantOrderID_DEV000221 instead of SalesRepOrderCode 
        '                                        | which is actually constrained to be SalesRepGroupCode
        ' 08/02/09 | TJS             | 2009.1.06 | Modified to set address details in case different from customer record
        '                                        | and to check for a Source Order Ref before looking for a matching invoice
        ' 10/02/09 | TJS             | 2009.1.07 | Modified to add an alternative Item Identification element of the ItemName
        ' 20/02/09 | TJS             | 2009.1.08 | Renamed SOURCE_CONFIG_DEFAULT_CREDIT_CARD_PAYMENT_TERM to reflect underlying DB function
        '                                        | and corrected vbcrlf to vbcr when adding company name to address
        '                                        | Also modified to return success with a warning message if invoice saved, but card payment failed
        ' 09/03/09 | TJS             | 2009.1.09 | Modified to useBuildXMLErrorResponseNodeAndEmail for source error processing
        ' 17/03/09 | TJS             | 2009.1.10 | Modified to cater for SOURCE_CONFIG_SET_DISABLE_FREIGHT_CALCULATION setting
        '                                        | for GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP element, for 
        '                                        | KSI MultiShip module and to set Invoice Currency
        ' 03/04/09 | TJS             | 2009.2.00 | Modified to make name and address optional on imports with an
        '                                        | existing customer account and added support for Custom DB fields
        ' 08/04/09 | TJS             | 2009.2.02 | Trimmed spaces from Customer name elements
        ' 21/04/09 | TJS             | 2009.2.03 | Modified to use Facade Related tables function when creating failed to save error message,
        '                                        | to detect validation error messages on save and to check that Custom Fields actually exist
        ' 25/04/09 | TJS             | 2009.2.04 | Corrected variable used to build failure to save error message, added currency validation and exchange rate settings
        ' 07/05/09 | TJS             | 2009.2.05 | Removed .trim as GetElementText now preforms this
        ' 11/05/09 | TJS             | 2009.2.06 | Modified to cater for SOURCE_CONFIG_IGNORE_VOIDED_ORDERS_AND_INVOICES 
        '                                        | and blank GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF 
        ' 17/05/09 | TJS             | 2009.2.07 | Modified to use the Item Tax Code when calculating Sales Tax (VAT) 
        ' 26/05/09 | TJS             | 2009.2.08 | Modified to use cater for AcceptSourceSalesTaxCalculation, corrected handling of 
        '                                        | currencies other than base, modified to use IS functions to calculate cost amd margin
        ' 29/05/09 | TJS             | 2009.2.09 | Modified to detect commas in numeric values and added checks for XML load errors
        ' 07/06/09 | TJS             | 2009.2.10 | Modified to cater for prices including tax and Item UMC
        ' 11/06/09 | TJS             | 2009.2.12 | Corrected processing of Freight tax when AcceptSourceSalesTaxCalculation is set
        ' 18/06/09 | TJS             | 2009.2.14 | Modified to cater for SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY config option when applying name to order
        ' 07/07/09 | TJS             | 2009.3.00 | Modified to cater for pre-authorised and full processed credit card transactions
        '                                        | Also set discount to 0 when item price is in XML file
        ' 14/07/09 | TJS             | 2009.3.01 | Modified to set custom field flag on TransactionTaxDetailView and 
        '                                        | TransactionItemTaxDetailView when source tax values are being used
        ' 16/07/09 | TJS             | 2009.3.02 | Corrected setting of TransactionTaxDetailView on freight calculation
        ' 14/08/09 | TJS             | 2009.3.03 | Modified to cater for Non-Stock, Kit and Service items not having a WarehouseCode
        '                                        | and added check for valid country
        ' 06/10/09 | TJS             | 2009.3.07 | Modified to abort invoice processing if customer on Credit Hold or over Credit Limit
        ' 16/10/09 | TJS             | 2009.3.08 | Modified to trap failure to create CustomerDetailFacade as this can be due to licence issues
        ' 13/01/10 | TJS             | 2010.0.04 | Modified to cater for SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE
        ' 27/02/10 | TJS             | 2010.0.06 | Corrected procuct and facade name in log/error messages
        ' 19/08/10 | TJs             | 2010.1.00 | Modified to cater for GENERIC_XML_INVOICE_SOURCE_MERCHANT_ID when checking for existing records
        ' 22/09/10 | TJS             | 2010.1.01 | Modified to set SalesRepOrderCode and for Kit Items with fixed compositions
        ' 27/09/10 | TJS             | 2010.1.02 | Modified to set record type when checking for already imported invoices
        ' 04/10/10 | TJS             | 2010.1.05 | Corrected transaction type in AssignItemKit
        ' 03/11/10 | FA              | 2010.1.07 | Modified code to use the correct compute function for kit sales price
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to prevent error when iten details rows don't have matching 
        '                                        | TransactionItemTaxDetail(rows), corrected setting of ShipToCountry
        '                                        | and modified to cater for Item Pricing Kits
        ' 04/04/11 | TJS             | 2011.0.07 | Modified to handle Item Pricing kit where item prices are zero
        ' 05/04/11 | TJS             | 2011.0.08 | Modified to cater for IS 4.8 build using conditional compilation
        ' 18/04/11 | TJS             | 2011.0.11 | Corrected XMLTemp to XMLItemTemp for item processing and error message
        ' 17/10/11 | TJS/FA          | 2011.1.07 | Corrected sales tax calculation for kits with more than one item.  Process was 
        '                                        | multiplying the tax amount by the amount of items, resulting in negative tax values
        '                                        | on the invoices.
        ' 24/10/11 | FA              | 2011.1.08 | Modified Kit item calculation to take into account quantity of items specified for each 
        ' 26/10/11 | TJS             | 2011.1.xx | Corrected setting of source tax values and codes
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2, to handle items with no Unit of Measure record, 
        '                                        | to detect no valid tax rate when applying tax from source, to cater for multiple payments and for IS 6
        ' 24/02/12 | TJS             | 2011.2.08 | Modified to set IsTAOverridden on tax records where value set from source to prevent recalculation when Order converted to Invoice
        ' 19/04/12 | TJS/FA          | 2012.1.01 | Implemented changes from IS 5.6 version 2011.1.17 (19/03/12) and 2011.1.18 (09/04/12)
        ' 14/05/12 | TJS             | 2012.1.03 | Corrected setting of TaxCode from CustomerShipTo
        ' 10/06/12 | TJS             | 2012.1.05 | Modified to record SourceItemCommission and SourceItemFulfillmentCharge
        ' 08/07/12 | TJS             | 2012.1.09 | Modified to cater for UseShipToClassTemplate
        ' 20/07/12 | TJS             | 2012.1.10 | Corrected selection of Warehouse code from ShipToTemplate when UseShipToClassTemplate is set
        ' 02/08/12 | TJS             | 2012.1.11 | Added option to post invoice
        ' 24/08/12 | TJS             | 2012.1.14 | Modified for Connected Business 7
        ' 18/01/13 | TJS             | 2012.1.17 | Modified to cater for AllocateAndReserveStock and correction to credit card processing
        ' 19/09/13 | TJS             | 2013.3.00 | Modified to cater for ImportMissingItemsAsNonStock
        ' 29/01/14 | TJS             | 2013.4.07 | Modified to prevent error if RecordSourcePayment doesn't return anything
        ' 13/02/14 | TJS             | 2014.0.00 | Modified references for CB 14
        ' 02/04/14 | TJs             | 2014.0.01 | Modified to cater for Item Bundles and some additional CB fields
        '                                        | Corrected error when order has quantity > 1 for item priced kits
        ' 23/05/14 | TJS             | 2014.0.02 | Modified to cater for CB 14.0.01 replacing IsBase field with DefaultSelling field
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade
        Dim XMLItemTemp As XDocument, XMLTemp As XDocument, XMLInvoiceItems As System.Collections.Generic.IEnumerable(Of XElement) ' TJS 18/03/11
        Dim XMLPaymentDetails As System.Collections.Generic.IEnumerable(Of XElement), XMLCustomFields As System.Collections.Generic.IEnumerable(Of XElement) ' TJS 03/04/09 TJS 02/12/11
        Dim XMLCustomField As XElement, XMLInvoiceItem As XElement, xmlResponseDetailNode As XElement ' TJS 03/04/09
        Dim xmlShippingDetails As XElement, commandSetRead As String()() ' TJS 08/02/09 TJS 19/08/10
        Dim rowGroupMethodDetail As Lerryn.Framework.ImportExport.DatasetGateway.ImportExportDatasetGateway.SystemShippingMethodGroupDetailRow ' TJS 17/03/09
        Dim detailRows() As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway.SystemTaxSchemeDetailViewRow
        Dim taxFacade As Interprise.Facade.Base.TaxFacade, taxSchemeFacade As Interprise.Facade.Base.TaxSchemeFacade
        Dim taxSchemeDataset As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway
        Dim taxValue As Interprise.Facade.Base.TaxFacade.TaxValue, itemView As DataView
        Dim ItemKitDataset As Interprise.Framework.Base.DatasetGateway.ItemKitDatasetGateway ' TJS 22/09/10
        Dim ItemKitFacade As Interprise.Facade.Customer.CustomerItemKitFacade, itemKitDetailRows As DataRow() ' TJS 22/09/10
        Dim ItemBundleDataset As Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway ' TJS 02/04/14
        Dim ItemBundleFacade As Interprise.Facade.Customer.ItemBundleFacade ' TJS 02/04/14
        Dim ItemBundleRow As Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway.InventoryBundleConfiguratorViewRow ' TJS 02/04/14
        Dim shiptoCode As String, contactCode As String, contactFullName As String
        Dim index As Integer, iLineNum As Integer, dblInvoiceTotal As Decimal, dblInvoiceTotalRate As Decimal ' TJS 26/05/09
        Dim dblInvoiceTax As Decimal, dblInvoiceTaxRate As Decimal, dblFreight As Decimal, dblFreightRate As Decimal
        Dim iTableLoop As Integer, iColumnLoop As Integer, iRowLoop As Integer, sTemp As String, strErrMsg As String ' TJS 21/04/09
        Dim bInvoiceExists As Boolean, strWarningMessage As String, strTempValue As String, strItemQty As String ' TJS 29/01/09 TJS 08/02/09 TJS 18/03/11
        Dim strItemPrice As String, strBillingCustomerName As String, strBillingCompanyName As String ' TJS 08/02/09 TJS 18/03/11
        Dim strShippingCustomerName As String, strShippingCompanyName As String, strItemID As String ' TJS 08/02/09 TJS 09/03/09
        Dim strShippingMethod As String, strShippingMethodGroup As String, bCustomFieldExists As Boolean ' TJS 17/03/09 TJS 21/04/09
        Dim strShippingDate As String = String.Empty ' RCD 08/09/2019
        Dim strLatestShippingDate As String = String.Empty ' RCD 08/12/2019
        Dim strNotes As String = String.Empty ' RCD 08/13/2019
        Dim strSalesAgency As String = String.Empty ' RCD 08/13/2019
        Dim strOrderTaker As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerName As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerPhone As String = String.Empty ' RCD 08/13/2019
        Dim strBuyerEmail As String = String.Empty ' RCD 08/13/2019
        Dim strCreditCardToken As String = String.Empty ' RCD 08/13/2019
        Dim strCustomerComments As String = String.Empty ' RCD 08/15/2019
        Dim strWarehouseCode As String, strItemKitPricing As String, iItemPtr As Integer, iBundlePtr As Integer ' TJS 08/06/09 TJS 22/09/10 TJS 02/04/14
        Dim iItemRowsAdded As Integer, iTaxLoop As Integer, iBundleRow As Integer, decSalesPriceRate As Decimal ' TJS 18/03/11 TJS 02/04/14
        Dim decKitPriceSumRate As Decimal, decKitTotalPriceRate As Decimal, bTaxRecordFound As Boolean ' TJS 18/03/11 TJS 02/12/11
        Dim decKitPriceTaxSumRate As Decimal, decBundleTotalPriceRate As Decimal, decBundlePriceSumRate As Decimal ' FA 17/10/11 TJS 02/04/14
        Dim strNegKitPriceMsg As String = "", decKitTotalRemaining As Decimal = 0   ' TJS/FA 19/04/12
        Dim decActualKitTotal As Decimal = 0, decKitDifferential As Decimal = 0 ' TJS/FA 19/04/12
        Dim bPostInvoice As Boolean, bSkipUMCAandWarehouseCheck As Boolean  ' TJS 02/08/12 TJS 19/09/13

        Try
            bCustomerCreditHoldOrOverLimit = False ' TJS 06/10/09
            strCreditMessage = "" ' TJS 06/10/09

            ' first check if invoice already entered but source hasn't received acknowledgement
            Me.m_ImportExportDataset.EnforceConstraints = False
            strWarningMessage = "" ' TJS 29/01/09
            ' is there a Source Invoice Ref ?
            If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF) <> "" Then
                ' yes, check if invoice already imported
                If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_IGNORE_VOIDED_ORDERS_AND_INVOICES).ToUpper = "YES" Then ' TJS 11/05/09
                    ' is there a Store Merchant ID ?
                    If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_MERCHANT_ID) <> "" Then ' TJS 22/09/10
                        ' yes, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_MERCHANT_ID), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Invoice"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_MERCHANT_ID), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Invoice"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    Else
                        If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Invoice"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Invoice"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    End If
                Else
                    ' is there a Store Merchant ID ?
                    If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_MERCHANT_ID) <> "" Then ' TJS 22/09/10
                        ' yes, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_MERCHANT_ID), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Invoice"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_MERCHANT_ID), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Invoice"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    Else
                        ' no, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Invoice"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Invoice"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    End If
                End If
                Me.LoadDataSet(commandSetRead, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 22/09/10
                If Me.m_ImportExportDataset.CustomerInvoice.Count > 0 Then ' TJS 29/01/09
                    If Me.m_ImportExportDataset.CustomerInvoice(0).BillToCode = CustomerCode Then ' TJS 29/01/09 TJS 03/04/09 TJS 11/05/09
                        bInvoiceExists = True ' TJS 29/01/09
                        strWarningMessage = "Invoice with Source Ref " & GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF) & " already imported" ' TJS 29/01/09 TJS 03/04/09
                    Else
                        bInvoiceExists = True ' TJS 29/01/09 TJS 11/05/09
                        strWarningMessage = "Invoice with Source Ref " & GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF) & " already exists, but for CustomerCode " & Me.m_ImportExportDataset.CustomerInvoice(0).BillToCode & ", not " & CustomerCode ' TJS 29/01/09 TJS 03/04/09
                    End If
                Else
                    bInvoiceExists = False ' TJS 29/01/09
                End If
            Else
                ' no source reference provided, always create new invoice
                bInvoiceExists = False ' TJS 08/02/09
            End If
            ' did we find a matching invoice
            If Not bInvoiceExists Then ' TJS 29/01/09
                ' no, create customer dataset and facade
                Try ' TJS 16/10/09
                    CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
                    CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset)

                Catch ex As Exception ' TJS 16/10/09
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "090", "Cannot create CustomerDetailFacade - suspect Interprise Solutions Licence error or User count exceeded", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 16/10/09
                End Try

                taxFacade = New Interprise.Facade.Base.TaxFacade
                taxSchemeDataset = New Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway
                taxSchemeFacade = New Interprise.Facade.Base.TaxSchemeFacade(taxSchemeDataset, Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerSalesTaxScheme)

                CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
                    "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific)

                shiptoCode = CustomerDetailDataset.CustomerView(0).DefaultShipToCode
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerShipTo.TableName, _
                    "ReadCustomerShipTo", AT_CUSTOMER_CODE, CustomerCode, AT_SHIP_TO_CODE, shiptoCode}}, _
                    Interprise.Framework.Base.Shared.ClearType.Specific)

                If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactNull Then
                    contactCode = CustomerDetailDataset.CustomerView(0).DefaultContact
                Else
                    contactCode = ""
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactFullNameNull Then
                    contactFullName = CustomerDetailDataset.CustomerView(0).DefaultContactFullName
                Else
                    contactFullName = ""
                End If

                ' create Invoice dataset 
                InvoiceDataset = New Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway
                ' add handler so that we can set mandatory default values e.g. RootDocumentCode
                AddHandler InvoiceDataset.CustomerInvoiceView.ColumnChanged, AddressOf InvoiceColumnChanged
                ' create Invoice Facade
                InvoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(InvoiceDataset)
                InvoiceFacade.TransactionType = TransactionType.Invoice ' TJS 24/01/09

                ' create invoice core using customer details
                strErrMsg = ""
                InvoiceFacade.AddInvoice(TransactionType.Invoice, Me.m_ImportExportDataset.CustomerShipTo(0), contactCode, contactFullName, AddressOf SendInvoiceCreditHoldWarning, AddressOf SendInvoiceCreditLimitWarning, strErrMsg)
                ' did it work ?
                If strErrMsg = "ERR0018" Then
                    ' no
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "040", Interprise.Facade.Base.SimpleFacade.Instance.GetMessage(strErrMsg, New String() {"Customer and/or Ship To", "customer Ship To"}), _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 06/10/09
                End If
                ' did we get a Credit Hold or Credit Limit warning which prevented invoice being created ?
                If bCustomerCreditHoldOrOverLimit Then ' TJS 06/10/09
                    ' yes, abort order
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "040", strCreditMessage, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 06/10/09
                End If

                sTemp = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_DATE)
                If sTemp = "" Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "No Invoice Date found in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                ElseIf Not m_ImportExportConfigFacade.ValidateXMLDate(sTemp) Then ' TJS 29/01/09
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Invoice Date format invalid", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                End If
                With InvoiceDataset
                    .CustomerInvoiceView(0).InvoiceDate = m_ImportExportConfigFacade.ConvertXMLDate(sTemp)
                    .CustomerInvoiceView(0).SourceCode = SourceCode
                    .CustomerInvoiceView(0).POCode = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF)
                    If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_REF) <> GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF) And _
                        GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF) <> "" Then ' TJS 22/09/10
                        .CustomerInvoiceView(0).SalesRepOrderCode = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF) ' TJS 22/09/10
                    End If
                    .CustomerInvoiceView(0).WebSiteCode = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_WEBSITE_REF)
                    .CustomerInvoiceView(0)("StoreMerchantID_DEV000221") = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_MERCHANT_ID)
                    .CustomerInvoiceView(0)("MerchantOrderID_DEV000221") = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SOURCE_INVOICE_REF) ' TJS 24/01/09 

                    ' has a Currency Code been defined ?
                    sTemp = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CURRENCY) ' TJS 25/04/09
                    If sTemp <> "" Then ' TJS 25/04/09
                        ' yes, check it matches an Active Currency Code in IS
                        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.SystemCurrency.TableName, "ReadSystemCurrency", _
                            Interprise.Framework.Inventory.Shared.Const.AT_CURRENCY_CODE, sTemp}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 25/04/09 TJS 13/02/14
                        If Me.m_ImportExportDataset.SystemCurrency.Count = 0 Then ' TJS 25/04/09
                            ' no matching currency found
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Invalid Currency Code " & sTemp & " in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 25/04/09 TJS 27/02/10
                        ElseIf Not Me.m_ImportExportDataset.SystemCurrency(0).IsActive Then ' TJS 25/04/09
                            ' Currency found but is not marked as Active
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Currency Code " & sTemp & " is not Active.", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 25/04/09 TJS 27/02/10 TJS 24/08/12
                        Else
                            ' yes, apply it
                            InvoiceFacade.AssignCurrency(Me.m_ImportExportDataset.SystemCurrency(0), TransactionType.SalesOrder) ' TJS 25/04/09
                        End If
                    End If

                    ' start of code added TJS 03/04/09
                    ' Check for any CustomerInvoice table Custom Fields
                    XMLCustomFields = XMLGenericInvoice.XPathSelectElements(GENERIC_XML_INVOICE_CUSTOM_FIELDS)
                    If XMLCustomFields IsNot Nothing Then
                        For Each XMLCustomField In XMLCustomFields
                            Try
                                XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                                ' has field name been defined ?
                                If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                    ' does it exist ?
                                    bCustomFieldExists = False ' TJS 21/04/09
                                    For iColumnLoop = 0 To .CustomerInvoiceView.Columns.Count - 1 ' TJS 21/04/09
                                        If .CustomerInvoiceView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 21/04/09
                                            bCustomFieldExists = True ' TJS 21/04/09
                                            Exit For ' TJS 21/04/09
                                        End If
                                    Next
                                    If bCustomFieldExists Then ' TJS 21/04/09
                                        .CustomerInvoiceView(0)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerInvoiceView", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 21/04/09

                                    End If
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Field Name attribute not provided for Invoice Custom Field", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)

                                End If

                            Catch ex As Exception
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                     m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 29/05/09

                            End Try
                        Next
                    End If
                    ' end of code added TJS 03/04/09

                    strBillingCustomerName = "" ' TJS 08/02/09
                    strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/NamePrefix") ' TJS 08/02/09 
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue & " " ' TJS 08/02/09
                    End If
                    strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/FirstName") ' TJS 08/02/09
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue & " " ' TJS 08/02/09
                    End If
                    strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/LastName") ' TJS 08/02/09 
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue ' TJS 08/02/09
                    ElseIf strBillingCustomerName <> "" Then ' TJS 03/04/09
                        ' Last Name blank but other name elements not blank
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Last Name for Billing is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                    End If
                    strBillingCompanyName = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/Company") ' TJS 08/02/09
                    ' has billing name been supplied ?
                    If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper = "YES" Then ' TJS 18/06/09
                        ' yes, company name provided and config has customer as company option set, use it
                        .CustomerInvoiceView(0).BillToName = strBillingCompanyName ' TJS 18/06/09
                    ElseIf strBillingCustomerName <> "" Then
                        ' customer name provided, use it
                        .CustomerInvoiceView(0).BillToName = strBillingCustomerName ' TJS 08/02/09
                    End If

                    ' has billing address  been supplied ?
                    If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/Address") <> "" Or _
                        GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/Town_City") <> "" Or _
                        GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/County") <> "" Or _
                        GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/State") <> "" Or _
                        GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/PostalCode") <> "" Or _
                        GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/Country") <> "" Then ' TJS 03/04/09 TJS 18/06/09
                        ' yes, copy address in case details are different from customer record
                        strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/Address") ' TJS 09/03/09
                        If strTempValue = "" Then ' TJS 09/03/09
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Billing Address is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                        Else
                            ' need to convert any cr or lf to ensure they display correctly in IS
                            strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue) ' TJS 09/03/09
                        End If
                        ' has company name been provided and config has customer as company option is not set ?
                        If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper <> "YES" Then ' TJS 08/02/09 TJS 18/06/09
                            ' yes, add company name to address
                            .CustomerInvoiceView(0).BillToAddress = strBillingCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 09/03/09
                        Else
                            ' no, use address as is
                            .CustomerInvoiceView(0).BillToAddress = strTempValue ' TJS 09/03/09
                        End If
                        .CustomerInvoiceView(0).BillToCity = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/Town_City") ' TJS 08/02/09
                        .CustomerInvoiceView(0).BillToCounty = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/County") ' TJS 08/02/09
                        .CustomerInvoiceView(0).BillToState = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/State") ' TJS 08/02/09
                        strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/PostalCode") ' TJS 09/03/09
                        If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Billing Postal Code is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                        End If
                        .CustomerInvoiceView(0).BillToPostalCode = strTempValue ' TJS 09/03/09
                        strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS & "/Country") ' TJS 09/03/09
                        If strTempValue <> "" Then ' TJS 09/03/09
                            ' check Country is valid 
                            If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strTempValue & "'") <> "" Then ' TJS 14/08/09
                                .CustomerInvoiceView(0).BillToCountry = strTempValue ' TJS 09/03/09
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Billing Country is not a valid IS Country", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 14/08/09
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Billing Country is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                        End If
                        If strBillingCompanyName <> "" And GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/WorkPhone") <> "" Then ' TJS 09/03/09 TJS 03/04/09
                            .CustomerInvoiceView(0).BillToPhone = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/WorkPhone") ' TJS 09/03/09
                        ElseIf GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/HomePhone") <> "" Then ' TJS 03/04/09
                            .CustomerInvoiceView(0).BillToPhone = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER & "/HomePhone") ' TJS 09/03/09
                        End If
                    End If

                    ' is a Shipping Details Customer node present ?
                    xmlShippingDetails = XMLGenericInvoice.XPathSelectElement(GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER) ' TJS 08/02/09 TJS 03/04/09
                    If xmlShippingDetails IsNot Nothing Then ' TJS 08/02/09
                        ' yes, get shipping name
                        strShippingCustomerName = "" ' TJS 08/02/09
                        strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER & "/NamePrefix") ' TJS 08/02/09
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue & " " ' TJS 08/02/09
                        End If
                        strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER & "/FirstName") ' TJS 08/02/09 
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue & " " ' TJS 08/02/09
                        End If
                        strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER & "/LastName") ' TJS 08/02/09
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue ' TJS 08/02/09
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Last Name for Shipping is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                        End If
                        strShippingCompanyName = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER & "/Company") ' TJS 08/02/09
                        .CustomerInvoiceView(0).ShipToName = strShippingCustomerName ' TJS 08/02/09

                        ' has shipping address  been supplied ?
                        If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/Address") <> "" Or _
                            GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/Town_City") <> "" Or _
                            GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/County") <> "" Or _
                            GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/State") <> "" Or _
                            GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/PostalCode") <> "" Or _
                            GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/Country") <> "" Then ' TJS 03/04/09
                            ' yes, copy address in case details are different from customer record
                            strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/Address") ' TJS 09/03/09
                            If strTempValue = "" Then ' TJS 09/03/09
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Shipping Address is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                            Else
                                ' need to convert any cr or lf to ensure they display correctly in IS
                                strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue) ' TJS 09/03/09
                            End If
                            ' has company name been provided ?
                            If strShippingCompanyName <> "" Then ' TJS 08/02/09 
                                ' yes, add company name to address
                                .CustomerInvoiceView(0).ShipToAddress = strShippingCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 09/03/09
                            Else
                                ' no, use address as is
                                .CustomerInvoiceView(0).ShipToAddress = strTempValue ' TJS 09/03/09
                            End If
                            .CustomerInvoiceView(0).ShipToCity = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/Town_City") ' TJS 08/02/09
                            .CustomerInvoiceView(0).ShipToCounty = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/County") ' TJS 08/02/09
                            .CustomerInvoiceView(0).ShipToState = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/State") ' TJS 08/02/09
                            strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/PostalCode") ' TJS 09/03/09
                            If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Shipping Postal Code is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                            End If
                            .CustomerInvoiceView(0).ShipToPostalCode = strTempValue ' TJS 09/03/09
                            strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_ADDRESS & "/Country") ' TJS 09/03/09
                            If strTempValue <> "" Then ' TJS 09/03/09
                                ' check Country is valid 
                                If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strTempValue & "'") <> "" Then ' TJS 14/08/09
                                    .CustomerInvoiceView(0).ShipToCountry = strTempValue ' TJS 09/03/09 TJS 18/03/11
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Shipping Country is not a valid IS Country", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 14/08/09
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Customer Shipping Country is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                            End If
                            strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_CUSTOMER & "/Telephone") ' TJS 03/04/09
                            If strTempValue <> "" Then ' TJS 03/04/09
                                .CustomerInvoiceView(0).ShipToPhone = strTempValue ' TJS 08/02/09 TJS 03/04/09
                            End If
                        End If
                    End If

                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper <> "YES" Then ' TJS 08/07/12
                        ' start of code added TJS 17/03/09
                        ' is KSI MultiShip module enabled ?
                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SHIPPING_MODULE_TO_USE) = "KSI MultiShip" Then
                            'yes, set default values in IS fields and XML Value in KSI custom field
                            strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                            strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                            .CustomerInvoiceView(0)("RZShippingMethodID") = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_METHOD)

                        Else
                            ' no, using IS standard shipping
                            strShippingMethod = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_METHOD)
                            If strShippingMethod = "" Then
                                strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                            End If
                            strShippingMethodGroup = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_METHOD_GROUP)
                            If strShippingMethodGroup = "" Then
                                strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                            End If
                            rowGroupMethodDetail = Me.m_ImportExportDataset.SystemShippingMethodGroupDetail.FindByShippingMethodGroupShippingMethodCode(strShippingMethodGroup, strShippingMethod)
                            If rowGroupMethodDetail Is Nothing Then
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "075", "Invalid Shipping Method and Shipping Method Group combination - " & strShippingMethod & ", " & strShippingMethodGroup, _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)

                            End If
                        End If
                        .CustomerInvoiceView(0).ShippingMethodCode = strShippingMethod
                        .CustomerInvoiceView(0).ShippingMethodGroup = strShippingMethodGroup

                        ' RCD 08/09/2019 Start
                        strShippingDate = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_SHIPPING_DATE)
                        If (Not String.IsNullOrEmpty(strShippingDate)) Then
                            Dim shippingDate As Date
                            If (Date.TryParseExact(strShippingDate, GENERIC_XML_YMD, System.Globalization.DateTimeFormatInfo.InvariantInfo, Globalization.DateTimeStyles.None, shippingDate)) Then
                                .CustomerInvoiceView(0).ShippingDate = shippingDate
                            Else
                                Throw New Exception(GENERIC_XML_INVALID_SHIPPING_DATE)
                            End If
                        End If
                        strLatestShippingDate = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_SHIPPING_DETAILS_LATEST_SHIPPING_DATE)
                        If (Not String.IsNullOrEmpty(strLatestShippingDate)) Then
                            Dim latestShippingDate As Date
                            If (Date.TryParseExact(strLatestShippingDate, GENERIC_XML_YMD, System.Globalization.DateTimeFormatInfo.InvariantInfo, Globalization.DateTimeStyles.None, latestShippingDate)) Then
                                .CustomerInvoiceView(0).LatestShipDate = latestShippingDate
                            Else
                                Throw New Exception(GENERIC_XML_INVALID_LATEST_SHIPPING_DATE)
                            End If
                        End If

                        Dim predefinedNotes As New StringBuilder()
                        strCustomerComments = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_COMMENTS)
                        If (Not String.IsNullOrEmpty(strCustomerComments)) Then
                            predefinedNotes.AppendLine(strCustomerComments)
                        End If
                        strNotes = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_NOTES)
                        If (Not String.IsNullOrEmpty(strNotes)) Then
                            predefinedNotes.AppendLine(strNotes)
                        End If
                        strSalesAgency = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_SALES_AGENCY)
                        If (Not String.IsNullOrEmpty(strSalesAgency)) Then
                            predefinedNotes.AppendLine(String.Format("Sales Agency : {0}", strSalesAgency))
                        End If
                        strOrderTaker = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_ORDER_TAKER)
                        If (Not String.IsNullOrEmpty(strOrderTaker)) Then
                            predefinedNotes.AppendLine(String.Format("Order Taker : {0}", strOrderTaker))
                        End If
                        strBuyerName = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_BUYER_NAME)
                        If (Not String.IsNullOrEmpty(strBuyerName)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Name : {0}", strBuyerName))
                        End If
                        strBuyerPhone = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_BUYER_PHONE)
                        If (Not String.IsNullOrEmpty(strBuyerPhone)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Phone : {0}", strBuyerPhone))
                        End If
                        strBuyerEmail = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_BUYER_EMAIL)
                        If (Not String.IsNullOrEmpty(strBuyerEmail)) Then
                            predefinedNotes.AppendLine(String.Format("Buyer Email : {0}", strBuyerEmail))
                        End If
                        strCreditCardToken = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_CREDIT_CARD_TOKEN)
                        If (Not String.IsNullOrEmpty(strCreditCardToken)) Then
                            predefinedNotes.AppendLine(String.Format("Credit Card Token : {0}", strCreditCardToken))
                        End If
                        .CustomerInvoiceView(0).InternalNotes = predefinedNotes.ToString()
                        ' RCD 08/12/2019 End

                        ' end of code added TJS 17/03/09
                    End If

                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SET_DISABLE_FREIGHT_CALCULATION).ToUpper = "YES" Then ' TJS 17/03/09 TJS 07/06/09
                        .CustomerInvoiceView(0).IsFreightOverwrite = True ' TJS 17/03/09
                    Else
                        .CustomerInvoiceView(0).IsFreightOverwrite = False ' TJS 17/03/09
                    End If
                    .CustomerInvoiceView(0).Notes = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_COMMENTS)

                    ' RCD 2019/08/12 Start - SalesRepGroupCode Node
                    Dim strSalesRepGroupCode = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_SALES_REP_GROUP_CODE)
                    If (Not String.IsNullOrEmpty(strSalesRepGroupCode)) Then
                        Dim salesRepRow As System.Data.DataRow = Interprise.Facade.Base.SimpleFacade.Instance.GetRow(New String() {"*"},
                                                                                                                     Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_TABLE,
                                                                                                                     String.Format(Interprise.Framework.Base.Shared.Const.FORMAT_FIELD_AND_VALUE,
                                                                                                                                   Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPCODE_COLUMN,
                                                                                                                                   strSalesRepGroupCode),
                                                                                                                     ConnectionStringType.Online)
                        If (salesRepRow IsNot Nothing) Then
                            .CustomerSalesRepCommissionView(0).SalesRepGroupCode = CStr(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPCODE_COLUMN))
                            .CustomerSalesRepCommissionView(0).SalesRepGroupName = CStr(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_SALESREPGROUPNAME_COLUMN))
                            .CustomerSalesRepCommissionView(0).CommissionPercent = CDec(salesRepRow(Interprise.Framework.Base.Shared.Const.CUSTOMERSALESREPVIEW_COMMISSIONPERCENT_COLUMN))

                            ' RCD 2019/08/15 Start - SalesRepCode Node
                            Dim strSalesRepCode = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_CUSTOMER_SALES_REP_CODE)
                            If (Not String.IsNullOrEmpty(strSalesRepCode)) Then
                                Dim salesRepContactCode As String = Interprise.Facade.Base.SimpleFacade.Instance.GetField(Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_CONTACTCODE_COLUMN, _
                                                                                                                Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_TABLE,
                                                                                                                String.Format(Interprise.Framework.Base.Shared.Const.FORMAT_FILTER_2, _
                                                                                                                              Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_ENTITYCODE_COLUMN, _
                                                                                                                              strSalesRepGroupCode, _
                                                                                                                              Interprise.Framework.Customer.Shared.Const.CUSTOMERSALESREPCONTACTVIEW_CONTACTCODE_COLUMN, _
                                                                                                                              strSalesRepCode))
                                If (Not String.IsNullOrEmpty(salesRepContactCode)) Then
                                    .CustomerSalesRepCommissionView(0).ContactCode = salesRepContactCode
                                End If
                            End If
                            ' RCD 2019/08/15 End - SalesRepCode Node
                        End If
                    End If
                    ' RCD 2019/08/12 End - SalesRepGroupCode Node


                    taxSchemeFacade.LoadDataSet(New String()() {New String() {taxSchemeDataset.SystemTaxSchemeDetailView.TableName, _
                        "ReadSystemTaxSchemeDetail", AT_COUNTRY_CODE, .CustomerInvoiceView(0).BillToCountry}}, _
                        Interprise.Framework.Base.Shared.ClearType.Specific, Interprise.Framework.Base.Shared.ConnectionStringType.Offline)
                    XMLInvoiceItems = XMLGenericInvoice.XPathSelectElements(GENERIC_XML_INVOICE_ITEM_LIST)
                    dblInvoiceTotal = 0
                    dblInvoiceTotalRate = 0 ' TJS 26/05/09
                    dblInvoiceTax = 0
                    dblInvoiceTaxRate = 0
                    iLineNum = 1
                    If XMLInvoiceItems IsNot Nothing Then ' TJE 09/03/09
                        For Each XMLInvoiceItem In XMLInvoiceItems
                            Try
                                XMLItemTemp = XDocument.Parse(XMLInvoiceItem.ToString) ' TJS 18/04/11
                                ' has Item Code been provided
                                If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE) <> "" Then
                                    ' yes, use it
                                    Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", _
                                        Interprise.Framework.Inventory.Shared.Const.AT_ITEM_CODE, GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE),
                                        Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                        Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                                    strItemID = "Invoice Item Code " & GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE)

                                ElseIf GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME) <> "" Then
                                    ' no, but Item Name has been
                                    Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", _
                                        AT_ITEM_NAME, GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME), Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, _
                                        GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                        Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 10/02/09 TJS 13/02/14
                                    strItemID = "Invoice Item Name " & GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME)

                                Else
                                    sTemp = "Both ISItemCode or ISItemName are blank" ' TJS 10/02/09
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "037", sTemp, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                                End If

                                ' start of code added TJS 19/09/13
                                bSkipUMCAandWarehouseCheck = False
                                ' did we find a matching Inventory Item ?
                                If Me.m_ImportExportDataset.SaleItemView.Count = 0 Then
                                    ' no, is Import Missing Items As NonStock set ?
                                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_IMPORT_MISSING_ITEMS_AS_NONSTOCK).ToUpper = "YES" Then
                                        ' yes, send error email
                                        m_ImportExportConfigFacade.SendSourceErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", strItemID & " not found - Invoice line item imported as Non-Stock.", XMLGenericInvoice.ToString)
                                        ' get Non-Stock item record
                                        Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", AT_ITEM_NAME, "NONSTOCK", _
                                            Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                            Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                                        bSkipUMCAandWarehouseCheck = True
                                    End If
                                End If
                                ' end of code added TJS 19/09/13

                                If Me.m_ImportExportDataset.SaleItemView.Count > 0 Then
                                    ' start of code added TJS 08/06/09
                                    iItemPtr = 0
                                    If Not bSkipUMCAandWarehouseCheck Then ' TJS 19/09/13
                                        ' has a Warehouse code been specified ?
                                        strWarehouseCode = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_WAREHOUSE)
                                        If strWarehouseCode = "" Then
                                            ' no, is UseShipToClassTemplate set ?
                                            If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper = "YES" Then ' TJS 08/07/12 TJS 20/07/12
                                                ' yes, get warehouse from Customer Ship To
                                                strWarehouseCode = .CustomerInvoiceView(0).WarehouseCode ' TJS 08/07/12 TJS 20/07/12
                                            Else
                                                ' no, get default Warehouse code
                                                strWarehouseCode = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_WAREHOUSE)
                                            End If
                                        End If
                                        ' has a Unit Of Measure been specified ?
                                        strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UMC)
                                        If strTempValue <> "" Then
                                            ' yes, find relevent item details
                                            Do While Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("UnitMeasureCode").ToString.ToUpper <> strTempValue.ToUpper Or _
                                                (Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("WarehouseCode").ToString.ToUpper <> strWarehouseCode.ToUpper And _
                                                (Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsWarehouseCodeNull)) ' TJS 04/07/09 TJS 14/08/09
                                                iItemPtr += 1
                                                If iItemPtr > Me.m_ImportExportDataset.SaleItemView.Count - 1 Then
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "037", "Cannot find Unit of Measure " & strTempValue & " and Warehouse Code " & strWarehouseCode & " for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                End If
                                            Loop
                                        Else
                                            ' no, find base Unit of Measure
                                            Do While (Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsDefaultSellingNull OrElse Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).DefaultSelling) Or _
                                               (Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("WarehouseCode").ToString.ToUpper <> strWarehouseCode.ToUpper And _
                                                (Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsWarehouseCodeNull)) ' TJS 14/08/09 TJS 02/12/11 TJS 23/05/14
                                                iItemPtr += 1
                                                If iItemPtr > Me.m_ImportExportDataset.SaleItemView.Count - 1 Then
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "037", "Cannot find default UMC and Warehouse Code " & strWarehouseCode & " for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                End If
                                            Loop
                                        End If
                                    End If
                                    ' end of code added TJS 08/06/09
                                    itemView = New DataView(InvoiceDataset.CustomerInvoiceDetailView)
                                    itemView.AddNew()

                                    ' need to set default value for linenum etc to prevent DBNull conversion error
                                    itemView(iLineNum - 1)(.CustomerInvoiceDetailView.RootDocumentCodeColumn.ColumnName) = .CustomerInvoiceView(0).RootDocumentCode
                                    itemView(iLineNum - 1)(.CustomerInvoiceDetailView.InvoiceCodeColumn.ColumnName) = .CustomerInvoiceView(0).InvoiceCode
                                    itemView(iLineNum - 1)(.CustomerInvoiceDetailView.LineNumColumn.ColumnName) = 0
                                    itemView(iLineNum - 1)(.CustomerInvoiceDetailView.SourceLineNumColumn.ColumnName) = 0

                                    ' start of code added TJS 10/06/12
                                    sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_SOURCE_COMMISSION)
                                    ' has source commission been supplied ?
                                    If sTemp <> "" Then
                                        ' yes, must be numeric and not contain any commas
                                        If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                                            itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221") = CDec(sTemp)
                                            itemView(iLineNum - 1)(.CustomerInvoiceDetailView.CommissionAmountColumn.ColumnName) = CDec(itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221"))
                                            itemView(iLineNum - 1)("SourceCommissionCharge_DEV000221") = RoundDecimalValue(CDec(itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221")) / .CustomerInvoiceView(0).ExchangeRate)
                                            itemView(iLineNum - 1)(.CustomerInvoiceDetailView.CommissionAmountRateColumn.ColumnName) = CDec(itemView(iLineNum - 1)("SourceCommissionCharge_DEV000221"))
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Source Commission must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                        End If
                                    End If
                                    sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_SOURCE_FULFILLMENT)
                                    ' has source fulfillment been supplied ?
                                    If sTemp <> "" Then
                                        ' yes, must be numeric and not contain any commas
                                        If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                                            itemView(iLineNum - 1)("SourceFulfillmentCostRate_DEV000221") = CDec(sTemp)
                                            itemView(iLineNum - 1)("SourceFulfillmentCost_DEV000221") = RoundDecimalValue(CDec(itemView(iLineNum - 1)("SourceFulfillmentCostRate_DEV000221")) / .CustomerInvoiceView(0).ExchangeRate)
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Source Fulfillment must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                        End If
                                    End If
                                    ' end of code added TJS 10/06/12

                                    sTemp = ""
                                    strItemKitPricing = "" ' TJS 18/03/11
                                    iItemRowsAdded = 1 ' TJS 18/03/11
                                    decKitPriceSumRate = 0 ' TJS 18/03/11
                                    decKitPriceTaxSumRate = 0 ' TJS/FA 17/10/11
                                    ' start of code added TJS 22/09/10
                                    If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_MATRIX_GROUP Then ' TJS 02/04/14
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "037", strItemID & " is a Matrix Group item.  Only individual Items whthin the Matrix Group can be added to an invoice.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)

                                    ElseIf Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_KIT Then ' TJS 02/04/14
                                        ItemKitDataset = New Interprise.Framework.Base.DatasetGateway.ItemKitDatasetGateway
                                        ItemKitFacade = New Interprise.Facade.Customer.CustomerItemKitFacade(ItemKitDataset)
                                        ItemKitFacade.CurrencyCode = .CustomerInvoiceView(0).CurrencyCode
                                        ItemKitFacade.ExchangeRate = .CustomerInvoiceView(0).ExchangeRate
                                        strItemKitPricing = ItemKitFacade.GetField("PricingType", "InventoryKit", "ItemKitCode = '" & Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode & "'")
                                        itemKitDetailRows = New DataRow() {}
                                        ItemKitFacade.InitializeKitConfigurator(Me.m_ImportExportDataset.SaleItemView(iItemPtr), strItemKitPricing, _
                                            CustomerCode, .CustomerInvoiceView(0).InvoiceDate, strWarehouseCode, itemKitDetailRows)
                                        ' get quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then
                                                    ' need to apply price to kit via configurator
                                                    ' start of code added TJS 18/03/11
                                                    decSalesPriceRate = 0
                                                    strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                                    ' has price been supplied ?
                                                    If strItemPrice <> "" Then
                                                        ' yes, must be numeric and not contain any commas
                                                        If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                            ' must not be negative
                                                            If CDec(strItemPrice) >= 0 Then
                                                                ' Unit price valid, overwrite Item price
                                                                ' do prices include tax >
                                                                If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                                    ' yes, get price before tax (Use freight tax calc as item row(s) not yet created for kit
                                                                    decSalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, .TransactionItemTaxDetailView, _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode, 0, CDec(strItemQty), CDec(strItemPrice), _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).SalesTaxCode, .CustomerInvoiceView(0).CurrencyCode, _
                                                                        .CustomerInvoiceView(0).ExchangeRate, .CustomerInvoiceView(0).InvoiceCode, True)
                                                                Else
                                                                    decSalesPriceRate = CDec(strItemPrice)
                                                                End If
                                                            Else
                                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Unit Price must not be negative for " & strItemID, _
                                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                            End If
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Unit Price must be numeric for " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                        End If
                                                    End If
                                                    dblInvoiceTotalRate += (decSalesPriceRate * CDec(strItemQty)) ' TJS 02/04/14
                                                    dblInvoiceTotal = RoundDecimalValue(dblInvoiceTotalRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 02/04/14
                                                    ' end of code added TJS 18/03/11
                                                    ' quantity valid, apply to Kit
                                                    If strItemKitPricing = "Item Price" Then ' TJS 18/03/11
                                                        InvoiceFacade.AssignItemKit(Me.m_ImportExportDataset.SaleItemView(iItemPtr), ItemKitFacade.KitItems, itemView(iLineNum - 1), strItemKitPricing, CDec(strItemQty), 0, TransactionType.Invoice, sTemp, strWarehouseCode) ' TJS 18/03/11
                                                        iItemRowsAdded = ItemKitFacade.KitItems.Length ' TJS 18/03/11
                                                        decKitTotalPriceRate = ItemKitFacade.ComputeTotalByTotal ' TJS 18/03/11
                                                    Else
                                                        InvoiceFacade.AssignItemKit(Me.m_ImportExportDataset.SaleItemView(iItemPtr), ItemKitFacade.KitItems, itemView(iLineNum - 1), strItemKitPricing, CDec(strItemQty), decSalesPriceRate, TransactionType.Invoice, sTemp, strWarehouseCode) ' TJS 04/10/10
                                                    End If
                                                    If sTemp <> "" Then
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "036", sTemp, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                        End If
                                        ' end of code added TJS 22/09/10

                                        ' start of code added TJS 02/04/14
                                    ElseIf Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_BUNDLE Then
                                        ' get quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then
                                                    ' quantity valid, get 
                                                    decSalesPriceRate = 0
                                                    strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                                    ' has price been supplied ?
                                                    If strItemPrice <> "" Then
                                                        ' yes, must be numeric and not contain any commas
                                                        If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                            ' must not be negative
                                                            If CDec(strItemPrice) >= 0 Then
                                                                ' Unit price valid, overwrite Item price
                                                                ' do prices include tax >
                                                                If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                                    ' yes, get price before tax (Use freight tax calc as item row(s) not yet created for kit
                                                                    decSalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, .TransactionItemTaxDetailView, _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode, 0, CDec(strItemQty), CDec(strItemPrice), _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).SalesTaxCode, .CustomerInvoiceView(0).CurrencyCode, _
                                                                        .CustomerInvoiceView(0).ExchangeRate, .CustomerInvoiceView(0).InvoiceCode, True)
                                                                Else
                                                                    decSalesPriceRate = CDec(strItemPrice)
                                                                End If

                                                            Else
                                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must not be negative for " & strItemID, _
                                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                            End If
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Unit Price must be numeric for " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                        End If
                                                    End If

                                                    ' get bundle details
                                                    ItemBundleDataset = New Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway
                                                    ItemBundleFacade = New Interprise.Facade.Customer.ItemBundleFacade(ItemBundleDataset)
                                                    ItemBundleFacade.LoadDataSet("ReadInventoryBundleConfigurator", New String() {"InventoryBundleConfiguratorView"}, _
                                                        New String()() {New String() {"@BundleCode", Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode}, _
                                                        New String() {"@DefaultPrice", CustomerDetailDataset.CustomerView(0).DefaultPrice}, _
                                                        New String() {"@LanguageCode", GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}, _
                                                        New String() {"@CurrencyCode", .CustomerInvoiceView(0).CurrencyCode}, _
                                                        New String() {"@WarehouseCode", strWarehouseCode}}, ClearType.Specific)
                                                    iBundleRow = iLineNum - 1
                                                    ' get total of item prices in bundle
                                                    decBundleTotalPriceRate = 0
                                                    decBundlePriceSumRate = 0
                                                    For Each ItemBundleRow In ItemBundleDataset.InventoryBundleConfiguratorView.Rows
                                                        decBundleTotalPriceRate = decBundleTotalPriceRate + (CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICERATE_COLUMN)) * CDec(ItemBundleRow("Quantity")))
                                                    Next
                                                    iItemRowsAdded = ItemBundleDataset.InventoryBundleConfiguratorView.Count
                                                    iBundlePtr = 0
                                                    For Each ItemBundleRow In ItemBundleDataset.InventoryBundleConfiguratorView.Rows
                                                        SalesOrderFacade.AssignInventoryItem(ItemBundleRow, itemView(iBundleRow), sTemp)
                                                        .CustomerInvoiceDetailView(iBundleRow).ItemCode = ItemBundleRow(CUSTOMERSALESORDERDETAIL_ITEMCODE_COLUMN).ToString
                                                        .CustomerInvoiceDetailView(iBundleRow).ItemName = ItemBundleRow(INVENTORYITEMS_ITEMNAME_COLUMN).ToString
                                                        .CustomerInvoiceDetailView(iBundleRow).ItemDescription = ItemBundleRow(INVENTORYITEMDESCRIPTION_ITEMDESCRIPTION_COLUMN).ToString
                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICERATE_COLUMN))
                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPrice = CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICE_COLUMN))
                                                        .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered = CDec(strItemQty) * CDec(ItemBundleRow("Quantity"))
                                                        .CustomerInvoiceDetailView(iBundleRow).ItemType = ItemBundleRow(CUSTOMERSALESORDERDETAIL_ITEMTYPE_COLUMN).ToString
                                                        .CustomerInvoiceDetailView(iBundleRow).ParentBundleItemCode = ItemBundleRow(BUNDLECODE).ToString

                                                        ' is this the last row of the bundle ?
                                                        If iBundlePtr <> ItemBundleDataset.InventoryBundleConfiguratorView.Count - 1 Then
                                                            ' no, set price as relevant fraction of total bundle price
                                                            If decBundleTotalPriceRate = 0 Then
                                                                ' is quantity ordered > 1 ?
                                                                If CInt(strItemQty) > 1 Then
                                                                    ' yes - CustomerInvoiceDetailView(iBundleRow).QuantityOrdered will be equal to Kit Item Qty 
                                                                    ' if there is only 1 of the item in the bundle
                                                                    ' Otherwise the Item Quantity Order figure will always be greater than the bundle Qty as it is 
                                                                    ' the bundle item Quantity / by the number of bundles in the order
                                                                    If (.CustomerInvoiceDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((decSalesPriceRate / iItemRowsAdded) * (CDec(strItemQty) / .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered), 2)
                                                                    Else
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded), 2)
                                                                    End If
                                                                Else
                                                                    If .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded * .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered), 2)
                                                                    Else
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / iItemRowsAdded, 2)
                                                                    End If
                                                                End If
                                                            Else
                                                                ' is quantity ordered > 1 ?
                                                                If CInt(strItemQty) > 1 Then
                                                                    ' yes - CustomerInvoiceDetailView(iBundleRow).QuantityOrdered will be equal to Kit Item Qty 
                                                                    ' if there is only 1 of the item in the bundle
                                                                    ' Otherwise the Item Quantity Order figure will always be greater than the bundle Qty as it is 
                                                                    ' the bundle item Quantity / by the number of bundles in the order
                                                                    If (.CustomerInvoiceDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((.CustomerInvoiceDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate) / (decBundleTotalPriceRate * (.CustomerInvoiceDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty))), 2)
                                                                    Else
                                                                        ' if there is only 1 of the item, then the unit price will be the percentage calculation for the individual item price.
                                                                        'Total for the item is then multiplied by the Kit item quantity
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((.CustomerInvoiceDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate) / decBundleTotalPriceRate, 2)
                                                                    End If
                                                                Else
                                                                    'If .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                    ' TJS/FA 19/04/12 percentage of kit value divided by the number of items
                                                                    .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(.CustomerInvoiceDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate / decBundleTotalPriceRate, 2)

                                                                End If
                                                            End If
                                                            If .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                decBundlePriceSumRate = decBundlePriceSumRate + .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate * .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered
                                                            Else
                                                                decBundlePriceSumRate = decBundlePriceSumRate + .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate
                                                            End If
                                                        Else
                                                            If .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                ' yes, set price as remainder to prevent rounding errors and divide by quantity ordered
                                                                .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(((decSalesPriceRate * CInt(strItemQty)) - decBundlePriceSumRate) / .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered, 2)

                                                            Else
                                                                ' yes, set price as remainder to prevent rounding errors
                                                                .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((decSalesPriceRate * CInt(strItemQty)) - decBundlePriceSumRate, 2)
                                                            End If
                                                        End If
                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPrice = RoundDecimalValue(.CustomerInvoiceDetailView(iBundleRow).SalesPriceRate / .CustomerInvoiceView(0).ExchangeRate)

                                                        iBundleRow += 1
                                                        iBundlePtr += 1
                                                        If iBundlePtr <> ItemBundleDataset.InventoryBundleConfiguratorView.Count Then
                                                            itemView = New DataView(InvoiceDataset.CustomerInvoiceDetailView)
                                                            itemView.AddNew()

                                                            ' need to set default value for linenum etc to prevent DBNull conversion error
                                                            itemView(iBundleRow)(.CustomerInvoiceDetailView.RootDocumentCodeColumn.ColumnName) = .CustomerInvoiceView(0).RootDocumentCode
                                                            itemView(iBundleRow)(.CustomerInvoiceDetailView.InvoiceCodeColumn.ColumnName) = .CustomerInvoiceView(0).InvoiceCode
                                                            itemView(iBundleRow)(.CustomerInvoiceDetailView.LineNumColumn.ColumnName) = 0
                                                            itemView(iBundleRow)(.CustomerInvoiceDetailView.SourceLineNumColumn.ColumnName) = 0
                                                        End If
                                                    Next
                                                    dblInvoiceTotalRate += (decSalesPriceRate * CDec(strItemQty))
                                                    dblInvoiceTotal = RoundDecimalValue(dblInvoiceTotalRate / .CustomerInvoiceView(0).ExchangeRate)

                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)
                                        End If
                                        ' end of code added TJS 02/04/14

                                    Else
                                        InvoiceFacade.AssignInventoryItem(Me.m_ImportExportDataset.SaleItemView(iItemPtr), itemView(iLineNum - 1), sTemp)
                                        If sTemp <> "" Then
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "036", sTemp, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                                        End If
                                        ' start of code moved TJS 22/09/10
                                        ' set quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY) ' TJS 09/03/09
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then ' TJS 09/03/09
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then ' TJS 09/03/09
                                                    ' quantity valid, apply to Item
                                                    .CustomerInvoiceDetailView(iLineNum - 1).QuantityOrdered = CDec(strItemQty) ' TJS 09/03/09
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                                        End If

                                        ' now set default price and cost
                                        If Not InvoiceFacade.SetSalesPrice(itemView(iLineNum - 1), False) Then ' TJS 26/05/09
                                            sTemp = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("INF0101", New String() {CStr(itemView(iLineNum - 1)(.CustomerInvoiceDetailView.ItemNameColumn.ColumnName)), .CustomerInvoiceView(0).CurrencyCode}) ' TJS 26/05/09
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "036", sTemp, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)  ' TJS 26/05/09
                                        End If
                                        ' end of code moved TJS 22/09/10
                                    End If

                                    For iRowLoop = iLineNum - 1 To (iLineNum - 1) + (iItemRowsAdded - 1) ' TJS 18/03/11
                                        .CustomerInvoiceDetailView(iRowLoop).WebSiteCode = .CustomerInvoiceView(0).WebSiteCode
                                        sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_PURCHASE_ID)
                                        If sTemp <> "" Then
                                            .CustomerInvoiceDetailView(iRowLoop)("SourcePurchaseID_DEV000221") = sTemp
                                        End If

                                        ' code to set quantity and price moved TJS 22/09/10
                                        .CustomerInvoiceDetailView(iRowLoop).QuantityBackOrdered = 0
                                        .CustomerInvoiceDetailView(iRowLoop).QuantityShipped = .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered ' TJS 21/04/09
                                        .CustomerInvoiceDetailView(iRowLoop).QuantityAllocated = 0
                                        .CustomerInvoiceDetailView(iRowLoop).QuantityAlReadyRMA = 0
                                        If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DESCRIPTION) <> "" And ((Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_KIT And _
                                            Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_BUNDLE) Or strItemKitPricing = "Kit Price") Then ' TJS 18/03/11 TJS 02/04/14
                                            .CustomerInvoiceDetailView(iRowLoop).ItemDescription = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DESCRIPTION)
                                            .CustomerInvoiceDetailView(iRowLoop).InventoryDescription = .CustomerInvoiceDetailView(iRowLoop).ItemDescription
                                            .CustomerInvoiceDetailView(iRowLoop).IsInventoryDescription = True
                                        End If
                                        ' only apply price here if not a kit (kit pricing handled above when pricing type is Kit and below for Item pricing
                                        If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_KIT And Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_BUNDLE Then ' TJS 18/03/11 TJS 02/04/14 
                                            strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE) ' TJS 09/03/09
                                            ' has price been supplied ?
                                            If strItemPrice <> "" Then ' TJS 09/03/09
                                                ' yes, must be numeric and not contain any commas
                                                If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                                                    ' must not be negative
                                                    If CDec(strItemPrice) >= 0 Then ' TJS 09/03/09
                                                        ' Unit price valid, overwrite Item price
                                                        ' do prices include tax >
                                                        If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 07/06/09 
                                                            ' yes, get price before tax
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, _
                                                                .TransactionItemTaxDetailView, .CustomerInvoiceDetailView(iRowLoop).ItemCode, _
                                                                .CustomerInvoiceDetailView(iRowLoop).LineNum, .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered, _
                                                                CDec(strItemPrice), .CustomerInvoiceDetailView(iRowLoop).TaxCode, .CustomerInvoiceView(0).CurrencyCode, _
                                                                .CustomerInvoiceView(0).ExchangeRate, .CustomerInvoiceView(0).InvoiceCode, False) ' TJS 07/06/09
                                                        Else
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = CDec(strItemPrice) ' TJS 09/03/09 TJS 26/05/09
                                                        End If
                                                        .CustomerInvoiceDetailView(iRowLoop).Discount = 0 ' TJS 07/07/09
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Unit Price must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Unit Price must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                                                End If
                                            End If
                                            dblInvoiceTotalRate += (.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered) ' TJS 26/05/09 TJS 02/04/14
                                            .CustomerInvoiceDetailView(iRowLoop).SalesPrice = RoundDecimalValue(.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 26/05/09
                                            dblInvoiceTotal = RoundDecimalValue(dblInvoiceTotalRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 02/04/14

                                        ElseIf strItemKitPricing = "Item Price" Then ' TJS 18/03/11
                                            ' is this the last row of the kit ?
                                            If iRowLoop < (iLineNum - 1) + (iItemRowsAdded - 1) Then ' TJS 18/03/11
                                                ' no, set price as relevant fraction of total kit price
                                                If decKitTotalPriceRate = 0 Then ' TJS 04/04/11
                                                    ' TJS/FA 19/04/12
                                                    If CInt(strItemQty) > 1 Then
                                                        ' TJS/FA 19/04/12
                                                        'CustomerInvoiceDetailView(iRowLoop).QuantityOrdered will be equal to Kit Item Qty 
                                                        'if there is only 1 of the item in the kit
                                                        'Otherwise the Item Quantity Order figure will always be greater than the Kit Qty as it is 
                                                        'the Kit item Quantity * by the number of kits in the order
                                                        If (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                            ' TJS/FA 19/04/12
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decSalesPriceRate / iItemRowsAdded) * (CDec(strItemQty) / .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered), 2)
                                                        Else
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded), 2) ' TJS 04/04/11
                                                        End If
                                                    Else
                                                        If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded * .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered), 2)
                                                        Else
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / iItemRowsAdded, 2) ' TJS 04/04/11
                                                        End If
                                                    End If
                                                Else
                                                    ' TJS/FA 19/04/12
                                                    ' AssignKit already set the SalesPriceRate to the IS kit price, we now need to adjust for the actual selling price
                                                    'i.e. kit price in order needs to reflect the percentage breakdown in IS
                                                    If CInt(strItemQty) > 1 Then
                                                        'CustomerInvoiceDetailView(iRowLoop).QuantityOrdered will be equal to Kit Item Qty 
                                                        'if there is only 1 of the item in the kit
                                                        'Otherwise the Item Quantity Order figure will always be greater than the Kit Qty as it is 
                                                        'the Kit item Quantity * by the number of kits in the order
                                                        If (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                            ' TJS/FA 19/04/12 divided by number of the item in kit
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate) / (decKitTotalPriceRate * (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty))), 2)
                                                        Else
                                                            ' TJS/FA 19/04/12 if there is only 1 of the item, then the unit price will be the percentage calculation for the individual item price.
                                                            'Total for the item is then multiplied by the Kit item quantity
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate) / decKitTotalPriceRate, 2)
                                                        End If
                                                    Else
                                                        'If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                        ' TJS/FA 19/04/12 percentage of kit value divided by the number of items
                                                        .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate / decKitTotalPriceRate, 2)

                                                    End If
                                                    ' TJS/FA 19/04/12 end
                                                End If
                                                If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then ' FA 24/10/11
                                                    decKitPriceSumRate = decKitPriceSumRate + .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) ' FA 24/10/11 TJS 01/05/14
                                                Else
                                                    decKitPriceSumRate = decKitPriceSumRate + .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate ' TJS 18/03/11
                                                End If
                                            Else
                                                If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then ' FA 24/10/11
                                                    ' yes, set price as remainder to prevent rounding errors and divide by quantity ordered
                                                    .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decSalesPriceRate - decKitPriceSumRate) / (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)), 2) ' FA 24/10/11 TJS 01/05/14
                                                Else
                                                    ' yes, set price as remainder to prevent rounding errors
                                                    .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate - decKitPriceSumRate, 2) ' TJS 18/03/11
                                                End If
                                            End If
                                            .CustomerInvoiceDetailView(iRowLoop).SalesPrice = RoundDecimalValue(.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 18/03/11
                                        End If

                                        'FA 03/11/10 Modified to use the correct compute function for kits
                                        'Interprise code seems to call bothe the ComputeKit function and the Compute function as well
                                        If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_KIT Then ' TJS 02/04/14
                                            InvoiceFacade.ComputeKitItemsSalesPrice(itemView(iRowLoop).Row) ' FA 03/11/10
                                        End If

                                        ' RCD 2019/08/13 Start SalesRepGroupCode
                                        .CustomerInvoiceDetailView(iRowLoop).CommissionPercent = .CustomerSalesRepCommissionView(0).CommissionPercent
                                        ' RCD 2019/08/13 End SalesRepGroupCode

                                        InvoiceFacade.Compute(itemView(iRowLoop).Row, TransactionType.Invoice) ' TJS 26/05/09
                                        ' code removed TJS 26/05/09

                                        .CustomerInvoiceDetailView(iRowLoop).IsPickingNotePrinted = False
                                        .CustomerInvoiceDetailView(iRowLoop).IsPackingListPrinted = False

                                        ' is Item Drop Ship ?
                                        sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_IS_DROP_SHIP) ' TJS 17/03/09
                                        If sTemp.ToUpper = "YES" Then ' TJS 17/03/09
                                            ' yes, set flag
                                            .CustomerInvoiceDetailView(iRowLoop).IsDropShip = True ' TJS 17/03/09
                                            ' has a Drop Ship REference been supplied ?
                                            If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP_REF) <> "" Then ' TJS 17/03/09
                                                ' yes, set it
                                                .CustomerInvoiceDetailView(iRowLoop).DropShipReference = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP_REF) ' TJS 17/03/09
                                            End If
                                        ElseIf sTemp.ToUpper <> "" And sTemp.ToUpper <> "NO" Then ' TJS 17/03/09
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Drop Ship must be Yes, No or blank " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 17/03/09
                                        End If

                                        ' get Due Date offset config value
                                        sTemp = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DUE_DATE_OFFSET)
                                        If sTemp = "" Then
                                            sTemp = "1"
                                        End If
                                        .CustomerInvoiceDetailView(iRowLoop).DueDate = .CustomerInvoiceView(0).InvoiceDate.AddDays(CDec(sTemp))
                                        .CustomerInvoiceDetailView(iRowLoop).Pricing = CustomerDetailDataset.CustomerView(0).DefaultPrice
                                        ' now calculate Sales Tax (VAT)
                                        ReDim detailRows(taxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & .CustomerInvoiceDetailView(iRowLoop).TaxCode & "'").Length - 1)
                                        index = 0
                                        'Get the detail rows for this tax code.
                                        For detailRowIndex As Integer = 0 To taxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
                                            If taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = .CustomerInvoiceDetailView(iRowLoop).TaxCode.ToUpper Then
                                                detailRows(index) = taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                                                index += 1
                                            End If
                                        Next
                                        ' get tax values
                                        taxValue = taxFacade.CalculateItemTax(.CustomerInvoiceDetailView(iRowLoop).TaxCode, .CustomerInvoiceDetailView(iRowLoop).SalesPrice, _
                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate, .CustomerInvoiceDetailView(iRowLoop).ItemCode, _
                                            .CustomerInvoiceDetailView(iRowLoop).LineNum, .CustomerInvoiceView(0).InvoiceCode, detailRows, .TransactionItemTaxDetailView, _
                                            .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered, .CustomerInvoiceDetailView(iRowLoop).ExtPrice, _
                                            .CustomerInvoiceDetailView(iRowLoop).ExtPriceRate, .CustomerInvoiceView(0).CurrencyCode, _
                                            .CustomerInvoiceView(0).ExchangeRate)
                                        ' are we accepting the source tax calculation ?
                                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ACCEPT_SOURCE_SALES_TAX_CALCULATION).ToUpper = "YES" Or _
                                            GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 17/05/09 TJS 26/10/11
                                            ' yes, get value
                                            strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_TAX) ' TJS 17/05/09
                                            ' has tax value been supplied ?
                                            If strTempValue <> "" Then ' TJS 17/05/09
                                                ' yes, must be numeric and not contain any commas
                                                If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 17/05/09 TJS 29/05/09
                                                    ' must not be negative
                                                    If CDec(strTempValue) >= 0 Then ' TJS 17/05/09
                                                        ' Unit price valid, use it
                                                        ' start of code added FA 17/10/11
                                                        If strItemKitPricing = "Item Price" Then
                                                            ' is this the last row of the kit ?
                                                            If iRowLoop < (iLineNum - 1) + (iItemRowsAdded - 1) Then
                                                                ' no, set tax as relevant fraction of total tax price
                                                                If decKitTotalPriceRate = 0 Then
                                                                    .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) / iItemRowsAdded, 2)
                                                                Else
                                                                    .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) * decSalesPriceRate / decKitTotalPriceRate, 2)
                                                                End If
                                                                decKitPriceTaxSumRate = decKitPriceTaxSumRate + .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate
                                                            Else
                                                                ' yes, set price as remainder to prevent rounding errors
                                                                .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) - decKitPriceTaxSumRate, 2)
                                                            End If
                                                        Else
                                                            ' end of code added FA 17/10/11
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = CDec(strTempValue) ' TJS 17/05/09 TJS 26/05/09
                                                        End If
                                                        dblInvoiceTaxRate += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09
                                                        .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount = RoundDecimalValue(.CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 17/05/09 TJS 26/05/09
                                                        dblInvoiceTax += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09
                                                        ' find relevant tax detail record
                                                        bTaxRecordFound = False ' TJS 02/12/11
                                                        For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                            If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerInvoiceDetailView(iRowLoop).InvoiceCode And _
                                                                .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerInvoiceDetailView(iRowLoop).LineNum And _
                                                                .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerInvoiceDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                                bTaxRecordFound = True ' TJS 02/12/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).TaxAmountRate = .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09 TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).TaxAmount = .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09 TJS 26/05/09 TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = True ' TJS 14/07/09 TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).IsTAOverridden = True ' TJS 24/02/12
                                                            End If
                                                        Next
                                                        If Not bTaxRecordFound Then ' TJS 02/12/11
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Cannot apply Sales Tax to an Item with no active Tax Code - " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 02/12/11
                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Tax Value must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 17/05/09
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Tax Value must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 17/05/09
                                                End If
                                            Else
                                                ' no, use values from tax facade
                                                .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount = taxValue.taxAmount ' TJS 17/05/09
                                                dblInvoiceTax += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09
                                                .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = taxValue.taxAmountRate ' TJS 17/05/09
                                                dblInvoiceTaxRate += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09
                                                ' mark tax Value as being calculated by IS
                                                For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                    If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerInvoiceDetailView(iRowLoop).InvoiceCode And _
                                                        .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerInvoiceDetailView(iRowLoop).LineNum And _
                                                        .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerInvoiceDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                        .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 18/03/11
                                                    End If
                                                Next
                                            End If
                                        Else
                                            ' no, use values from tax facade
                                            .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount = taxValue.taxAmount
                                            dblInvoiceTax += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount
                                            .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = taxValue.taxAmountRate
                                            dblInvoiceTaxRate += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate
                                            ' mark tax Value as being calculated by IS
                                            For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerInvoiceDetailView(iRowLoop).InvoiceCode And _
                                                    .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerInvoiceDetailView(iRowLoop).LineNum And _
                                                    .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerInvoiceDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                    .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 18/03/11
                                                End If
                                            Next
                                            ' start of code added TJS 14/07/09
                                            strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_TAX)
                                            ' has sales tax value been supplied ?
                                            If strTempValue <> "" Then
                                                ' yes, must be numeric
                                                If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then
                                                    ' must not be negative
                                                    If CDec(strTempValue) >= 0 Then
                                                        ' is value same as IS calculation (ignore roundings of 0.01 or less) ?
                                                        If CDec(strTempValue) > .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate + 0.01 Or CDec(strTempValue) < .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate - 0.01 Then
                                                            ' no, 
                                                            If strWarningMessage <> "" Then
                                                                strWarningMessage = strWarningMessage & vbCrLf
                                                            End If
                                                            strWarningMessage = strWarningMessage & "Sales Tax corrected for " & strItemID & ", XML file contained " & strTempValue & ", Tax Facade calculated " & .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate
                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Tax Value must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 27/02/10
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Item Tax Value must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 27/02/10
                                                End If
                                            End If
                                            ' end of code added TJS 14/07/09
                                        End If

                                        ' start of code added TJS 03/04/09
                                        ' Check for any CustomerInvoiceDetail table Custom Fields
                                        XMLCustomFields = XMLItemTemp.XPathSelectElements(GENERIC_XML_ORDER_INVOICE_ITEM_CUSTOM_FIELDS) ' TJS 02/12/11
                                        If XMLCustomFields IsNot Nothing Then
                                            For Each XMLCustomField In XMLCustomFields
                                                Try
                                                    XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                                                    ' has field name been defined ?
                                                    If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                                        ' does it exist ?
                                                        bCustomFieldExists = False ' TJS 21/04/09
                                                        For iColumnLoop = 0 To .CustomerInvoiceDetailView.Columns.Count - 1 ' TJS 21/04/09
                                                            If .CustomerInvoiceDetailView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 21/04/09
                                                                bCustomFieldExists = True ' TJS 21/04/09
                                                                Exit For ' TJS 21/04/09
                                                            End If
                                                        Next
                                                        If bCustomFieldExists Then ' TJS 21/04/09
                                                            .CustomerInvoiceDetailView(iRowLoop)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerInvoiceDetailView", _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 21/04/09

                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Field Name attribute not provided for Item Custom Field", _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString)

                                                    End If

                                                Catch ex As Exception
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                                         m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 29/05/09

                                                End Try
                                            Next
                                        End If
                                        ' end of code added TJS 03/04/09

                                        ' start of code added TJS 18/01/13
                                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOCATE_AND_RESERVE_STOCK).ToUpper = "YES" Then
                                            InvoiceFacade.AllocateStock(.CustomerInvoiceDetailView(iRowLoop))
                                            InvoiceFacade.ReserveStock(.CustomerInvoiceDetailView(iRowLoop))
                                            InvoiceFacade.AssignQuantityShipped(.CustomerInvoiceDetailView(iRowLoop), Convert.ToDecimal(IsNull(.CustomerInvoiceDetailView(iRowLoop).QuantityToAllocate, 0)), TransactionType.Invoice)
                                        End If
                                        ' end of code added TJS 18/01/13


                                        ' TJS/FA 19/04/12 Note for future  Add non stock correction figure here
                                        ' and reset the correction flag
                                        If decKitTotalRemaining <> 0 Then
                                            m_ImportExportConfigFacade.WriteLogProgressRecord("Rounding differential in Kit calculation - " & decKitTotalRemaining)
                                        End If
                                    Next
                                    iLineNum = iLineNum + iItemRowsAdded ' TJS 18/03/11

                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "035", strItemID & " not found", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09

                                End If

                            Catch ex As Exception
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Inventory Item could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                     m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 29/05/09 TJS 18/04/11

                            End Try
                        Next
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "034", "No Invoice Items found", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                    End If

                    ' RCD 2019/08/13 Start SalesRepGroupCode
                    Dim commissionTotal As Decimal = 0
                    Dim commissionTotalRate As Decimal = 0
                    For counter As Integer = 0 To .CustomerInvoiceDetailView.Rows.Count - 1
                        commissionTotal += .CustomerInvoiceDetailView(counter).CommissionAmount
                        commissionTotalRate += .CustomerInvoiceDetailView(counter).CommissionAmountRate
                    Next
                    .CustomerSalesRepCommissionView(0).CommissionPercent = 100
                    .CustomerSalesRepCommissionView(0).CommissionTotal = commissionTotal
                    .CustomerSalesRepCommissionView(0).CommissionTotalRate = commissionTotalRate
                    ' RCD 2019/08/13 End SalesRepGroupCode

                    .CustomerInvoiceView(0).SubTotal = dblInvoiceTotal
                    .CustomerInvoiceView(0).SubTotalRate = dblInvoiceTotalRate ' TJS 26/05/09

                    strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_TOTALS & "/Shipping") ' TJS 09/03/09
                    ' has shipping charge been supplied ?
                    If strTempValue <> "" Then ' TJS 09/03/09
                        ' yes, must be numeric and not contain any commas
                        If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                            ' must not be negative
                            If CDec(strTempValue) >= 0 Then ' TJS 09/03/09
                                ' shipping charge valid, overwrite customer default
                                ' do prices include tax >
                                If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 07/06/09
                                    ' yes, get price before tax
                                    .CustomerInvoiceView(0).FreightRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, _
                                        .TransactionItemTaxDetailView, TRANSACTION_TAX_ITEM_FREIGHT, 0, 1, CDec(strTempValue), _
                                        .CustomerInvoiceView(0).FreightTaxCode, .CustomerInvoiceView(0).CurrencyCode, _
                                        .CustomerInvoiceView(0).ExchangeRate, .CustomerInvoiceView(0).InvoiceCode, True) ' TJS 07/06/09
                                Else
                                    .CustomerInvoiceView(0).FreightRate = CDec(strTempValue) ' TJS 09/03/09 TJS 26/05/09
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Invoice Shipping charge must not be negative", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Invoice Shipping charge must be numeric", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                        End If
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "033", "Invoice Shipping charge is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09
                    End If
                    .CustomerInvoiceView(0).Freight = RoundDecimalValue(.CustomerInvoiceView(0).FreightRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 26/05/09
                    .CustomerInvoiceView(0).FreightTaxCode = Me.m_ImportExportDataset.CustomerShipTo(0).FreightTax ' TJS 02/12/11 TJS 14/05/12

                    ' now calculate Sales Tax on freight (VAT)
                    ReDim detailRows(taxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & .CustomerInvoiceView(0).FreightTaxCode & "'").Length - 1)
                    index = 0
                    ' Get the detail rows for freight tax code.
                    For detailRowIndex As Integer = 0 To taxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
                        If taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = .CustomerInvoiceView(0).FreightTaxCode.ToUpper Then
                            detailRows(index) = taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                            index += 1
                        End If
                    Next
                    dblFreight = .CustomerInvoiceView(0).Freight
                    dblFreightRate = .CustomerInvoiceView(0).FreightRate
                    ' get tax values
                    taxValue = taxFacade.CalculateTransactionTax(.CustomerInvoiceView(0).FreightTaxCode, dblFreight, _
                        dblFreightRate, TRANSACTION_TAX_ITEM_FREIGHT, .CustomerInvoiceView(0).InvoiceCode, _
                        detailRows, .TransactionItemTaxDetailView, .CustomerInvoiceView(0).CurrencyCode, _
                        .CustomerInvoiceView(0).ExchangeRate)
                    ' are we accepting the source tax calculation ?
                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ACCEPT_SOURCE_SALES_TAX_CALCULATION).ToUpper = "YES" Or _
                        GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 26/05/09 TJS 26/10/11
                        ' yes, get total tax value
                        strTempValue = GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_TOTALS & "/Tax") ' TJS 26/05/09
                        ' has tax value been supplied ?
                        If strTempValue <> "" Then ' TJS 26/05/09
                            ' yes, must be numeric and not contain any commas
                            If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 26/05/09 TJS 29/05/09
                                ' must not be negative
                                If CDec(strTempValue) >= 0 Then ' TJS 26/05/09
                                    ' total tax value valid, use it
                                    .CustomerInvoiceView(0).FreightTaxRate = CDec(strTempValue) - dblInvoiceTaxRate ' TJS 26/05/09
                                    ' does item have a tax record i.e. a sales tax code exists
                                    If .TransactionTaxDetailView.Count > 0 Then ' TJS 02/12/11
                                        .TransactionTaxDetailView(0).TaxAmountRate = .CustomerInvoiceView(0).FreightTaxRate ' TJS 26/05/09 TJS 11/06/09
                                        dblInvoiceTaxRate += .CustomerInvoiceView(0).FreightTaxRate ' TJS 26/05/09
                                        .CustomerInvoiceView(0).FreightTax = RoundDecimalValue(.CustomerInvoiceView(0).FreightTaxRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 26/05/09
                                        .TransactionTaxDetailView(0).TaxAmount = .CustomerInvoiceView(0).FreightTax ' TJS 26/05/09 TJS 11/06/09
                                        dblInvoiceTax += .CustomerInvoiceView(0).FreightTax ' TJS 26/05/09
                                        .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = True ' TJS 14/07/09 TJS 14/08/09
                                        .TransactionTaxDetailView(0).IsTAOverridden = True ' TJS 24/02/12
                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Cannot apply Sales Tax to an Invoice with no active Tax Code", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 02/12/11
                                    End If
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Invoice Total Tax Value must not be negative", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 26/05/09 TJS 27/02/10
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Invoice Total Tax Value must be numeric", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 26/05/09 TJS 27/02/10
                            End If
                        Else
                            ' no, use values from tax facade
                            .CustomerInvoiceView(0).FreightTax = taxValue.taxAmount ' TJS 26/05/09
                            dblInvoiceTax += .CustomerInvoiceView(0).FreightTax ' TJS 26/05/09
                            .CustomerInvoiceView(0).FreightTaxRate = taxValue.taxAmountRate ' TJS 26/05/09
                            dblInvoiceTaxRate += .CustomerInvoiceView(0).FreightTaxRate ' TJS 26/05/09
                            .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 14/08/09 TJS 24/02/12
                        End If
                    Else
                        ' no, use values from tax facade
                        .CustomerInvoiceView(0).FreightTax = taxValue.taxAmount
                        dblInvoiceTax += .CustomerInvoiceView(0).FreightTax
                        .CustomerInvoiceView(0).FreightTaxRate = taxValue.taxAmountRate
                        dblInvoiceTaxRate += .CustomerInvoiceView(0).FreightTaxRate
                        .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 14/08/09 TJS 24/02/12
                    End If

                    InvoiceFacade.ComputeTotals() ' TJS 07/06/09
                    ' start of code removed TJS 07/06/09
                    '.CustomerInvoiceView(0).Tax = dblInvoiceTax
                    '.CustomerInvoiceView(0).TaxRate = dblInvoiceTaxRate
                    '.CustomerInvoiceView(0).Total = .CustomerInvoiceView(0).SubTotal + .CustomerInvoiceView(0).Freight + _
                    '    .CustomerInvoiceView(0).Tax + .CustomerInvoiceView(0).FreightTax
                    '.CustomerInvoiceView(0).TotalRate = .CustomerInvoiceView(0).SubTotalRate + .CustomerInvoiceView(0).FreightRate + _
                    '    .CustomerInvoiceView(0).TaxRate + .CustomerInvoiceView(0).FreightTaxRate
                    '.CustomerInvoiceView(0).Balance = .CustomerInvoiceView(0).Total
                    '.CustomerInvoiceView(0).BalanceRate = .CustomerInvoiceView(0).TotalRate
                    ' end of code removed TJS 07/06/09

                    If GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_PAYMENT_METHOD).ToUpper = "CREDIT CARD" Then ' TJS 29/05/09
                        .CustomerInvoiceView(0).PaymentTermCode = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_CREDIT_CARD_PAYMENT_TERM) ' TJS 20/02/09
                    End If

                    ' save invoice - did it save ok ?
                    strInvoiceValidationErrorMessage = "" ' TJS 21/04/09
                    InvoiceFacade.IncrementSaveCounterID() ' TJS 02/04/14
                    If InvoiceFacade.UpdateDataSet(InvoiceFacade.CreateParameterSet(InvoiceFacade.RelatedTables(TransactionType.Invoice)), TransactionType.Invoice, m_BaseProductName & " Create Invoice", False) Then
                        ' yes, get Post Invoice flag
                        bPostInvoice = CBool(IIf(GetXMLElementText(XMLGenericInvoice, GENERIC_XML_INVOICE_POST_INVOICE).ToUpper = "YES", True, False)) ' TJS 02/08/12
                        ' are there any payment details nodes ?
                        XMLPaymentDetails = XMLGenericInvoice.XPathSelectElements(GENERIC_XML_INVOICE_PAYMENT_DETAILS_LIST) ' TJS 02/12/11
                        If GetXMLElementListCount(XMLPaymentDetails) > 0 Then ' TJS 07/07/09 TJS 02/12/11
                            ' yes
                            ' for some reason CB 13 doesn't update the Invoice records properly after UpdateDataSet so it won't save again for the payment
                            InvoiceFacade.LoadInvoice(.CustomerInvoiceView(0).InvoiceCode) ' TJS 11/02/14
                            For Each XMLPaymentNode As XElement In XMLPaymentDetails ' TJS 02/12/11
                                XMLTemp = XDocument.Parse(XMLPaymentNode.ToString) ' TJS 02/12/11
                                ' yes, is payment method set to Credit card ?
                                If GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_PAYMENT_METHOD).ToUpper = "CREDIT CARD" Then ' TJS 29/05/09 TJS 07/07/09 TJS 02/12/11
                                    ' yes, is transaction status set for Card Authorisation
                                    If GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "AUTHORISECARD" Or _
                                        GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "" Then ' TJS 07/07/09 TJS 02/12/11
                                        ' yes, is card authorisation enabled for this source ?
                                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_AUTHORISE_CARD_ON_IMPORT).ToUpper = "YES" Then ' TJS 07/07/09
                                            ' yes, process card
                                            xmlResponseDetailNode = AuthoriseCard(XMLGenericInvoice, XMLTemp, InvoiceFacade, InvoiceDataset, CustomerCode, contactCode, .CustomerInvoiceView(0).InvoiceCode, .CustomerInvoiceView(0).TotalRate, True) ' TJS 03/02/09 TJS 02/12/11 TJS 10/06/12 TJS 18/01/13

                                        Else
                                            ' card processing not enabled for this source
                                            xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/01/09
                                            xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/01/09
                                            xmlResponseDetailNode.Add(New XElement("InvoiceNumber", .CustomerInvoiceView(0).InvoiceCode)) ' TJS 29/01/09
                                            xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/01/09
                                            If strWarningMessage <> "" Then ' TJS 29/01/09
                                                xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/01/09
                                            End If
                                            Return xmlResponseDetailNode
                                        End If

                                    ElseIf GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "CARDAUTHORISED" Or _
                                        GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "PAYMENTRECEIVED" Then ' TJS 07/07/09 TJS 02/12/11
                                        ' no, card has been processed by external system
                                        ' has payment been captured ?
                                        If GetXMLElementText(XMLTemp, GENERIC_XML_ORDER_CREDIT_CARD_TRANSACTION_STATUS).ToUpper = "CARDAUTHORISED" Then ' TJS 07/07/09 TJS 02/12/11
                                            ' no
                                            xmlResponseDetailNode = RecordCardAuthorisation(XMLTemp, InvoiceFacade, InvoiceDataset, CustomerCode, contactCode, .CustomerInvoiceView(0).InvoiceCode, .CustomerInvoiceView(0).TotalRate, True) ' TJS 07/07/09 TJS 02/12/11 TJS 10/06/12
                                        Else
                                            ' yes
                                            xmlResponseDetailNode = RecordCardPayment(XMLTemp, InvoiceFacade, InvoiceDataset, CustomerCode, contactCode, .CustomerInvoiceView(0).InvoiceCode, .CustomerInvoiceView(0).TotalRate, True) ' TJS 07/07/09 TJS 02/12/11 TJS 10/06/12
                                        End If

                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "103", "Invalid Credit Card TransactionStatus - " & GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_CREDIT_CARD_TRANSACTION_STATUS), _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 07/07/09 TJS 02/12/11

                                    End If
                                    If bPostInvoice Then ' TJS 02/08/12
                                        InvoiceFacade.Post() ' TJS 02/08/12
                                    End If
                                    ' does response contain only a single node ?
                                    If xmlResponseDetailNode.HasElements Then
                                        ' no, return error details
                                        If strWarningMessage <> "" Then ' TJS 20/02/09
                                            strWarningMessage = strWarningMessage & vbCrLf ' TJS 20/02/09
                                        End If
                                        strWarningMessage = strWarningMessage & xmlResponseDetailNode.XPathSelectElement("/ErrorMessage").Value ' TJS 20/02/09
                                    End If
                                    xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/01/09
                                    xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/01/09
                                    xmlResponseDetailNode.Add(New XElement("InvoiceNumber", .CustomerInvoiceView(0).InvoiceCode)) ' TJS 29/01/09
                                    xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/01/09
                                    If strWarningMessage <> "" Then ' TJS 29/01/09
                                        xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/01/09
                                    End If
                                    Return xmlResponseDetailNode

                                    ' start of code added TJS 10/06/12
                                ElseIf GetXMLElementText(XMLTemp, GENERIC_XML_INVOICE_PAYMENT_METHOD).ToUpper = "SOURCE" Then
                                    ' no, payment is taken by source so create payment record 
                                    xmlResponseDetailNode = RecordSourcePayment(XMLTemp, SalesOrderFacade, InvoiceDataset, CustomerCode, contactCode, .CustomerInvoiceView(0).InvoiceCode, .CustomerInvoiceView(0).TotalRate, True, bPostInvoice) ' TJS 02/08/12
                                    If bPostInvoice Then ' TJS 02/08/12
                                        InvoiceFacade.Post() ' TJS 02/08/12
                                    End If
                                    ' does response contain only a single node ?
                                    If xmlResponseDetailNode IsNot Nothing AndAlso xmlResponseDetailNode.HasElements Then ' TJS 29/01/14
                                        ' no, 
                                        If strWarningMessage <> "" Then
                                            strWarningMessage = strWarningMessage & vbCrLf
                                        End If
                                        strWarningMessage = strWarningMessage & xmlResponseDetailNode.XPathSelectElement("/ErrorMessage").Value

                                    End If
                                    xmlResponseDetailNode = New XElement("ImportResponse")
                                    xmlResponseDetailNode.Add(New XElement("Status", "Success"))
                                    xmlResponseDetailNode.Add(New XElement("InvoiceNumber", .CustomerInvoiceView(0).InvoiceCode))
                                    xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode))
                                    If strWarningMessage <> "" Then
                                        xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage))
                                    End If
                                    Return xmlResponseDetailNode
                                    ' end of code added TJS 10/06/12

                                Else
                                    ' payment method not set to credit card
                                    If bPostInvoice Then ' TJS 02/08/12
                                        InvoiceFacade.Post() ' TJS 02/08/12
                                    End If
                                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_AUTHORISE_CARD_ON_IMPORT).ToUpper = "YES" Then ' TJS 07/07/09
                                        If strWarningMessage <> "" Then ' TJS 07/07/09
                                            strWarningMessage += vbCrLf & "Also, Card Authorisation enabled, but Payment Method is not Credit Card" ' TJS 07/07/09
                                        Else
                                            strWarningMessage = "Card Authorisation enabled, but Payment Method is not Credit Card" ' TJS 07/07/09
                                        End If
                                    End If
                                    xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 07/07/09
                                    xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 07/07/09
                                    xmlResponseDetailNode.Add(New XElement("InvoiceNumber", .CustomerInvoiceView(0).InvoiceCode)) ' TJS 29/01/09
                                    xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 07/07/09
                                    If strWarningMessage <> "" Then ' TJS 07/07/09
                                        xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 07/07/09
                                    End If
                                    Return xmlResponseDetailNode ' TJS 07/07/09

                                End If
                            Next
                        Else
                            ' no payment details provided 
                            If bPostInvoice Then ' TJS 02/08/12
                                InvoiceFacade.Post() ' TJS 02/08/12
                            End If
                            If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_AUTHORISE_CARD_ON_IMPORT).ToUpper = "YES" Then ' TJS 07/07/09
                                If strWarningMessage <> "" Then ' TJS 29/01/09
                                    strWarningMessage += vbCrLf & "Also, Card Authorisation enabled, but no Payment Details provided for card authorisation or Payment Method is not Credit Card" ' TJS 29/05/09 TJS 07/07/09
                                Else
                                    strWarningMessage = "Card Authorisation enabled, but no Payment Details provided for card authorisation or Payment Method is not Credit Card" ' TJS 29/05/09
                                End If
                            End If
                            xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/05/09
                            xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/05/09
                            xmlResponseDetailNode.Add(New XElement("InvoiceNumber", .CustomerInvoiceView(0).InvoiceCode)) ' TJS 29/01/09
                            xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/05/09
                            If strWarningMessage <> "" Then ' TJS 07/07/09
                                xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/05/09
                            End If
                            Return xmlResponseDetailNode ' TJS 29/05/09

                        End If

                    Else
                        For iTableLoop = 0 To InvoiceFacade.RelatedTables(TransactionType.Invoice).Length - 1 ' TJS 21/04/09
                            For iRowLoop = 0 To .Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Rows.Count - 1 ' TJS 21/04/09
                                For iColumnLoop = 0 To .Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Columns.Count - 1 ' TJS 21/04/09
                                    If .Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 10/02/09 TJS 21/04/09
                                        strInvoiceValidationErrorMessage = strInvoiceValidationErrorMessage & .Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).TableName & _
                                            "." & .Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Columns(iColumnLoop).ColumnName & ", " & _
                                            .Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 10/02/09 TJS 21/04/09 TJS 25/04/09
                                    End If
                                Next
                            Next
                        Next

                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "040", "Failed to save Invoice - " & strInvoiceValidationErrorMessage, _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", XMLGenericInvoice.ToString) ' TJS 09/03/09 TJS 25/04/09
                    End If
                End With
                InvoiceFacade.Dispose()
                InvoiceDataset.Dispose()
                CustomerDetailFacade.Dispose()
                taxSchemeFacade.Dispose()
                taxFacade.Dispose()
                taxSchemeDataset.Dispose()

            Else
                xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("InvoiceNumber", Me.m_ImportExportDataset.CustomerInvoice(0).InvoiceCode)) ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/01/09
                If strWarningMessage <> "" Then ' TJS 29/01/09
                    xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/01/09
                End If
                Return xmlResponseDetailNode
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateInvoice", ex, XMLGenericInvoice.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try
    End Function

    Private Sub InvoiceFacade_InvalidatedOnSaving(ByVal sender As Object, ByVal errorMessage As String) Handles InvoiceFacade.InvalidatedOnSaving ' TJS 25/04/09

        strInvoiceValidationErrorMessage = errorMessage & vbCrLf ' TJS 25/04/09

    End Sub

    Private Sub InvoiceColumnChanged(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)

        If e.Row.Table Is InvoiceDataset.CustomerInvoiceView Then
            If e.Column Is InvoiceDataset.CustomerInvoiceView.InvoiceCodeColumn Then
                e.Row(InvoiceDataset.CustomerInvoiceView.SourceInvoiceCodeColumn.ColumnName) = e.ProposedValue
                e.Row(InvoiceDataset.CustomerInvoiceView.RootDocumentCodeColumn.ColumnName) = e.ProposedValue
            End If
        End If

    End Sub

    Private Function SendInvoiceCreditHoldWarning(ByVal strMsgParam As String) As Integer

        bCustomerCreditHoldOrOverLimit = True ' TJS 06/10/09
        strCreditMessage = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("INF0142", New String() {strMsgParam}) ' TJS 06/10/09

    End Function

    Private Function SendInvoiceCreditLimitWarning(ByVal strMsgParam As String) As Integer

        bCustomerCreditHoldOrOverLimit = True ' TJS 06/10/09
        strCreditMessage = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("QUE0042", New String() {strMsgParam}) ' TJS 06/10/09

    End Function
#End Region

#Region " CreateCreditNote "
    Private WithEvents CreditNoteFacade As Interprise.Facade.Customer.InvoiceFacade ' TJS 21/04/09
    Private strCreditNoteValidationErrorMessage As String ' TJS 21/04/09

    Private Function CreateCreditNote(ByVal XMLGenericCreditNote As XDocument, ByVal CustomerCode As String, ByVal SourceCode As String) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 24/01/09 | TJs             | 2009.1.00 | Modified to trim any leading or trailing spaces from Source/Customer Order references
        ' 29/01/09 | TJS             | 2009.1.03 | Modified to check an existing invoice record is for the same customer
        '                                        | and changed return XML structure to include warning message option
        ' 06/02/09 | TJS             | 2009.1.05 | modified to cater for AT_IS_VOIDED parameter on ReadCustomerInvoiceImportExport_DEV000221
        '                                        | and to use new field MerchantOrderID_DEV000221 instead of SalesRepOrderCode 
        '                                        | which is actually constrained to be SalesRepGroupCode
        ' 08/02/09 | TJS             | 2009.1.06 | Modified to set address details in case different from customer record
        '                                        | and to check for a Source Order Ref before looking for a matching invoice
        ' 10/02/09 | TJS             | 2009.1.07 | Modified to add an alternative Item Identification element of the ItemName
        ' 20/02/09 | TJS             | 2009.1.08 | Corrected vbcrlf to vbcr when adding company name to address
        ' 09/03/09 | TJS             | 2009.1.09 | Modified to useBuildXMLErrorResponseNodeAndEmail for source error processing
        ' 17/03/09 | TJS             | 2009.1.10 | Modified to cater for SOURCE_CONFIG_SET_DISABLE_FREIGHT_CALCULATION setting
        '                                        | for GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP element, for 
        '                                        | KSI MultiShip module and to set Credit Note Currency
        ' 03/04/09 | TJS             | 2009.2.00 | Modified to make name and address optional on imports with an
        '                                        | existing customer account and added support for Custom DB fields
        ' 08/04/09 | TJS             | 2009.2.02 | Trimmed spaces from Customer name elements
        ' 21/04/09 | TJS             | 2009.2.03 | Modified to use Facade Related tables function when creating failed to save error message,
        '                                        | to detect validation error messages on save and to check that Custom Fields actually exist
        ' 25/04/09 | TJS             | 2009.2.04 | Corrected variable used to build failure to save error message, added currency validation and exchange rate settings
        ' 07/05/09 | TJS             | 2009.2.05 | Removed .trim as GetElementText now preforms this
        ' 11/05/09 | TJS             | 2009.2.06 | Modified to cater for SOURCE_CONFIG_IGNORE_VOIDED_ORDERS_AND_INVOICES 
        '                                        | and blank GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF 
        ' 17/05/09 | TJS             | 2009.2.07 | Modified to use the Item Tax Code when calculating Sales Tax (VAT) 
        ' 26/05/09 | TJS             | 2009.2.08 | Modified to use cater for AcceptSourceSalesTaxCalculation, corrected handling of 
        '                                        | currencies other than base, modified to use IS functions to calculate cost amd margin
        ' 29/05/09 | TJS             | 2009.2.09 | Modified to detect commas in numeric values and added checks for XML load errors
        ' 07/06/09 | TJS             | 2009.2.10 | Modified to cater for prices including tax and Item UMC
        ' 11/06/09 | TJS             | 2009.2.12 | Corrected processing of Freight tax when AcceptSourceSalesTaxCalculation is set
        ' 18/06/09 | TJS             | 2009.2.14 | Modified to cater for SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY config option when applying name to order
        ' 07/07/09 | TJS             | 2009.3.00 | Modified to set discount to 0 when item price is in XML file
        ' 14/07/09 | TJS             | 2009.3.01 | Corrected setting of TaxAmount field on TransactionItemTaxDetailView and 
        '                                        | modified to set custom field flag when source tax values are being used
        ' 16/07/09 | TJS             | 2009.3.02 | Corrected setting of TransactionTaxDetailView on freight calculation
        ' 14/08/09 | TJS             | 2009.3.03 | Modified to cater for Non-Stock, Kit and Service items not having a WarehouseCode
        '                                        | and added check for valid country
        ' 06/10/09 | TJS             | 2009.3.07 | Modified to abort invoice processing if customer on Credit Hold or over Credit Limit
        ' 16/10/09 | TJS             | 2009.3.08 | Modified to trap failure to create CustomerDetailFacade as this can be due to licence issues
        ' 13/01/10 | TJS             | 2010.0.04 | Modified to cater for SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE
        ' 27/02/10 | TJS             | 2010.0.06 | Corrected procuct and facade name in log/error messages
        ' 22/09/10 | TJS             | 2010.1.01 | Modified to set SalesRepOrderCode and load ItemKitDetails rows, to cater 
        '                                        | for GENERIC_XML_ORDER_SOURCE_MERCHANT_ID when checking for existing records
        '                                        | and Kit Items with fixed compositions
        ' 27/09/10 | TJS             | 2010.1.02 | Modified to set record type when checking for already imported credit notes
        ' 04/10/10 | TJS             | 2010.1.05 | Corrected transaction type in AssignItemKit
        ' 03/11/10 | FA              | 2010.1.07 | Modified code to use the correct compute function for kit sales price
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to prevent error when iten details rows don't have matching 
        '                                        | TransactionItemTaxDetail(rows), corrected setting of ShipToCountry
        '                                        | and modified to cater for Item Pricing Kits
        ' 04/04/11 | TJS             | 2011.0.07 | Modified to handle Item Pricing kit where item prices are zero
        ' 05/04/11 | TJS             | 2011.0.08 | Modified to cater for IS 4.8 build using conditional compilation
        ' 18/04/11 | TJS             | 2011.0.11 | Corrected XMLTemp to XMLItemTemp for item error message
        ' 17/10/11 | TJSFA           | 2011.1.07 | Corrected sales tax calculation for kits with more than one item.  Process was 
        '                                          multiplying the tax amount by the amount of items, resulting in negative tax values
        '                                          on the invoices.
        ' 24/10/11 | FA              | 2011.1.08 | Modified Kit item calculation to take into account quantity of items specified for each 
        ' 26/10/11 | TJS             | 2011.1.xx | Corrected setting of source tax values and codes
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2, to handle items with no Unit of Measure record, 
        '                                        | to detect no valid tax rate when applying tax from source and for IS 6
        ' 24/02/12 | TJS             | 2011.2.08 | Modified to set IsTAOverridden on tax records where value set from source to prevent recalculation when Order converted to Invoice
        ' 19/04/12 | TJS/FA          | 2012.1.01 | Implemented changes from IS 5.6 version 2011.1.17 (19/03/12) and 2011.1.18 (09/04/12)
        ' 10/06/12 | TJS             | 2012.1.05 | Modified to record SourceItemCommission and SourceItemFulfillmentCharge
        ' 08/07/12 | TJS             | 2012.1.09 | Modified to cater for UseShipToClassTemplate
        ' 20/07/12 | TJS             | 2012.1.10 | Corrected selection of Warehouse code from ShipToTemplate when UseShipToClassTemplate is set
        ' 24/08/12 | TJS             | 2012.1.14 | Modified for Connected Business 7
        ' 05/10/13 | TJS             | 2013.3.05 | Corrected extraction of Tax value from XML CreditNoteTotals 
        ' 13/02/14 | TJS             | 2014.0.00 | Modified references for CB 14
        ' 01/05/14 | TJS             | 2014.0.01 | Modified to cater for Item Bundles and some additional CB fields and 
        '                                        | corrected error when order has quantity > 1 for item priced kits
        ' 23/05/14 | TJS             | 2014.0.02 | Modified to cater for CB 14.0.01 replacing IsBase field with DefaultSelling field
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade
        Dim SalesOrderFacadeForCreditNote As Interprise.Facade.Customer.SalesOrderFacade
        Dim XMLItemTemp As XDocument, XMLTemp As XDocument ' TJS 18/03/11
        Dim XMLCreditNoteItems As System.Collections.Generic.IEnumerable(Of XElement), XMLCustomFields As System.Collections.Generic.IEnumerable(Of XElement) ' TJS 03/04/09
        Dim XMLCustomField As XElement, XMLCreditNoteItem As XElement, xmlResponseDetailNode As XElement ' TJS 03/04/09
        Dim xmlShippingDetails As XElement, commandSetRead As String()() ' TJS 08/02/09 TJS 22/09/10
        Dim rowGroupMethodDetail As Lerryn.Framework.ImportExport.DatasetGateway.ImportExportDatasetGateway.SystemShippingMethodGroupDetailRow ' TJS 17/03/09
        Dim detailRows() As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway.SystemTaxSchemeDetailViewRow
        Dim taxFacade As Interprise.Facade.Base.TaxFacade, taxSchemeFacade As Interprise.Facade.Base.TaxSchemeFacade
        Dim taxSchemeDataset As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway
        Dim taxValue As Interprise.Facade.Base.TaxFacade.TaxValue, itemView As DataView
        Dim ItemKitDataset As Interprise.Framework.Base.DatasetGateway.ItemKitDatasetGateway ' TJS 22/09/10
        Dim ItemKitFacade As Interprise.Facade.Customer.CustomerItemKitFacade, itemKitDetailRows As DataRow() ' TJS 22/09/10
        Dim ItemBundleDataset As Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway ' TJS 01/05/14
        Dim ItemBundleFacade As Interprise.Facade.Customer.ItemBundleFacade ' TJS 01/05/14
        Dim ItemBundleRow As Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway.InventoryBundleConfiguratorViewRow ' TJS 01/05/14
        Dim shiptoCode As String, contactCode As String, contactFullName As String
        Dim index As Integer, iLineNum As Integer, dblCreditNoteTotal As Decimal, dblCreditNoteTotalRate As Decimal ' TJS 26/05/09
        Dim dblCreditNoteTax As Decimal, dblCreditNoteTaxRate As Decimal, dblFreight As Decimal, dblFreightRate As Decimal
        Dim iTableLoop As Integer, iColumnLoop As Integer, iRowLoop As Integer, sTemp As String, strErrMsg As String ' TJS 21/04/09
        Dim bCreditNoteExists As Boolean, strWarningMessage As String, strTempValue As String, strItemQty As String ' TJS 29/01/09 TJS 08/02/09 TJS 18/03/11
        Dim strItemPrice As String, strBillingCustomerName As String, strBillingCompanyName As String ' TJS 08/02/09 TJS 18/03/11
        Dim strShippingCustomerName As String, strShippingCompanyName As String, strItemID As String ' TJS 08/02/09 TJS 09/03/09
        Dim strShippingMethod As String, strShippingMethodGroup As String, bCustomFieldExists As Boolean ' TJS 17/03/09 TJS 21/04/09
        Dim strWarehouseCode As String, strItemKitPricing As String, iItemPtr As Integer, iBundlePtr As Integer ' TJS 08/06/09 TJS 22/09/10 TJS 01/05/14
        Dim iItemRowsAdded As Integer, iTaxLoop As Integer, iBundleRow As Integer, decSalesPriceRate As Decimal ' TJS 18/03/11 TJS 01/05/14
        Dim decKitPriceSumRate As Decimal, decKitTotalPriceRate As Decimal, bTaxRecordFound As Boolean  ' TJS 18/03/11 TJS 02/12/11
        Dim decKitPriceTaxSumRate As Decimal, decBundleTotalPriceRate As Decimal, decBundlePriceSumRate As Decimal ' FA 17/10/11 TJS 02/04/14
        Dim strNegKitPriceMsg As String = "", decKitTotalRemaining As Decimal = 0   ' TJS/FA 19/04/12
        Dim decActualKitTotal As Decimal = 0, decKitDifferential As Decimal = 0 ' TJS/FA 19/04/12

        Try
            bCustomerCreditHoldOrOverLimit = False ' TJS 06/10/09
            strCreditMessage = "" ' TJS 06/10/09

            ' first check if Credit Note already entered but source hasn't received acknowledgement
            Me.m_ImportExportDataset.EnforceConstraints = False
            strWarningMessage = "" ' TJS 29/01/09
            ' is there a Source Order Ref ?
            If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF) <> "" Then
                ' yes, check if credit note already imported
                If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_IGNORE_VOIDED_ORDERS_AND_INVOICES).ToUpper = "YES" Then ' TJS 11/05/09
                    ' is there a Store Merchant ID ?
                    If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_MERCHANT_ID) <> "" Then ' TJS 22/09/10
                        ' yes, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF) <> "" Then ' TJS 22/09/10
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_MERCHANT_ID), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Credit Memo"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_MERCHANT_ID), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Credit Memo"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    Else
                        ' no, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Credit Memo"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF), AT_IS_VOIDED, "0", _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Credit Memo"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    End If
                Else
                    ' is there a Store Merchant ID ?
                    If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_MERCHANT_ID) <> "" Then ' TJS 22/09/10
                        ' yes, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_MERCHANT_ID), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Credit Memo"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF), AT_STORE_MERCHANT_ID, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_MERCHANT_ID), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Credit Memo"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    Else
                        ' no, is there a Customer Order Ref ?
                        If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF) <> "" Then ' TJS 11/05/09
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_PO_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF), AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Credit Memo"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        Else
                            commandSetRead = New String()() {New String() {Me.m_ImportExportDataset.CustomerInvoice.TableName, _
                                "ReadCustomerInvoiceImportExport_DEV000221", AT_SOURCE_CODE, SourceCode, AT_MERCHANT_ORDER_CODE, _
                                GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF), _
                                Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "Credit Memo"}} ' TJS 22/09/10 TJS 27/09/10 TJS 13/02/14
                        End If
                    End If
                End If
                Me.LoadDataSet(commandSetRead, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 22/09/10
                If Me.m_ImportExportDataset.CustomerInvoice.Count > 0 Then ' TJS 29/01/09
                    If Me.m_ImportExportDataset.CustomerInvoice(0).BillToCode = CustomerCode Then ' TJS 29/01/09 TJS 03/04/09 TJS 11/05/09
                        bCreditNoteExists = True ' TJS 29/01/09
                        strWarningMessage = "Credit note with Source Ref " & GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF) & " already imported"
                    Else
                        bCreditNoteExists = True ' TJS 29/01/09 TJS 11/05/09
                        strWarningMessage = "Credit note with Source Ref " & GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF) & " already exists, but for CustomerCode " & Me.m_ImportExportDataset.CustomerInvoice(0).BillToCode & ", not " & CustomerCode
                    End If
                Else
                    bCreditNoteExists = False ' TJS 29/01/09
                End If
            Else
                ' no source reference provided, always create new credit note
                bCreditNoteExists = False ' TJS 08/02/09
            End If
            ' did we find a matching credit note
            If Not bCreditNoteExists Then ' TJS 29/01/09
                ' no, create customer dataset and facade
                Try ' TJS 16/10/09
                    CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
                    CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset)

                Catch ex As Exception ' TJS 16/10/09
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "090", "Cannot create CustomerDetailFacade - suspect Interprise Solutions Licence error or User count exceeded", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 16/10/09
                End Try

                ' need a Sales Order Facade for the Credit Card process
                SalesOrderDataset = New Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway
                SalesOrderFacadeForCreditNote = New Interprise.Facade.Customer.SalesOrderFacade(SalesOrderDataset)
                SalesOrderFacadeForCreditNote.TransactionType = TransactionType.SalesOrder ' TJS 24/01/09

                taxFacade = New Interprise.Facade.Base.TaxFacade
                taxSchemeDataset = New Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway
                taxSchemeFacade = New Interprise.Facade.Base.TaxSchemeFacade(taxSchemeDataset, Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerSalesTaxScheme)

                CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
                    "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific)

                shiptoCode = CustomerDetailDataset.CustomerView(0).DefaultShipToCode
                Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerShipTo.TableName, _
                    "ReadCustomerShipTo", AT_CUSTOMER_CODE, CustomerCode, AT_SHIP_TO_CODE, shiptoCode}}, _
                    Interprise.Framework.Base.Shared.ClearType.Specific)

                If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactNull Then
                    contactCode = CustomerDetailDataset.CustomerView(0).DefaultContact
                Else
                    contactCode = ""
                End If
                If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactFullNameNull Then
                    contactFullName = CustomerDetailDataset.CustomerView(0).DefaultContactFullName
                Else
                    contactFullName = ""
                End If

                ' create Invoice dataset 
                InvoiceDataset = New Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway
                ' add handler so that we can set mandatory default values e.g. RootDocumentCode
                AddHandler InvoiceDataset.CustomerInvoiceView.ColumnChanged, AddressOf InvoiceColumnChanged
                ' create Invoice Facade
                CreditNoteFacade = New Interprise.Facade.Customer.InvoiceFacade(InvoiceDataset)
                CreditNoteFacade.TransactionType = TransactionType.CreditMemo ' TJS 24/01/09

                ' create invoice core using customer details
                strErrMsg = ""
                CreditNoteFacade.AddInvoice(TransactionType.CreditMemo, Me.m_ImportExportDataset.CustomerShipTo(0), contactCode, contactFullName, AddressOf SendCreditNoteCreditHoldWarning, AddressOf SendCreditNoteCreditLimitWarning, strErrMsg)
                ' did it work ?
                If strErrMsg = "ERR0018" Then
                    ' no
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "060", Interprise.Facade.Base.SimpleFacade.Instance.GetMessage(strErrMsg, New String() {"Customer and/or Ship To", "customer Ship To"}), _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 06/10/09
                End If
                ' did we get a Credit Hold or Credit Limit warning which prevented invoice being created ?
                If bCustomerCreditHoldOrOverLimit Then ' TJS 06/10/09
                    ' yes, abort order
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "060", strCreditMessage, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 06/10/09
                End If

                sTemp = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_DATE)
                If sTemp = "" Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "No Credit Note Date found in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                ElseIf Not m_ImportExportConfigFacade.ValidateXMLDate(sTemp) Then ' TJS 29/01/09
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Credit Note Date format invalid", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                End If
                With InvoiceDataset
                    .CustomerInvoiceView(0).InvoiceDate = m_ImportExportConfigFacade.ConvertXMLDate(sTemp)
                    .CustomerInvoiceView(0).SourceCode = SourceCode
                    .CustomerInvoiceView(0).POCode = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF)
                    If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_ORDER_REF) <> GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF) And _
                        GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF) <> "" Then ' TJS 22/09/10
                        .CustomerInvoiceView(0).SalesRepOrderCode = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF) ' TJS 22/09/10
                    End If
                    .CustomerInvoiceView(0).WebSiteCode = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_WEBSITE_REF)
                    .CustomerInvoiceView(0)("StoreMerchantID_DEV000221") = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_MERCHANT_ID)
                    .CustomerInvoiceView(0)("MerchantOrderID_DEV000221") = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SOURCE_CREDITNOTE_REF) ' TJS 24/01/09 

                    ' has a Currency Code been defined ?
                    sTemp = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CURRENCY) ' TJS 25/04/09
                    If sTemp <> "" Then ' TJS 25/04/09
                        ' yes, check it matches an Active Currency Code in IS
                        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.SystemCurrency.TableName, "ReadSystemCurrency", _
                            Interprise.Framework.Inventory.Shared.Const.AT_CURRENCY_CODE, sTemp}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 25/04/09 TJS 13/02/14
                        If Me.m_ImportExportDataset.SystemCurrency.Count = 0 Then ' TJS 25/04/09
                            ' no matching currency found
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Invalid Currency Code " & sTemp & " in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 25/04/09 TJS 27/02/10
                        ElseIf Not Me.m_ImportExportDataset.SystemCurrency(0).IsActive Then ' TJS 25/04/09
                            ' Currency found but is not marked as Active
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Currency Code " & sTemp & " is not Active.", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 25/04/09 TJS 27/02/10 TJS 24/08/12
                        Else
                            ' yes, apply it
                            CreditNoteFacade.AssignCurrency(Me.m_ImportExportDataset.SystemCurrency(0), TransactionType.SalesOrder) ' TJS 25/04/09
                        End If
                    End If

                    ' start of code added TJS 03/04/09
                    ' Check for any CustomerInvoice table Custom Fields
                    XMLCustomFields = XMLGenericCreditNote.XPathSelectElements(GENERIC_XML_CREDITNOTE_CUSTOM_FIELDS)
                    If XMLCustomFields IsNot Nothing Then
                        For Each XMLCustomField In XMLCustomFields
                            Try
                                XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                                ' has field name been defined ?
                                If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                    ' does it exist ?
                                    bCustomFieldExists = False ' TJS 21/04/09
                                    For iColumnLoop = 0 To .CustomerInvoiceView.Columns.Count - 1 ' TJS 21/04/09
                                        If .CustomerInvoiceView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 21/04/09
                                            bCustomFieldExists = True ' TJS 21/04/09
                                            Exit For ' TJS 21/04/09
                                        End If
                                    Next
                                    If bCustomFieldExists Then ' TJS 21/04/09
                                        .CustomerInvoiceView(0)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                    Else
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerInvoiceView", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 21/04/09

                                    End If
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Field Name attribute not provided for Credit Note Custom Field", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)

                                End If

                            Catch ex As Exception
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                     m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 29/05/09

                            End Try
                        Next
                    End If
                    ' end of code added TJS 03/04/09

                    strBillingCustomerName = "" ' TJS 08/02/09
                    strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/NamePrefix") ' TJS 08/02/09 
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue & " " ' TJS 08/02/09
                    End If
                    strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/FirstName") ' TJS 08/02/09 
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue & " " ' TJS 08/02/09
                    End If
                    strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/LastName") ' TJS 08/02/09 
                    If strTempValue <> "" Then ' TJS 08/02/09
                        strBillingCustomerName = strBillingCustomerName & strTempValue ' TJS 08/02/09
                    ElseIf strBillingCustomerName <> "" Then ' TJS 03/04/09
                        ' Last Name blank but other name elements not blank
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Last Name is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                    End If
                    strBillingCompanyName = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/Company") ' TJS 08/02/09
                    ' has billing name been supplied ?
                    If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper = "YES" Then ' TJS 18/06/09
                        ' yes, company name provided and config has customer as company option set, use it
                        .CustomerInvoiceView(0).BillToName = strBillingCompanyName ' TJS 18/06/09
                    ElseIf strBillingCustomerName <> "" Then
                        ' customer name provided, use it
                        .CustomerInvoiceView(0).BillToName = strBillingCustomerName ' TJS 08/02/09
                    End If

                    ' has billing address been supplied ?
                    If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/Address") <> "" Or _
                        GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/Town_City") <> "" Or _
                        GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/County") <> "" Or _
                        GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/State") <> "" Or _
                        GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/PostalCode") <> "" Or _
                        GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/Country") <> "" Then ' TJS 03/04/09
                        ' yes, copy address in case details are different from customer record
                        strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/Address") ' TJS 09/03/09
                        If strTempValue = "" Then ' TJS 09/03/09
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Billing Address is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                        Else
                            ' need to convert any cr or lf to ensure they display correctly in IS
                            strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue) ' TJS 09/03/09
                        End If
                        ' has company name been provided and config has customer as company option is not set ?
                        If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper <> "YES" Then ' TJS 08/02/09 TJS 18/06/09
                            ' yes, add company name to address
                            .CustomerInvoiceView(0).BillToAddress = strBillingCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 09/03/09 
                        Else
                            ' no, use address as is
                            .CustomerInvoiceView(0).BillToAddress = strTempValue ' TJS 09/03/09 
                        End If
                        .CustomerInvoiceView(0).BillToCity = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/Town_City") ' TJS 08/02/09
                        .CustomerInvoiceView(0).BillToCounty = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/County") ' TJS 08/02/09
                        .CustomerInvoiceView(0).BillToState = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/State") ' TJS 08/02/09
                        strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/PostalCode") ' TJS 09/03/09
                        If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Billing Postal Code is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                        End If
                        .CustomerInvoiceView(0).BillToPostalCode = strTempValue ' TJS 09/03/09
                        strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_ADDRESS & "/Country") ' TJS 09/03/09
                        If strTempValue <> "" Then ' TJS 09/03/09
                            ' check Country is valid 
                            If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strTempValue & "'") <> "" Then ' TJS 14/08/09
                                .CustomerInvoiceView(0).BillToCountry = strTempValue ' TJS 09/03/09
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Billing Country is not a valid IS Country", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 14/08/09
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Billing Country is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                        End If
                        If strBillingCompanyName <> "" And GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/WorkPhone") <> "" Then ' TJS 09/03/09 TJS 03/04/09
                            .CustomerInvoiceView(0).BillToPhone = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/WorkPhone") ' TJS 09/03/09
                        ElseIf GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/HomePhone") <> "" Then ' TJS 03/04/09
                            .CustomerInvoiceView(0).BillToPhone = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_BILLING_DETAILS_CUSTOMER & "/HomePhone") ' TJS 09/03/09
                        End If
                    End If

                    ' is a Shipping Details Customer node present ?
                    xmlShippingDetails = XMLGenericCreditNote.XPathSelectElement(GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_CUSTOMER) ' TJS 08/02/09 TJS 03/04/09
                    If xmlShippingDetails IsNot Nothing Then ' TJS 08/02/09
                        ' yes, get shipping name
                        strShippingCustomerName = "" ' TJS 08/02/09
                        strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_CUSTOMER & "/NamePrefix") ' TJS 08/02/09 
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue & " " ' TJS 08/02/09
                        End If
                        strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_CUSTOMER & "/FirstName") ' TJS 08/02/09 
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue & " " ' TJS 08/02/09
                        End If
                        strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_CUSTOMER & "/LastName") ' TJS 08/02/09 
                        If strTempValue <> "" Then ' TJS 08/02/09
                            strShippingCustomerName = strShippingCustomerName & strTempValue ' TJS 08/02/09
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Last Name for Shipping is blank in input XML", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                        End If
                        strShippingCompanyName = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_CUSTOMER & "/Company") ' TJS 08/02/09
                        .CustomerInvoiceView(0).ShipToName = strShippingCustomerName ' TJS 08/02/09

                        ' has shipping address  been supplied ?
                        If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/Address") <> "" Or _
                            GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/Town_City") <> "" Or _
                            GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/County") <> "" Or _
                            GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/State") <> "" Or _
                            GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/PostalCode") <> "" Or _
                            GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/Country") <> "" Then ' TJS 03/04/09
                            ' yes, copy address in case details are different from customer record
                            strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/Address") ' TJS 09/03/09
                            If strTempValue = "" Then ' TJS 09/03/09
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Shipping Address is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                            Else
                                ' need to convert any cr or lf to ensure they display correctly in IS
                                strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue) ' TJS 09/03/09
                            End If
                            ' has company name been provided ?
                            If strShippingCompanyName <> "" Then ' TJS 08/02/09 
                                ' yes, add company name to address
                                .CustomerInvoiceView(0).ShipToAddress = strShippingCompanyName & ChrW(13) & ChrW(10) & strTempValue ' TJS 09/03/09
                            Else
                                ' no, use address as is
                                .CustomerInvoiceView(0).ShipToAddress = strTempValue ' TJS 09/03/09
                            End If
                            .CustomerInvoiceView(0).ShipToCity = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/Town_City") ' TJS 08/02/09
                            .CustomerInvoiceView(0).ShipToCounty = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/County") ' TJS 08/02/09
                            .CustomerInvoiceView(0).ShipToState = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/State") ' TJS 08/02/09
                            strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/PostalCode") ' TJS 03/04/09
                            If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Shipping Postal Code is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 03/04/09

                            End If
                            .CustomerInvoiceView(0).ShipToPostalCode = strTempValue ' TJS 03/04/09
                            strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_ADDRESS & "/Country") ' TJS 09/03/09
                            If strTempValue <> "" Then ' TJS 09/03/09
                                ' check Country is valid 
                                If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strTempValue & "'") <> "" Then ' TJS 14/08/09
                                    .CustomerInvoiceView(0).ShipToCountry = strTempValue ' TJS 09/03/09 TJS 18/03/11
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Shipping Country is not a valid IS Country", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 14/08/09
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Customer Shipping Country is blank in input XML", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                            End If
                            strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_CUSTOMER & "/Telephone") ' TJS 03/04/09
                            If strTempValue <> "" Then ' TJS 03/04/09
                                .CustomerInvoiceView(0).ShipToPhone = strTempValue ' TJS 08/02/09 TJS 03/04/09
                            End If
                        End If
                    End If

                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper <> "YES" Then ' TJS 08/07/12
                        ' start of code added TJS 17/03/09
                        ' is KSI MultiShip module enabled ?
                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SHIPPING_MODULE_TO_USE) = "KSI MultiShip" Then
                            'yes, set default values in IS fields and XML Value in KSI custom field
                            strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                            strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                            .CustomerInvoiceView(0)("RZShippingMethodID") = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_METHOD)

                        Else
                            ' no, using IS standard shipping
                            strShippingMethod = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_METHOD)
                            If strShippingMethod = "" Then
                                strShippingMethod = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
                            End If
                            strShippingMethodGroup = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_SHIPPING_DETAILS_METHOD_GROUP)
                            If strShippingMethodGroup = "" Then
                                strShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
                            End If
                            rowGroupMethodDetail = Me.m_ImportExportDataset.SystemShippingMethodGroupDetail.FindByShippingMethodGroupShippingMethodCode(strShippingMethodGroup, strShippingMethod)
                            If rowGroupMethodDetail Is Nothing Then
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "075", "Invalid Shipping Method and Shipping Method Group combination - " & strShippingMethod & ", " & strShippingMethodGroup, _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)

                            End If
                        End If
                        .CustomerInvoiceView(0).ShippingMethodCode = strShippingMethod
                        .CustomerInvoiceView(0).ShippingMethodGroup = strShippingMethodGroup
                        ' end of code added TJS 17/03/09
                    End If

                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_SET_DISABLE_FREIGHT_CALCULATION).ToUpper = "YES" Then ' TJS 17/03/09 TJS 07/06/09
                        .CustomerInvoiceView(0).IsFreightOverwrite = True ' TJS 17/03/09
                    Else
                        .CustomerInvoiceView(0).IsFreightOverwrite = False ' TJS 17/03/09
                    End If
                    .CustomerInvoiceView(0).Notes = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_CUSTOMER_COMMENTS)

                    taxSchemeFacade.LoadDataSet(New String()() {New String() {taxSchemeDataset.SystemTaxSchemeDetailView.TableName, _
                        "ReadSystemTaxSchemeDetail", AT_COUNTRY_CODE, .CustomerInvoiceView(0).BillToCountry}}, _
                        Interprise.Framework.Base.Shared.ClearType.Specific, Interprise.Framework.Base.Shared.ConnectionStringType.Offline)
                    XMLCreditNoteItems = XMLGenericCreditNote.XPathSelectElements(GENERIC_XML_CREDITNOTE_ITEM_LIST)
                    dblCreditNoteTotal = 0
                    dblCreditNoteTotalRate = 0 ' TJS 26/05/09
                    dblCreditNoteTax = 0
                    dblCreditNoteTaxRate = 0
                    iLineNum = 1
                    If XMLCreditNoteItems IsNot Nothing Then ' TJE 09/03/09
                        For Each XMLCreditNoteItem In XMLCreditNoteItems
                            Try
                                XMLItemTemp = XDocument.Parse(XMLCreditNoteItem.ToString) ' TJS 29/05/09
                                ' as Item Code been provided
                                If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE) <> "" Then
                                    ' yes, use it
                                    Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", _
                                        Interprise.Framework.Inventory.Shared.Const.AT_ITEM_CODE, GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE), _
                                        Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                        Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 13/02/14
                                    strItemID = "Credit Note Item Code " & GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_CODE)

                                ElseIf GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME) <> "" Then
                                    ' no, but Item Name has been
                                    Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SaleItemView.TableName, "ReadSaleItemView_DEV000221", _
                                        AT_ITEM_NAME, GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME), Interprise.Framework.Inventory.Shared.Const.AT_LANGUAGE_CODE, _
                                        GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}}, _
                                        Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 10/02/09 TJS 13/02/14
                                    strItemID = "Credit Note Item Name " & GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_NAME)

                                Else
                                    sTemp = "Both ISItemCode or ISItemName are blank" ' TJS 10/02/09
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "057", sTemp, _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                                End If

                                If Me.m_ImportExportDataset.SaleItemView.Count > 0 Then
                                    ' start of code added TJS 08/06/09
                                    iItemPtr = 0
                                    ' has a Warehouse code been specified ?
                                    strWarehouseCode = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_WAREHOUSE)
                                    If strWarehouseCode = "" Then
                                        ' no, is UseShipToClassTemplate set ?
                                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_USE_SHIPTO_CLASS_TEMPLATE).ToUpper = "YES" Then ' TJS 08/07/12 TJS 20/07/12
                                            ' yes, get warehouse from Customer Ship To
                                            strWarehouseCode = .CustomerInvoiceView(0).WarehouseCode ' TJS 08/07/12 TJS 20/07/12
                                        Else
                                            ' no, get default Warehouse code
                                            strWarehouseCode = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_WAREHOUSE)
                                        End If
                                    End If
                                    ' has a Unit Of Measure been specified ?
                                    strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UMC)
                                    If strTempValue <> "" Then
                                        ' yes, find relevent item details
                                        Do While Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("UnitMeasureCode").ToString.ToUpper <> strTempValue.ToUpper Or _
                                            (Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("WarehouseCode").ToString.ToUpper <> strWarehouseCode.ToUpper And _
                                            (Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsWarehouseCodeNull)) ' TJS 04/07/09 TJS 14/08/09
                                            iItemPtr += 1
                                            If iItemPtr > Me.m_ImportExportDataset.SaleItemView.Count - 1 Then
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "057", "Cannot find Unit of Measure " & strTempValue & " and Warehouse Code " & strWarehouseCode & " for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                            End If
                                        Loop
                                    Else
                                        ' no, find base Unit of Measure
                                        Do While (Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsDefaultSellingNull OrElse Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).DefaultSelling) Or _
                                            (Me.m_ImportExportDataset.SaleItemView(iItemPtr).Item("WarehouseCode").ToString.ToUpper <> strWarehouseCode.ToUpper And _
                                            (Not Me.m_ImportExportDataset.SaleItemView(iItemPtr).IsWarehouseCodeNull)) ' TJS 14/08/09 TJS 02/12/11 TJS 23/05/14
                                            iItemPtr += 1
                                            If iItemPtr > Me.m_ImportExportDataset.SaleItemView.Count - 1 Then
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "057", "Cannot find default UMC and Warehouse Code " & strWarehouseCode & " for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                            End If
                                        Loop
                                    End If
                                    ' end of code added TJS 08/06/09
                                    itemView = New DataView(InvoiceDataset.CustomerInvoiceDetailView)
                                    itemView.AddNew()

                                    ' need to set default value for linenum etc to prevent DBNull conversion error
                                    itemView(iLineNum - 1)(.CustomerInvoiceDetailView.RootDocumentCodeColumn.ColumnName) = .CustomerInvoiceView(0).RootDocumentCode
                                    itemView(iLineNum - 1)(.CustomerInvoiceDetailView.InvoiceCodeColumn.ColumnName) = .CustomerInvoiceView(0).InvoiceCode
                                    itemView(iLineNum - 1)(.CustomerInvoiceDetailView.LineNumColumn.ColumnName) = 0
                                    itemView(iLineNum - 1)(.CustomerInvoiceDetailView.SourceLineNumColumn.ColumnName) = 0

                                    ' start of code added TJS 10/06/12
                                    sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_SOURCE_COMMISSION)
                                    ' has source commission been supplied ?
                                    If sTemp <> "" Then
                                        ' yes, must be numeric and not contain any commas
                                        If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                                            itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221") = CDec(sTemp)
                                            itemView(iLineNum - 1)(.CustomerInvoiceDetailView.CommissionAmountColumn.ColumnName) = CDec(itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221"))
                                            itemView(iLineNum - 1)("SourceCommissionCharge_DEV000221") = RoundDecimalValue(CDec(itemView(iLineNum - 1)("SourceCommissionChargeRate_DEV000221")) / .CustomerInvoiceView(0).ExchangeRate)
                                            itemView(iLineNum - 1)(.CustomerInvoiceDetailView.CommissionAmountRateColumn.ColumnName) = CDec(itemView(iLineNum - 1)("SourceCommissionCharge_DEV000221"))
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Source Commission must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                        End If
                                    End If
                                    sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_SOURCE_FULFILLMENT)
                                    ' has source fulfillment been supplied ?
                                    If sTemp <> "" Then
                                        ' yes, must be numeric and not contain any commas
                                        If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                                            itemView(iLineNum - 1)("SourceFulfillmentCostRate_DEV000221") = CDec(sTemp)
                                            itemView(iLineNum - 1)("SourceFulfillmentCost_DEV000221") = RoundDecimalValue(CDec(itemView(iLineNum - 1)("SourceFulfillmentCostRate_DEV000221")) / .CustomerInvoiceView(0).ExchangeRate)
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "018", "Source Fulfillment must be numeric for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                        End If
                                    End If
                                    ' end of code added TJS 10/06/12

                                    sTemp = ""
                                    strItemKitPricing = "" ' TJS 18/03/11
                                    iItemRowsAdded = 1 ' TJS 18/03/11
                                    decKitPriceSumRate = 0 ' TJS 18/03/11
                                    decKitPriceTaxSumRate = 0 ' TJS/FA 17/10/11
                                    ' start of code added TJS 22/09/10
                                    If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_MATRIX_GROUP Then ' TJs 01/05/14
                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "057", strItemID & " is a Matrix Group item.  Only individual Items whthin the Matrix Group can be added to a credit note.", _
                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)

                                    ElseIf Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_KIT Then ' TJs 01/05/14
                                        ItemKitDataset = New Interprise.Framework.Base.DatasetGateway.ItemKitDatasetGateway
                                        ItemKitFacade = New Interprise.Facade.Customer.CustomerItemKitFacade(ItemKitDataset)
                                        ItemKitFacade.CurrencyCode = .CustomerInvoiceView(0).CurrencyCode
                                        ItemKitFacade.ExchangeRate = .CustomerInvoiceView(0).ExchangeRate
                                        strItemKitPricing = ItemKitFacade.GetField("PricingType", "InventoryKit", "ItemKitCode = '" & Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode & "'")
                                        itemKitDetailRows = New DataRow() {}
                                        ItemKitFacade.InitializeKitConfigurator(Me.m_ImportExportDataset.SaleItemView(iItemPtr), strItemKitPricing, _
                                            CustomerCode, .CustomerInvoiceView(0).InvoiceDate, strWarehouseCode, itemKitDetailRows)
                                        ' get quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then
                                                    ' need to apply price to kit via configurator
                                                    ' start of code added TJS 18/03/11
                                                    decSalesPriceRate = 0
                                                    strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                                    ' has price been supplied ?
                                                    If strItemPrice <> "" Then
                                                        ' yes, must be numeric and not contain any commas
                                                        If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                            ' must not be negative
                                                            If CDec(strItemPrice) >= 0 Then
                                                                ' Unit price valid, overwrite Item price
                                                                ' do prices include tax >
                                                                If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                                    ' yes, get price before tax (Use freight tax calc as item row(s) not yet created for kit
                                                                    decSalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, .TransactionItemTaxDetailView, _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode, 0, CDec(strItemQty), CDec(strItemPrice), _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).SalesTaxCode, .CustomerInvoiceView(0).CurrencyCode, _
                                                                        .CustomerInvoiceView(0).ExchangeRate, .CustomerInvoiceView(0).InvoiceCode, True)
                                                                Else
                                                                    decSalesPriceRate = CDec(strItemPrice)
                                                                End If
                                                            Else
                                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Unit Price must not be negative for " & strItemID, _
                                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                                            End If
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Unit Price must be numeric for " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                                        End If
                                                    End If
                                                    dblCreditNoteTotalRate += (decSalesPriceRate * CDec(strItemQty)) ' TJS 01/05/14
                                                    dblCreditNoteTotal = RoundDecimalValue(dblCreditNoteTotalRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 01/05/14
                                                    ' end of code added TJS 18/03/11
                                                    ' quantity valid, apply to Kit
                                                    If strItemKitPricing = "Item Price" Then ' TJS 18/03/11
                                                        InvoiceFacade.AssignItemKit(Me.m_ImportExportDataset.SaleItemView(iItemPtr), ItemKitFacade.KitItems, itemView(iLineNum - 1), strItemKitPricing, CDec(strItemQty), 0, TransactionType.CreditMemo, sTemp, strWarehouseCode) ' TJS 18/03/11
                                                        iItemRowsAdded = ItemKitFacade.KitItems.Length ' TJS 18/03/11
                                                        decKitTotalPriceRate = ItemKitFacade.ComputeTotalByTotal ' TJS 18/03/11
                                                    Else
                                                        InvoiceFacade.AssignItemKit(Me.m_ImportExportDataset.SaleItemView(iItemPtr), ItemKitFacade.KitItems, itemView(iLineNum - 1), strItemKitPricing, CDec(strItemQty), decSalesPriceRate, TransactionType.CreditMemo, sTemp, strWarehouseCode) ' TJS 04/10/10
                                                    End If
                                                    If sTemp <> "" Then
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "056", sTemp, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                        End If
                                        ' end of code added TJS 22/09/10

                                        ' start of code added TJS 01/05/14
                                    ElseIf Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_BUNDLE Then
                                        ' get quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY)
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then
                                                    ' quantity valid, get 
                                                    decSalesPriceRate = 0
                                                    strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE)
                                                    ' has price been supplied ?
                                                    If strItemPrice <> "" Then
                                                        ' yes, must be numeric and not contain any commas
                                                        If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then
                                                            ' must not be negative
                                                            If CDec(strItemPrice) >= 0 Then
                                                                ' Unit price valid, overwrite Item price
                                                                ' do prices include tax >
                                                                If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_ORDER_PRICES_INCLUDE_TAX).ToUpper = "YES" Then
                                                                    ' yes, get price before tax (Use freight tax calc as item row(s) not yet created for kit
                                                                    decSalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, .TransactionItemTaxDetailView, _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode, 0, CDec(strItemQty), CDec(strItemPrice), _
                                                                        Me.m_ImportExportDataset.SaleItemView(iItemPtr).SalesTaxCode, .CustomerInvoiceView(0).CurrencyCode, _
                                                                        .CustomerInvoiceView(0).ExchangeRate, .CustomerInvoiceView(0).InvoiceCode, True)
                                                                Else
                                                                    decSalesPriceRate = CDec(strItemPrice)
                                                                End If

                                                            Else
                                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Unit Price must not be negative for " & strItemID, _
                                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                                            End If
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Unit Price must be numeric for " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                                        End If
                                                    End If

                                                    ' get bundle details
                                                    ItemBundleDataset = New Interprise.Framework.Customer.DatasetGateway.BundleConfiguratorDatasetGateway
                                                    ItemBundleFacade = New Interprise.Facade.Customer.ItemBundleFacade(ItemBundleDataset)
                                                    ItemBundleFacade.LoadDataSet("ReadInventoryBundleConfigurator", New String() {"InventoryBundleConfiguratorView"}, _
                                                        New String()() {New String() {"@BundleCode", Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemCode}, _
                                                        New String() {"@DefaultPrice", CustomerDetailDataset.CustomerView(0).DefaultPrice}, _
                                                        New String() {"@LanguageCode", GetCacheField(SYSTEMCOMPANYINFORMATION_COMPANYLANGUAGE_COLUMN, SYSTEMCOMPANYINFORMATION_TABLE)}, _
                                                        New String() {"@CurrencyCode", .CustomerInvoiceView(0).CurrencyCode}, _
                                                        New String() {"@WarehouseCode", strWarehouseCode}}, ClearType.Specific)
                                                    iBundleRow = iLineNum - 1
                                                    ' get total of item prices in bundle
                                                    decBundleTotalPriceRate = 0
                                                    decBundlePriceSumRate = 0
                                                    For Each ItemBundleRow In ItemBundleDataset.InventoryBundleConfiguratorView.Rows
                                                        decBundleTotalPriceRate = decBundleTotalPriceRate + (CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICERATE_COLUMN)) * CDec(ItemBundleRow("Quantity")))
                                                    Next
                                                    iItemRowsAdded = ItemBundleDataset.InventoryBundleConfiguratorView.Count
                                                    iBundlePtr = 0
                                                    For Each ItemBundleRow In ItemBundleDataset.InventoryBundleConfiguratorView.Rows
                                                        SalesOrderFacade.AssignInventoryItem(ItemBundleRow, itemView(iBundleRow), sTemp)
                                                        .CustomerInvoiceDetailView(iBundleRow).ItemCode = ItemBundleRow(CUSTOMERSALESORDERDETAIL_ITEMCODE_COLUMN).ToString
                                                        .CustomerInvoiceDetailView(iBundleRow).ItemName = ItemBundleRow(INVENTORYITEMS_ITEMNAME_COLUMN).ToString
                                                        .CustomerInvoiceDetailView(iBundleRow).ItemDescription = ItemBundleRow(INVENTORYITEMDESCRIPTION_ITEMDESCRIPTION_COLUMN).ToString
                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICERATE_COLUMN))
                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPrice = CDec(ItemBundleRow(CUSTOMERSALESORDERDETAIL_SALESPRICE_COLUMN))
                                                        .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered = CDec(strItemQty) * CDec(ItemBundleRow("Quantity"))
                                                        .CustomerInvoiceDetailView(iBundleRow).ItemType = ItemBundleRow(CUSTOMERSALESORDERDETAIL_ITEMTYPE_COLUMN).ToString
                                                        .CustomerInvoiceDetailView(iBundleRow).ParentBundleItemCode = ItemBundleRow(BUNDLECODE).ToString

                                                        ' is this the last row of the bundle ?
                                                        If iBundlePtr <> ItemBundleDataset.InventoryBundleConfiguratorView.Count - 1 Then
                                                            ' no, set price as relevant fraction of total bundle price
                                                            If decBundleTotalPriceRate = 0 Then
                                                                ' is quantity ordered > 1 ?
                                                                If CInt(strItemQty) > 1 Then
                                                                    ' yes - CustomerInvoiceDetailView(iBundleRow).QuantityOrdered will be equal to Kit Item Qty 
                                                                    ' if there is only 1 of the item in the bundle
                                                                    ' Otherwise the Item Quantity Order figure will always be greater than the bundle Qty as it is 
                                                                    ' the bundle item Quantity / by the number of bundles in the order
                                                                    If (.CustomerInvoiceDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((decSalesPriceRate / iItemRowsAdded) * (CDec(strItemQty) / .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered), 2)
                                                                    Else
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded), 2)
                                                                    End If
                                                                Else
                                                                    If .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded * .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered), 2)
                                                                    Else
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / iItemRowsAdded, 2)
                                                                    End If
                                                                End If
                                                            Else
                                                                ' is quantity ordered > 1 ?
                                                                If CInt(strItemQty) > 1 Then
                                                                    ' yes - CustomerInvoiceDetailView(iBundleRow).QuantityOrdered will be equal to Kit Item Qty 
                                                                    ' if there is only 1 of the item in the bundle
                                                                    ' Otherwise the Item Quantity Order figure will always be greater than the bundle Qty as it is 
                                                                    ' the bundle item Quantity / by the number of bundles in the order
                                                                    If (.CustomerInvoiceDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((.CustomerInvoiceDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate) / (decBundleTotalPriceRate * (.CustomerInvoiceDetailView(iBundleRow).QuantityOrdered / CInt(strItemQty))), 2)
                                                                    Else
                                                                        ' if there is only 1 of the item, then the unit price will be the percentage calculation for the individual item price.
                                                                        'Total for the item is then multiplied by the Kit item quantity
                                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((.CustomerInvoiceDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate) / decBundleTotalPriceRate, 2)
                                                                    End If
                                                                Else
                                                                    'If .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                    ' TJS/FA 19/04/12 percentage of kit value divided by the number of items
                                                                    .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(.CustomerInvoiceDetailView(iBundleRow).SalesPriceRate * decSalesPriceRate / decBundleTotalPriceRate, 2)

                                                                End If
                                                            End If
                                                            If .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                decBundlePriceSumRate = decBundlePriceSumRate + .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate * .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered
                                                            Else
                                                                decBundlePriceSumRate = decBundlePriceSumRate + .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate
                                                            End If
                                                        Else
                                                            If .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered > 1 Then
                                                                ' yes, set price as remainder to prevent rounding errors and divide by quantity ordered
                                                                .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue(((decSalesPriceRate * CInt(strItemQty)) - decBundlePriceSumRate) / .CustomerInvoiceDetailView(iBundleRow).QuantityOrdered, 2)
                                                            Else
                                                                ' yes, set price as remainder to prevent rounding errors
                                                                .CustomerInvoiceDetailView(iBundleRow).SalesPriceRate = RoundDecimalValue((decSalesPriceRate * CInt(strItemQty)) - decBundlePriceSumRate, 2)
                                                            End If
                                                        End If
                                                        .CustomerInvoiceDetailView(iBundleRow).SalesPrice = RoundDecimalValue(.CustomerInvoiceDetailView(iBundleRow).SalesPriceRate / .CustomerInvoiceView(0).ExchangeRate)

                                                        iBundleRow += 1
                                                        iBundlePtr += 1
                                                        If iBundlePtr <> ItemBundleDataset.InventoryBundleConfiguratorView.Count Then
                                                            itemView = New DataView(InvoiceDataset.CustomerInvoiceDetailView)
                                                            itemView.AddNew()

                                                            ' need to set default value for linenum etc to prevent DBNull conversion error
                                                            itemView(iBundleRow)(.CustomerInvoiceDetailView.RootDocumentCodeColumn.ColumnName) = .CustomerInvoiceView(0).RootDocumentCode
                                                            itemView(iBundleRow)(.CustomerInvoiceDetailView.InvoiceCodeColumn.ColumnName) = .CustomerInvoiceView(0).InvoiceCode
                                                            itemView(iBundleRow)(.CustomerInvoiceDetailView.LineNumColumn.ColumnName) = 0
                                                            itemView(iBundleRow)(.CustomerInvoiceDetailView.SourceLineNumColumn.ColumnName) = 0
                                                        End If
                                                    Next
                                                    dblCreditNoteTotalRate += (decSalesPriceRate * CDec(strItemQty))
                                                    dblCreditNoteTotal = RoundDecimalValue(dblCreditNoteTotalRate / .CustomerInvoiceView(0).ExchangeRate)

                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                            End If

                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)
                                        End If
                                        ' end of code added TJS 01/05/14

                                    Else
                                        CreditNoteFacade.AssignInventoryItem(Me.m_ImportExportDataset.SaleItemView(iItemPtr), itemView(iLineNum - 1), sTemp)
                                        If sTemp <> "" Then
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "056", sTemp, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                                        End If
                                        ' start of code moved TJS 22/09/10
                                        ' set quantity ordered
                                        strItemQty = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_QUANTITY) ' TJS 09/03/09
                                        ' has quantity been provided ?
                                        If strItemQty <> "" Then ' TJS 09/03/09
                                            ' yes, must be numeric and not contain any commas
                                            If IsNumeric(strItemQty) And InStr(strItemQty, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                                                ' must be greater than 0
                                                If CDec(strItemQty) > 0 Then ' TJS 09/03/09
                                                    ' quantity valid, apply to Item
                                                    .CustomerInvoiceDetailView(iLineNum - 1).QuantityOrdered = CDec(strItemQty) ' TJS 09/03/09
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity must be greater than 0 for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                                                End If
                                            Else
                                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity must be numeric for " & strItemID, _
                                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                                            End If
                                        Else
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Quantity is blank in input XML for " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                                        End If

                                        ' now set default price and cost
                                        If Not CreditNoteFacade.SetSalesPrice(itemView(iLineNum - 1), False) Then ' TJS 26/05/09
                                            sTemp = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("INF0101", New String() {CStr(itemView(iLineNum - 1)(.CustomerInvoiceDetailView.ItemNameColumn.ColumnName)), .CustomerInvoiceView(0).CurrencyCode}) ' TJS 26/05/09
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "056", sTemp, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)  ' TJS 26/05/09
                                        End If
                                        ' end of code moved TJS 22/09/10
                                    End If

                                    For iRowLoop = iLineNum - 1 To (iLineNum - 1) + (iItemRowsAdded - 1) ' TJS 18/03/11
                                        .CustomerInvoiceDetailView(iRowLoop).WebSiteCode = .CustomerInvoiceView(0).WebSiteCode
                                        sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_PURCHASE_ID)
                                        If sTemp <> "" Then
                                            .CustomerInvoiceDetailView(iRowLoop)("SourcePurchaseID_DEV000221") = sTemp
                                        End If

                                        ' code to set quantity and price moved TJS 22/09/10
                                        .CustomerInvoiceDetailView(iRowLoop).QuantityBackOrdered = 0
                                        .CustomerInvoiceDetailView(iRowLoop).QuantityShipped = .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered ' TJS 21/04/09
                                        .CustomerInvoiceDetailView(iRowLoop).QuantityAllocated = 0
                                        .CustomerInvoiceDetailView(iRowLoop).QuantityAlReadyRMA = 0
                                        If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DESCRIPTION) <> "" And ((Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_KIT And _
                                            Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_BUNDLE) Or strItemKitPricing = "Kit Price") Then ' TJS 18/03/11 TJs 01/05/14
                                            .CustomerInvoiceDetailView(iRowLoop).ItemDescription = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DESCRIPTION)
                                            .CustomerInvoiceDetailView(iRowLoop).InventoryDescription = .CustomerInvoiceDetailView(iRowLoop).ItemDescription
                                            .CustomerInvoiceDetailView(iRowLoop).IsInventoryDescription = True
                                        End If
                                        ' only apply price here if not a kit (kit pricing handled above when pricing type is Kit and below for Item pricing
                                        If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_KIT And Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType <> ITEM_TYPE_BUNDLE Then ' TJS 18/03/11 TJS 01/05/14 
                                            strItemPrice = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_UNIT_PRICE) ' TJS 09/03/09
                                            ' has price been supplied ?
                                            If strItemPrice <> "" Then ' TJS 09/03/09
                                                ' yes, must be numeric and not contain any commas
                                                If IsNumeric(strItemPrice) And InStr(strItemPrice, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                                                    ' must not be negative
                                                    If CDec(strItemPrice) >= 0 Then ' TJS 09/03/09
                                                        ' Unit price valid, overwrite Item price
                                                        ' do prices include tax >
                                                        If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 07/06/09 
                                                            ' yes, get price before tax
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, _
                                                                .TransactionItemTaxDetailView, .CustomerInvoiceDetailView(iRowLoop).ItemCode, _
                                                                .CustomerInvoiceDetailView(iRowLoop).LineNum, .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered, _
                                                                CDec(strItemPrice), .CustomerInvoiceDetailView(iRowLoop).TaxCode, .CustomerInvoiceView(0).CurrencyCode, _
                                                                .CustomerInvoiceView(0).ExchangeRate, .CustomerInvoiceView(0).InvoiceCode, False) ' TJS 07/06/09
                                                        Else
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = CDec(strItemPrice) ' TJS 09/03/09 TJS 26/05/09
                                                        End If
                                                        .CustomerInvoiceDetailView(iRowLoop).Discount = 0 ' TJS 07/07/09
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Unit Price must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Unit Price must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                                                End If
                                            End If
                                            dblCreditNoteTotalRate += (.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered) ' TJS 26/05/09 TJS 01/05/14
                                            .CustomerInvoiceDetailView(iRowLoop).SalesPrice = RoundDecimalValue(.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 26/05/09
                                            dblCreditNoteTotal = RoundDecimalValue(dblCreditNoteTotalRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 01/05/14

                                        ElseIf strItemKitPricing = "Item Price" Then ' TJS 18/03/11
                                            ' is this the last row of the kit ?
                                            If iRowLoop < (iLineNum - 1) + (iItemRowsAdded - 1) Then ' TJS 18/03/11
                                                ' no, set price as relevant fraction of total kit price
                                                If decKitTotalPriceRate = 0 Then ' TJS 04/04/11
                                                    ' TJS/FA 19/04/12
                                                    If CInt(strItemQty) > 1 Then
                                                        ' TJS/FA 19/04/12
                                                        'CustomerInvoiceDetailView(iRowLoop).QuantityOrdered will be equal to Kit Item Qty 
                                                        'if there is only 1 of the item in the kit
                                                        'Otherwise the Item Quantity Order figure will always be greater than the Kit Qty as it is 
                                                        'the Kit item Quantity * by the number of kits in the order
                                                        If (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                            ' TJS/FA 19/04/12
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decSalesPriceRate / iItemRowsAdded) * (CDec(strItemQty) / .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered), 2)
                                                        Else
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded), 2) ' TJS 04/04/11
                                                        End If
                                                    Else
                                                        If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / (iItemRowsAdded * .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered), 2)
                                                        Else
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate / iItemRowsAdded, 2) ' TJS 04/04/11
                                                        End If
                                                    End If
                                                Else
                                                    ' TJS/FA 19/04/12
                                                    ' AssignKit already set the SalesPriceRate to the IS kit price, we now need to adjust for the actual selling price
                                                    'i.e. kit price in order needs to reflect the percentage breakdown in IS
                                                    If CInt(strItemQty) > 1 Then
                                                        'CustomerInvoiceDetailView(iRowLoop).QuantityOrdered will be equal to Kit Item Qty 
                                                        'if there is only 1 of the item in the kit
                                                        'Otherwise the Item Quantity Order figure will always be greater than the Kit Qty as it is 
                                                        'the Kit item Quantity * by the number of kits in the order
                                                        If (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) > 1 Then
                                                            'FA 09/04/12 divided by number of the item in kit
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate) / (decKitTotalPriceRate * (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty))), 2)
                                                        Else
                                                            ' TJS/FA 19/04/12 if there is only 1 of the item, then the unit price will be the percentage calculation for the individual item price.
                                                            'Total for the item is then multiplied by the Kit item quantity
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate) / decKitTotalPriceRate, 2)
                                                        End If
                                                    Else
                                                        'If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                        ' TJS/FA 19/04/12 percentage of kit value divided by the number of items
                                                        .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * decSalesPriceRate / decKitTotalPriceRate, 2)

                                                    End If
                                                    ' TJS/FA 19/04/12 end
                                                End If
                                                If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then ' FA 24/10/11
                                                    decKitPriceSumRate = decKitPriceSumRate + .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * (.CustomerInvoiceDetailView(iRowLoop).QuantityOrdered / CInt(strItemQty)) ' FA 24/10/11 TJS 01/05/14
                                                Else
                                                    decKitPriceSumRate = decKitPriceSumRate + .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate ' TJS 18/03/11
                                                End If
                                            Else
                                                ' TJS/FA 19/04/12
                                                'What is the remainder?
                                                ' TJS/FA 19/04/12
                                                decKitTotalRemaining = (decSalesPriceRate * CDec(strItemQty)) - decKitPriceSumRate

                                                'FA 09/04/12 
                                                If decKitTotalRemaining > 0 Then
                                                    If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                        ' yes, set price as remainder to prevent rounding errors and divide by quantity ordered
                                                        .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue((decKitTotalRemaining / .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered) - CDec(0.005), 2) ' FA Need to remove 0.005 in order to make sure saleitemprice always rounded down.
                                                    Else
                                                        ' yes, set price as remainder to prevent rounding errors
                                                        .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = RoundDecimalValue(decSalesPriceRate - decKitPriceSumRate, 2) ' TJS 18/03/11
                                                    End If

                                                    If .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered > 1 Then
                                                        decKitPriceSumRate = decKitPriceSumRate + (.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate * .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered)
                                                    Else
                                                        decKitPriceSumRate = decKitPriceSumRate + (.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate) ' TJS 18/03/11
                                                    End If

                                                    ' TJS/FA 19/04/12 The remaining figure should always be positive due to the substraction above
                                                    decKitTotalRemaining = RoundDecimalValue((decSalesPriceRate * CDec(strItemQty)) - decKitPriceSumRate, 2)
                                                Else
                                                    .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate = 0
                                                End If
                                                ' TJS/FA 19/04/12 start
                                                'Check that the last kit calculation is not returning a negative number. 
                                                'If it is, write a progress log with the price breakdown of the kit
                                                If .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate < 0 Then
                                                    For iKitRowLoop As Integer = 0 To iItemRowsAdded - 1
                                                        strNegKitPriceMsg = strNegKitPriceMsg & "Item" & iKitRowLoop & ": " & .CustomerInvoiceDetailView(iKitRowLoop).SalesPriceRate & "; "
                                                    Next
                                                    m_ImportExportConfigFacade.WriteLogProgressRecord("Negative Sales Price value calculated in Kit - " & strNegKitPriceMsg)
                                                End If
                                                ' TJS/FA 19/04/12 end
                                            End If
                                            .CustomerInvoiceDetailView(iRowLoop).SalesPrice = RoundDecimalValue(.CustomerInvoiceDetailView(iRowLoop).SalesPriceRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 18/03/11
                                        End If

                                        'FA 03/11/10 Modified to use the correct compute function for kits
                                        'Interprise code seems to call bothe the ComputeKit function and the Compute function as well
                                        If Me.m_ImportExportDataset.SaleItemView(iItemPtr).ItemType = ITEM_TYPE_KIT Then ' TJS 01/05/14
                                            CreditNoteFacade.ComputeKitItemsSalesPrice(itemView(iRowLoop).Row) ' FA 03/11/10
                                        End If
                                        CreditNoteFacade.Compute(itemView(iRowLoop).Row, TransactionType.CreditMemo) ' TJS 26/05/09
                                        ' code removed TJS 26/05/09

                                        .CustomerInvoiceDetailView(iRowLoop).IsPickingNotePrinted = False
                                        .CustomerInvoiceDetailView(iRowLoop).IsPackingListPrinted = False

                                        ' is Item Drop Ship ?
                                        sTemp = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_IS_DROP_SHIP) ' TJS 17/03/09
                                        If sTemp.ToUpper = "YES" Then ' TJS 17/03/09
                                            ' yes, set flag
                                            .CustomerInvoiceDetailView(iRowLoop).IsDropShip = True ' TJS 17/03/09
                                            ' has a Drop Ship REference been supplied ?
                                            If GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP_REF) <> "" Then ' TJS 17/03/09
                                                ' yes, set it
                                                .CustomerInvoiceDetailView(iRowLoop).DropShipReference = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_DROP_SHIP_REF) ' TJS 17/03/09
                                            End If
                                        ElseIf sTemp.ToUpper <> "" And sTemp.ToUpper <> "NO" Then ' TJS 17/03/09
                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Drop Ship must be Yes, No or blank " & strItemID, _
                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 17/03/09
                                        End If

                                        ' get Due Date offset config value
                                        sTemp = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DUE_DATE_OFFSET)
                                        If sTemp = "" Then
                                            sTemp = "1"
                                        End If
                                        .CustomerInvoiceDetailView(iRowLoop).DueDate = .CustomerInvoiceView(0).InvoiceDate.AddDays(CDec(sTemp))
                                        .CustomerInvoiceDetailView(iRowLoop).Pricing = CustomerDetailDataset.CustomerView(0).DefaultPrice
                                        ' now calculate Sales Tax (VAT)
                                        ReDim detailRows(taxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & .CustomerInvoiceDetailView(iRowLoop).TaxCode & "'").Length - 1)
                                        index = 0
                                        'Get the detail rows for this tax code.
                                        For detailRowIndex As Integer = 0 To taxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
                                            If taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = .CustomerInvoiceDetailView(iRowLoop).TaxCode.ToUpper Then
                                                detailRows(index) = taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                                                index += 1
                                            End If
                                        Next
                                        ' get tax values
                                        taxValue = taxFacade.CalculateItemTax(.CustomerInvoiceDetailView(iRowLoop).TaxCode, .CustomerInvoiceDetailView(iRowLoop).SalesPrice, _
                                            .CustomerInvoiceDetailView(iRowLoop).SalesPriceRate, .CustomerInvoiceDetailView(iRowLoop).ItemCode, _
                                            .CustomerInvoiceDetailView(iRowLoop).LineNum, .CustomerInvoiceView(0).InvoiceCode, detailRows, .TransactionItemTaxDetailView, _
                                            .CustomerInvoiceDetailView(iRowLoop).QuantityOrdered, .CustomerInvoiceDetailView(iRowLoop).ExtPrice, _
                                            .CustomerInvoiceDetailView(iRowLoop).ExtPriceRate, .CustomerInvoiceView(0).CurrencyCode, _
                                            .CustomerInvoiceView(0).ExchangeRate) ' TJS 17/05/09
                                        ' are we accepting the source tax calculation ?
                                        If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ACCEPT_SOURCE_SALES_TAX_CALCULATION).ToUpper = "YES" Or _
                                            GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 17/05/09 TJS 26/10/11
                                            ' yes, get value
                                            strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_TAX) ' TJS 17/05/09
                                            ' has tax value been supplied ?
                                            If strTempValue <> "" Then ' TJS 17/05/09
                                                ' yes, must be numeric and not contain any commas
                                                If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 17/05/09 TJS 29/05/09
                                                    ' must not be negative
                                                    If CDec(strTempValue) >= 0 Then ' TJS 17/05/09
                                                        ' Unit price valid, use it
                                                        ' start of code added FA 17/10/11
                                                        If strItemKitPricing = "Item Price" Then
                                                            ' is this the last row of the kit ?
                                                            If iRowLoop < (iLineNum - 1) + (iItemRowsAdded - 1) Then
                                                                ' no, set tax as relevant fraction of total tax price
                                                                If decKitTotalPriceRate = 0 Then
                                                                    .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) / iItemRowsAdded, 2)
                                                                Else
                                                                    .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) * decSalesPriceRate / decKitTotalPriceRate, 2)
                                                                End If
                                                                decKitPriceTaxSumRate = decKitPriceTaxSumRate + .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate
                                                            Else
                                                                ' yes, set price as remainder to prevent rounding errors
                                                                .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = RoundDecimalValue(CDec(strTempValue) - decKitPriceTaxSumRate, 2)
                                                            End If
                                                        Else
                                                            ' end of code added FA 17/10/11
                                                            .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = CDec(strTempValue) ' TJS 17/05/09 TJS 26/05/09
                                                        End If
                                                        dblCreditNoteTaxRate += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09
                                                        .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount = RoundDecimalValue(.CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 17/05/09 TJS 26/05/09
                                                        dblCreditNoteTax += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09
                                                        ' find relevant tax detail record
                                                        bTaxRecordFound = False ' TJS 02/12/11
                                                        For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                            If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerInvoiceDetailView(iRowLoop).InvoiceCode And _
                                                                .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerInvoiceDetailView(iRowLoop).LineNum And _
                                                                .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerInvoiceDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                                bTaxRecordFound = True ' TJS 02/12/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).TaxAmountRate = .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09 TJS 26/05/09 TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).TaxAmount = .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09 TJS 14/07/09 TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = True ' TJS 14/07/09 TJS 18/03/11
                                                                .TransactionItemTaxDetailView(iTaxLoop).IsTAOverridden = True ' TJS 24/02/12
                                                            End If
                                                        Next
                                                        If Not bTaxRecordFound Then ' TJS 02/12/11
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "038", "Cannot apply Sales Tax to an Item with no active Tax Code - " & strItemID, _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 02/12/11
                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Tax Value must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 17/05/09
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Tax Value must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 17/05/09
                                                End If
                                            Else
                                                ' no, use values from tax facade
                                                .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount = taxValue.taxAmount ' TJS 17/05/09
                                                dblCreditNoteTax += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount ' TJS 17/05/09
                                                .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = taxValue.taxAmountRate ' TJS 17/05/09
                                                dblCreditNoteTaxRate += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate ' TJS 17/05/09
                                                For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                    If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerInvoiceDetailView(iRowLoop).InvoiceCode And _
                                                        .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerInvoiceDetailView(iRowLoop).LineNum And _
                                                        .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerInvoiceDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                        .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 18/03/11
                                                    End If
                                                Next
                                            End If
                                        Else
                                            ' no, use values from tax facade
                                            .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount = taxValue.taxAmount
                                            dblCreditNoteTax += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmount
                                            .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate = taxValue.taxAmountRate
                                            dblCreditNoteTaxRate += .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate
                                            For iTaxLoop = 0 To .TransactionItemTaxDetailView.Count - 1 ' TJS 18/03/11
                                                If .TransactionItemTaxDetailView(iTaxLoop).DocumentCode = .CustomerInvoiceDetailView(iRowLoop).InvoiceCode And _
                                                    .TransactionItemTaxDetailView(iTaxLoop).LineNum = .CustomerInvoiceDetailView(iRowLoop).LineNum And _
                                                    .TransactionItemTaxDetailView(iTaxLoop).ItemCode = .CustomerInvoiceDetailView(iRowLoop).ItemCode Then ' TJS 18/03/11
                                                    .TransactionItemTaxDetailView(iTaxLoop)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 18/03/11
                                                End If
                                            Next
                                            ' start of code added TJS 14/07/09
                                            strTempValue = GetXMLElementText(XMLItemTemp, GENERIC_XML_ORDER_INVOICE_ITEM_TAX)
                                            ' has sales tax value been supplied ?
                                            If strTempValue <> "" Then
                                                ' yes, must be numeric
                                                If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then
                                                    ' must not be negative
                                                    If CDec(strTempValue) >= 0 Then
                                                        ' is value same as IS calculation (ignore roundings of 0.01 or less) ?
                                                        If CDec(strTempValue) > .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate + 0.01 Or CDec(strTempValue) < .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate - 0.01 Then
                                                            ' no, 
                                                            If strWarningMessage <> "" Then
                                                                strWarningMessage = strWarningMessage & vbCrLf
                                                            End If
                                                            strWarningMessage = strWarningMessage & "Sales Tax corrected for " & strItemID & ", XML file contained " & strTempValue & ", Tax Facade calculated " & .CustomerInvoiceDetailView(iRowLoop).SalesTaxAmountRate
                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Tax Value must not be negative for " & strItemID, _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 27/02/10
                                                    End If
                                                Else
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Item Tax Value must be numeric for " & strItemID, _
                                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 27/02/10
                                                End If
                                            End If
                                            ' end of code added TJS 14/07/09
                                        End If

                                        ' start of code added TJS 03/04/09
                                        ' Check for any CustomerInvoiceDetail table Custom Fields
                                        XMLCustomFields = XMLItemTemp.XPathSelectElements(GENERIC_XML_ORDER_INVOICE_ITEM_CUSTOM_FIELDS) ' TJS 02/12/11
                                        If XMLCustomFields IsNot Nothing Then
                                            For Each XMLCustomField In XMLCustomFields
                                                Try
                                                    XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                                                    ' has field name been defined ?
                                                    If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                                                        ' does it exist ?
                                                        bCustomFieldExists = False ' TJS 21/04/09
                                                        For iColumnLoop = 0 To .CustomerInvoiceDetailView.Columns.Count - 1 ' TJS 21/04/09
                                                            If .CustomerInvoiceDetailView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 21/04/09
                                                                bCustomFieldExists = True ' TJS 21/04/09
                                                                Exit For ' TJS 21/04/09
                                                            End If
                                                        Next
                                                        If bCustomFieldExists Then ' TJS 21/04/09
                                                            .CustomerInvoiceDetailView(iRowLoop)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField")
                                                        Else
                                                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CustomerInvoiceView", _
                                                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 21/04/09

                                                        End If
                                                    Else
                                                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Field Name attribute not provided for Item Custom Field", _
                                                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString)

                                                    End If

                                                Catch ex As Exception
                                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                                         m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 29/05/09

                                                End Try
                                            Next
                                        End If
                                        ' end of code added TJS 03/04/09

                                        ' TJS/FA 19/04/12 Note for future  Add non stock correction figure here
                                        ' and reset the correction flag
                                        If decKitTotalRemaining <> 0 Then
                                            m_ImportExportConfigFacade.WriteLogProgressRecord("Rounding differential in Kit calculation - " & decKitTotalRemaining)
                                        End If
                                    Next
                                    iLineNum = iLineNum + iItemRowsAdded ' TJS 18/03/11

                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "055", strItemID & " not found", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09

                                End If

                            Catch ex As Exception
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Inventory Item could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 29/05/09 TJS 18/04/11

                            End Try
                        Next
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "054", "No Credit Note Items found", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                    End If
                    .CustomerInvoiceView(0).SubTotal = dblCreditNoteTotal
                    .CustomerInvoiceView(0).SubTotalRate = dblCreditNoteTotalRate ' TJS 26/05/09

                    strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_TOTALS & "/Shipping") ' TJS 09/03/09
                    ' has shipping charge been supplied ?
                    If strTempValue <> "" Then ' TJS 09/03/09
                        ' yes, must be numeric and not contain any commas
                        If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 09/03/09 TJS 29/05/09
                            ' must not be negative
                            If CDec(strTempValue) >= 0 Then ' TJS 09/03/09
                                ' shipping charge valid, overwrite customer default
                                ' do prices include tax >
                                If GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 07/06/09 
                                    ' yes, get price before tax
                                    .CustomerInvoiceView(0).FreightRate = GetPriceBeforeTax(taxFacade, taxSchemeDataset, _
                                        .TransactionItemTaxDetailView, TRANSACTION_TAX_ITEM_FREIGHT, 0, 1, CDec(strTempValue), _
                                        .CustomerInvoiceView(0).FreightTaxCode, .CustomerInvoiceView(0).CurrencyCode, _
                                        .CustomerInvoiceView(0).ExchangeRate, .CustomerInvoiceView(0).InvoiceCode, True) ' TJS 07/06/09
                                Else
                                    .CustomerInvoiceView(0).FreightRate = CDec(strTempValue) ' TJS 09/03/09 TJS 26/05/09
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Credit Note Shipping charge must not be negative", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Credit Note Shipping charge must be numeric", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                        End If
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "053", "Credit Note Shipping charge is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09
                    End If
                    .CustomerInvoiceView(0).Freight = RoundDecimalValue(.CustomerInvoiceView(0).FreightRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 26/05/09
                    .CustomerInvoiceView(0).FreightTaxCode = Me.m_ImportExportDataset.CustomerShipTo(0).FreightTax ' TJS 02/12/11

                    ' now calculate Sales Tax on freight (VAT)
                    ReDim detailRows(taxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & .CustomerInvoiceView(0).FreightTaxCode & "'").Length - 1)
                    index = 0
                    ' Get the detail rows for freight tax code.
                    For detailRowIndex As Integer = 0 To taxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
                        If taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = .CustomerInvoiceView(0).FreightTaxCode.ToUpper Then
                            detailRows(index) = taxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                            index += 1
                        End If
                    Next
                    dblFreight = .CustomerInvoiceView(0).Freight
                    dblFreightRate = .CustomerInvoiceView(0).FreightRate
                    ' get tax values
                    taxValue = taxFacade.CalculateTransactionTax(.CustomerInvoiceView(0).FreightTaxCode, dblFreight, _
                        dblFreightRate, TRANSACTION_TAX_ITEM_FREIGHT, .CustomerInvoiceView(0).InvoiceCode, _
                        detailRows, .TransactionItemTaxDetailView, .CustomerInvoiceView(0).CurrencyCode, _
                        .CustomerInvoiceView(0).ExchangeRate)
                    ' are we accepting the source tax calculation ?
                    If GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ACCEPT_SOURCE_SALES_TAX_CALCULATION).ToUpper = "YES" Or _
                        GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_PRICES_INCLUDE_TAX).ToUpper = "YES" Then ' TJS 26/05/09 TJS 26/10/11
                        ' yes, get total tax value
                        strTempValue = GetXMLElementText(XMLGenericCreditNote, GENERIC_XML_CREDITNOTE_TOTALS & "/Tax") ' TJS 26/05/09 TJS 05/10/13
                        ' has tax value been supplied ?
                        If strTempValue <> "" Then ' TJS 26/05/09
                            ' yes, must be numeric and not contain any commas
                            If IsNumeric(strTempValue) And InStr(strTempValue, ",") >= 0 Then ' TJS 26/05/09 TJS 29/05/09
                                ' must not be negative
                                If CDec(strTempValue) >= 0 Then ' TJS 26/05/09
                                    ' total tax value valid, use it
                                    .CustomerInvoiceView(0).FreightTaxRate = CDec(strTempValue) - dblCreditNoteTaxRate ' TJS 26/05/09
                                    .TransactionTaxDetailView(0).TaxAmountRate = .CustomerInvoiceView(0).FreightTaxRate ' TJS 26/05/09 TJS 11/06/09
                                    dblCreditNoteTaxRate += .CustomerInvoiceView(0).FreightTaxRate ' TJS 26/05/09
                                    .CustomerInvoiceView(0).FreightTax = RoundDecimalValue(.CustomerInvoiceView(0).FreightTaxRate / .CustomerInvoiceView(0).ExchangeRate) ' TJS 26/05/09
                                    .TransactionTaxDetailView(0).TaxAmount = .CustomerInvoiceView(0).FreightTax ' TJS 26/05/09 TJS 11/06/09
                                    dblCreditNoteTax += .CustomerInvoiceView(0).FreightTax ' TJS 26/05/09
                                    .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = True ' TJS 14/07/09 TJS 14/08/09
                                    .TransactionTaxDetailView(0).IsTAOverridden = True ' TJS 24/02/12
                                Else
                                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Credit Note Total Tax Value must not be negative", _
                                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 26/05/09 TJS 27/02/10
                                End If
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "058", "Credit Note Total Tax Value must be numeric", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 26/05/09 TJS 27/02/10
                            End If
                        Else
                            ' no, use values from tax facade
                            .CustomerInvoiceView(0).FreightTax = taxValue.taxAmount ' TJS 26/05/09
                            dblCreditNoteTax += .CustomerInvoiceView(0).FreightTax ' TJS 26/05/09
                            .CustomerInvoiceView(0).FreightTaxRate = taxValue.taxAmountRate ' TJS 26/05/09
                            dblCreditNoteTaxRate += .CustomerInvoiceView(0).FreightTaxRate ' TJS 26/05/09
                            .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 14/08/09 TJS 24/02/12
                        End If
                    Else
                        ' no, use values from tax facade
                        .CustomerInvoiceView(0).FreightTax = taxValue.taxAmount
                        dblCreditNoteTax += .CustomerInvoiceView(0).FreightTax
                        .CustomerInvoiceView(0).FreightTaxRate = taxValue.taxAmountRate
                        dblCreditNoteTaxRate += .CustomerInvoiceView(0).FreightTaxRate
                        .TransactionTaxDetailView(0)("TaxValueIsFromSource_DEV000221") = False ' TJS 14/07/09 TJS 14/08/09 TJS 24/02/12
                    End If

                    CreditNoteFacade.ComputeTotals() ' TJS 07/06/09 TJS 18/06/09
                    ' start of code removed TJS 07/06/09
                    '.CustomerInvoiceView(0).Tax = dblCreditNoteTax
                    '.CustomerInvoiceView(0).TaxRate = dblCreditNoteTaxRate
                    '.CustomerInvoiceView(0).Total = .CustomerInvoiceView(0).SubTotal + .CustomerInvoiceView(0).Freight + _
                    '    .CustomerInvoiceView(0).Tax + .CustomerInvoiceView(0).FreightTax
                    '.CustomerInvoiceView(0).TotalRate = .CustomerInvoiceView(0).SubTotalRate + .CustomerInvoiceView(0).FreightRate + _
                    '    .CustomerInvoiceView(0).TaxRate + .CustomerInvoiceView(0).FreightTaxRate
                    '.CustomerInvoiceView(0).Balance = .CustomerInvoiceView(0).Total
                    '.CustomerInvoiceView(0).BalanceRate = .CustomerInvoiceView(0).TotalRate
                    ' end of code removed TJS 07/06/09

                    ' save credit note - did it save ok ?
                    strCreditNoteValidationErrorMessage = "" ' TJS 21/04/09
                    InvoiceFacade.IncrementSaveCounterID() ' TJS 01/05/14
                    If CreditNoteFacade.UpdateDataSet(CreditNoteFacade.CreateParameterSet(CreditNoteFacade.RelatedTables(TransactionType.CreditMemo)), TransactionType.CreditMemo, m_BaseProductName & " Create CreditMemo", False) Then
                        ' yes, Don't process credit card as refunds need manual approval

                        xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/01/09
                        xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/01/09
                        xmlResponseDetailNode.Add(New XElement("CreditNoteNumber", .CustomerInvoiceView(0).InvoiceCode)) ' TJS 29/01/09
                        xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/01/09
                        If strWarningMessage <> "" Then ' TJS 29/01/09
                            xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/01/09
                        End If
                        Return xmlResponseDetailNode
                    Else
                        For iTableLoop = 0 To CreditNoteFacade.RelatedTables(TransactionType.CreditMemo).Length - 1 ' TJS 21/04/09
                            For iRowLoop = 0 To .Tables(CreditNoteFacade.RelatedTables(TransactionType.CreditMemo)(iTableLoop)).Rows.Count - 1 ' TJS 21/04/09
                                For iColumnLoop = 0 To .Tables(CreditNoteFacade.RelatedTables(TransactionType.CreditMemo)(iTableLoop)).Columns.Count - 1 ' TJS 21/04/09
                                    If .Tables(CreditNoteFacade.RelatedTables(TransactionType.CreditMemo)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 10/02/09 TJS 21/04/09
                                        strCreditNoteValidationErrorMessage = strCreditNoteValidationErrorMessage & .Tables(CreditNoteFacade.RelatedTables(TransactionType.CreditMemo)(iTableLoop)).TableName & _
                                            "." & .Tables(CreditNoteFacade.RelatedTables(TransactionType.CreditMemo)(iTableLoop)).Columns(iColumnLoop).ColumnName & ", " & _
                                            .Tables(CreditNoteFacade.RelatedTables(TransactionType.CreditMemo)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 10/02/09 TJS 21/04/09
                                    End If
                                Next
                            Next
                        Next

                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "060", "Failed to save Credit Note - " & strCreditNoteValidationErrorMessage, _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", XMLGenericCreditNote.ToString) ' TJS 09/03/09 TJS 25/04/09
                    End If
                End With
                CreditNoteFacade.Dispose()
                InvoiceDataset.Dispose()
                CustomerDetailFacade.Dispose()
                taxSchemeFacade.Dispose()
                taxFacade.Dispose()
                taxSchemeDataset.Dispose()

            Else
                xmlResponseDetailNode = New XElement("ImportResponse") ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("Status", "Success")) ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("CreditNoteNumber", Me.m_ImportExportDataset.CustomerInvoice(0).InvoiceCode)) ' TJS 29/01/09
                xmlResponseDetailNode.Add(New XElement("CustomerCode", CustomerCode)) ' TJS 29/01/09
                If strWarningMessage <> "" Then ' TJS 29/01/09
                    xmlResponseDetailNode.Add(New XElement("WarningMessage", strWarningMessage)) ' TJS 29/01/09
                End If
                Return xmlResponseDetailNode
            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCreditNote", ex, XMLGenericCreditNote.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try
    End Function

    Private Sub CreditNoteFailedValidation(ByVal sender As Object, ByVal errorMessage As String) Handles CreditNoteFacade.InvalidatedOnSaving ' TJS 21/04/09

        strCreditNoteValidationErrorMessage = errorMessage & vbCrLf ' TJS 21/04/09

    End Sub

    Private Function SendCreditNoteCreditHoldWarning(ByVal strMsgParam As String) As Integer

        bCustomerCreditHoldOrOverLimit = True ' TJS 06/10/09
        strCreditMessage = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("INF0142", New String() {strMsgParam}) ' TJS 06/10/09

    End Function

    Private Function SendCreditNoteCreditLimitWarning(ByVal strMsgParam As String) As Integer

        bCustomerCreditHoldOrOverLimit = True ' TJS 06/10/09
        strCreditMessage = Interprise.Facade.Base.SimpleFacade.Instance.GetMessage("QUE0042", New String() {strMsgParam}) ' TJS 06/10/09

    End Function
#End Region

#Region " ConvertQuoteToOrder"
    Public Function ConvertQuoteToOrder(ByVal XMLGenericOrder As XDocument, ByVal CustomerCode As String, ByVal QuoteCode As String, ByVal SourceCode As String) As XElement ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 19/08/10 | TJS             | 2010.1.00 | Function added
        ' 22/09/10 | TJS             | 2010.1.01 | Modified to update Quote and then import order rather 
        '                                        | than convert quote to ensure any changes are included 
        '                                        | e.g. shipping added when payment added
        ' 01/10/10 | TJS             | 2010.1.04 | Modified to only close quote if order imported successfully
        ' 21/01/11 | FA              | 2010.1.15 | Copy over notes when converting from quote to sales order
        ' 25/01/11 | FA              | 2010.1.17 | Modified above fix, as the update was overwriting the totals
        '                                          in the order footer.  Now xml is updated instead of database field
        ' 12/07/11 | FA              | 2011.1.01 | Update country code (requires reloading the customer template)
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 29/01/13 | TJS             | 2013.0.00 | Modified for CB 13 using CRMContactView instead of CRMContact table
        ' 13/02/14 | TJS             | 2014.0.00 | Modified references for CB 14
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
        Dim ContactDataset As Interprise.Framework.Base.DatasetGateway.CRM.ContactDatasetGateway
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade
        Dim ContactFacade As Interprise.Facade.Base.CRM.ContactFacade
        Dim xmlResponseDetailNode As XElement, xmlShippingDetails As XElement
        Dim XMLResponseStatusNode As XElement, XMLNotesNode As XElement ' TJS 01/10/10 TJS/FA 25/01/11
        Dim contactCode As String, strWarningMessage As String, strBillingCustomerName As String
        Dim strTempValue As String, strBillingCompanyName As String, strBillingCountry As String
        Dim strShippingCustomerName As String, strShippingCompanyName As String
        Dim iTableLoop As Integer, iColumnLoop As Integer, iRowLoop As Integer
        Dim strCustBusinessClass As String  'FA 21/01/11 FA 12/07/11

        Try
            bCustomerCreditHoldOrOverLimit = False
            strCreditMessage = ""

            Me.m_ImportExportDataset.EnforceConstraints = False
            strWarningMessage = ""

            ' create Customer dataset and facade
            Try
                CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway
                CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset)

            Catch ex As Exception
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "090", "Cannot create CustomerFacade - suspect Interprise Licence error or User count exceeded", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString) ' TJS 16/10/09
            End Try

            CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
                "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific)

            If Not CustomerDetailDataset.CustomerView(0).IsDefaultContactNull Then
                contactCode = CustomerDetailDataset.CustomerView(0).DefaultContact
            Else
                contactCode = ""
            End If
            ' was Quote generated with blank name and address where blanks replaced by .
            If CustomerDetailDataset.CustomerView(0).CustomerName = "." And CustomerDetailDataset.CustomerView(0).Address = "." Then

                strBillingCountry = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Country")
                If strBillingCountry = "" Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Billing Country is blank in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)
                Else
                    ' check Country is valid 
                    If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & strBillingCountry & "'") = "" Then
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Billing Country is not a valid IS Country", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)
                    End If
                End If

                'FA 12/07/11 start
                strCustBusinessClass = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CUSTOMER_BUSINESS_CLASS)
                If strCustBusinessClass = "" Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "071", "Source Config Default Customer Business Class is blank", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateCustomerRecord", XMLGenericOrder.ToString) ' TJS 09/03/09

                End If

                If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/ISClassTemplate") <> "" Then
                    Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerClassTemplateDetailView.TableName, _
                        "ReadCustomerClassTemplateDetailView_DEV000221", "@ClassDescription", GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/ISClassTemplate"), _
                        "@Country", strBillingCountry}}, Interprise.Framework.Base.Shared.ClearType.Specific)
                Else
                    Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.CustomerClassTemplateDetailView.TableName, _
                        "ReadCustomerClassTemplateDetailView_DEV000221", "@ClassDescription", strCustBusinessClass, "@Country", strBillingCountry}}, _
                        Interprise.Framework.Base.Shared.ClearType.Specific)
                End If

                If Me.m_ImportExportDataset.CustomerClassTemplateDetailView.Count > 0 Then
                    CustomerDetailFacade.ApplyClassTemplate(Me.m_ImportExportDataset.CustomerClassTemplateDetailView(0).ClassCode, _
                        Interprise.Framework.Base.Shared.TransactionType.CustomerClass, CustomerDetailDataset.CustomerView)
                End If

                CustomerDetailDataset.CustomerView(0).Country = strBillingCountry

                'FA 12/07/11 end

                ' yes, need to update customer, contact and ship to
                strBillingCustomerName = ""
                strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/NamePrefix")
                If strTempValue <> "" Then
                    strBillingCustomerName = strBillingCustomerName & strTempValue & " "
                End If
                strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/FirstName")
                If strTempValue <> "" Then
                    strBillingCustomerName = strBillingCustomerName & strTempValue & " "
                End If
                strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/LastName")
                If strTempValue <> "" Then
                    strBillingCustomerName = strBillingCustomerName & strTempValue
                Else
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Last Name is blank in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)

                End If
                strBillingCompanyName = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/Company")

                If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper = "YES" Then
                    CustomerDetailDataset.CustomerView(0).CustomerName = strBillingCompanyName
                Else
                    CustomerDetailDataset.CustomerView(0).CustomerName = strBillingCustomerName
                End If
                CustomerDetailDataset.CustomerView(0).DefaultContactFullName = strBillingCustomerName
                strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Address")
                If strTempValue = "" Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Billing Address is blank in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)

                Else
                    ' need to convert any cr or lf to ensure they display correctly in IS
                    strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue)
                    ' has company name been provided and config has customer as company option is not set ?
                    If strBillingCompanyName <> "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_CREATE_CUSTOMER_AS_COMPANY).ToUpper <> "YES" Then
                        ' yes, add company name to address
                        CustomerDetailDataset.CustomerView(0).Address = strBillingCompanyName & ChrW(13) & ChrW(10) & strTempValue
                    Else
                        ' no, use address as is
                        CustomerDetailDataset.CustomerView(0).Address = strTempValue
                    End If
                End If
                CustomerDetailDataset.CustomerView(0).City = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/Town_City")
                CustomerDetailDataset.CustomerView(0).County = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/County")
                CustomerDetailDataset.CustomerView(0).State = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/State")
                strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS & "/PostalCode")
                If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Billing Postal Code is blank in input XML", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)

                End If
                CustomerDetailDataset.CustomerView(0).PostalCode = strTempValue
                If strBillingCompanyName <> "" Then
                    CustomerDetailDataset.CustomerView(0).Telephone = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/WorkPhone")
                Else
                    CustomerDetailDataset.CustomerView(0).Telephone = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/HomePhone")
                End If
                CustomerDetailDataset.CustomerView(0).Email = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/Email")

                CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerShipToView.TableName, _
                    "ReadCustomerShipTo", AT_CUSTOMER_CODE, CustomerCode, AT_SHIP_TO_CODE, CustomerDetailDataset.CustomerView(0).DefaultShipToCode}}, _
                    Interprise.Framework.Base.Shared.ClearType.Specific)

                xmlShippingDetails = XMLGenericOrder.XPathSelectElement(GENERIC_XML_ORDER_SHIPPING_DETAILS)
                ' was a Shipping Details node found ?
                If xmlShippingDetails IsNot Nothing Then
                    ' yes, insert details
                    strShippingCustomerName = ""
                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/NamePrefix")
                    If strTempValue <> "" Then
                        strShippingCustomerName = strShippingCustomerName & strTempValue & " "
                    End If
                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/FirstName")
                    If strTempValue <> "" Then
                        strShippingCustomerName = strShippingCustomerName & strTempValue & " "
                    End If
                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/LastName")
                    If strTempValue <> "" Then
                        strShippingCustomerName = strShippingCustomerName & strTempValue
                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Shipping Last Name is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)

                    End If
                    strShippingCompanyName = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_CUSTOMER & "/Company")
                    CustomerDetailDataset.CustomerShipToView(0).ShipToName = strShippingCustomerName

                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Address")
                    If strTempValue = "" Then
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Shipping Address is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)

                    Else
                        ' need to convert any cr or lf to ensure they display correctly in IS
                        strTempValue = m_ImportExportConfigFacade.ConvertCRLF(strTempValue)
                    End If
                    ' has company name been provided ?
                    If strShippingCompanyName <> "" Then
                        ' yes, add company name to address
                        CustomerDetailDataset.CustomerShipToView(0).Address = strShippingCompanyName & ChrW(13) & ChrW(10) & strTempValue
                    Else
                        ' no, use address as is
                        CustomerDetailDataset.CustomerShipToView(0).Address = strTempValue ' TJS 09/03/09
                    End If
                    CustomerDetailDataset.CustomerShipToView(0).City = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Town_City")
                    CustomerDetailDataset.CustomerShipToView(0).County = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/County")
                    CustomerDetailDataset.CustomerShipToView(0).State = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/State")
                    strTempValue = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/PostalCode")
                    If strTempValue = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Shipping Postal Code is blank in input XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)

                    End If
                    CustomerDetailDataset.CustomerShipToView(0).PostalCode = strTempValue
                    If GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Country") = "" Then
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Customer Shipping Country is blank in XML", _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)
                    Else
                        ' check Country is valid 
                        If Me.GetField("CountryCode", "SystemCountry", "CountryCode = '" & GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Country") & "'") = "" Then
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "72", "Customer Shipping Country is not a valid IS Country", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString)
                        End If
                    End If
                    CustomerDetailDataset.CustomerShipToView(0).Country = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Country")
                    CustomerDetailDataset.CustomerShipToView(0).Telephone = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Telephone")
                    CustomerDetailDataset.CustomerShipToView(0).Email = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_SHIPPING_DETAILS_ADDRESS & "/Email")
                Else
                    ' no, use Billing Details
                    CustomerDetailDataset.CustomerShipToView(0).ShipToName = strBillingCustomerName
                    If Not CustomerDetailDataset.CustomerView(0).IsAddressNull Then
                        CustomerDetailDataset.CustomerShipToView(0).Address = CustomerDetailDataset.CustomerView(0).Address
                    Else
                        CustomerDetailDataset.CustomerShipToView(0).SetAddressNull()
                    End If
                    If Not CustomerDetailDataset.CustomerView(0).IsCityNull Then
                        CustomerDetailDataset.CustomerShipToView(0).City = CustomerDetailDataset.CustomerView(0).City
                    Else
                        CustomerDetailDataset.CustomerShipToView(0).SetCityNull()
                    End If
                    If Not CustomerDetailDataset.CustomerView(0).IsCountyNull Then
                        CustomerDetailDataset.CustomerShipToView(0).County = CustomerDetailDataset.CustomerView(0).County
                    Else
                        CustomerDetailDataset.CustomerShipToView(0).SetCountyNull()
                    End If
                    If Not CustomerDetailDataset.CustomerView(0).IsStateNull Then
                        CustomerDetailDataset.CustomerShipToView(0).State = CustomerDetailDataset.CustomerView(0).State
                    Else
                        CustomerDetailDataset.CustomerShipToView(0).SetStateNull()
                    End If
                    If Not CustomerDetailDataset.CustomerView(0).IsCountryNull Then
                        CustomerDetailDataset.CustomerShipToView(0).Country = CustomerDetailDataset.CustomerView(0).Country
                    Else
                        CustomerDetailDataset.CustomerShipToView(0).SetCountryNull()
                    End If
                    If Not CustomerDetailDataset.CustomerView(0).IsTelephoneNull Then
                        CustomerDetailDataset.CustomerShipToView(0).Telephone = CustomerDetailDataset.CustomerView(0).Telephone
                    Else
                        CustomerDetailDataset.CustomerShipToView(0).SetTelephoneNull()
                    End If
                    If Not CustomerDetailDataset.CustomerView(0).IsEmailNull Then
                        CustomerDetailDataset.CustomerShipToView(0).Email = CustomerDetailDataset.CustomerView(0).Email
                    Else
                        CustomerDetailDataset.CustomerShipToView(0).SetEmailNull()
                    End If
                End If

                ContactDataset = New Interprise.Framework.Base.DatasetGateway.CRM.ContactDatasetGateway
                ContactFacade = New Interprise.Facade.Base.CRM.ContactFacade(ContactDataset)

                ContactFacade.LoadDataSet(New String()() {New String() {ContactDataset.CRMContactView.TableName, _
                    "ReadCRMContact", AT_CONTACT_CODE, CustomerDetailDataset.CustomerView(0).DefaultContact, AT_ENTITY_CODE, CustomerCode, _
                    Interprise.Framework.Inventory.Shared.Const.AT_TYPE, "CustomerContact", AT_IS_ACTIVE, "1"}}, _
                    Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 29/01/13 TJS 13/02/14

                ContactDataset.CRMContactView(0).ContactFullName = strBillingCustomerName ' TJS 29/01/13
                ContactDataset.CRMContactView(0).ContactFirstName = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/FirstName") ' TJS 29/01/13
                ContactDataset.CRMContactView(0).ContactLastName = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/LastName") ' TJS 29/01/13
                ContactDataset.CRMContactView(0).ContactSalutationCode = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/NamePrefix") ' TJS 29/01/13
                ContactDataset.CRMContactView(0).HomePhone = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/HomePhone") ' TJS 29/01/13
                ContactDataset.CRMContactView(0).BusinessPhone = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/WorkPhone") ' TJS 29/01/13
                ContactDataset.CRMContactView(0).Mobile = GetXMLElementText(XMLGenericOrder, GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER & "/MobilePhone") ' TJS 29/01/13

                ContactFacade.UpdateDataSet(New String()() {New String() {ContactDataset.CRMContactView.TableName, CREATECRMCONTACT, UPDATECRMCONTACT, DELETECRMCONTACT}}, _
                    Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerDetail, m_BaseProductName & " Update Customer", False) ' TJS 29/01/13

                CustomerDetailFacade.UpdateDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, CREATECUSTOMER, UPDATECUSTOMER, DELETECUSTOMER}, _
                    New String() {CustomerDetailDataset.CustomerShipToView.TableName, CREATECUSTOMERSHIPTO, UPDATECUSTOMERSHIPTO, DELETECUSTOMERSHIPTO}}, _
                    Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerDetail, m_BaseProductName & " Update Customer", False)

            End If

            ' start of code added FA 21/01/11 Update notes field in SO XML with Quote details
            XMLNotesNode = XMLGenericOrder.XPathSelectElement("eShopCONNECT/Order/CustomerComments")
            strTempValue = "Converted from Quote " & QuoteCode & vbCrLf & Me.GetField("Notes", "CustomerSalesOrder", "SalesOrderCode = '" & QuoteCode & "'")
            If XMLNotesNode IsNot Nothing Then
                XMLNotesNode.Value = XMLNotesNode.Value & vbCrLf & strTempValue
            Else
                XMLNotesNode = XMLGenericOrder.XPathSelectElement("Order")
                XMLNotesNode.Add("CustomerComments", strTempValue)
            End If
            ' end of code added FA 21/01/11 

            ' import order
            xmlResponseDetailNode = CreateOrder(XMLGenericOrder, CustomerCode, SourceCode) ' TJS 22/09/10 TJS 01/10/10
            ' did it import successfully ?
            XMLResponseStatusNode = xmlResponseDetailNode.XPathSelectElement("/Status") ' TJS 01/10/10
            If XMLResponseStatusNode IsNot Nothing Then ' TJS 01/10/10
                If XMLResponseStatusNode.Value = "Success" Then ' TJS 01/10/10
                    ' yes, create Sales Order dataset for quote update
                    SalesOrderDataset = New Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway
                    ' add handler so that we can set mandatory default values e.g. RootDocumentCode
                    AddHandler SalesOrderDataset.CustomerSalesOrderView.ColumnChanged, AddressOf SalesOrderColumnChanged
                    ' create Sales Order Facade
                    SalesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(SalesOrderDataset)
                    SalesOrderFacade.TransactionType = TransactionType.SalesOrder
                    ' load quote
                    SalesOrderFacade.LoadDataSet(New String()() {New String() {SalesOrderDataset.CustomerSalesOrderView.TableName, READCUSTOMERSALESORDER, "@SalesOrderCode", QuoteCode}, _
                        New String() {SalesOrderDataset.CustomerSalesOrderDetailView.TableName, READCUSTOMERSALESORDERDETAIL, "@SalesOrderCode", QuoteCode}, _
                        New String() {SalesOrderDataset.TransactionTaxDetailView.TableName, READTRANSACTIONTAXDETAILVIEW, "@DocumentCode", QuoteCode}, _
                        New String() {SalesOrderDataset.TransactionItemTaxDetailView.TableName, READTRANSACTIONITEMTAXDETAILVIEW, "@DocumentCode", QuoteCode}, _
                        New String() {SalesOrderDataset.CustomerCreditAllocationView.TableName, READCUSTOMERCREDITALLOCATION, "@DocumentCode", QuoteCode}, _
                        New String() {SalesOrderDataset.CustomerItemKitDetailView.TableName, READCUSTOMERITEMKITDETAIL, "@DocumentCode", QuoteCode}, _
                        New String() {SalesOrderDataset.CustomerSalesRepCommissionView.TableName, READCUSTOMERSALESREPCOMMISSION, "@DocumentCode", QuoteCode}, _
                        New String() {SalesOrderDataset.CustomerSalesOrderWorkflowView.TableName, READCUSTOMERSALESORDERWORKFLOW, "@SalesOrderCode", QuoteCode}}, _
                        Interprise.Framework.Base.Shared.ClearType.Specific)

                    ' mark quote as closed 
                    With SalesOrderDataset
                        .CustomerSalesOrderView(0).OrderStatus = "Close" ' TJS 22/09/10
                        If .CustomerSalesOrderView(0).IsNotesNull Then
                            .CustomerSalesOrderView(0).Notes = "Converted to Sales Order " & xmlResponseDetailNode.XPathSelectElement("/OrderNumber").Value ' TJS 01/10/10
                        ElseIf .CustomerSalesOrderView(0).Notes = "" Then
                            .CustomerSalesOrderView(0).Notes = "Converted to Sales Order " & xmlResponseDetailNode.XPathSelectElement("/OrderNumber").Value ' TJS 01/10/10
                        Else
                            .CustomerSalesOrderView(0).Notes = .CustomerSalesOrderView(0).Notes & vbCrLf & "Converted to Sales Order " & xmlResponseDetailNode.XPathSelectElement("/OrderNumber").Value ' TJS 01/10/10
                        End If
                        .CustomerSalesOrderView(0).IsProcessed = True ' TJS 22/09/10

                        ' save closed quote - did it save ok ?
                        strSalesOrderValidationErrorMessage = "" ' TJS 22/09/10
                        If Not SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)), TransactionType.SalesOrder, m_BaseProductName & " Create Order", False) Then ' TJS 22/09/10 TJS 01/10/10
                            For iTableLoop = 0 To SalesOrderFacade.RelatedTables(TransactionType.SalesOrder).Length - 1 ' TJS 22/09/10
                                For iRowLoop = 0 To .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Rows.Count - 1 ' TJS 22/09/10
                                    For iColumnLoop = 0 To .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Columns.Count - 1 ' TJS 22/09/10
                                        If .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 22/09/10
                                            strSalesOrderValidationErrorMessage = strSalesOrderValidationErrorMessage & .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).TableName & _
                                                "." & .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Columns(iColumnLoop).ColumnName & ", " & _
                                                .Tables(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 22/09/10
                                        End If
                                    Next
                                Next
                            Next

                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", "Failed to save update quote - " & strSalesOrderValidationErrorMessage, _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", XMLGenericOrder.ToString) ' TJS 22/09/10
                        End If

                    End With
                    SalesOrderFacade.Dispose()
                    SalesOrderDataset.Dispose()
                    CustomerDetailFacade.Dispose()
                    CustomerDetailDataset.Dispose()
                End If
            End If
            Return xmlResponseDetailNode ' TJS 01/10/10

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - ConvertQuoteToOrder", ex, XMLGenericOrder.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try
    End Function
#End Region

#Region " CreateActivity "
    Private WithEvents NewActivityFacade As Interprise.Facade.Base.CRM.ActivityFacade ' TJS 14/07/09
    Private strActivityValidationErrorMessage As String ' TJS 14/07/09

    Private Function CreateActivity(ByVal XMLLeadProspectCustomer As XDocument, ByVal SourceEntityType As String, ByVal TargetEntityType As String, _
              ByVal EntityCode As String, ByVal ContactCode As String, ByVal SourceCode As String) As XElement ' TJS 24/04/08 TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 14/07/09 | TJS             | 2009.3.01 | Function added 
        ' 14/08/09 | TJS             | 2009.3.03 | Modified to add activity subject
        ' 24/08/09 | TJS             | 2009.3.04 | Modified to split source and target entit types to cater for adding 
        '                                        | an activity to a lead who has been converted to a Prospec/Customer
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 29/01/13 | TJS             | 2013.0.00 | Modified for CB 13 using CRMActivityView instead of CRMActivity table
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim NewActivityDataset As Interprise.Framework.Base.DatasetGateway.CRM.ActivityDatasetGateway
        Dim XMLTemp As XDocument, xmlResponseDetailNode As XElement
        Dim XMLCustomFields As System.Collections.Generic.IEnumerable(Of XElement), XMLCustomField As XElement
        Dim richText As System.Windows.Forms.RichTextBox
        Dim strTempValue As String, strActivityXMLPath As String, dteActivityDate As Date
        Dim iColumnLoop As Integer, iRowLoop As Integer, bCustomFieldExists As Boolean ' TJS 14/08/09

        Try
            NewActivityDataset = New Interprise.Framework.Base.DatasetGateway.CRM.ActivityDatasetGateway
            NewActivityFacade = New Interprise.Facade.Base.CRM.ActivityFacade(NewActivityDataset)

            Select Case SourceEntityType
                Case "Lead"
                    strActivityXMLPath = GENERIC_XML_LEAD_ACTIVITY

                Case "Prospect"
                    strActivityXMLPath = GENERIC_XML_PROSPECT_ACTIVITY

                Case "Customer"
                    strActivityXMLPath = GENERIC_XML_CUSTOMER_ACTIVITY

                Case Else
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "071", "Unknown SourceEntityType " & SourceEntityType, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", XMLLeadProspectCustomer.ToString)

            End Select
            strTempValue = GetXMLElementText(XMLLeadProspectCustomer, strActivityXMLPath & "/StartDate")
            If strTempValue = "" Then
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "No Activity Start Date found in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", XMLLeadProspectCustomer.ToString)

            ElseIf Not m_ImportExportConfigFacade.ValidateXMLDate(strTempValue) Then
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "Activity Start Date format invalid", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", XMLLeadProspectCustomer.ToString)

            End If
            dteActivityDate = m_ImportExportConfigFacade.ConvertXMLDate(strTempValue)

            strTempValue = GetXMLElementText(XMLLeadProspectCustomer, strActivityXMLPath & "/Type")
            If TargetEntityType = "Lead" Then
                NewActivityFacade.AddActivity(EntityCode, ContactCode, dteActivityDate, strTempValue, TransactionType.LeadActivity)
            Else
                NewActivityFacade.AddActivity(EntityCode, ContactCode, dteActivityDate, strTempValue, TransactionType.CustomerActivity)
            End If
            strTempValue = GetXMLElementText(XMLLeadProspectCustomer, strActivityXMLPath & "/Subject") ' TJS 14/08/09
            If strTempValue = "" Then ' TJS 14/08/09
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "013", "No Activity Subject found in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", XMLLeadProspectCustomer.ToString) ' TJS 14/08/09
            Else
                NewActivityDataset.CRMActivityView(0).Subject = strTempValue ' TJS 14/08/09 TJS 29/01/13
            End If
            strTempValue = GetXMLElementText(XMLLeadProspectCustomer, strActivityXMLPath & "/Category")
            If strTempValue <> "" Then
                NewActivityDataset.CRMActivityView(0).Category = strTempValue ' TJS 29/01/13
            End If
            strTempValue = GetXMLElementText(XMLLeadProspectCustomer, strActivityXMLPath & "/Priority")
            If strTempValue <> "" Then
                NewActivityDataset.CRMActivityView(0).Priority = strTempValue ' TJS 29/01/13
            End If
            strTempValue = GetXMLElementText(XMLLeadProspectCustomer, strActivityXMLPath & "/AssignTo")
            If strTempValue <> "" Then
                NewActivityDataset.CRMActivityView(0).AssignedTo = strTempValue ' TJS 29/01/13
            End If
            richText = New System.Windows.Forms.RichTextBox
            NewActivityDataset.CRMActivityView(0).DetailsText = GetXMLElementText(XMLLeadProspectCustomer, strActivityXMLPath & "/Text") ' TJS 29/01/13
            richText.Text = NewActivityDataset.CRMActivityView(0).DetailsText ' TJS 29/01/13
            NewActivityDataset.CRMActivityView(0).DetailsRtf = richText.Rtf ' TJS 29/01/13

            ' Check for any Lead table Custom Fields
            XMLCustomFields = XMLLeadProspectCustomer.XPathSelectElements(GENERIC_XML_LEAD & "/CustomField")
            If XMLCustomFields IsNot Nothing Then
                For Each XMLCustomField In XMLCustomFields
                    Try
                        XMLTemp = XDocument.Parse(XMLCustomField.ToString)
                        ' has field name been defined ?
                        If GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") <> "" Then
                            ' does it exist ?
                            bCustomFieldExists = False
                            For iColumnLoop = 0 To NewActivityDataset.CRMActivityView.Columns.Count - 1 ' TJS 29/01/13
                                If NewActivityDataset.CRMActivityView.Columns(iColumnLoop).ColumnName = GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") Then ' TJS 29/01/13
                                    bCustomFieldExists = True
                                    Exit For
                                End If
                            Next
                            If bCustomFieldExists Then
                                NewActivityDataset.CRMActivityView(0)(GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName")) = GetXMLElementText(XMLTemp, "CustomField") ' TJS 29/01/13
                            Else
                                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Custom Field " & GetXMLElementAttribute(XMLTemp, "CustomField", "FieldName") & " not found on CRMActivity table", _
                                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", XMLLeadProspectCustomer.ToString)

                            End If
                        Else
                            Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "072", "Field Name attribute not provided for CRMLead Field", _
                                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", XMLLeadProspectCustomer.ToString)

                        End If

                    Catch ex As Exception
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "005", "Custom Field could not be processed due to XML error - " & ex.Message.Replace(vbCrLf, ""), _
                             m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", XMLLeadProspectCustomer.ToString)

                    End Try
                Next
            End If

            strActivityValidationErrorMessage = ""
            If NewActivityFacade.UpdateDataSet(New String()() {New String() {NewActivityDataset.CRMActivityView.TableName, CREATECRMACTIVITY, UPDATECRMACTIVITY, DELETECRMACTIVITY}, _
                New String() {NewActivityDataset.CRMActivityHistoryView.TableName, CREATECRMACTIVITYHISTORY, UPDATECRMACTIVITYHISTORY, DELETECRMACTIVITYHISTORY}, _
                New String() {NewActivityDataset.CRMActivityItemView.TableName, CREATECRMACTIVITYITEM, UPDATECRMACTIVITYITEM, DELETECRMACTIVITYITEM}}, _
                TransactionType.LeadActivity, m_BaseProductName & " New Activity", False) Then ' TJS 29/01/13
                xmlResponseDetailNode = New XElement("ActivityCode")
                xmlResponseDetailNode.Value = NewActivityDataset.CRMActivityView(0).ActivityCode ' TJS 29/01/13
                Return xmlResponseDetailNode

            Else
                For iRowLoop = 0 To NewActivityDataset.CRMActivityView.Rows.Count - 1 ' TJS 14/08/09 TJS 29/01/13
                    For iColumnLoop = 0 To NewActivityDataset.CRMActivityView.Columns.Count - 1 ' TJS 29/01/13
                        If NewActivityDataset.CRMActivityView.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 14/08/09 TJS 29/01/13
                            strActivityValidationErrorMessage += NewActivityDataset.CRMActivityView.TableName & "." & NewActivityDataset.CRMActivityView.Columns(iColumnLoop).ColumnName & _
                            ", " & NewActivityDataset.CRMActivityView.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 14/08/09 TJS 29/01/13
                        End If
                    Next
                Next
                For iRowLoop = 0 To NewActivityDataset.CRMActivityHistoryView.Rows.Count - 1 ' TJS 14/08/09
                    For iColumnLoop = 0 To NewActivityDataset.CRMActivityHistoryView.Columns.Count - 1 ' TJS 14/08/09
                        If NewActivityDataset.CRMActivityHistoryView.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                            strActivityValidationErrorMessage += NewActivityDataset.CRMActivityHistoryView.TableName & "." & NewActivityDataset.CRMActivityHistoryView.Columns(iColumnLoop).ColumnName & _
                            ", " & NewActivityDataset.CRMActivityHistoryView.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 14/08/09
                        End If
                    Next
                Next
                For iRowLoop = 0 To NewActivityDataset.CRMActivityItemView.Rows.Count - 1 ' TJS 14/08/09
                    For iColumnLoop = 0 To NewActivityDataset.CRMActivityItemView.Columns.Count - 1 ' TJS 14/08/09
                        If NewActivityDataset.CRMActivityItemView.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                            strActivityValidationErrorMessage += NewActivityDataset.CRMActivityItemView.TableName & "." & NewActivityDataset.CRMActivityItemView.Columns(iColumnLoop).ColumnName & _
                            ", " & NewActivityDataset.CRMActivityItemView.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 14/08/09
                        End If
                    Next
                Next

                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "082", "Failed to save activity record - " & strActivityValidationErrorMessage, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", XMLLeadProspectCustomer.ToString)

            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateActivity", ex, XMLLeadProspectCustomer.ToString)
            xmlResponseDetailNode = New XElement("ImportResponse")
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try
    End Function
#End Region

#Region " AuthoriseCard "
    Private Function AuthoriseCard(ByVal XMLGenericOrderInvoice As XDocument, ByVal XMLPaymentToProcess As XDocument, ByVal SalesOrderInvoiceFacadeForCard As Interprise.Extendable.Customer.Facade.IBaseSalesOrderInterface, _
        ByVal SalesOrderInvoiceDataset As Interprise.Framework.Base.DatasetComponent.BaseDataset, ByVal CustomerCode As String, ByRef ContactCode As String, _
        ByVal SalesOrderInvoiceCode As String, ByVal ReceiptValue As Decimal, ByVal InvoiceNotOrder As Boolean) As XElement ' TJS 02/12/11 TSJ 10/06/12 TJS 18/01/13
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '-------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 03/02/09 | TJS             | 2009.1.04 | Added SalesOrderDataset and ContactCode parameters 
        '                                        | and added code to create receipt record
        ' 06/02/09 | TJS             | 2009.1.05 | Modified to correctly return error details
        ' 10/02/09 | TJS             | 2009.1.07 | Modified to include all table fault details on failure to save payment
        ' 09/03/09 | TJS             | 2009.1.09 | Modified to useBuildXMLErrorResponseNodeAndEmail for source error processing
        ' 17/03/09 | TJS             | 2009.1.10 | Modified to check if row exists when listing save errors
        '                                        | and to set payment currency
        ' 29/05/09 | TJS             | 2009.2.09 | Added mising AssignPaymentMethodDefaults
        ' 13/01/10 | TJS             | 2010.0.04 | Modified to cater for SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE
        ' 18/03/11 | TJS             | 2011.0.01 | Modified to check for existing card authorisation before creating new
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 17/02/12 | TJS             | 2011.2.07 | commented out CreditCardReceiptFacade.RemoveCreditCardReferences() as not in current facade 
        ' 10/06/12 | TJS             | 2012.1.05 | Corrected value used for receipt total and modified to cater for Invoice Payments
        ' 18/01/13 | TJS             | 2012.1.17 | Corrected error causing blank billing address errors caused when multiple payments added
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway ' TJS 10/06/12
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade ' TJS 10/06/12
        Dim helperCC As Interprise.Facade.Customer.CreditCardAuthorizationFacade ' TJS 03/02/09
        Dim xmlResponseDetailNode As XElement, strBillingAddressXMLPath As String ' TJS 03/02/09
        Dim strCreditCardDetailsXMLPath As String, strTemp As String, strCCResponse As String ' TJS 03/02/09
        Dim sTemp As String, iColumnLoop As Integer, bCardApproved As Boolean ' TJS 03/02/09 TJS 10/02/09
        Dim strCustomerCurrencyXMLPath As String, strBillingCustomerXMLPath As String ' TJS 17/03/09 TJS 29/05/09

        Try
            If InvoiceNotOrder Then
                strCreditCardDetailsXMLPath = GENERIC_XML_INVOICE_CREDIT_CARD_DETAILS
                strBillingAddressXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS ' TJS 03/02/09
                strBillingCustomerXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER ' TJS 29/05/09
                strCustomerCurrencyXMLPath = GENERIC_XML_INVOICE_CURRENCY ' TJS 17/03/09
            Else
                strCreditCardDetailsXMLPath = GENERIC_XML_ORDER_CREDIT_CARD_DETAILS
                strBillingAddressXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS ' TJS 03/02/09
                strBillingCustomerXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER ' TJS 29/05/09
                strCustomerCurrencyXMLPath = GENERIC_XML_ORDER_CURRENCY ' TJS 17/03/09
            End If

            TransactionDataset = New Interprise.Framework.Customer.DatasetGateway.TransactionReceiptDatasetGateway
            TransactionFacade = New Interprise.Facade.Customer.TransactionReceiptFacade(TransactionDataset)
            CreditCardReceiptDataset = New Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway
            CreditCardReceiptFacade = New Interprise.Facade.Customer.ReceiptFacade(CreditCardReceiptDataset)
            CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway ' TJS 10/06/12
            CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset) ' TJS 10/06/12

            TransactionFacade.ParentTransactionFacade = SalesOrderInvoiceFacadeForCard ' TJS 29/05/09 TJS 10/06/12
            If InvoiceNotOrder Then ' TJS 29/05/09
                TransactionFacade.ParentTransactionType = TransactionType.SalesOrder ' TJS 29/05/09
            Else
                TransactionFacade.ParentTransactionType = TransactionType.Invoice ' TJS 29/05/09
            End If
            CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
                "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 10/06/12

            CreditCardReceiptFacade.TransactionType = TransactionType.CustomerReceipt
            CreditCardReceiptFacade.AddReceipt(New DataRow() {CustomerDetailDataset.CustomerView.Rows(0)}, TransactionType.CustomerReceipt, _
                True, ReceiptValue, "Payment Due on Order", SalesOrderInvoiceCode, ContactCode) ' TJS 03/02/09 TJS 10/06/12

            'CreditCardReceiptDataset.PaymentMethodView(0).PaymentTypeCode = PAYMENT_METHOD_CREDIT_CARD ' TJS 03/02/09 TJS 29/05/09
            Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SystemPaymentTypeView.TableName, _
                "ReadSystemPaymentTypeView_DEV000221", AT_PAYMENT_TYPE_CODE, PAYMENT_METHOD_CREDIT_CARD}}, _
                Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 03/02/09
            ' is card type recognised and active ?
            If Me.m_ImportExportDataset.SystemPaymentTypeView.Count = 0 Then ' TJS 03/02/09
                ' no
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "101", "Credit Card Payment Method not found / not active", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - AuthoriseCard", XMLGenericOrderInvoice.ToString) ' TJS 09/03/09

            Else
                ' yes, use it
                CreditCardReceiptFacade.InitializePaymentRow(Me.m_ImportExportDataset.SystemPaymentTypeView(0), "", PAYMENT_METHOD_CREDIT_CARD) ' TJS 03/02/09
            End If
            If InvoiceNotOrder Then ' TJS 03/02/09
                CreditCardReceiptFacade.AssignCreditCardTransactionType(CreditCardReceiptDataset.PaymentMethodView(0), Interprise.Framework.Base.Shared.Enum.CreditCardTransaction.AuthorizeCapture) ' TJS 03/02/09
            Else
                CreditCardReceiptFacade.AssignCreditCardTransactionType(CreditCardReceiptDataset.PaymentMethodView(0), Interprise.Framework.Base.Shared.Enum.CreditCardTransaction.AuthorizeOnly) ' TJS 03/02/09
            End If
            CreditCardReceiptFacade.AssignPaymentMethodDefaults(CreditCardReceiptDataset.PaymentMethodView(0), "Payment Due on Order") ' TJS 29/05/09
            'CreditCardReceiptDataset.PaymentMethodView(0).DocumentCode = CreditCardReceiptDataset.CustomerCardPayment(0).CardPaymentCode ' TJS 03/02/09 TJS 29/05/09
            CreditCardReceiptDataset.PaymentMethodView(0).PaymentTypeCode = PAYMENT_METHOD_CREDIT_CARD ' TJS 03/02/09
            'CreditCardReceiptDataset.PaymentMethodView(0).BankAccountCurrencyCode = GetXMLElementText(XMLGenericOrderInvoice, strCustomerCurrencyXMLPath) ' TJS 17/03/09 TJS 29/05/09
            'CreditCardReceiptDataset.PaymentMethodView(0).BankCurrencyValue = CreditCardReceiptDataset.PaymentMethodView(0).AmountPaid ' TJS 17/03/09 TJS 29/05/09
            'CreditCardReceiptDataset.PaymentMethodView(0).BankCurrencyValueRate = CreditCardReceiptDataset.PaymentMethodView(0).AmountPaidRate ' TJS 17/03/09 TJS 29/05/09

            strTemp = GetXMLElementText(XMLPaymentToProcess, strCreditCardDetailsXMLPath & "/CardNumber") ' TJS 18/01/13
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCard = CreditCardReceiptFacade.EncryptCardNumber(strTemp, CreditCardReceiptDataset.PaymentMethodView(0)) ' TJS 03/02/09
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardOnFile = MaskCardNumber(strTemp) ' TJS 03/02/09

            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardName = GetXMLElementText(XMLPaymentToProcess, strCreditCardDetailsXMLPath & "/NameOnCard") ' TJS 18/01/13
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/Address") ' TJS 09/03/09
            If strTemp = "" Then ' TJS 09/03/09
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "102", "Customer Billing Address is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - AuthoriseCard", XMLGenericOrderInvoice.ToString) ' TJS 09/03/09

            Else
                ' need to convert any cr or lf to ensure they display correctly
                strTemp = m_ImportExportConfigFacade.ConvertCRLF(strTemp) ' TJS 09/03/09
            End If
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardAddress = strTemp ' TJS 03/02/09 TJS 09/03/09
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardCity = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/Town_City") ' TJS 03/02/09
            If GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/State") <> "" Then ' TJS 03/02/09
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardState = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/State") ' TJS 03/02/09
            End If
            If GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/Country") <> "" Then ' TJS 03/02/09
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardCountry = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/Country") ' TJS 03/02/09
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "102", "Customer Billing Country is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - AuthoriseCard", XMLGenericOrderInvoice.ToString) ' TJS 09/03/09
            End If
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/PostalCode") ' TJS 09/03/09
            If strTemp = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 09/03/09 TJS 13/01/10
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "102", "Customer Billing Postal Code is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - AuthoriseCard", XMLGenericOrderInvoice.ToString) ' TJS 09/03/09

            End If
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardPostalCode = strTemp ' TJS 03/02/09 TJS 09/03/09

            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strBillingCustomerXMLPath & "/Email") ' TJS 29/05/09
            If strTemp <> "" Then ' TJS 29/05/09
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardEmail = strTemp ' TJS 29/05/09
            End If

            strTemp = GetXMLElementText(XMLPaymentToProcess, strCreditCardDetailsXMLPath & "/CardStartDate") ' TJS 18/01/13
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardStartMon = ConvertCardStartExpiryMonth(strTemp.Substring(0, 2))
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardStartYear = ConvertCardStartExpiryYear(strTemp.Substring(3, 2))
            End If

            strTemp = GetXMLElementText(XMLPaymentToProcess, strCreditCardDetailsXMLPath & "/CardExpiryDate") ' TJS 18/01/13
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardExpMon = ConvertCardStartExpiryMonth(strTemp.Substring(0, 2))
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardExpYear = ConvertCardStartExpiryYear(strTemp.Substring(3, 2))
            End If

            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardCV = GetXMLElementText(XMLPaymentToProcess, strCreditCardDetailsXMLPath & "/CardSecurityNumber") ' TJS 18/01/13

            strTemp = GetXMLElementText(XMLPaymentToProcess, strCreditCardDetailsXMLPath & "/CardIssueNumber") ' TJS 18/01/13
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardIssueNumber = CreditCardReceiptFacade.EncryptCardIssueNumber(strTemp, CreditCardReceiptDataset.PaymentMethodView(0))
            End If

            ' get card type
            strTemp = GetXMLElementText(XMLPaymentToProcess, strCreditCardDetailsXMLPath & "/CardType") ' TJS 18/01/13
            ' check against known and active card types
            Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.CustomerCreditCardType.TableName, _
                "ReadCustomerImportExportCreditCardType_DEV000221", "@CreditCardType", strTemp, "@IsActive", "1"}}, _
                Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 03/02/09
            ' is card type recognised and active ?
            If Me.m_ImportExportDataset.CustomerCreditCardType.Count = 0 Then
                ' no
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "100", "Credit Card Type " & strTemp & " not found / not active", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - AuthoriseCard", XMLPaymentToProcess.ToString) ' TJS 09/03/09 ' TJS 18/01/13

            Else
                ' yes, use it
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardType = Me.m_ImportExportDataset.CustomerCreditCardType(0).CreditCardType
            End If
            CreditCardReceiptFacade.m_isAutoCCTransType = False ' TJS 03/02/09

            CreditCardReceiptFacade.Validate()

            ' check payment will save
            If Not CreditCardReceiptFacade.UpdateDataSet(CreditCardReceiptFacade.CreateParameterSet(CreditCardReceiptFacade.RelatedTables(CreditCardReceiptFacade.TransactionType)), TransactionType.CustomerReceipt, m_BaseProductName & " Card Authorization", False) Then
                ' no
                sTemp = ""
                If CreditCardReceiptDataset.CustomerCardPayment.Count > 0 Then ' TJS 17/03/09
                    For iColumnLoop = 0 To CreditCardReceiptDataset.CustomerCardPayment.Columns.Count - 1
                        If CreditCardReceiptDataset.CustomerCardPayment.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.CustomerCardPayment.TableName & "." & CreditCardReceiptDataset.CustomerCardPayment.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.CustomerCardPayment.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                If CreditCardReceiptDataset.CustomerPayment.Count > 0 Then ' TJS 17/03/09
                    For iColumnLoop = 0 To CreditCardReceiptDataset.CustomerPayment.Columns.Count - 1
                        If CreditCardReceiptDataset.CustomerPayment.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.CustomerPayment.TableName & "." & CreditCardReceiptDataset.CustomerPayment.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.CustomerPayment.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                If CreditCardReceiptDataset.PaymentMethodView.Count > 0 Then ' TJS 17/03/09
                    For iColumnLoop = 0 To CreditCardReceiptDataset.PaymentMethodView.Columns.Count - 1
                        If CreditCardReceiptDataset.PaymentMethodView.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.PaymentMethodView.TableName & "." & CreditCardReceiptDataset.PaymentMethodView.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.PaymentMethodView.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "105", "Failed to save Credit Card payment - " & sTemp, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - AuthoriseCard", XMLPaymentToProcess.ToString) ' TJS 09/03/09 TJS 18/01/13

            End If
            TransactionFacade.AssignTransactionReceipt(SalesOrderInvoiceCode, CreditCardReceiptFacade, 0)
            TransactionFacade.UpdateDataSet(New String()() {New String() {TransactionDataset.CustomerTransactionReceiptView.TableName, _
                CREATECUSTOMERTRANSACTIONRECEIPT, UPDATECUSTOMERTRANSACTIONRECEIPT, DELETECUSTOMERTRANSACTIONRECEIPT}}, _
                TransactionType.CustomerReceipt, "eShopCONNECT Card Authorisation", False) ' TJs 29/05/09
            If InvoiceNotOrder Then ' TJs 29/05/09
                CreditCardTransactionType = CUSTOMER_INVOICE ' TJs 29/05/09
                Dim invoiceDataset As Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway = DirectCast(SalesOrderInvoiceDataset, Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway) ' TJS 10/06/12
                TransactionFacade.ReserveAndAllocateReceipt(invoiceDataset, CreditCardReceiptFacade, CreditCardTransactionType) ' TJs 29/05/09 TJS 10/06/12
            Else
                CreditCardTransactionType = CUSTOMER_SALES_ORDER ' TJs 29/05/09
                Dim salesOrderDataset As Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway = DirectCast(SalesOrderInvoiceDataset, Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway) ' TJS 10/06/12
                TransactionFacade.ReserveAndAllocateReceipt(salesOrderDataset, CreditCardReceiptFacade, CreditCardTransactionType) ' TJs 29/05/09 TJS 10/06/12
            End If
            sTemp = TransactionDataset.CustomerTransactionReceiptView(0).ReceivableCode
            CreditCardReceiptFacade.LoadDataSet(New String()() {New String() {CreditCardReceiptDataset.CustomerPayment.TableName, READCUSTOMERPAYMENT, "@ReceivableCode", sTemp}, _
                New String() {CreditCardReceiptDataset.CustomerCardPayment.TableName, READCUSTOMERCARDPAYMENT, "@CardPaymentCode", sTemp}, _
                New String() {CreditCardReceiptDataset.PaymentMethodView.TableName, READPAYMENTMETHOD, "@ReceivableCode", sTemp}}, ClearType.Specific) ' TJs 29/05/09

            AuthorisationResponse = "" ' TJS 03/02/09
            helperCC = New Interprise.Facade.Customer.CreditCardAuthorizationFacade ' TJS 03/02/09

            AddHandler helperCC.AuthorizationFinish, AddressOf helperCC_AuthorizationFinish ' TJS 03/02/09
            helperCC.TransactionType = CreditCardReceiptFacade.TransactionType ' TJS 03/02/09
            If CreditCardReceiptFacade.IsUseCardPaymentTable Then ' TJS 03/02/09
                helperCC.CurrentCardPayment = CreditCardReceiptDataset.CustomerCardPayment(0).CardPaymentCode ' TJS 03/02/09
            Else
                helperCC.CurrentReceipt = CreditCardReceiptDataset.CustomerPayment(0).ReceivableCode ' TJS 03/02/09
            End If
            helperCC.IsVoiding = False ' TJS 03/02/09
            strCCResponse = helperCC.AuthorizeCreditCard(CreditCardReceiptFacade, False, bCardApproved) ' TJS 03/02/09
            strTemp = CreditCardReceiptFacade.GetLastCreditCardProcessMessage ' TJS 03/02/09
            'CreditCardReceiptFacade.RemoveCreditCardReferences() ' TJS 03/02/09 TJS 17/02/12
            If InvoiceNotOrder Then ' TJs 29/05/09
                InvoiceFacade.ComputeTotals(True, False, False) ' TJS 29/05/09
                InvoiceFacade.UpdateDataSet(InvoiceFacade.CreateParameterSet(InvoiceFacade.RelatedTables(TransactionType.Invoice)), TransactionType.Invoice, m_BaseProductName & " Authorise card", False) ' TJS 29/05/09
            Else
                SalesOrderFacade.ComputeTotals(True, False, False) ' TJS 29/05/09
                SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)), TransactionType.SalesOrder, m_BaseProductName & " Authorise card", False) ' TJS 29/05/09
            End If

            If bCardApproved Then ' TJS 03/02/09
                xmlResponseDetailNode = New XElement("AuthorisationCode")
                xmlResponseDetailNode.Value = "Authorised"
                Return xmlResponseDetailNode ' TJS 06/02/09
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "110", "Failed to authorise Credit Card payment - " & strCCResponse, _
                   m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - AuthoriseCard", XMLPaymentToProcess.ToString) ' TJS 09/03/09 TJS 18/01/13

            End If

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - AuthoriseCard", ex, XMLPaymentToProcess.ToString) ' TJS 18/01/13
            If InvoiceNotOrder Then
                xmlResponseDetailNode = New XElement("ImportResponse")
            Else
                xmlResponseDetailNode = New XElement("ImportResponse")
            End If
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try

    End Function
#End Region

#Region " RecordCardAuthorisation "
    Private Function RecordCardAuthorisation(ByVal XMLGenericOrderInvoice As XDocument, ByVal SalesOrderInvoiceFacadeForCard As Interprise.Extendable.Customer.Facade.IBaseSalesOrderInterface, _
        ByVal SalesOrderInvoiceDataset As Interprise.Framework.Base.DatasetComponent.BaseDataset, ByVal CustomerCode As String, ByRef ContactCode As String, _
        ByVal SalesOrderInvoiceCode As String, ByVal ReceiptValue As Decimal, ByVal InvoiceNotOrder As Boolean) As XElement ' TJS 02/12/11 TJS 10/06/12
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '-------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 07/07/09 | TJS             | 2009.3.00 | function added
        ' 30/12/09 | TJS             | 2010.0.00 | Tidied log messages
        ' 13/01/10 | TJS             | 2010.0.04 | Modified to cater for SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 17/02/12 | TJS             | 2011.2.07 | commented out CreditCardReceiptFacade.RemoveCreditCardReferences() as not in current facade 
        ' 10/06/12 | TJS             | 2012.1.05 | Corrected value used for receipt total and modified to cater for Invoice Payments
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway ' TJS 10/06/12
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade ' TJS 10/06/12
        Dim rowCCAuthResp As Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway.CustomerCCAuthResponseRow
        Dim xmlResponseDetailNode As XElement, strBillingAddressXMLPath As String
        Dim strCreditCardDetailsXMLPath As String, strTemp As String
        Dim sTemp As String, iColumnLoop As Integer
        Dim strCustomerCurrencyXMLPath As String, strBillingCustomerXMLPath As String

        Try
            If InvoiceNotOrder Then
                strCreditCardDetailsXMLPath = GENERIC_XML_INVOICE_CREDIT_CARD_DETAILS
                strBillingAddressXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS
                strBillingCustomerXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER
                strCustomerCurrencyXMLPath = GENERIC_XML_INVOICE_CURRENCY
            Else
                strCreditCardDetailsXMLPath = GENERIC_XML_ORDER_CREDIT_CARD_DETAILS
                strBillingAddressXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS
                strBillingCustomerXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER
                strCustomerCurrencyXMLPath = GENERIC_XML_ORDER_CURRENCY
            End If

            TransactionDataset = New Interprise.Framework.Customer.DatasetGateway.TransactionReceiptDatasetGateway
            TransactionFacade = New Interprise.Facade.Customer.TransactionReceiptFacade(TransactionDataset)
            CreditCardReceiptDataset = New Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway
            CreditCardReceiptFacade = New Interprise.Facade.Customer.ReceiptFacade(CreditCardReceiptDataset)
            CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway ' TJS 10/06/12
            CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset) ' TJS 10/06/12

            TransactionFacade.ParentTransactionFacade = SalesOrderInvoiceFacadeForCard ' TJS 10/06/12
            If InvoiceNotOrder Then
                TransactionFacade.ParentTransactionType = TransactionType.SalesOrder
            Else
                TransactionFacade.ParentTransactionType = TransactionType.Invoice
            End If
            CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
                 "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 10/06/12

            CreditCardReceiptFacade.TransactionType = TransactionType.CustomerReceipt
            CreditCardReceiptFacade.AddReceipt(New DataRow() {CustomerDetailDataset.CustomerView.Rows(0)}, TransactionType.CustomerReceipt, _
                True, ReceiptValue, "Payment Due on Order", SalesOrderInvoiceCode, ContactCode) ' TJS 10/06/12

            Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SystemPaymentTypeView.TableName, _
                "ReadSystemPaymentTypeView_DEV000221", AT_PAYMENT_TYPE_CODE, PAYMENT_METHOD_CREDIT_CARD}}, _
                Interprise.Framework.Base.Shared.ClearType.Specific)
            ' is payment type recognised and active ?
            If Me.m_ImportExportDataset.SystemPaymentTypeView.Count = 0 Then
                ' no
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "101", "Credit Card Payment Method not found / not active", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)

            Else
                ' yes, use it
                CreditCardReceiptFacade.InitializePaymentRow(Me.m_ImportExportDataset.SystemPaymentTypeView(0), "", PAYMENT_METHOD_CREDIT_CARD)
            End If
            CreditCardReceiptFacade.AssignCreditCardTransactionType(CreditCardReceiptDataset.PaymentMethodView(0), Interprise.Framework.Base.Shared.Enum.CreditCardTransaction.Force)
            CreditCardReceiptFacade.AssignPaymentMethodDefaults(CreditCardReceiptDataset.PaymentMethodView(0), "Payment Due on Order")
            CreditCardReceiptDataset.PaymentMethodView(0).PaymentTypeCode = PAYMENT_METHOD_CREDIT_CARD

            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/CardNumber")
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCard = CreditCardReceiptFacade.EncryptCardNumber(strTemp, CreditCardReceiptDataset.PaymentMethodView(0))
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardOnFile = MaskCardNumber(strTemp)

            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardName = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/NameOnCard")
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/Address")
            If strTemp = "" Then
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "102", "Customer Billing Address is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)

            Else
                ' need to convert any cr or lf to ensure they display correctly
                strTemp = m_ImportExportConfigFacade.ConvertCRLF(strTemp)
            End If
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardAddress = strTemp
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardCity = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/Town_City")
            If GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/State") <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardState = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/State")
            End If
            If GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/Country") <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardCountry = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/Country")
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "102", "Customer Billing Country is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)
            End If
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strBillingAddressXMLPath & "/PostalCode") '
            If strTemp = "" And GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_ALLOW_BLANK_POSTALCODE).ToUpper <> "YES" Then ' TJS 13/01/10
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "102", "Customer Billing Postal Code is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)

            End If
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardPostalCode = strTemp

            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strBillingCustomerXMLPath & "/Email")
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardEmail = strTemp
            End If

            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/CardStartDate")
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardStartMon = ConvertCardStartExpiryMonth(strTemp.Substring(0, 2))
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardStartYear = ConvertCardStartExpiryYear(strTemp.Substring(3, 2))
            End If

            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/CardExpiryDate")
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardExpMon = ConvertCardStartExpiryMonth(strTemp.Substring(0, 2))
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardExpYear = ConvertCardStartExpiryYear(strTemp.Substring(3, 2))
            End If

            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardCV = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/CardSecurityNumber")

            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/CardIssueNumber")
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardIssueNumber = CreditCardReceiptFacade.EncryptCardIssueNumber(strTemp, CreditCardReceiptDataset.PaymentMethodView(0))
            End If

            ' get card type
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/CardType")
            ' check against known and active card types
            Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.CustomerCreditCardType.TableName, _
                "ReadCustomerImportExportCreditCardType_DEV000221", "@CreditCardType", strTemp, "@IsActive", "1"}}, _
                Interprise.Framework.Base.Shared.ClearType.Specific)
            ' is card type recognised and active ?
            If Me.m_ImportExportDataset.CustomerCreditCardType.Count = 0 Then
                ' no
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "100", "Credit Card Type " & strTemp & " not found / not active", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)

            Else
                ' yes, use it
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardType = Me.m_ImportExportDataset.CustomerCreditCardType(0).CreditCardType
            End If
            CreditCardReceiptFacade.m_isAutoCCTransType = False

            CreditCardReceiptFacade.Validate()

            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/AuthorisationNumber") '
            If strTemp = "" Then
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "102", "Card Transaction Authorisation Number is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)

            End If
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardAuthorizationCode = strTemp
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/GatewayTransactionID")
            If strTemp = "" Then
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "102", "Card Transaction Gateway Transaction ID is blank in input XML", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)

            End If
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardReference = strTemp
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardIsAuthorized = True

            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/SourceCardTransactionID")
            If strTemp <> "" Then
                CreditCardReceiptDataset.CustomerCardPayment(0).CardPaymentCode = strTemp
                CreditCardReceiptDataset.PaymentMethodView(0).DocumentCode = strTemp
            End If

            ' check payment will save
            If Not CreditCardReceiptFacade.UpdateDataSet(CreditCardReceiptFacade.CreateParameterSet(CreditCardReceiptFacade.RelatedTables(CreditCardReceiptFacade.TransactionType)), TransactionType.CustomerReceipt, m_BaseProductName & " Card Authorization", False) Then
                ' no
                sTemp = ""
                If CreditCardReceiptDataset.CustomerCardPayment.Count > 0 Then
                    For iColumnLoop = 0 To CreditCardReceiptDataset.CustomerCardPayment.Columns.Count - 1
                        If CreditCardReceiptDataset.CustomerCardPayment.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.CustomerCardPayment.TableName & "." & CreditCardReceiptDataset.CustomerCardPayment.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.CustomerCardPayment.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                If CreditCardReceiptDataset.CustomerPayment.Count > 0 Then
                    For iColumnLoop = 0 To CreditCardReceiptDataset.CustomerPayment.Columns.Count - 1
                        If CreditCardReceiptDataset.CustomerPayment.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.CustomerPayment.TableName & "." & CreditCardReceiptDataset.CustomerPayment.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.CustomerPayment.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                If CreditCardReceiptDataset.PaymentMethodView.Count > 0 Then
                    For iColumnLoop = 0 To CreditCardReceiptDataset.PaymentMethodView.Columns.Count - 1
                        If CreditCardReceiptDataset.PaymentMethodView.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.PaymentMethodView.TableName & "." & CreditCardReceiptDataset.PaymentMethodView.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.PaymentMethodView.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "105", "Failed to save Credit Card payment - " & sTemp, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)

            End If
            TransactionFacade.AssignTransactionReceipt(SalesOrderInvoiceCode, CreditCardReceiptFacade, 0)
            TransactionFacade.UpdateDataSet(New String()() {New String() {TransactionDataset.CustomerTransactionReceiptView.TableName, _
                CREATECUSTOMERTRANSACTIONRECEIPT, UPDATECUSTOMERTRANSACTIONRECEIPT, DELETECUSTOMERTRANSACTIONRECEIPT}}, _
                TransactionType.CustomerReceipt, m_BaseProductName & " Card Authorisation", False)
            If InvoiceNotOrder Then
                CreditCardTransactionType = CUSTOMER_INVOICE
                Dim invoiceDataset As Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway = DirectCast(SalesOrderInvoiceDataset, Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway) ' TJS 10/06/12
                TransactionFacade.ReserveAndAllocateReceipt(invoiceDataset, CreditCardReceiptFacade, CreditCardTransactionType) ' TJS 10/06/12
            Else
                CreditCardTransactionType = CUSTOMER_SALES_ORDER
                Dim salesOrderDataset As Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway = DirectCast(SalesOrderInvoiceDataset, Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway) ' TJS 10/06/12
                TransactionFacade.ReserveAndAllocateReceipt(salesOrderDataset, CreditCardReceiptFacade, CreditCardTransactionType) ' TJS 10/06/12
            End If
            sTemp = TransactionDataset.CustomerTransactionReceiptView(0).ReceivableCode
            CreditCardReceiptFacade.LoadDataSet(New String()() {New String() {CreditCardReceiptDataset.CustomerPayment.TableName, READCUSTOMERPAYMENT, "@ReceivableCode", sTemp}, _
                New String() {CreditCardReceiptDataset.CustomerCardPayment.TableName, READCUSTOMERCARDPAYMENT, "@CardPaymentCode", sTemp}, _
                New String() {CreditCardReceiptDataset.PaymentMethodView.TableName, READPAYMENTMETHOD, "@ReceivableCode", sTemp}}, ClearType.Specific)

            rowCCAuthResp = CreditCardReceiptDataset.CustomerCCAuthResponse.NewCustomerCCAuthResponseRow
            rowCCAuthResp.CustomerCode = CustomerCode
            rowCCAuthResp.DocumentCode = CreditCardReceiptDataset.CustomerCardPayment(0).CardPaymentCode
            rowCCAuthResp.ResponseCode = GenerateDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType.CCResponse)
            rowCCAuthResp.Reference = CreditCardReceiptDataset.PaymentMethodView(0).CreditCardReference
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/GatewayResponseAVS")
            rowCCAuthResp.AVSResult = strTemp
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/GatewayResponseCVV")
            rowCCAuthResp.CVResult = strTemp
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/GatewayResponseText")
            rowCCAuthResp.AuthorizationResult = strTemp
            strTemp = GetXMLElementText(XMLGenericOrderInvoice, strCreditCardDetailsXMLPath & "/TransactionStatus").ToUpper
            If strTemp = "CARDAUTHORISED" Then
                rowCCAuthResp.TransactionType = "Auth"
            ElseIf strTemp = "PAYMENTRECEIVED" Then
                rowCCAuthResp.TransactionType = "Capture"
            Else
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "103", "Invalid Credit Card TransactionStatus - " & strTemp, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", XMLGenericOrderInvoice.ToString)

            End If
            rowCCAuthResp.AuthCode = CreditCardReceiptDataset.PaymentMethodView(0).CreditCardAuthorizationCode
            rowCCAuthResp.CreditCard = CreditCardReceiptDataset.PaymentMethodView(0).CreditCardOnFile
            rowCCAuthResp.Amount = CreditCardReceiptDataset.PaymentMethodView(0).AmountPaid
            rowCCAuthResp.Tax = 0
            rowCCAuthResp.GatewayResponseCode = "OK"
            rowCCAuthResp.Result = 0
            CreditCardReceiptDataset.CustomerCCAuthResponse.AddCustomerCCAuthResponseRow(rowCCAuthResp)
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardResponseCode = rowCCAuthResp.ResponseCode

            CreditCardReceiptFacade.UpdateDataSet(New String()() {New String() {CreditCardReceiptDataset.CustomerCCAuthResponse.TableName, _
                CREATECUSTOMERCCAUTHRESPONSE, UPDATECUSTOMERCCAUTHRESPONSE, DELETECUSTOMERCCAUTHRESPONSE}, _
                New String() {CreditCardReceiptDataset.CustomerCardPayment.TableName, CREATECUSTOMERCARDPAYMENT, UPDATECUSTOMERCARDPAYMENT, DELETECUSTOMERCARDPAYMENT}, _
                New String() {CreditCardReceiptDataset.CustomerPayment.TableName, CREATECUSTOMERPAYMENT, UPDATECUSTOMERPAYMENT, DELETECUSTOMERPAYMENT}, _
                New String() {CreditCardReceiptDataset.PaymentMethodView.TableName, CREATEPAYMENTMETHOD, UPDATEPAYMENTMETHOD, DELETEPAYMENTMETHOD}}, _
                TransactionType.CustomerReceipt, m_BaseProductName & " Card Authorisation", False)

            'CreditCardReceiptFacade.RemoveCreditCardReferences() TJS 17/02/12
            If InvoiceNotOrder Then
                InvoiceFacade.ComputeTotals(True, False, False)
                InvoiceFacade.UpdateDataSet(InvoiceFacade.CreateParameterSet(InvoiceFacade.RelatedTables(TransactionType.Invoice)), TransactionType.Invoice, m_BaseProductName & " Record Card Authorisation", False) ' TJS 30/12/09
            Else
                SalesOrderFacade.ComputeTotals(True, False, False)
                SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)), TransactionType.SalesOrder, m_BaseProductName & " Record Card Authorisation", False) ' TJS 30/12/09
            End If

            xmlResponseDetailNode = New XElement("CardAuthorisation")
            xmlResponseDetailNode.Value = "Imported"
            Return xmlResponseDetailNode

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardAuthorisation", ex, XMLGenericOrderInvoice.ToString)
            If InvoiceNotOrder Then
                xmlResponseDetailNode = New XElement("ImportResponse")
            Else
                xmlResponseDetailNode = New XElement("ImportResponse")
            End If
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try

    End Function
#End Region

#Region " RecordCardPayment "
    Private Function RecordCardPayment(ByVal XMLPayment As XDocument, ByVal SalesOrderInvoiceFacadeForCard As Interprise.Extendable.Customer.Facade.IBaseSalesOrderInterface, _
        ByVal SalesOrderInvoiceDataset As Interprise.Framework.Base.DatasetComponent.BaseDataset, ByVal CustomerCode As String, ByRef ContactCode As String, _
        ByVal SalesOrderInvoiceCode As String, ByVal ReceiptValue As Decimal, ByVal InvoiceNotOrder As Boolean) As XElement ' TJS 02/12/11 TJS 10/06/12
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '-------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 07/07/09 | TJS             | 2009.3.00 | function added
        ' 30/12/09 | TJS             | 2010.0.00 | Tidied log messages
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2 and to cater for multiple payments with individual payment values
        ' 10/06/12 | TJS             | 2012.1.05 | Corrected value used for receipt total and modified to cater for Invoice Payments
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway ' TJS 10/06/12
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade ' TJS 10/06/12
        Dim xmlResponseDetailNode As XElement, strBillingAddressXMLPath As String
        Dim strCreditCardDetailsXMLPath As String, strPaymentDetailsXMLPath As String, strTemp As String ' TJS 02/12/11
        Dim sTemp As String, iColumnLoop As Integer
        Dim strCustomerCurrencyXMLPath As String, strBillingCustomerXMLPath As String

        Try
            If InvoiceNotOrder Then
                strPaymentDetailsXMLPath = GENERIC_XML_INVOICE_PAYMENT_DETAILS ' TJS 02/12/11
                strCreditCardDetailsXMLPath = GENERIC_XML_INVOICE_CREDIT_CARD_DETAILS
                strBillingAddressXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_ADDRESS
                strBillingCustomerXMLPath = GENERIC_XML_INVOICE_BILLING_DETAILS_CUSTOMER
                strCustomerCurrencyXMLPath = GENERIC_XML_INVOICE_CURRENCY
            Else
                strPaymentDetailsXMLPath = GENERIC_XML_ORDER_PAYMENT_DETAILS ' TJS 02/12/11
                strPaymentDetailsXMLPath = GENERIC_XML_INVOICE_PAYMENT_DETAILS
                strCreditCardDetailsXMLPath = GENERIC_XML_ORDER_CREDIT_CARD_DETAILS
                strBillingAddressXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_ADDRESS
                strBillingCustomerXMLPath = GENERIC_XML_ORDER_BILLING_DETAILS_CUSTOMER
                strCustomerCurrencyXMLPath = GENERIC_XML_ORDER_CURRENCY
            End If

            TransactionDataset = New Interprise.Framework.Customer.DatasetGateway.TransactionReceiptDatasetGateway
            TransactionFacade = New Interprise.Facade.Customer.TransactionReceiptFacade(TransactionDataset)
            CreditCardReceiptDataset = New Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway
            CreditCardReceiptFacade = New Interprise.Facade.Customer.ReceiptFacade(CreditCardReceiptDataset)
            CustomerDetailDataset = New Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway ' TJS 10/06/12
            CustomerDetailFacade = New Interprise.Facade.Customer.CustomerDetailFacade(CustomerDetailDataset) ' TJS 10/06/12

            TransactionFacade.ParentTransactionFacade = SalesOrderInvoiceFacadeForCard ' TJS 10/06/12
            If InvoiceNotOrder Then
                TransactionFacade.ParentTransactionType = TransactionType.SalesOrder
            Else
                TransactionFacade.ParentTransactionType = TransactionType.Invoice
            End If
            CustomerDetailFacade.LoadDataSet(New String()() {New String() {CustomerDetailDataset.CustomerView.TableName, _
                "ReadCustomer", AT_CUSTOMER_CODE, CustomerCode}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 10/06/12

            CreditCardReceiptFacade.TransactionType = TransactionType.CustomerReceipt
            ' start of code added TJS 02/12/11
            sTemp = GetXMLElementText(XMLPayment, strPaymentDetailsXMLPath & "/PaymentValue")
            ' has payment value been supplied (normally only for multiple payments) ?
            If sTemp <> "" Then
                ' yes, must be numeric and not contain any commas
                If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                    ' must not be negative
                    If CDec(sTemp) >= 0 Then
                        CreditCardReceiptFacade.AddReceipt(New DataRow() {CustomerDetailDataset.CustomerView.Rows(0)}, TransactionType.CustomerReceipt, _
                            True, CDec(sTemp), "Payment Due on Order", SalesOrderInvoiceCode, ContactCode) ' TJS 10/06/12

                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "101", "Payment Value must not be negative for Order/Invoice Code " & SalesOrderInvoiceCode, _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardPayment", XMLPayment.ToString)
                    End If
                Else
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "101", "Payment Value must be numeric for Order/Invoice Code " & SalesOrderInvoiceCode, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardPayment", XMLPayment.ToString)
                End If
            Else
                ' end of code added TJS 02/12/11
                CreditCardReceiptFacade.AddReceipt(New DataRow() {CustomerDetailDataset.CustomerView.Rows(0)}, TransactionType.CustomerReceipt, _
                    True, ReceiptValue, "Payment Due on Order", SalesOrderInvoiceCode, ContactCode) ' TJS 10/06/12
            End If

            Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SystemPaymentTypeView.TableName, "ReadSystemPaymentTypeView_DEV000221", _
                AT_PAYMENT_TYPE_CODE, GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_EXT_SYSTEM_CARD_PAYMENT_CODE)}}, _
                Interprise.Framework.Base.Shared.ClearType.Specific)
            ' is payment type recognised and active ?
            If Me.m_ImportExportDataset.SystemPaymentTypeView.Count = 0 Then
                ' no
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "101", "Credit Card Payment Method not found / not active", _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardPayment", XMLPayment.ToString)

            Else
                ' yes, use it
                CreditCardReceiptFacade.InitializePaymentRow(Me.m_ImportExportDataset.SystemPaymentTypeView(0), "", GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_EXT_SYSTEM_CARD_PAYMENT_CODE))
            End If
            CreditCardReceiptFacade.AssignCreditCardTransactionType(CreditCardReceiptDataset.PaymentMethodView(0), Interprise.Framework.Base.Shared.Enum.CreditCardTransaction.Force)
            CreditCardReceiptFacade.AssignPaymentMethodDefaults(CreditCardReceiptDataset.PaymentMethodView(0), "Payment Due on Order")
            CreditCardReceiptDataset.PaymentMethodView(0).PaymentTypeCode = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_EXT_SYSTEM_CARD_PAYMENT_CODE)

            strTemp = GetXMLElementText(XMLPayment, strCreditCardDetailsXMLPath & "/CardNumber")
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCard = CreditCardReceiptFacade.EncryptCardNumber(strTemp, CreditCardReceiptDataset.PaymentMethodView(0))
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardOnFile = MaskCardNumber(strTemp)

            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardName = GetXMLElementText(XMLPayment, strCreditCardDetailsXMLPath & "/NameOnCard")
            strTemp = GetXMLElementText(XMLPayment, strBillingAddressXMLPath & "/Address")
            If strTemp <> "" Then
                ' need to convert any cr or lf to ensure they display correctly
                strTemp = m_ImportExportConfigFacade.ConvertCRLF(strTemp)
            End If
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardAddress = strTemp
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardCity = GetXMLElementText(XMLPayment, strBillingAddressXMLPath & "/Town_City")
            If GetXMLElementText(XMLPayment, strBillingAddressXMLPath & "/State") <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardState = GetXMLElementText(XMLPayment, strBillingAddressXMLPath & "/State")
            End If
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardCountry = GetXMLElementText(XMLPayment, strBillingAddressXMLPath & "/Country")
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardPostalCode = GetXMLElementText(XMLPayment, strBillingAddressXMLPath & "/PostalCode")

            strTemp = GetXMLElementText(XMLPayment, strBillingCustomerXMLPath & "/Email")
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardEmail = strTemp
            End If

            strTemp = GetXMLElementText(XMLPayment, strCreditCardDetailsXMLPath & "/CardStartDate")
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardStartMon = ConvertCardStartExpiryMonth(strTemp.Substring(0, 2))
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardStartYear = ConvertCardStartExpiryYear(strTemp.Substring(3, 2))
            End If

            strTemp = GetXMLElementText(XMLPayment, strCreditCardDetailsXMLPath & "/CardExpiryDate")
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardExpMon = ConvertCardStartExpiryMonth(strTemp.Substring(0, 2))
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardExpYear = ConvertCardStartExpiryYear(strTemp.Substring(3, 2))
            End If

            ' get card type
            strTemp = GetXMLElementText(XMLPayment, strCreditCardDetailsXMLPath & "/CardType")
            If strTemp <> "" Then
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardType = strTemp
            End If

            CreditCardReceiptDataset.PaymentMethodView(0).PaymentInfo = CreditCardReceiptDataset.PaymentMethodView(0).CreditCardType & _
                " Card " & CreditCardReceiptDataset.PaymentMethodView(0).CreditCardOnFile & vbCrLf & "Name on card " & _
                CreditCardReceiptDataset.PaymentMethodView(0).CreditCardName
            strTemp = GetXMLElementText(XMLPayment, strCreditCardDetailsXMLPath & "/AuthorisationNumber") '
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardAuthorizationCode = strTemp
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardIsAuthorized = True
            CreditCardReceiptDataset.PaymentMethodView(0).CreditCardIsCaptured = True

            ' check payment will save
            If Not CreditCardReceiptFacade.UpdateDataSet(CreditCardReceiptFacade.CreateParameterSet(CreditCardReceiptFacade.RelatedTables(CreditCardReceiptFacade.TransactionType)), TransactionType.CustomerReceipt, m_BaseProductName & " Card Payment", False) Then ' TJS 30/12/09
                ' no
                sTemp = ""
                If CreditCardReceiptDataset.CustomerCardPayment.Count > 0 Then
                    For iColumnLoop = 0 To CreditCardReceiptDataset.CustomerCardPayment.Columns.Count - 1
                        If CreditCardReceiptDataset.CustomerCardPayment.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.CustomerCardPayment.TableName & "." & CreditCardReceiptDataset.CustomerCardPayment.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.CustomerCardPayment.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                If CreditCardReceiptDataset.CustomerPayment.Count > 0 Then
                    For iColumnLoop = 0 To CreditCardReceiptDataset.CustomerPayment.Columns.Count - 1
                        If CreditCardReceiptDataset.CustomerPayment.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.CustomerPayment.TableName & "." & CreditCardReceiptDataset.CustomerPayment.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.CustomerPayment.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                If CreditCardReceiptDataset.PaymentMethodView.Count > 0 Then
                    For iColumnLoop = 0 To CreditCardReceiptDataset.PaymentMethodView.Columns.Count - 1
                        If CreditCardReceiptDataset.PaymentMethodView.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & CreditCardReceiptDataset.PaymentMethodView.TableName & "." & CreditCardReceiptDataset.PaymentMethodView.Columns(iColumnLoop).ColumnName & ", " & CreditCardReceiptDataset.PaymentMethodView.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "105", "Failed to save Credit Card payment - " & sTemp, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardPayment", XMLPayment.ToString)

            End If
            TransactionFacade.AssignTransactionReceipt(SalesOrderInvoiceCode, CreditCardReceiptFacade, 0)
            TransactionFacade.UpdateDataSet(New String()() {New String() {TransactionDataset.CustomerTransactionReceiptView.TableName, _
                CREATECUSTOMERTRANSACTIONRECEIPT, UPDATECUSTOMERTRANSACTIONRECEIPT, DELETECUSTOMERTRANSACTIONRECEIPT}}, _
                TransactionType.CustomerReceipt, m_BaseProductName & " Card Payment", False)
            If InvoiceNotOrder Then
                CreditCardTransactionType = CUSTOMER_INVOICE
                Dim invoiceDataset As Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway = DirectCast(SalesOrderInvoiceDataset, Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway) ' TJS 10/06/12
                TransactionFacade.ReserveAndAllocateReceipt(invoiceDataset, CreditCardReceiptFacade, CreditCardTransactionType) ' TJS 10/06/12
            Else
                CreditCardTransactionType = CUSTOMER_SALES_ORDER
                Dim salesOrderDataset As Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway = DirectCast(SalesOrderInvoiceDataset, Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway) ' TJS 10/06/12
                TransactionFacade.ReserveAndAllocateReceipt(salesOrderDataset, CreditCardReceiptFacade, CreditCardTransactionType) ' TJS 10/06/12
            End If

            sTemp = TransactionDataset.CustomerTransactionReceiptView(0).ReceivableCode
            CreditCardReceiptFacade.LoadDataSet(New String()() {New String() {CreditCardReceiptDataset.CustomerPayment.TableName, READCUSTOMERPAYMENT, "@ReceivableCode", sTemp}, _
                New String() {CreditCardReceiptDataset.CustomerCardPayment.TableName, READCUSTOMERCARDPAYMENT, "@CardPaymentCode", sTemp}, _
                New String() {CreditCardReceiptDataset.PaymentMethodView.TableName, READPAYMENTMETHOD, "@ReceivableCode", sTemp}}, ClearType.Specific)

            If InvoiceNotOrder Then
                InvoiceFacade.ComputeTotals(True, False, False)
                InvoiceFacade.UpdateDataSet(InvoiceFacade.CreateParameterSet(InvoiceFacade.RelatedTables(TransactionType.Invoice)), TransactionType.Invoice, m_BaseProductName & " Record Card Payment", False) ' TJS 30/12/09
            Else
                SalesOrderFacade.ComputeTotals(True, False, False)
                SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)), TransactionType.SalesOrder, m_BaseProductName & " Record Card Payment", False) ' TJS 30/12/09
            End If

            xmlResponseDetailNode = New XElement("CardPayment")
            xmlResponseDetailNode.Value = "Imported"
            Return xmlResponseDetailNode

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordCardPayment", ex, XMLPayment.ToString)
            If InvoiceNotOrder Then
                xmlResponseDetailNode = New XElement("ImportResponse")
            Else
                xmlResponseDetailNode = New XElement("ImportResponse")
            End If
            xmlResponseDetailNode.Add(New XElement("Status", "Error"))
            xmlResponseDetailNode.Add(New XElement("ErrorCode", "999"))
            xmlResponseDetailNode.Add(New XElement("ErrorMessage", ex.Message))
            xmlResponseDetailNode.Add(New XElement("StackTrace", ex.StackTrace))
            Return xmlResponseDetailNode

        End Try

    End Function
#End Region

#Region " RecordSourcePayment "
    Private Function RecordSourcePayment(ByVal XMLPayment As XDocument, ByVal SalesOrderInvoiceFacadeForPayment As Interprise.Extendable.Customer.Facade.IBaseSalesOrderInterface, _
        ByVal SalesOrderInvoiceDataset As Interprise.Framework.Base.DatasetComponent.BaseDataset, ByVal CustomerCode As String, ByRef ContactCode As String, _
        ByVal SalesOrderInvoiceCode As String, ByVal ReceiptValue As Decimal, ByVal InvoiceNotOrder As Boolean, ByVal PostInvoiceReceipt As Boolean) As XElement ' TJS 02/12/11 TSJ 10/06/12 TJS 02/08/12
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '-------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 30/12/09 | TJS             | 2010.0.00 | function added
        ' 22/09/10 | TJs             | 2010.1.01 | Modified to cater for SourcePaymentID
        ' 27/09/10 | TJS             | 2010.1.02 | Corrected receipt value for non-base currency transactions
        '                                        | and added code to report errors on saving
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2 and to cater for multiple payments with individual payment values
        ' 10/06/12 | TJS             | 2012.1.05 | Modified to ensure payment date is set to Sales Order Date and cater for Invoice Payments
        ' 01/08/12 | TJS             | 2012.1.10 | Corrected recording of payments on Invoices
        ' 02/08/12 | TJS             | 2012.1.11 | Added PostInvoiceReceipt parameter
        ' 05/10/13 | TJS             | 2013.3.05 | Added PaymentDate parameter
        ' 23/01/14 | TJS             | 2013.4.06 | Added Order/Invoice number to error message for payment type not found/active
        ' 29/01/14 | TJS             | 2013.4.07 | Added Order/Invoice number to other error message s
        ' 11/02/14 | TJS             | 2013.4.09 | corrected transaction name when saving payment
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim CustomerDetailDataset As Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway ' TJS 10/06/12
        Dim CustomerDetailFacade As Interprise.Facade.Customer.CustomerDetailFacade ' TJS 10/06/12
        Dim xmlResponseDetailNode As XElement, strPaymentDetailsXMLPath As String
        Dim strCustomerCurrencyXMLPath As String, SourceTransactionType As String, sTemp As String
        Dim iTableLoop As Integer, iRowLoop As Integer, iColumnLoop As Integer ' TJS 27/09/10

        Try
            If InvoiceNotOrder Then
                strPaymentDetailsXMLPath = GENERIC_XML_INVOICE_PAYMENT_DETAILS
                strCustomerCurrencyXMLPath = GENERIC_XML_INVOICE_CURRENCY
            Else
                strPaymentDetailsXMLPath = GENERIC_XML_ORDER_PAYMENT_DETAILS
                strCustomerCurrencyXMLPath = GENERIC_XML_ORDER_CURRENCY
            End If

            TransactionDataset = New Interprise.Framework.Customer.DatasetGateway.TransactionReceiptDatasetGateway
            TransactionFacade = New Interprise.Facade.Customer.TransactionReceiptFacade(TransactionDataset)
            SourceReceiptDataset = New Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway
            SourceReceiptFacade = New Interprise.Facade.Customer.ReceiptFacade(SourceReceiptDataset)

            TransactionFacade.ParentTransactionFacade = SalesOrderInvoiceFacadeForPayment ' TJS 10/06/12
            If InvoiceNotOrder Then
                TransactionFacade.ParentTransactionType = TransactionType.Invoice
            Else
                TransactionFacade.ParentTransactionType = TransactionType.SalesOrder
            End If
            Dim commandText As String = "SELECT * FROM " + CUSTOMERACTIVECUSTOMERSVIEW_TABLE + _
                " WHERE " + CUSTOMERACTIVECUSTOMERSVIEW_CUSTOMERCODE_COLUMN + " = '" + CustomerCode + "'"
            Dim customerDataSet As DataSet = SimpleFacade.Instance.LoadDataSet(CommandType.Text, commandText, New String() {CUSTOMERACTIVECUSTOMERSVIEW_TABLE}, Nothing)

            SourceReceiptFacade.TransactionType = TransactionType.CustomerReceipt
            ' start of code added TJS 02/12/11
            sTemp = GetXMLElementText(XMLPayment, strPaymentDetailsXMLPath & "/PaymentValue")
            ' has payment value been supplied (normally only for multiple payments) ?
            If sTemp <> "" Then
                ' yes, must be numeric and not contain any commas
                If IsNumeric(sTemp) And InStr(sTemp, ",") >= 0 Then
                    ' must not be negative
                    If CDec(sTemp) >= 0 Then
                        SourceReceiptFacade.AddReceipt(New DataRow() {customerDataSet.Tables(CUSTOMERACTIVECUSTOMERSVIEW_TABLE).Rows(0)}, TransactionType.CustomerReceipt, _
                            True, CDec(sTemp), "Payment Due on Order", SalesOrderInvoiceCode, ContactCode) ' TJS 10/06/12

                    Else
                        Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "101", "Payment Value must not be negative for Order/Invoice Code " & SalesOrderInvoiceCode, _
                            m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment", XMLPayment.ToString)
                    End If
                Else
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "101", "Payment Value must be numeric for Order/Invoice Code " & SalesOrderInvoiceCode, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment", XMLPayment.ToString)
                End If
            Else
                ' end of code added TJS 02/12/11
                SourceReceiptFacade.AddReceipt(New DataRow() {customerDataSet.Tables(CUSTOMERACTIVECUSTOMERSVIEW_TABLE).Rows(0)}, TransactionType.CustomerReceipt, _
                    True, ReceiptValue, "Payment Due on Order", SalesOrderInvoiceCode, ContactCode) ' TJS 27/09/10 TJS 10/06/12
            End If

            Me.LoadDataSet(New String()() {New String() {m_ImportExportDataset.SystemPaymentTypeView.TableName, "ReadSystemPaymentTypeView_DEV000221", _
                AT_PAYMENT_TYPE_CODE, GetXMLElementText(XMLPayment, strPaymentDetailsXMLPath & "/PaymentType")}}, _
                Interprise.Framework.Base.Shared.ClearType.Specific)
            ' is payment type recognised and active ?
            If Me.m_ImportExportDataset.SystemPaymentTypeView.Count = 0 Then
                ' no
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "101", "Source Payment Type not found / not active for Order/Invoice Code " & SalesOrderInvoiceCode, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment", XMLPayment.ToString) ' TJS 23/01/14

            Else
                ' yes, use it
                Try ' TJS 24/09/10
                    SourceReceiptFacade.InitializePaymentRow(Me.m_ImportExportDataset.SystemPaymentTypeView(0), "", Me.m_ImportExportDataset.SystemPaymentTypeView(0).PaymentMethodCode)

                Catch ex As Exception ' TJS 24/09/10
                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "105", "Failed to initialise Source payment for Order/Invoice Code " & SalesOrderInvoiceCode & " - Payment Type may not be configured correctly", _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment", XMLPayment.ToString) ' TJS 24/09/10 TJS 29/01/14

                End Try
            End If
            SourceReceiptFacade.AssignPaymentMethodDefaults(SourceReceiptDataset.PaymentMethodView(0), "Payment Due on Order")
            SourceReceiptDataset.PaymentMethodView(0).PaymentTypeCode = GetXMLElementText(XMLPayment, strPaymentDetailsXMLPath & "/PaymentType")
            SourceReceiptDataset.PaymentMethodView(0).CheckNumber = GetXMLElementText(XMLPayment, strPaymentDetailsXMLPath & "/SourcePaymentID") ' TJS 22/09/10

            sTemp = GetXMLElementText(XMLPayment, strPaymentDetailsXMLPath & "/PaymentDate") ' TJS 05/10/13
            If InvoiceNotOrder Then ' TJS 01/08/12
                Dim invoiceDataset As Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway = DirectCast(SalesOrderInvoiceDataset, Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway) ' TJS 10/06/12 ' TJS 01/08/12
                If SourceReceiptDataset.CustomerPayment.Count > 0 Then ' TJS 01/08/12
                    If sTemp <> "" Then ' TJS 05/10/13
                        SourceReceiptDataset.CustomerPayment(0).DatePaid = m_ImportExportConfigFacade.ConvertXMLDate(sTemp) ' TJS 05/10/13
                    Else
                        SourceReceiptDataset.CustomerPayment(0).DatePaid = invoiceDataset.CustomerInvoiceView(0).InvoiceDate ' TJS 01/08/12
                    End If
                ElseIf SourceReceiptDataset.CustomerCardPayment.Count > 0 Then ' TJS 01/08/12
                    If sTemp <> "" Then ' TJS 05/10/13
                        SourceReceiptDataset.CustomerCardPayment(0).PaymentDate = m_ImportExportConfigFacade.ConvertXMLDate(sTemp) ' TJS 05/10/13
                    Else
                        SourceReceiptDataset.CustomerCardPayment(0).PaymentDate = invoiceDataset.CustomerInvoiceView(0).InvoiceDate ' TJS 01/08/12
                    End If
                End If
            Else
                Dim salesOrderDataset As Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway = DirectCast(SalesOrderInvoiceDataset, Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway) ' TJS 10/06/12 TJS 01/08/12
                If SourceReceiptDataset.CustomerPayment.Count > 0 Then ' TJS 10/06/12
                    If sTemp <> "" Then ' TJS 05/10/13
                        SourceReceiptDataset.CustomerPayment(0).DatePaid = m_ImportExportConfigFacade.ConvertXMLDate(sTemp) ' TJS 05/10/13
                    Else
                        SourceReceiptDataset.CustomerPayment(0).DatePaid = salesOrderDataset.CustomerSalesOrderView(0).SalesOrderDate ' TJS 10/06/12
                    End If
                ElseIf SourceReceiptDataset.CustomerCardPayment.Count > 0 Then ' TJS 10/06/12
                    If sTemp <> "" Then ' TJS 05/10/13
                        SourceReceiptDataset.CustomerCardPayment(0).PaymentDate = m_ImportExportConfigFacade.ConvertXMLDate(sTemp) ' TJS 05/10/13
                    Else
                        SourceReceiptDataset.CustomerCardPayment(0).PaymentDate = salesOrderDataset.CustomerSalesOrderView(0).SalesOrderDate ' TJS 10/06/12
                    End If
                End If
            End If

            ' check payment will save
            If Not SourceReceiptFacade.UpdateDataSet(SourceReceiptFacade.CreateParameterSet(SourceReceiptFacade.RelatedTables(SourceReceiptFacade.TransactionType)), TransactionType.CustomerReceipt, m_BaseProductName & " Source Payment", False) Then
                ' no
                sTemp = ""
                If SourceReceiptDataset.CustomerPayment.Count > 0 Then
                    For iColumnLoop = 0 To SourceReceiptDataset.CustomerPayment.Columns.Count - 1
                        If SourceReceiptDataset.CustomerPayment.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & SourceReceiptDataset.CustomerPayment.TableName & "." & SourceReceiptDataset.CustomerPayment.Columns(iColumnLoop).ColumnName & ", " & SourceReceiptDataset.CustomerPayment.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                If SourceReceiptDataset.PaymentMethodView.Count > 0 Then
                    For iColumnLoop = 0 To SourceReceiptDataset.PaymentMethodView.Columns.Count - 1
                        If SourceReceiptDataset.PaymentMethodView.Rows(0).GetColumnError(iColumnLoop) <> "" Then
                            sTemp = sTemp & SourceReceiptDataset.PaymentMethodView.TableName & "." & SourceReceiptDataset.PaymentMethodView.Columns(iColumnLoop).ColumnName & ", " & SourceReceiptDataset.PaymentMethodView.Rows(0).GetColumnError(iColumnLoop) & vbCrLf
                        End If
                    Next
                End If
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "105", "Failed to save Source payment for Order/Invoice Code " & SalesOrderInvoiceCode & " - " & sTemp, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment", XMLPayment.ToString) ' TJS 29/01/14

            End If
            TransactionFacade.AssignTransactionReceipt(SalesOrderInvoiceCode, SourceReceiptFacade, 0)

            ' check receipt will save
            If Not TransactionFacade.UpdateDataSet(New String()() {New String() {TransactionDataset.CustomerTransactionReceiptView.TableName, _
                CREATECUSTOMERTRANSACTIONRECEIPT, UPDATECUSTOMERTRANSACTIONRECEIPT, DELETECUSTOMERTRANSACTIONRECEIPT}}, _
                TransactionType.CustomerReceipt, m_BaseProductName & " Source Payment", False) Then ' TJS 27/09/10
                ' no
                sTemp = "" ' TJS 27/09/10
                If TransactionDataset.CustomerTransactionReceiptView.Count > 0 Then ' TJS 27/09/10
                    For iColumnLoop = 0 To TransactionDataset.CustomerTransactionReceiptView.Columns.Count - 1 ' TJS 27/09/10
                        If TransactionDataset.CustomerTransactionReceiptView.Rows(0).GetColumnError(iColumnLoop) <> "" Then ' TJS 27/09/10
                            sTemp = sTemp & TransactionDataset.CustomerTransactionReceiptView.TableName & "." & TransactionDataset.CustomerTransactionReceiptView.Columns(iColumnLoop).ColumnName & ", " & TransactionDataset.CustomerTransactionReceiptView.Rows(0).GetColumnError(iColumnLoop) & vbCrLf ' TJS 27/09/10
                        End If
                    Next
                End If
                Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "105", "Failed to save Source receipt for Order/Invoice Code " & SalesOrderInvoiceCode & " - " & sTemp, _
                    m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment", XMLPayment.ToString) ' TJS 29/01/14

            End If

            If Not InvoiceNotOrder Then ' TJS 01/08/12
                SourceTransactionType = CUSTOMER_SALES_ORDER
                TransactionFacade.ReserveAndAllocateReceipt(SalesOrderDataset, SourceReceiptFacade, SourceTransactionType) ' TJS 10/06/12
                TransactionFacade.UpdateDataSet(New String()() {New String() {TransactionDataset.CustomerTransactionReceiptView.TableName, _
                CREATECUSTOMERTRANSACTIONRECEIPT, UPDATECUSTOMERTRANSACTIONRECEIPT, DELETECUSTOMERTRANSACTIONRECEIPT}}, _
                TransactionType.CustomerReceipt, m_BaseProductName & " Source Payment - Reserved payment to sales order", False)
            ElseIf PostInvoiceReceipt Then ' TJS 02/08/12
                SourceReceiptFacade.Post(TransactionType.CustomerReceipt) ' TJS 02/08/12
            End If
            sTemp = TransactionDataset.CustomerTransactionReceiptView(0).ReceivableCode
            SourceReceiptFacade.LoadDataSet(New String()() {New String() {SourceReceiptDataset.CustomerPayment.TableName, READCUSTOMERPAYMENT, "@ReceivableCode", sTemp}, _
                New String() {SourceReceiptDataset.PaymentMethodView.TableName, READPAYMENTMETHOD, "@ReceivableCode", sTemp}}, ClearType.Specific)

            If InvoiceNotOrder Then
                InvoiceFacade.ComputeTotals(True, False, False)
                If Not InvoiceFacade.UpdateDataSet(InvoiceFacade.CreateParameterSet(InvoiceFacade.RelatedTables(TransactionType.Invoice)), TransactionType.Invoice, m_BaseProductName & " Source payment", False) Then ' TJS 27/09/10 TJS 11/02/14
                    For iTableLoop = 0 To InvoiceFacade.RelatedTables(TransactionType.Invoice).Length - 1 ' TJS 27/09/10
                        For iRowLoop = 0 To InvoiceDataset.Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Rows.Count - 1 ' TJS 27/09/10
                            For iColumnLoop = 0 To InvoiceDataset.Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Columns.Count - 1 ' TJS 27/09/10
                                If InvoiceDataset.Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 27/09/10
                                    strInvoiceValidationErrorMessage = strInvoiceValidationErrorMessage & InvoiceDataset.Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).TableName & _
                                        "." & InvoiceDataset.Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Columns(iColumnLoop).ColumnName & ", " & _
                                        InvoiceDataset.Tables(InvoiceFacade.RelatedTables(TransactionType.Invoice)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 27/09/10
                                End If
                            Next
                        Next
                    Next

                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", "Failed to save updated Invoice " & SalesOrderInvoiceCode & " - " & sTemp, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment", XMLPayment.ToString) ' TJS 27/09/10 TJS 29/01/14
                End If
            Else
                SalesOrderFacade.ComputeTotals(True, False, False)
                If Not SalesOrderFacade.UpdateDataSet(SalesOrderFacade.CreateParameterSet(SalesOrderFacade.RelatedTables(TransactionType.SalesOrder)), TransactionType.SalesOrder, m_BaseProductName & " Source payment", False) Then ' TJS 11/02/1
                    sTemp = "" ' TJS 27/09/10
                    For iTableLoop = 0 To SalesOrderFacade.RelatedTables(TransactionType.Quote).Length - 1 ' TJS 27/09/10
                        For iRowLoop = 0 To SalesOrderDataset.Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Rows.Count - 1 ' TJS 27/09/10
                            For iColumnLoop = 0 To SalesOrderDataset.Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Columns.Count - 1 ' TJS 27/09/10
                                If SalesOrderDataset.Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then ' TJS 27/09/10
                                    sTemp = sTemp & SalesOrderDataset.Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).TableName & _
                                        "." & SalesOrderDataset.Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Columns(iColumnLoop).ColumnName & ", " & _
                                        SalesOrderDataset.Tables(SalesOrderFacade.RelatedTables(TransactionType.Quote)(iTableLoop)).Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf ' TJS 27/09/10
                                End If
                            Next
                        Next
                    Next

                    Return m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "020", "Failed to save updated Quote/Order " & SalesOrderInvoiceCode & " - " & sTemp, _
                        m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment", XMLPayment.ToString) ' TJS 27/09/10 TJS 29/01/14
                End If
            End If

            xmlResponseDetailNode = New XElement("SourcePayment")
            xmlResponseDetailNode.Value = "Created"
            Return xmlResponseDetailNode

        Catch ex As Exception
            SendErrorEmail(m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - RecordSourcePayment for Order/Invoice Code " & SalesOrderInvoiceCode, ex, XMLPayment.ToString) ' TJS 29/01/14
            xmlResponseDetailNode = New XElement("SourcePayment") ' TJS 29/01/14
            xmlResponseDetailNode.Value = "Error in RecordSourcePayment for Order/Invoice Code " & SalesOrderInvoiceCode & " - " & ex.Message ' TJS 29/01/14
            Return xmlResponseDetailNode ' TJS 29/01/14

        End Try
    End Function
#End Region

#Region " helperCC_AuthorizationStart "
    Private Sub helperCC_AuthorizationStart(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)

        'Me.OnAuthorizationStart(e)
    End Sub
#End Region

#Region " helperCC_AuthorizationFinish "
    Private Sub helperCC_AuthorizationFinish(ByVal sender As Object, ByVal e As System.EventArgs) ' TJS 03/02/09
        '
        'Merge the new receipt to the current receipt dataset gateway.
        Dim helperCC As Interprise.Facade.Customer.CreditCardAuthorizationFacade = DirectCast(sender, Interprise.Facade.Customer.CreditCardAuthorizationFacade) ' TJS 03/02/09
        If helperCC.IsCurrentCardPaymentHasNewReceipt Then ' TJS 03/02/09
            CreditCardReceiptFacade.RefreshPaymentTable(helperCC.NewReceiptDataTable, helperCC.NewPaymentMethodDataTable) ' TJS 03/02/09
            AuthorisationResponse = "Card Authorised" ' TJS 03/02/09
        ElseIf helperCC.IsCurrentReceiptHasNewVoidReceipt Then ' TJS 03/02/09
            CreditCardReceiptFacade.RefreshPaymentTable(helperCC.NewReceiptDataTable, helperCC.NewPaymentMethodDataTable) ' TJS 03/02/09
            CreditCardReceiptFacade.RefreshAllocationTable(helperCC.NewAllocationDataTable, helperCC.NewAllocationCreditDataTable, helperCC.NewAllocationDebitDataTable, helperCC.NewReceiptDetailDataTable, helperCC.NewCreditAllocationDataTable) ' TJS 03/02/09
            AuthorisationResponse = "Card Rejected" ' TJS 03/02/09
        End If
        TransactionFacade.UpdateCardPaymentStatus(SalesOrderDataset.CustomerSalesOrderView(0).SalesOrderCode, CreditCardReceiptDataset, CreditCardReceiptFacade, CreditCardTransactionType, CreditCardReceiptDataset.CustomerCardPayment(0).CardPaymentCode, String.Empty) ' TJS 29/05/09
    End Sub
#End Region

#Region " ConvertCardStartExpiryMonth "
    Private Function ConvertCardStartExpiryMonth(ByVal MonthNumber As String) As String
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 

        Select Case CInt(MonthNumber)
            Case 1
                Return "Jan"
            Case 2
                Return "Feb"
            Case 3
                Return "Mar"
            Case 4
                Return "Apr"
            Case 5
                Return "May"
            Case 6
                Return "Jun"
            Case 7
                Return "Jul"
            Case 8
                Return "Aug"
            Case 9
                Return "Sep"
            Case 10
                Return "Oct"
            Case 11
                Return "Nov"
            Case 12
                Return "Dec"

            Case Else
                Return ""

        End Select

    End Function
#End Region

#Region " ConvertCardStartExpiryYear "
    Private Function ConvertCardStartExpiryYear(ByVal YearNumber As String) As String
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 03/02/09 | TJS             | 2009.1.04 | Corrected to only treat > 90 as 199x
        '------------------------------------------------------------------------------------------

        If CInt(YearNumber) > 90 Then ' TJS 03/02/09
            Return "19" & (Right("0" & YearNumber, 2)) ' TJS 03/02/09
        Else
            Return "20" & (Right("0" & YearNumber, 2)) ' TJS 03/02/09
        End If

    End Function
#End Region

#Region " CreateDiscountCoupon "
    Private WithEvents CouponFacade As Interprise.Facade.Customer.CouponFacade ' TJS 07/06/09
    Private strCouponValidationErrorMessage As String ' TJS 07/06/09

    Public Function CreateDiscountCoupon(ByVal DiscountValue As Decimal, ByVal SalesOrderCode As String, ByVal CustomerCode As String, _
        ByVal CurrencyCode As String, ByVal ExchangeRate As Decimal, ByRef XMLOrder As XDocument, _
       ByRef XMLErrorResponse As XElement) As String ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 07/06/09 | TJS             | 2009.2.10 | Function added 
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 10/06/12 | TJS             | 2012.1.05 | Modified to initialise Coupon start and expiry dates plus CouponComputation as now mandatory in IS 6
        '------------------------------------------------------------------------------------------

        Dim rowCouponCustomer As Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway.CustomerCouponCustomerRow
        Dim strTempValue As String, iLoop As Integer, iColumnLoop As Integer, iRowLoop As Integer

        CouponDataset = New Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway
        CouponFacade = New Interprise.Facade.Customer.CouponFacade(CouponDataset)

        ' NOTE Coupons are calculated as being in base currency, not order currency
        ' create coupon using coupon code of the form SO-xxxxxx_12-34USD
        CouponFacade.AddCoupon("")
        CouponFacade.AssignCouponCode(SalesOrderCode & "_" & Format(DiscountValue / ExchangeRate, "0.00") & CurrencyCode)
        CouponFacade.AssignCouponType("Orders")
        CouponFacade.AssigncheckAnyCustomerFirstUse(1)
        CouponDataset.CustomerSalesCoupon(0).DiscountType = "Amount"
        CouponDataset.CustomerSalesCoupon(0).DiscountAmount = DiscountValue / ExchangeRate
        CouponDataset.CustomerSalesCoupon(0).DiscountPercent = 0
        CouponDataset.CustomerSalesCoupon(0).IncludeAllCustomer = False
        CouponDataset.CustomerSalesCoupon(0).IncludeAllProduct = False
        strTempValue = GetXMLElementText(XMLOrder, GENERIC_XML_ORDER_DISCOUNT_COUPON_DESCRIPTION)
        If strTempValue = "" Then
            strTempValue = "Discount for " & CustomerCode
        End If
        For iLoop = 0 To CouponDataset.CustomerCouponSellingLanguage.Count - 1
            CouponDataset.CustomerCouponSellingLanguage(iLoop).Description = strTempValue
        Next
        CouponDataset.CustomerSalesCoupon(0).ExpirationStartingDate = m_ImportExportConfigFacade.ConvertXMLDate(GetXMLElementText(XMLOrder, GENERIC_XML_ORDER_DATE)) ' TJS 10/06/12
        CouponDataset.CustomerSalesCoupon(0).ExpirationDate = m_ImportExportConfigFacade.ConvertXMLDate(GetXMLElementText(XMLOrder, GENERIC_XML_ORDER_DATE)) ' TJS 10/06/12
        CouponDataset.CustomerSalesCoupon(0).CouponComputation = "Stackable" ' TJS 10/06/12
        rowCouponCustomer = CouponDataset.CustomerCouponCustomer.NewCustomerCouponCustomerRow
        rowCouponCustomer.CouponID = CouponDataset.CustomerSalesCoupon(0).CouponID
        rowCouponCustomer.CustomerCode = CustomerCode
        CouponDataset.CustomerCouponCustomer.AddCustomerCouponCustomerRow(rowCouponCustomer)

        CouponFacade.RemoveUnnecessaryData()

        strCouponValidationErrorMessage = ""
        If CouponFacade.UpdateDataSet(New String()() {New String() {CouponDataset.CustomerSalesCoupon.TableName, CREATECUSTOMERSALESCOUPON, UPDATECUSTOMERSALESCOUPON, DELETECUSTOMERSALESCOUPON}, _
            New String() {CouponDataset.CustomerCouponSellingLanguage.TableName, CREATECUSTOMERCOUPONSELLINGLANGUAGE, UPDATECUSTOMERCOUPONSELLINGLANGUAGE, DELETECUSTOMERCOUPONSELLINGLANGUAGE}, _
            New String() {CouponDataset.CustomerCouponCustomer.TableName, CREATECUSTOMERCOUPONCUSTOMER, UPDATECUSTOMERCOUPONCUSTOMER, DELETECUSTOMERCOUPONCUSTOMER}, _
            New String() {CouponDataset.CustomerCouponCategory.TableName, CREATECUSTOMERCOUPONCATEGORY, UPDATECUSTOMERCOUPONCATEGORY, DELETECUSTOMERCOUPONCATEGORY}, _
            New String() {CouponDataset.CustomerCouponDepartment.TableName, CREATECUSTOMERCOUPONDEPARTMENT, UPDATECUSTOMERCOUPONDEPARTMENT, DELETECUSTOMERCOUPONDEPARTMENT}, _
            New String() {CouponDataset.CustomerCouponManufacturer.TableName, CREATECUSTOMERCOUPONMANUFACTURER, UPDATECUSTOMERCOUPONMANUFACTURER, DELETECUSTOMERCOUPONMANUFACTURER}, _
            New String() {CouponDataset.CustomerCouponProduct.TableName, CREATECUSTOMERCOUPONPRODUCT, UPDATECUSTOMERCOUPONPRODUCT, DELETECUSTOMERCOUPONPRODUCT}}, _
            TransactionType.None, "Create Discount Coupon", False) Then
            Return CouponDataset.CustomerSalesCoupon(0).CouponCode

        Else
            For iRowLoop = 0 To CouponDataset.CustomerSalesCoupon.Rows.Count - 1
                For iColumnLoop = 0 To CouponDataset.CustomerSalesCoupon.Columns.Count - 1
                    If CouponDataset.CustomerSalesCoupon.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                        strCouponValidationErrorMessage = strCouponValidationErrorMessage & CouponDataset.CustomerSalesCoupon.TableName & "." & CouponDataset.CustomerSalesCoupon.Columns(iColumnLoop).ColumnName & ", " & CouponDataset.CustomerSalesCoupon.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf
                    End If
                Next
            Next
            For iRowLoop = 0 To CouponDataset.CustomerCouponSellingLanguage.Rows.Count - 1
                For iColumnLoop = 0 To CouponDataset.CustomerCouponSellingLanguage.Columns.Count - 1
                    If CouponDataset.CustomerCouponSellingLanguage.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                        strCouponValidationErrorMessage = strCouponValidationErrorMessage & CouponDataset.CustomerCouponSellingLanguage.TableName & "." & CouponDataset.CustomerCouponSellingLanguage.Columns(iColumnLoop).ColumnName & ", " & CouponDataset.CustomerCouponSellingLanguage.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf
                    End If
                Next
            Next
            For iRowLoop = 0 To CouponDataset.CustomerCouponCustomer.Rows.Count - 1
                For iColumnLoop = 0 To CouponDataset.CustomerCouponCustomer.Columns.Count - 1
                    If CouponDataset.CustomerCouponCustomer.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                        strCouponValidationErrorMessage = strCouponValidationErrorMessage & CouponDataset.CustomerCouponCustomer.TableName & "." & CouponDataset.CustomerCouponCustomer.Columns(iColumnLoop).ColumnName & ", " & CouponDataset.CustomerCouponCustomer.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf
                    End If
                Next
            Next
            For iRowLoop = 0 To CouponDataset.CustomerCouponCategory.Rows.Count - 1
                For iColumnLoop = 0 To CouponDataset.CustomerCouponCategory.Columns.Count - 1
                    If CouponDataset.CustomerCouponCategory.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                        strCouponValidationErrorMessage = strCouponValidationErrorMessage & CouponDataset.CustomerCouponCategory.TableName & "." & CouponDataset.CustomerCouponCategory.Columns(iColumnLoop).ColumnName & ", " & CouponDataset.CustomerCouponCategory.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf
                    End If
                Next
            Next
            For iRowLoop = 0 To CouponDataset.CustomerCouponDepartment.Rows.Count - 1
                For iColumnLoop = 0 To CouponDataset.CustomerCouponDepartment.Columns.Count - 1
                    If CouponDataset.CustomerCouponDepartment.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                        strCouponValidationErrorMessage = strCouponValidationErrorMessage & CouponDataset.CustomerCouponDepartment.TableName & "." & CouponDataset.CustomerCouponDepartment.Columns(iColumnLoop).ColumnName & ", " & CouponDataset.CustomerCouponDepartment.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf
                    End If
                Next
            Next
            For iRowLoop = 0 To CouponDataset.CustomerCouponManufacturer.Rows.Count - 1
                For iColumnLoop = 0 To CouponDataset.CustomerCouponManufacturer.Columns.Count - 1
                    If CouponDataset.CustomerCouponManufacturer.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                        strCouponValidationErrorMessage = strCouponValidationErrorMessage & CouponDataset.CustomerCouponManufacturer.TableName & "." & CouponDataset.CustomerCouponManufacturer.Columns(iColumnLoop).ColumnName & ", " & CouponDataset.CustomerCouponManufacturer.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf
                    End If
                Next
            Next
            For iRowLoop = 0 To CouponDataset.CustomerCouponProduct.Rows.Count - 1
                For iColumnLoop = 0 To CouponDataset.CustomerCouponProduct.Columns.Count - 1
                    If CouponDataset.CustomerCouponProduct.Rows(iRowLoop).GetColumnError(iColumnLoop) <> "" Then
                        strCouponValidationErrorMessage = strCouponValidationErrorMessage & CouponDataset.CustomerCouponProduct.TableName & "." & CouponDataset.CustomerCouponProduct.Columns(iColumnLoop).ColumnName & ", " & CouponDataset.CustomerCouponProduct.Rows(iRowLoop).GetColumnError(iColumnLoop) & vbCrLf
                    End If
                Next
            Next

            XMLErrorResponse = m_ImportExportConfigFacade.BuildXMLErrorResponseNodeAndEmail("Error", "028", "Failed to save Coupon - " & strCouponValidationErrorMessage, _
                m_ImportExportConfigFacade.SourceConfig, "ImportExportProcessFacade - CreateDiscountCoupon", XMLOrder.ToString)
            Return ""

        End If

    End Function

    Private Sub CouponFacade_InvalidatedOnSaving(ByVal sender As Object, ByVal errorMessage As String) Handles CouponFacade.InvalidatedOnSaving

        strCouponValidationErrorMessage = errorMessage & vbCrLf

    End Sub
#End Region

#Region " GetPriceBeforeTax "
    Public Function GetPriceBeforeTax(ByRef TaxFacade As Interprise.Facade.Base.TaxFacade, ByRef TaxSchemeDataset As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway, _
        ByRef TransactionTaxDataTable As System.Data.DataTable, ByVal ItemOrFreightCode As String, ByVal LineNum As Integer, _
        ByVal Quantity As Decimal, ByVal ValueIncludingTax As Decimal, ByVal TaxCode As String, ByVal CurrencyCode As String, _
        ByVal ExchangeRate As Decimal, ByVal DocumentCode As String, ByVal FreightNotItem As Boolean) As Decimal
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 07/06/09 | TJS             | 2009.2.10 | Function added 
        ' 18/12/09 | TJS             | 2009.3.12 | Corrected calculation error which occurs if Quantity > 1
        ' 26/09/12 | TJS             | 2012.1.15 | Modified to correct rounding on tax value
        '------------------------------------------------------------------------------------------

        Dim detailRows() As Interprise.Framework.Base.DatasetGateway.TaxSchemeDatasetGateway.SystemTaxSchemeDetailViewRow
        Dim TaxValue As Interprise.Facade.Base.TaxFacade.TaxValue, decPriceBeforeTax As Decimal, decLastDifference As Decimal
        Dim index As Integer, bLastCalcRoundedLow As Boolean, bLastCalcRoundedHigh As Boolean

        ' set starting value for calculation
        decPriceBeforeTax = RoundDecimalValue(ValueIncludingTax * CDec(0.75), 4) ' TJS 18/12/09
        decLastDifference = ValueIncludingTax - decPriceBeforeTax
        bLastCalcRoundedLow = False
        bLastCalcRoundedHigh = False

        ReDim detailRows(TaxSchemeDataset.SystemTaxSchemeDetailView.Select("TaxCode = '" & TaxCode & "'").Length - 1)
        index = 0
        'Get the detail rows for this tax code.
        For detailRowIndex As Integer = 0 To TaxSchemeDataset.SystemTaxSchemeDetailView.Count - 1
            If TaxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex).TaxCode.ToUpper = TaxCode.ToUpper Then
                detailRows(index) = TaxSchemeDataset.SystemTaxSchemeDetailView(detailRowIndex)
                index += 1
            End If
        Next

        Do While True
            ' now calculate Sales Tax (VAT)- get tax values
            If FreightNotItem Then
                TaxValue = TaxFacade.CalculateTransactionTax(TaxCode, RoundDecimalValue(decPriceBeforeTax * Quantity), RoundDecimalValue(decPriceBeforeTax * Quantity) * ExchangeRate, _
                  ItemOrFreightCode, DocumentCode, detailRows, TransactionTaxDataTable, CurrencyCode, ExchangeRate) ' TJS 18/12/09
            Else
                TaxValue = TaxFacade.CalculateItemTax(TaxCode, RoundDecimalValue(decPriceBeforeTax), RoundDecimalValue(decPriceBeforeTax) * ExchangeRate, _
                    ItemOrFreightCode, LineNum, DocumentCode, detailRows, TransactionTaxDataTable, Quantity, RoundDecimalValue(decPriceBeforeTax * Quantity), _
                    RoundDecimalValue(decPriceBeforeTax * Quantity * ExchangeRate), CurrencyCode, ExchangeRate) ' TJS 18/12/09
            End If
            ' is tax calculation complete i.e. price before tax + tax = price including tax
            If RoundDecimalValue(RoundDecimalValue(decPriceBeforeTax * Quantity) + TaxValue.taxAmount) = RoundDecimalValue(ValueIncludingTax * Quantity) Then ' TJS 18/12/09 TJS 26/09/12
                ' yes
                Return RoundDecimalValue(decPriceBeforeTax, 4) ' TJS 18/12/09

            ElseIf RoundDecimalValue(RoundDecimalValue(decPriceBeforeTax * Quantity) + TaxValue.taxAmount) = RoundDecimalValue((ValueIncludingTax * Quantity) + CDec(0.01)) Then ' TJS 18/12/09 TJS 26/09/12
                ' no, tax calculation gives rounded value which is 1 penny etc too high
                ' was last calculation rounded too low i.e. exact value not possible ?
                If bLastCalcRoundedLow Then
                    ' yes, use lower price
                    Return RoundDecimalValue(decPriceBeforeTax - decLastDifference, 4) ' TJS 18/12/09

                Else
                    ' no, reduce price and re-calculate unless difference becomes too small
                    decLastDifference = RoundDecimalValue(decLastDifference / 2, 4) ' TJS 18/12/09
                    If decLastDifference < 0.0001 Then ' TJS 18/12/09
                        ' diference too small to use, use last price
                        Return RoundDecimalValue(decPriceBeforeTax, 4) ' TJS 18/12/09
                    Else
                        decPriceBeforeTax = decPriceBeforeTax - decLastDifference ' TJS 18/12/09
                    End If
                    bLastCalcRoundedLow = False ' TJS 18/12/09
                    bLastCalcRoundedHigh = True
                End If

            ElseIf RoundDecimalValue(RoundDecimalValue(decPriceBeforeTax * Quantity) + TaxValue.taxAmount) = RoundDecimalValue((ValueIncludingTax * Quantity) - CDec(0.01)) Then ' TJS 18/12/09 TJS 26/09/12
                ' no, tax calculation gives rounded value which is 1 penny etc too low
                ' was last calculation rounded too high i.e. exact value not possible ?
                If bLastCalcRoundedHigh Then
                    ' yes, use lower price
                    Return RoundDecimalValue(decPriceBeforeTax, 4) ' TJS 18/12/09

                Else
                    ' no, increase price and re-calculate
                    decLastDifference = RoundDecimalValue(decLastDifference / 2, 4) ' TJS 18/12/09
                    If decLastDifference < 0.0001 Then ' TJS 18/12/09
                        ' diference too small to use, use last price
                        Return RoundDecimalValue(decPriceBeforeTax, 4) ' TJS 18/12/09

                    Else
                        decPriceBeforeTax = decPriceBeforeTax + decLastDifference ' TJS 18/12/09
                    End If
                    bLastCalcRoundedLow = True
                    bLastCalcRoundedHigh = False ' TJS 18/12/09
                End If

            ElseIf RoundDecimalValue(RoundDecimalValue(decPriceBeforeTax * Quantity) + TaxValue.taxAmount) > RoundDecimalValue(ValueIncludingTax * Quantity) Then ' TJS 18/12/09 TJS 26/09/12
                ' no, tax calculation gives rounded value which is too high
                ' reduce price and re-calculate
                decLastDifference = RoundDecimalValue(decLastDifference / 2, 4) ' TJS 18/12/09
                If decLastDifference < 0.0001 Then ' TJS 18/12/09
                    ' diference too small to use, use last price
                    Return RoundDecimalValue(decPriceBeforeTax, 4) ' TJS 18/12/09

                Else
                    decPriceBeforeTax = decPriceBeforeTax - decLastDifference
                    bLastCalcRoundedLow = False ' TJS 18/12/09
                    bLastCalcRoundedHigh = True ' TJS 18/12/09
                End If

            Else
                ' no, tax calculation gives rounded value which is too low
                ' increase price and re-calculate
                decLastDifference = RoundDecimalValue(decLastDifference / 2, 4) ' TJS 18/12/09
                If decLastDifference < 0.0001 Then ' TJS 18/12/09
                    ' diference too small to use, use last price
                    Return RoundDecimalValue(decPriceBeforeTax, 4) ' TJS 18/12/09

                Else
                    decPriceBeforeTax = decPriceBeforeTax + decLastDifference
                    bLastCalcRoundedLow = True ' TJS 18/12/09
                    bLastCalcRoundedHigh = False ' TJS 18/12/09
                End If
            End If
        Loop

    End Function
#End Region

#Region " GetXMLElementText "
    Public Function GetXMLElementText(ByVal XMLDoc As XElement, ByVal ElementName As String, Optional ByRef XMLNSMan As XmlNamespaceManager = Nothing) As String ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Return m_ImportExportConfigFacade.GetXMLElementText(XMLDoc, ElementName, XMLNSMan) ' TJS 02/12/11

    End Function

    Public Function GetXMLElementText(ByVal XMLDoc As XDocument, ByVal ElementName As String, Optional ByRef XMLNSMan As XmlNamespaceManager = Nothing) As String
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 02/12/11 | TJS             | 2011.2.00 | Function added
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Return m_ImportExportConfigFacade.GetXMLElementText(XMLDoc, ElementName, XMLNSMan)

    End Function
#End Region

#Region " GetXMLElementListCount "
    Public Function GetXMLElementListCount(ByRef XMLElementList As System.Collections.Generic.IEnumerable(Of XElement)) As Integer
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 02/12/11 | TJS             | 2011.2.00 | Function added
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Return Me.m_ImportExportConfigFacade.GetXMLElementListCount(XMLElementList)

    End Function

#End Region

#Region " GetXMLElementAttribute "
    Public Function GetXMLElementAttribute(ByVal XMLDoc As XElement, ByVal ElementName As String, ByVal AttributeName As String) As String ' TJS 02/12/11

        Return m_ImportExportConfigFacade.GetXMLElementAttribute(XMLDoc, ElementName, AttributeName)

    End Function

    Public Function GetXMLElementAttribute(ByVal XMLDoc As XDocument, ByVal ElementName As String, ByVal AttributeName As String) As String
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 02/12/11 | TJS             | 2011.2.00 | Function added
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Return m_ImportExportConfigFacade.GetXMLElementAttribute(XMLDoc, ElementName, AttributeName)

    End Function
#End Region

#Region " ConvertXMLFromWeb "
    Public Function ConvertXMLFromWeb(ByVal InputString As String) As String

        Return m_ImportExportConfigFacade.ConvertXMLFromWeb(InputString)

    End Function
#End Region

#Region " ConvertXMLDate "
    Public Function ConvertXMLDate(ByVal XMLDateValue As String) As Date
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 19/08/10 | TJS             | 2010.1.00 | function added
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Return Me.m_ImportExportConfigFacade.ConvertXMLDate(XMLDateValue)

    End Function
#End Region

#Region " ConvertEntitiesForXML "
    Public Function ConvertEntitiesForXML(ByVal InputString As String) As String
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 18/03/11 | TJS             | 2011.0.01 | Function added
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Return Me.m_ImportExportConfigFacade.ConvertEntitiesForXML(InputString)

    End Function
#End Region

#Region " TranslateDeliveryMethodToIS "
    Public Function TranslateDeliveryMethodToIS(ByVal SourceCode As String, ByVal SourceDeliveryMethod As String, _
    ByVal SourceDeliveryClass As String, ByRef ShippingMethodGroup As String) As String ' TJS 15/12/09
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 16/09/08 | TJS/CG          | 2008.0.01 | Original 
        ' 15/12/09 | TJS             | 2009.3.09 | Added SourceDeliveryClass to cater for Channel Advisor
        '------------------------------------------------------------------------------------------

        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221.TableName, _
            "ReadLerrynImportExportDeliveryMethods_DEV000221", AT_SOURCE_CODE, SourceCode, AT_SOURCE_DELIVERY_METHOD, SourceDeliveryMethod, _
            AT_SOURCE_DELIVERY_CLASS, SourceDeliveryClass}}, Interprise.Framework.Base.Shared.ClearType.Specific) ' TJS 15/12/09

        If Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221.Count > 0 And SourceDeliveryMethod <> "" Then
            ShippingMethodGroup = Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221(0).ShippingMethodGroup_DEV000221
            Return Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221(0).ShippingMethodCode_DEV000221
        Else
            ShippingMethodGroup = GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD_GROUP)
            Return GetXMLElementText(m_ImportExportConfigFacade.SourceConfig, SOURCE_CONFIG_DEFAULT_SHIPPING_METHOD)
        End If

    End Function
#End Region

#Region " TranslateDeliveryMethodFromIS "
    Public Function TranslateDeliveryMethodFromIS(ByVal SourceCode As String, ByVal ShippingMethod As String, _
        ByRef ShippingMethodGroup As String, Optional ByRef SourceDeliveryMethodCode As String = "", _
        Optional ByRef SourceDeliveryClass As String = "", Optional ByRef SourceDeliveryClassCode As String = "") As String ' TJS 30/12/09
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 05/02/09 | TJS             | 2009.1.05 | Function added 
        ' 30/12/09 | TJS             | 2010.0.00 | Added SourceDeliveryClass etc to cater for Channel Advisor
        ' 22/09/10 | TJS             | 2010.1.01 | Modified to cater for SourceDeliveryClass being a required field even if just an empty string
        '------------------------------------------------------------------------------------------

        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221.TableName, _
            "ReadLerrynImportExportDeliveryMethods_DEV000221", AT_SOURCE_CODE, SourceCode, AT_SHIPPING_METHOD, ShippingMethod, _
            AT_SHIPPING_METHOD_GROUP, ShippingMethodGroup}}, Interprise.Framework.Base.Shared.ClearType.Specific)

        If Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221.Count > 0 And ShippingMethod <> "" Then
            If Not Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221(0).IsSourceDeliveryMethodCode_DEV000221Null Then ' TJS 30/12/09
                SourceDeliveryMethodCode = Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221(0).SourceDeliveryMethodCode_DEV000221 ' TJS 30/12/09
            End If
            SourceDeliveryClass = Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221(0).SourceDeliveryClass_DEV000221 ' TJS 30/12/09
            If Not Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221(0).IsSourceDeliveryClassCode_DEV000221Null Then ' TJS 30/12/09
                SourceDeliveryClassCode = Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221(0).SourceDeliveryClassCode_DEV000221 ' TJS 30/12/09
            End If
            Return Me.m_ImportExportDataset.LerrynImportExportDeliveryMethods_DEV000221(0).SourceDeliveryMethod_DEV000221
        Else
            Return ""
        End If

    End Function
#End Region

#Region " TranslatePaymentTypeToIS "
    Public Function TranslatePaymentTypeToIS(ByVal SourceCode As String, ByVal SourcePaymentType As String, _
        ByVal DefaultSourcePaymentType As String, ByRef DoNotImport As Boolean) As String ' TJS 21/05/13
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -   
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 22/09/10 | TJS             | 2010.1.01 | Function added
        ' 21/05/13 | TJS             | 2013.1.16 | Modified to cater for Do Not Import payment options
        '------------------------------------------------------------------------------------------

        DoNotImport = False ' TJS 21/05/13
        Me.LoadDataSet(New String()() {New String() {Me.m_ImportExportDataset.LerrynImportExportPaymentTypes_DEV000221.TableName, _
            "ReadLerrynImportExportPaymentTypes_DEV000221", AT_SOURCE_CODE, SourceCode, AT_SOURCE_PAYMENT_TYPE, SourcePaymentType}}, _
            Interprise.Framework.Base.Shared.ClearType.Specific)

        If Me.m_ImportExportDataset.LerrynImportExportPaymentTypes_DEV000221.Count > 0 And SourcePaymentType <> "" Then
            If Me.m_ImportExportDataset.LerrynImportExportPaymentTypes_DEV000221(0).DoNotImport_DEV000221 Then ' TJS 21/05/13
                DoNotImport = True ' TJS 21/05/13
                Return DefaultSourcePaymentType ' TJS 21/05/13
            Else
                Return Me.m_ImportExportDataset.LerrynImportExportPaymentTypes_DEV000221(0).PaymentTypeCode_DEV000221
            End If
        Else
            Return DefaultSourcePaymentType
        End If

    End Function
#End Region

#Region " RoundDecimalValue "
    Public Function RoundDecimalValue(ByVal InputValue As Decimal, Optional ByVal DecimalPlacesRequired As Integer = 2) As Decimal
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 26/05/09 | TJS             | 2009.2.08 | Function added
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim strFormat As String

        If DecimalPlacesRequired > 0 Then
            strFormat = "0" & ".0000000000".Substring(0, DecimalPlacesRequired + 1)
        Else
            strFormat = "0"
        End If
        Return CDec(InputValue.ToString(strFormat))

    End Function
#End Region

#Region " SendErrorEmail "
    Public Sub SendErrorEmail(ByVal SourceConfig As XDocument, ByVal ProcedureName As String, ByVal ex As Exception, Optional ByVal XMLSource As String = "") ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    Notifies key parties of code errors
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 21/03/11 | TJS             | 2011.0.02 | Changed to use Config Facade instead of Business Rule to ensure 
        '                                        | latest activation code is loaded for SendErrorEmail function
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 10/06/12 | TJS             | 2012.1.05 | modified to use Error Notification object to simplify facade login/logout
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        m_ImportExportConfigFacade.SendErrorEmail(SourceConfig, ProcedureName, ex, XMLSource) ' TJS 21/03/11

    End Sub
#End Region

#Region " SendSourceErrorEmail "
    Public Sub SendSourceErrorEmail(ByVal SourceConfig As XDocument, ByVal ProcedureName As String, ByVal Message As String, Optional ByVal XMLSource As String = "") ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    Notifies key parties of source errors
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 21/03/11 | TJS             | 2011.0.02 | Changed to use Config Facade instead of Business Rule to ensure 
        '                                        | latest activation code is loaded for SendSourceErrorEmail function
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 10/06/12 | TJS             | 2012.1.05 | modified to use Error Notification object to simplify facade login/logout
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        m_ImportExportConfigFacade.SendSourceErrorEmail(SourceConfig, ProcedureName, Message, XMLSource) ' TJS 21/03/11

    End Sub
#End Region

#Region " SendPaymentErrorEmail "
    Public Sub SendPaymentErrorEmail(ByVal SourceConfig As XDocument, ByVal Message As String) ' TJS 02/12/11
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    Notifies key parties of payment failures
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 19/08/10 | TJS             | 2010.1.00 | Function added
        ' 21/03/11 | TJS             | 2011.0.02 | Changed to use Config Facade instead of Business Rule to ensure 
        '                                        | latest activation code is loaded for SendSourceErrorEmail function
        ' 02/12/11 | TJS             | 2011.2.00 | Modified to use XML.Linq and XML.XPath instead of MSXML2
        ' 10/06/12 | TJS             | 2012.1.05 | modified to use Error Notification object to simplify facade login/logout
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        m_ImportExportConfigFacade.SendPaymentErrorEmail(SourceConfig, Message) ' TJS 21/03/11

    End Sub
#End Region

#Region " WriteLogProgressRecord "
    Public Sub WriteLogProgressRecord(ByVal Message As String)
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 22/02/09 | TJS             | 2009.1.08 | Function added
        ' 21/03/11 | TJS             | 2011.0.02 | Changed to use Config Facade instead of Business Rule to ensure 
        ' 10/06/12 | TJS             | 2012.1.05 | modified to use Error Notification object to simplify facade login/logout
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        m_ImportExportConfigFacade.WriteLogProgressRecord(Message) ' TJS 21/03/11

    End Sub
#End Region

    Public Overrides Function Validate(ByVal row As System.Data.DataRow, ByVal columnName As String) As Boolean
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 05/07/12 | TJS             | 2012.1.08 | Function added
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim bReturnValue As Boolean

        Try
            bReturnValue = MyBase.Validate(row, columnName)
            If bReturnValue Then
                row.SetColumnError(columnName, "")
            End If
            Select Case row.Table.TableName
                Case Me.m_ImportExportDataset.LerrynImportExportAmazonSettlement_DEV000221.TableName
                    bReturnValue = Me.m_ImportExportRule.ValidateLerrynImportExportAmazonSettlement(row, columnName, bReturnValue)

                Case Me.m_ImportExportDataset.LerrynImportExportAmazonSettlementDetail_DEV000221.TableName
                    bReturnValue = Me.m_ImportExportRule.ValidateLerrynImportExportAmazonSettlementDetail(row, columnName, bReturnValue)
                Case Me.m_ImportExportDataset.LerrynImportExportInventoryActionStatus_DEV000221.TableName
                    bReturnValue = Me.m_ImportExportRule.ValidateLerrynImportExportInventoryActionStatus(row, columnName, bReturnValue)

            End Select
            Return bReturnValue

        Catch ex As Exception
            Interprise.Presentation.Base.Message.MessageWindow.Show(ex)

        End Try
    End Function

#End Region

#Region " SetDocumentCode "
    Protected Overrides Sub SetDocumentCode(ByVal transactionType As Interprise.Framework.Base.Shared.Enum.TransactionType)
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        '
        '   Description -    
        '
        ' Amendment Log
        '------------------------------------------------------------------------------------------
        ' Date     | Name            | Vers.     | Description
        '------------------------------------------------------------------------------------------
        ' 05/07/12 | TJS             | 2012.1.08 | Function added
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        Dim iLoop As Integer

        If Me.m_ImportExportDataset.LerrynImportExportAmazonSettlement_DEV000221.Count > 0 Then
            If Me.m_ImportExportDataset.LerrynImportExportAmazonSettlement_DEV000221(0).SettlementCode_DEV000221 = _
               Interprise.Framework.Base.Shared.Const.TEMPORARY_DOCUMENTCODE Then
                Me.m_ImportExportDataset.LerrynImportExportAmazonSettlement_DEV000221(0).SettlementCode_DEV000221 = Me.GenerateDocumentCode("AmazonSettlement")
                For iLoop = 0 To Me.m_ImportExportDataset.LerrynImportExportAmazonSettlementDetail_DEV000221.Count - 1
                    If Me.m_ImportExportDataset.LerrynImportExportAmazonSettlementDetail_DEV000221(iLoop).SettlementCode_DEV000221 = _
                        Interprise.Framework.Base.Shared.Const.TEMPORARY_DOCUMENTCODE Then
                        Me.m_ImportExportDataset.LerrynImportExportAmazonSettlementDetail_DEV000221(iLoop).SettlementCode_DEV000221 = _
                            Me.m_ImportExportDataset.LerrynImportExportAmazonSettlement_DEV000221(0).SettlementCode_DEV000221
                    End If
                Next
            End If
        Else
            MyBase.SetDocumentCode(transactionType)
        End If

    End Sub
#End Region
End Class
#End Region
