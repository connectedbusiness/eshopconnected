'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3607
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3607.
'
Namespace ASPDotNetStorefront
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="AspDotNetStorefront Import WebServiceSoap", [Namespace]:="http://www.aspdotnetstorefront.com/")>  _
    Partial Public Class AspDotNetStorefrontImportWebServiceWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private DoItWSE3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private DoItUsernamePwdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DoItOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Lerryn.Facade.ImportExport.My.MySettings.Default.Lerryn_Facade_ImportExport_AspDotNetStorefront_x0020_Import_x0020_WebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event DoItWSE3Completed As DoItWSE3CompletedEventHandler
        
        '''<remarks/>
        Public Event DoItUsernamePwdCompleted As DoItUsernamePwdCompletedEventHandler
        
        '''<remarks/>
        Public Event DoItCompleted As DoItCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspdotnetstorefront.com/DoItWSE3", RequestNamespace:="http://www.aspdotnetstorefront.com/", ResponseNamespace:="http://www.aspdotnetstorefront.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoItWSE3(ByVal XmlInputRequestString As String) As String
            Dim results() As Object = Me.Invoke("DoItWSE3", New Object() {XmlInputRequestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoItWSE3Async(ByVal XmlInputRequestString As String)
            Me.DoItWSE3Async(XmlInputRequestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoItWSE3Async(ByVal XmlInputRequestString As String, ByVal userState As Object)
            If (Me.DoItWSE3OperationCompleted Is Nothing) Then
                Me.DoItWSE3OperationCompleted = AddressOf Me.OnDoItWSE3OperationCompleted
            End If
            Me.InvokeAsync("DoItWSE3", New Object() {XmlInputRequestString}, Me.DoItWSE3OperationCompleted, userState)
        End Sub
        
        Private Sub OnDoItWSE3OperationCompleted(ByVal arg As Object)
            If (Not (Me.DoItWSE3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoItWSE3Completed(Me, New DoItWSE3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspdotnetstorefront.com/DoItUsernamePwd", RequestNamespace:="http://www.aspdotnetstorefront.com/", ResponseNamespace:="http://www.aspdotnetstorefront.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoItUsernamePwd(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String) As String
            Dim results() As Object = Me.Invoke("DoItUsernamePwd", New Object() {AuthenticationEMail, AuthenticationPassword, XmlInputRequestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoItUsernamePwdAsync(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String)
            Me.DoItUsernamePwdAsync(AuthenticationEMail, AuthenticationPassword, XmlInputRequestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoItUsernamePwdAsync(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String, ByVal userState As Object)
            If (Me.DoItUsernamePwdOperationCompleted Is Nothing) Then
                Me.DoItUsernamePwdOperationCompleted = AddressOf Me.OnDoItUsernamePwdOperationCompleted
            End If
            Me.InvokeAsync("DoItUsernamePwd", New Object() {AuthenticationEMail, AuthenticationPassword, XmlInputRequestString}, Me.DoItUsernamePwdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDoItUsernamePwdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DoItUsernamePwdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoItUsernamePwdCompleted(Me, New DoItUsernamePwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspdotnetstorefront.com/DoIt", RequestNamespace:="http://www.aspdotnetstorefront.com/", ResponseNamespace:="http://www.aspdotnetstorefront.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoIt(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String) As String
            Dim results() As Object = Me.Invoke("DoIt", New Object() {AuthenticationEMail, AuthenticationPassword, XmlInputRequestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoItAsync(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String)
            Me.DoItAsync(AuthenticationEMail, AuthenticationPassword, XmlInputRequestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoItAsync(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String, ByVal userState As Object)
            If (Me.DoItOperationCompleted Is Nothing) Then
                Me.DoItOperationCompleted = AddressOf Me.OnDoItOperationCompleted
            End If
            Me.InvokeAsync("DoIt", New Object() {AuthenticationEMail, AuthenticationPassword, XmlInputRequestString}, Me.DoItOperationCompleted, userState)
        End Sub
        
        Private Sub OnDoItOperationCompleted(ByVal arg As Object)
            If (Not (Me.DoItCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoItCompleted(Me, New DoItCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="AspDotNetStorefront Import WebServiceSoap", [Namespace]:="http://www.aspdotnetstorefront.com/")>  _
    Partial Public Class AspDotNetStorefrontImportWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private DoItWSE3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private DoItUsernamePwdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DoItOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Lerryn.Facade.ImportExport.My.MySettings.Default.Lerryn_Facade_ImportExport_AspDotNetStorefront_x0020_Import_x0020_WebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event DoItWSE3Completed As DoItWSE3CompletedEventHandler
        
        '''<remarks/>
        Public Event DoItUsernamePwdCompleted As DoItUsernamePwdCompletedEventHandler
        
        '''<remarks/>
        Public Event DoItCompleted As DoItCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspdotnetstorefront.com/DoItWSE3", RequestNamespace:="http://www.aspdotnetstorefront.com/", ResponseNamespace:="http://www.aspdotnetstorefront.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoItWSE3(ByVal XmlInputRequestString As String) As String
            Dim results() As Object = Me.Invoke("DoItWSE3", New Object() {XmlInputRequestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoItWSE3Async(ByVal XmlInputRequestString As String)
            Me.DoItWSE3Async(XmlInputRequestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoItWSE3Async(ByVal XmlInputRequestString As String, ByVal userState As Object)
            If (Me.DoItWSE3OperationCompleted Is Nothing) Then
                Me.DoItWSE3OperationCompleted = AddressOf Me.OnDoItWSE3OperationCompleted
            End If
            Me.InvokeAsync("DoItWSE3", New Object() {XmlInputRequestString}, Me.DoItWSE3OperationCompleted, userState)
        End Sub
        
        Private Sub OnDoItWSE3OperationCompleted(ByVal arg As Object)
            If (Not (Me.DoItWSE3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoItWSE3Completed(Me, New DoItWSE3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspdotnetstorefront.com/DoItUsernamePwd", RequestNamespace:="http://www.aspdotnetstorefront.com/", ResponseNamespace:="http://www.aspdotnetstorefront.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoItUsernamePwd(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String) As String
            Dim results() As Object = Me.Invoke("DoItUsernamePwd", New Object() {AuthenticationEMail, AuthenticationPassword, XmlInputRequestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoItUsernamePwdAsync(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String)
            Me.DoItUsernamePwdAsync(AuthenticationEMail, AuthenticationPassword, XmlInputRequestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoItUsernamePwdAsync(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String, ByVal userState As Object)
            If (Me.DoItUsernamePwdOperationCompleted Is Nothing) Then
                Me.DoItUsernamePwdOperationCompleted = AddressOf Me.OnDoItUsernamePwdOperationCompleted
            End If
            Me.InvokeAsync("DoItUsernamePwd", New Object() {AuthenticationEMail, AuthenticationPassword, XmlInputRequestString}, Me.DoItUsernamePwdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDoItUsernamePwdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DoItUsernamePwdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoItUsernamePwdCompleted(Me, New DoItUsernamePwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspdotnetstorefront.com/DoIt", RequestNamespace:="http://www.aspdotnetstorefront.com/", ResponseNamespace:="http://www.aspdotnetstorefront.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoIt(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String) As String
            Dim results() As Object = Me.Invoke("DoIt", New Object() {AuthenticationEMail, AuthenticationPassword, XmlInputRequestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoItAsync(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String)
            Me.DoItAsync(AuthenticationEMail, AuthenticationPassword, XmlInputRequestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoItAsync(ByVal AuthenticationEMail As String, ByVal AuthenticationPassword As String, ByVal XmlInputRequestString As String, ByVal userState As Object)
            If (Me.DoItOperationCompleted Is Nothing) Then
                Me.DoItOperationCompleted = AddressOf Me.OnDoItOperationCompleted
            End If
            Me.InvokeAsync("DoIt", New Object() {AuthenticationEMail, AuthenticationPassword, XmlInputRequestString}, Me.DoItOperationCompleted, userState)
        End Sub
        
        Private Sub OnDoItOperationCompleted(ByVal arg As Object)
            If (Not (Me.DoItCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoItCompleted(Me, New DoItCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DoItWSE3CompletedEventHandler(ByVal sender As Object, ByVal e As DoItWSE3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DoItWSE3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DoItUsernamePwdCompletedEventHandler(ByVal sender As Object, ByVal e As DoItUsernamePwdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DoItUsernamePwdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DoItCompletedEventHandler(ByVal sender As Object, ByVal e As DoItCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DoItCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
