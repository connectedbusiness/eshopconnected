<?xml version="1.0"?>
<doc>
<assembly>
<name>
Interprise.Presentation.Customer
</name>
</assembly>
<members>
<member name="M:Interprise.Presentation.Customer.WPFAgingControl.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Customer.WPFAgingControl">
	<summary>
WPFAgingControl
</summary>
</member><member name="M:Interprise.Presentation.Customer.DailyBarChartControl.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Customer.DailyBarChartControl">
	<summary>
DailyBarChartControl
</summary>
</member><member name="M:Interprise.Presentation.Customer.CumulativeBarChartControl.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Customer.CumulativeBarChartControl">
	<summary>
CumulativeBarChartControl
</summary>
</member><member name="M:Interprise.Presentation.Customer.OverallGeneralPieChartControl.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Customer.OverallGeneralPieChartControl">
	<summary>
OverallGeneralPieChartControl
</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OverAllFigurePieChartControl.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OverAllFigurePieChartControl">
	<summary>
OverAllFigurePieChartControl
</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.AgedAnalysisChart.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.AgedAnalysisChart">
	<summary>
AgedAnalysisChart
</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesAnalysisBarChartControl.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Customer.SalesAnalysisBarChartControl">
	<summary>
SalesAnalysisBarChartControl
</summary>
</member><member name="M:Interprise.Presentation.Customer.AgingAnalysisPieChartControl.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Customer.AgingAnalysisPieChartControl">
	<summary>
AgingAnalysisPieChartControl
</summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Customer.ICustomerShipToClassTemplateInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateDetailControl.ClassTemplateDataset">
	<summary>Gets the class template dataset.</summary>
	<returns> Interprise.Framework.Base.DatasetGateway.ClassTemplateDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateDetailControl.CurrentDataset">
	<summary>Gets the current dataset.</summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateDetailControl.CurrentFacade">
	<summary>Gets the current facade.</summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateDetailControl.IsReadOnly">
	<summary>
 Property to enable/disable controls for editing.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateDetailControl.VGridDetail_FocusedRowChanged(System.Object,DevExpress.XtraVerticalGrid.Events.FocusedRowChangedEventArgs)">
	<summary> Accepts user input for class code or automatically sets default value if the field is blank.</summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> A FocusedRowChangedEventArgs object that contains data related to the event. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateDetailControl.VGridDetail_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary> Check if class code already exists in the database </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> A BaseContainerValidateEditorEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateDetailControl.VSearchComboTax_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary> Filters the list of taxes to be displayed in the VSearchComboTaxScheme depending on the company's country. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateDetailControl.VSearchCombo_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.TransactionType">
	<summary> Property that gets or sets the transaction type </summary>
	<returns> Framework.Base.Shared.Enum.TransactionType </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.AddData(System.String)">
	<summary> Method that adds data to the table in the dataset </summary>
	<remarks> Also sets the default value of the GL Class description in the editor </remarks>
	<param name="documentCode"> The string needed to add data </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.UndoChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method that saves data to the tables in the dataset .</summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.EnableDisableControls">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.ShipToClassTemplateControl_Load(System.Object,System.EventArgs)">
	<summary> Disables some of the menu items in the menu bar when a grid control is displayed for the first time. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ShipToClassTemplate.ShipToClassTemplateControl.PluginContainerBaseDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateDetailControl.ClassTemplateDataset">
	<summary> Property that gets the Class Template dataset </summary>
	<returns> Interprise.Framework.Base.DatasetGateway.ClassTemplateDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateDetailControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateDetailControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateDetailControl.IsReadOnly">
	<summary>
 Property to enable/disable controls for editing.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateDetailControl.VGridDetail_FocusedRowChanged(System.Object,DevExpress.XtraVerticalGrid.Events.FocusedRowChangedEventArgs)">
	<summary> Automatically sets the default class code if there is no user input value. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> A FocusedRowChangedEventArgs object that contains data related to the event. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateDetailControl.VGridDetail_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary> Check if class code already exists in the database </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> A BaseContainerValidateEditorEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateDetailControl.VGridDetail_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 '
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateDetailControl.VSearchCombo_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.IsClosing">
	<summary>
 Property to determine if the current form is closing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.AddData(System.String)">
	<summary>
		<para> Method that adds data to the table in the dataset. </para>
		<para> Also sets the IsNew to true and selects the TabPageDetails as the selected tab page. </para>
	</summary>
	<param name="documentCode"> The string needed to add data </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.UndoChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method that saves data to the tables in the dataset .</summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.EnableDisableControls">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.SalesRepClassTemplateControl_Load(System.Object,System.EventArgs)">
	<summary> Disables some of the menu items in the menu bar when a grid control is displayed for the first time. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.SalesRepClassTemplate.SalesRepClassTemplateControl.PluginContainerBaseDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.Promotion.PromotionForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.Promotion.PromotionForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.Promotion.IInformationInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.Promotion.PromotionControl.PluginContainerBaseDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.Promotion.PromotionControl.PluginContainerBaseDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.Promotion.IPromotionDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.Promotion.PomotionDetailControl.PluginContainerInformation_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.Promotion.PomotionDetailControl.PluginContainerInformationPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.Promotion.IInformationInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.Promotion.PomotionDetailControl.PluginContainerAppSolution_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.Promotion.PomotionDetailControl.PluginContainerAppSolutionPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.Promotion.IApplicableSolutionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.Promotion.PomotionDetailControl.PluginContainerCoupon_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.Promotion.PomotionDetailControl.PluginContainerCouponPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.Promotion.ICouponInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceHistoryControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceHistoryControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceHistoryControl.IsReadOnly">
	<summary>
 Property to enable/disable controls for editing.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceHistoryControl.RefreshList">
	<summary> Reads from the table again to refresh the list in the grid. </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceHistoryControl.GridViewOpeningBalance_CustomDrawCell(System.Object,DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs)">
	<summary> Paints the currency symbols for TotalRate column. </summary>
	<param name="sender"> The event source. Identifies the view that raised the event. </param>
	<param name="e"> A RowCellCustomDrawEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceHistoryControl.paymentTermHyperLinkEdit_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary> Shows the System Manager Company Payment Term Form.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.DisableControls">
	<summary>
 Enable/disable menu commands
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.RefreshList">
	<summary> Method that refreshes the list in the grid </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.ShowNewForm">
	<summary> Method that calls the procedure to move the focus to the new row's first column of the grid in the CustomerDetailControl </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.UndoChanges">
	<summary> Method that calls the procedure to reject changes made in the dataset from CustomerDetailControl </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method that saves data to the tables in the dataset .</summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.PluginContainerOpeningBalance_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerOpeningBalanceControl.PluginContainerHistory_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.TransactionType">
	<summary> Property that gets or sets the TransactionType </summary>
	<returns> Framework.Base.Shared.Enum.TransactionType </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.Focus">
	<summary> Method that sets the focus to BillToName column </summary>
	<returns> True or False </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary> Method that reads the data from the table in the dataset </summary>
	<param name="documentCode"> The string needed to read data. </param>
	<param name="row"> The row that contains the data to be read.</param>
	<param name="clearTableType">
		<para> All - Clears all the previously saved data from the table before saving.</para>
		<para> Specific - Clears the previously saved specific data from the table before saving. </para>
		<para> None - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.RefreshList">
	<summary> Reads from the table again to refresh the list in the grid. </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method that saves data to the tables in the dataset .</summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.SetCustomer(System.Data.DataRow)">
	<summary> Method that calls the procedure to assign the selected BillTo address </summary>
	<param name="customerRow">The datarow where to assign the customer. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.ShowNewForm">
	<summary> Method that moves the focus to the new row's first column </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.UndoChanges">
	<summary> Method that rejects the changes made in the table. </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.ValidateData">
	<summary> Method that calls the procedure to check and validate the fields in Sales Invoice/Credit Memo. </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.SearchComboCustomer_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.GridViewOpeningBalance_InitNewRow(System.Object,DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)">
	<summary> Shows an empty new row in the grid. </summary>
	<param name="sender "> The object that executes the event. </param>
	<param name="e "> The InitNewRowEventArgs class provides the RowHandle property that identifies the handle of the added row. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.GridViewOpeningBalance_InvalidRowException(System.Object,DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs)">
	<summary> Shows a message window when a row fails validation or when it cannot be saved to the data source. </summary>
	<param name="sender"> The event source. Identifies the view that raised the event. </param>
	<param name="e"> A InvalidRowExceptionEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.GridViewOpeningBalance_InvalidValueException(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary> Shows an error message window when a user inputs an invalid value for Route Code.</summary>
	<param name="sender "> The object that executes the event. </param>
	<param name="e"> InvalidValueExceptionEventArgs class provides a Value property that can be used to access the invalid value. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.paymentTermHyperLinkEdit_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary> Shows the System Manager Company Payment Term Form.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.paymentTermHyperLinkEdit_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.OpeningBalance.CustomerDetailControl.GridViewOpeningBalance_CustomDrawCell(System.Object,DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs)">
	<summary> Paints the currency symbols for TotalRate column. </summary>
	<param name="sender"> The event source. Identifies the view that raised the event. </param>
	<param name="e"> A RowCellCustomDrawEventArgs object that contains event data. </param>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateGeneralControl.CustomerGLClassTemplateDataset">
	<summary> Property that gets the CustomerGLClassTemplateDataset </summary>
	<returns> Interprise.Framework.Base.DatasetGateway.Customer.CustomerGLClassTemplateDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateGeneralControl.SetPrimaryFieldReadOnly">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateGeneralControl.AddData(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateGeneralControl.EndCurrentEdit1">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Customer.ICustomerGLCLassTemplateInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateDetailControl.CustomerGLClassTemplateDataset">
	<summary> Property that gets the CustomerGLClassTemplateDataset </summary>
	<returns> Interprise.Framework.Base.DatasetGateway.Customer.CustomerGLClassTemplateDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateDetailControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateDetailControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateDetailControl.IsReadOnly">
	<summary> Property that gets or sets the ReadOnly property of txtClassCode and chkIsActive. </summary>
	<returns> True or False </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.GLClassTemplateGeneralControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.AddData(System.String)">
	<summary> Method that adds data to the table in the dataset </summary>
	<param name="documentCode"> The string needed to add data</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.UndoChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.EnableDisableControls">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.GLClassTemplateControl_Load(System.Object,System.EventArgs)">
	<summary> Disables some of the menu items in the menu bar when a grid control is displayed for the first time. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.PluginContainerBaseDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.PluginContainerBaseDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Customer.ICustomerClassTemplateDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.GLClassTemplate.GLClassTemplateControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Customer.ICustomerGLClassTemplateGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.DeliveryRouteDataSet">
	<summary> Property that gets the DeliveryRouteDataset </summary>
	<returns> Interprise.Framework.Customer.DatasetGateway.DeliveryRouteDataSetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.ShowNewForm">
	<summary> Method that creates a new row in the grid and sets the focus to the first column of the new row. </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.UndoChanges">
	<summary> Mehtod that rejects changes made in the dataset </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.DeliveryRouteGridView_InitNewRow(System.Object,DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)">
	<summary> Shows an empty new row in the grid. </summary>
	<param name="sender "> The object that executes the event. </param>
	<param name="e "> The InitNewRowEventArgs class provides the RowHandle property that identifies the handle of the added row. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.DeliveryRouteGridView_InvalidRowException(System.Object,DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs)">
	<summary> Shows a message window when a row fails validation or when it cannot be saved to the data source. </summary>
	<param name="sender"> The event source. Identifies the view that raised the event. </param>
	<param name="e"> A InvalidRowExceptionEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.DeliveryRouteGridView_InvalidValueException(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary> Shows an error message window when a user inputs an invalid value for Route Code.</summary>
	<param name="sender "> The object that executes the event. </param>
	<param name="e"> InvalidValueExceptionEventArgs class provides a Value property that can be used to access the invalid value. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteGeneralControl.DeliveryRouteGridView_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary> Checks if class code already exists in the database. </summary>
	<param name="sender"> The source of the event.</param>
	<param name="e"> A BaseContainerValidateEditorEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.DeliveryRoute.ICustomerDeliveryRouteInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteControl.CreateDetailControl">
	<summary> Method that creates the DeliveryRouteGeneralControl in the DeliveryRouteControl </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteControl.GetDeliveryRouteGeneralControl(Interprise.Extendable.Customer.Presentation.SystemManager.DeliveryRoute.ICustomerDeliveryRouteDetailInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteControl.LoadDataset(System.String)">
	<summary>
	</summary>
	<param name="DocumentCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteControl.UndoChanges">
	<summary> Method that rejects the changes made in the table. </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method that saves data to the tables in the dataset .</summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DeliveryRoute.DeliveryRouteControl.DeliveryRouteControl_Load(System.Object,System.EventArgs)">
	<summary> Disables some of the menu items in the menu bar when a grid control is displayed for the first time. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DebtorLetter.DebtorLetterForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.DebtorLetter.DebtorLetterDetailControl.IsReadOnly">
	<summary> Property that gets or sets the ReadOnly property of txtClassCode and chkIsActive. </summary>
	<returns> True or False </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DebtorLetter.DebtorLetterControl.AddData(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DebtorLetter.DebtorLetterControl.EnableDisableControls">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DebtorLetter.DebtorLetterControl.UndoChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.DebtorLetter.DebtorLetterControl.PluginContainerBaseDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.DebtorLetter.DebtorLetterControl.PluginContainerBaseDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Customer.ICustomerClassTemplateDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CustomerType.CustomerTypeForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CustomerType.CustomerTypeForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.CustomerType.ICustomerTypeInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CustomerType.CustomerTypeControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CustomerType.CustomerTypeControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CustomerType.CustomerTypeControl.LoadDataSet(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CustomerType.CustomerTypeControl.UndoChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CustomerType.CustomerTypeControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CustomerRanking.CustomerRankingControl.PluginContainerDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CustomerRanking.CustomerRankingForm.PluginContainerCustomerRank_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CustomerCreditCardType.CustomerCreditCardTypeForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CustomerCreditCardType.CustomerCreditCardTypeForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.CustomerCreditCardType.CustomerCreditCardTypeInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardDetailControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardDetailControl.CreditCardDataset">
	<summary> Property that gets and sets the current dataset </summary>
	<returns> Framework.Customer.DatasetGateway.CreditCardDatasetGateway Implements Extendable.Customer.Presentation.SystemManager.CreditCard.ICustomerCreditCardDetailInterface.CustomerCreditCardDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardDetailControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardDetailControl.KeyControls">
	<summary> Property that gets the object txtCardNumber. </summary>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardDetailControl.IsReadOnly">
	<summary> Property that gets or sets the ReadOnly property of txtClassCode and chkIsActive. </summary>
	<returns> True or False </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardDetailControl.cboCustomerName_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.CustomerCreditCardDataset">
	<summary> Property that gets or sets the CustomerCreditCardDataset </summary>
	<returns> Framework.Customer.DatasetGateway.CreditCardDatasetGateway Implements Extendable.Customer.Presentation.SystemManager.CreditCard.ICustomerCreditCardInterface.CustomerCreditCardDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.AddData(System.String)">
	<summary> Method that adds data to the table in the dataset </summary>
	<param name="documentCode"> The string needed to add data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method that saves data to the tables in the dataset .</summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.EnableDisableControls">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.UndoChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.ValidateHttpRequest">
	<summary>
 Edited by Jb Mago 8/11/2015
 Validate credit card gateway of the customer
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.CustomerCreditCardControl_Load(System.Object,System.EventArgs)">
	<summary> Disables some of the menu items in the menu bar when a grid control is displayed for the first time. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.PluginContainerBaseDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCard.CustomerCreditCardControl.PluginContainerBaseDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Customer.ICustomerClassTemplateDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCardGateway.ResponseLogViewer.ResponseLogViewerForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCardGateway.ResponseLogViewer.ResponseLogViewerForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.CreditCardGateway.ResponseLogViewer.IResponseLogViewerInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCardGateway.ResponseLogViewer.ResponseLogViewerControl.PluginContainerBaseDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCardGateway.ResponseLogViewer.ResponseLogViewerControl.PluginContainerBaseDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.CreditCardGateway.ResponseLogViewer.IResponseLogDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCardGateway.ResponseLogViewer.ResponseLogDetailControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCardGateway.ResponseLogViewer.ResponseLogDetailControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.CreditCardGateway.CreditCardGatewayForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.CreditCardGateway.CreditCardGatewayForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SystemManager.CreditCardGateway.ICreditCardGatewayInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.EnableDisableControls">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.AddData(System.String)">
	<summary> Method that adds data to the table in the dataset .</summary>
	<param name="documentCode">The string needed to add data.</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.UndoChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method that saves data to the tables in the dataset .</summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.ClassTemplateControl_Load(System.Object,System.EventArgs)">
	<summary> Disables some of the menu items in the menu bar when a grid control is displayed for the first time. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.PluginContainerBaseDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateControl.PluginContainerBaseDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Customer.ICustomerClassTemplateDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateDetailControl.ClassTemplateDataset">
	<summary> Property that gets the ClassTemplateDataset </summary>
	<returns> Interprise.Framework.Base.DatasetGateway.ClassTemplateDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateDetailControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateDetailControl.CurrentFacade">
	<summary> Property that gets the current facade </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateDetailControl.IsReadOnly">
	<summary>
 Property to enable/disable controls for editing.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateDetailControl.VSearchCombo_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateDetailControl.VGridDetail_FocusedRowChanged(System.Object,DevExpress.XtraVerticalGrid.Events.FocusedRowChangedEventArgs)">
	<summary> Accepts user input for class code or automatically sets default value if the field is blank.</summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> A FocusedRowChangedEventArgs object that contains data related to the event. </param>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateDetailControl.VGridDetail_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SystemManager.ClassTemplate.ClassTemplateDetailControl.VGridDetail_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary> Check if class code already exists in the database </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> A BaseContainerValidateEditorEventArgs object that contains event data. </param>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketGeneralControl.StockAllocationDataset">
	<value>The stock allocation dataset instance used on this control.</value>
	<summary>The stock allocation dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketGeneralControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketGeneralControl.ComputeDate(System.DateTime)">
	<summary> Computes the date depending on paging. </summary>
	<param name="d"> Date to return </param>
	<returns> Date </returns>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketGeneralControl.GetDates(System.String@,System.String@)">
	<summary> Validates the start date and the end date. </summary>
	<param name="startDate"> The start date in string format needed for filtering. </param>
	<param name="endDate"> The end date needed in string format for filtering. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketGeneralControl.LoadGridSettings">
	<summary> Loads the default grid settings. </summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketGeneralControl.SetFilterSettings(System.Data.DataRow[],System.Boolean)">
	<summary>
 Procedure to automatically set the sales orders to be included in this allocation routine
 </summary>
	<param name="ordersToProcess">A jagged array of DataRow containing the orders to be processed for picking.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.StockAllocation.IPrintPickingTicketInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.PrintPickingTicketControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.StockAllocation.IPrintPickingTicketGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationForm.ButtonAutoAllocate_Click(System.Object,System.EventArgs)">
	<summary> Calls for the procedure to allocate. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationForm.ButtonDeallocate_Click(System.Object,System.EventArgs)">
	<summary> Calls for the procedure to deallocate. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationForm.ButtonGo_Click(System.Object,System.EventArgs)">
	<summary> Calls for the procedure to read data. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationForm.ButtonMore_Click(System.Object,System.EventArgs)">
	<summary> Calls for the procedure More(). </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.AllocationForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.StockAllocation.IAllocationInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.CurrentFacade">
	<summary> Property that gets the current facade</summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.IsDateFilterAllDates">
	<summary>  Gets the CRM Filter control IsAllDates property. </summary>
	<returns> True or False </returns>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.SearchBy">
	<summary> Gets the ComboSearchBy Text property. </summary>
	<returns> The string value of ComboSearchBy text. </returns>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.Allocate">
	<summary> Merge datarows and calls for the procedure to automatically allocate stock. </summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.AllocateDeallocateCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.AllocateDeallocateFinalize">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.AutoAllocate(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway)">
	<summary>
	</summary>
	<param name="stockAutoAllocationDataset"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.BeginAllocate(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway)">
	<summary>
	</summary>
	<param name="stockAutoAllocationDataset"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.BeginDeallocate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.Deallocate">
	<summary> Calls for the procedure to deallocate stock. </summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.HandleException(System.Exception)">
	<summary>
	</summary>
	<param name="ex"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.ComputeDate(System.DateTime)">
	<summary> Computes the date depending on paging. </summary>
	<param name="d"> Date to return </param>
	<returns> Date </returns>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.GetDates(System.String@,System.String@)">
	<summary> Validates the start date and the end date. </summary>
	<param name="startDate"> The start date in string format needed for filtering. </param>
	<param name="endDate"> The end date needed in string format for filtering. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.InitializeControl">
	<summary> Initializes items in the combosearchbox, sets panel properties and filter dates. </summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.LoadGridSettings">
	<summary> Loads the default grid settings. </summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.More">
	<summary> Sets the IsMore property to true then extracts data from the table in the database. </summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.LoadDataset">
	<summary> Method use to fetch data from the database and populates the tables specified in the parameters. </summary>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.SetupSearchCombo(System.String,System.String,System.String)">
	<summary> Sets up the SearchComboFrom and SearchComboTo properties. </summary>
	<param name="tableName"> The name of the table where to get the data to display. </param>
	<param name="displayField"> The string needed as display field.</param>
	<param name="filter"> The string needed to filter the data to be displayed. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.SetFilterSettings(System.Data.DataRow[],System.Boolean)">
	<summary>
 Procedure to automatically set the sales orders to be included in this allocation routine
 </summary>
	<param name="ordersToProcess">A jagged array of DataRow containing the orders to be processed for picking.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.ComboSearchBy_SelectedValueChanged(System.Object,System.EventArgs)">
	<summary> Sets up control(s) properties depending on the ComboSearchBy text.</summary>
	<param name="sender"> The source of the event.</param>
	<param name="e"> An EventArgs that contains the event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.GridSalesOrderLineItems_DragOver(System.Object,System.Windows.Forms.DragEventArgs)">
	<summary> The data from the drag source is moved to the drop target. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> A DragEventArgs object specifies any data associated with this event. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.GridSalesOrderLineItems_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
	<summary> The data from the drag source is added in the dataset and displayed in the drop target. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> A DragEventArgs object specifies any data associated with this event. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.GridSalesOrderLineItems_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary> Gets the coordinates of the mouse when clicked where to transfer the focus in the grid.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> A MouseEventArgs that contains the event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.GridSalesOrderLineItems_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary> Begins a drag and drop operation when the left button is pressed in a row where there is an existing data. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> A MouseEventArgs that contains the event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.GridSalesOrderLineItems_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary> Resets the row handle to none. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> A MouseEventArgs that contains the event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.GridViewSalesOrderLineItems_CellValueChanged(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary> Updates changes in the current row. </summary>
	<param name="sender "> The object that executes the event. </param>
	<param name="e "> A CellValueChangedEventArgs object that contains data related to the event. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.Hyperlink_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary> Shows the corresponding forms depending on the links clicked.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> A OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.m_dateFilter_FilterChanged(System.Object,System.EventArgs)">
	<summary> Raises the event when date filter condition is changed. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.RadioGroupCriteria_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary> Enables SearchcomboFrom and SearchcomboTo when the selected index is equal to "Range". </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.RadioGroupCustomerRanking_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary> Enables SpinRankingFrom and SpinRankingTo when the selected index is equal to "Range". </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.SearchComboFrom_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the text value of SearchComboFrom into SearchComboTo if it is blank. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.SearchComboTo_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the text value of SearchComboTo into SearchComboFrom if it is blank. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationGeneralControl.m_facadeStockAllocation_AutoAllocationReservationError(System.Object,Interprise.Framework.Customer.EventArguments.AutoAllocationReservationError)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.AllocationControl.CurrentDataset">
	<summary> Property that gets the current dataset </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationControl.m_inventoryItem_QuantityValueChanged(System.Object,Interprise.Framework.Base.EventArguments.QuantityChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationControl.m_allocationgeneralcontrol_SearchByChanged(System.Object,System.EventArgs)">
	<summary> Shows the ButtonMore button if the dates are filtered and AllocationControl SearchBy property is equal to "Line Item Due Date" or "Overall Ship Date". </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationControl.OnAutoAllocationStarted(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationControl.AllocationControl_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.AllocationControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.StockAllocation.IAllocationGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.StockAllocation.AllocationControl.PluginContainerReservation_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.StockAllocation.AllocationControl.PluginContainerReservationPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.IReservationInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToInformationControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToInformationControl.CurrentFacade">
	<summary> Property that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToInformationControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToInformationControl.SearchComboCountry_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected country to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToInformationControl.SearchComboPostal_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected postal code to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailForm.ShipToDataset">
	<summary> Property that returns IShipToDetailInterface's ShipToDatasetGateway. </summary>
	<returns> ShipToDatasetGateway  </returns>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailForm.LoadData(System.String,System.String,System.String,System.String)">
	<summary> Method that loads the data from the table in the dataset. </summary>
	<param name="customerCode"> String needed to load the data. </param>
	<param name="shipToCode"> String needed to load the data. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailForm.InitializeControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailForm.shipToDetail_IsReadOnlyChanged(System.Object,System.EventArgs)">
	<summary> Disables some of the menu items in the menu bar when a grid control is displayed for the first time. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.DocumentCode">
	<summary> Property that gets or sets the document code and sets the CustomerShipToView rows readonly property to false. </summary>
	<returns> DocumentCode string value. </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.CustomerCode">
	<summary> Property that gets or sets the customer code. </summary>
	<value></value>
	<returns> CustomerCode string value. </returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.CurrentDataset">
	<summary> Propertythat gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.CurrentFacade">
	<summary> Property that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.ShipToDataset">
	<summary> Property that gets or sets the ShipTo dataset. </summary>
	<returns> Framework.Customer.DatasetGateway.ShipToDatasetGateway Implements Extendable.Customer.Presentation.ShipToDetail.IShipToDetailInterface.ShipToDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.TransactionType">
	<summary> Property that gets or sets the transaction type.</summary>
	<returns> Interprise.Framework.Base.Shared.Enum.TransactionType </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.IsReadOnly">
	<summary> Property to enable/disable controls for editing. </summary>
	<returns> True or False </returns>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.ShowNewForm">
	<summary> Shows new record/transaction. </summary>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.LoadDataset(System.String,System.String,System.Boolean,System.String,System.String)">
	<summary> Method use to fetch data from the database and populates the tables specified in the parameters. </summary>
	<param name="p_customerCode"> String needed to read data.</param>
	<param name="p_shipToCode"> String needed to read CRM data. </param>
	<param name="isLoadShipTo">
		<para> True - Adds the CustomerShipToView table. </para>
		<para> False - Doesn't add the CustomerShipToView table. </para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.UpdateDataset(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method use to update the specified tables in the database. </summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.Refresh">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.CreateChildControls(System.String)">
	<summary>
		<para> Method that calls for the procedure to create an instance of SetupControl </para>
		<para> in PluginContainerSetup control and AccountsControl in PluginContainerGLCLass control. </para>
	</summary>
	<param name="tabSenderName"> The tab's name in string format. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.ClearDataset">
	<summary> Clears the dataset if the controls readonly property is true. </summary>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.Find">
	<summary> Shows the Search Form containing the Ship To Details. </summary>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.NewInvoice">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.NewOrder">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.NewQuote">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.TabGroupCustomer_SelectedPageChanged(System.Object,DevExpress.XtraLayout.LayoutTabPageChangedEventArgs)">
	<summary> Extracts the data from the table and displays it to the selected tab page control. </summary>
	<param name="sender"> The event sender. Identifies the tab control that raised the event. </param>
	<param name="e"> A TabPageChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.NewContact">
	<summary>
 Calls for the procedure to add contact data to the table in the database.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.ShipToDetailControl_VisibleChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.ShipToDetailControl.PluginContainerCustomField_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.SetupControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset</returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.SetupControl.CurrentFacade">
	<summary> Property that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.SetupControl.IsReadOnly">
	<summary> Property to enable/disable controls for editing. </summary>
	<returns> True or False </returns>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.SetupControl.OnLinkclick_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary> Shows the appropriate form when clicking the corresponding link.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.SetupControl.OnAddNewValue(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary> Adds new data if it doesn't exists yet in the table. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.SetupControl.cboSpecialCommission_TextChanged(System.Object,System.EventArgs)">
	<summary> Sets the readonly property to true if cboSpecialCommission text is "DEFAULT". </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.SetupControl.cboDefaultContact_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary> Filters the list of contacts to be displayed in the cboDefaultContact. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.HeaderControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.HeaderControl.CurrentFacade">
	<summary> Property that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.HeaderControl.IsReadOnly">
	<summary> Property to enable/disable controls for editing. </summary>
	<returns> True or False </returns>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.HeaderControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.HeaderControl.cboShipToClass_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary> Shows the ShipToClassTemplate form when clicking the link.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.HeaderControl.cboShipToClass_AddNewValue(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary> Shows setup form to add new data if it doesn't exists yet in the table. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.HeaderControl.cboShipToClass_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceFormOld.SalesOrderDataset">
	<summary> Property that gets the Sales Order dataset. </summary>
	<returns> SalesOrderDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceFormOld.SalesOrderFacade">
	<summary> Property that gets the current facade. </summary>
	<returns> Extendable.Customer.Facade.ISalesOrderInterface Implements Extendable.Customer.Presentation.SharedControl.IConvertOrderToInvoiceFormInterface.SalesOrderFacade </returns>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceFormOld.CreateConvertOrderToInvoiceControl">
	<summary>Creates an instance of ConvertOrderToInvoiceControl in ConvertOrderToInvoiceForm. </summary>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceFormOld.InitializeConversion">
	<summary> Calls for the procedure to initialize conversion. </summary>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceFormOld.buttonSelectAll_Click(System.Object,System.EventArgs)">
	<summary> Calls for the procedure to select all the rows in ConvertOrderToInvoiceControl. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceFormOld.buttonSelectNone_Click(System.Object,System.EventArgs)">
	<summary> Calls for the procedure to select none of the rows in ConvertOrderToInvoiceControl. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SetupControl.CurrentDataset">
	<summary> Property that gets the current dataset.</summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SetupControl.CurrentFacade">
	<summary> Property that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SetupControl.IsReadOnly">
	<summary> Property to enable/disable controls for editing. </summary>
	<returns> True or False </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SetupControl.SalesRepDataset">
	<summary> Property that gets the Sales Rep Dataset. </summary>
	<returns> Interprise.Framework.Customer.DatasetGateway.SalesRepDatasetGateway Implements Extendable.Customer.Win.UI.SalesRep.ISetupInterface.SalesRepDataset </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SetupControl.HyperlinkSearchComboSupplier_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to assign default values after selecting from the search combo. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SetupControl.OnLinkclick_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary> Shows appropriate forms when clicking the corresponding links. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SetupControl.OnCombo_AddNewValue(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary> Shows setup forms to add new data in the table. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.Password.PasswordForm.PasswordState">
	<summary>
 Property that gets or sets the PasswordState.
 </summary>
	<returns> Framework.Base.Shared.Enum.PasswordState  </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.Password.PasswordForm.CreateControls">
	<summary>
 Creates an instance of PasswordControl.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.Password.PasswordForm.LoadData(System.Object[])">
	<summary>
 Calls for the procedure to reset password values.
 </summary>
	<param name="p_resetPasswordValues"> The object that contains the value. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.Password.PasswordForm.OnCancel(System.Object,System.EventArgs)">
	<summary>
 Sets the boolean m_isCanceled to true
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.Password.PasswordForm.OnOK(System.Object,System.EventArgs)">
	<summary>
 Sets the boolean m_isCanceled to false.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.Password.PasswordForm.PasswordForm_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Shows a dialog box asking for confirmation while closing the password form.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.Password.PasswordControl.SalesRepDataset">
	<summary>
 Property that gets the Sales Rep Dataset.
 </summary>
	<returns> Interprise.Framework.Customer.DatasetGateway.SalesRepDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.Password.PasswordControl.PasswordState">
	<summary>
 Property that gets the Password state and sets the TextOldPassword and LabelOldPassword visibility property.
 </summary>
	<returns> Interprise.Framework.Base.Shared.Enum.PasswordState </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.Password.PasswordControl.EncryptedNewPassword">
	<summary>
 Property that gets the EncryptedNewPassword.
 </summary>
	<returns> Encrypted New Password in string format.</returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.Password.PasswordControl.IsPasswordValid">
	<summary>
 Checks the validity of the password.
 </summary>
	<returns> True or false </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailForm.SalesRepGroupCode">
	<summary>
 Property that gets the SalesRepGroupCode.
 </summary>
	<returns> SalesRepGroupCode in string format. </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailForm.InitChildControls(System.String)">
	<summary>
 Sets control properties and creates an instance of NewSalesRepDetail wizard control.
 </summary>
	<param name="salesRepGroupName"> The salesRepGroupName in string format.</param>
</member><member name="E:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.IsSearchablePostalChanged">
	<summary>
 Declares public event handlers.
 </summary>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.SalesRepGroupCode">
	<summary>
 Property that gets the SalesRepGroupCode.
 </summary>
	<returns> SalesRepGroupCode in string format.</returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.SalesRepGroupName">
	<summary>
 Property that sets the FindSalesRepGroupNameEditor text.
 </summary>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.CurrentFacade">
	<summary> Pproperty that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.TransactionType">
	<summary>
 Property that gets or sets the transaction type.
 </summary>
	<returns> Framework.Base.Shared.Enum.TransactionType </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.IsAutoAddPostal">
	<summary>
 Property that gets or sets if the system should automatically add default values depending on the postal indicated.
 </summary>
	<returns> True or false </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.AddContact(Interprise.Extendable.Base.Presentation.SharedControl.IContactInterface)">
	<summary>
 Adds new contact to the datarow on the first index of the related tables.
 </summary>
	<param name="defaultContact"> The control that contains the data to add. </param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.AddData(System.String)">
	<summary>
 Create a blank datarow on the first index of the related tables and calls the procedure to validate data.
 </summary>
	<param name="documentCode"> The string documentcode needed to add data. </param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.CreateContact">
	<summary>
 Creates an instance of ContactControl.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.ValidateData(DevExpress.XtraTab.XtraTabPage)">
	<summary>
 Checks for user data input.
 </summary>
	<param name="tabPage"> The tab page containing the data to be validated. </param>
	<returns> True or false </returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.OnLinkclick_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Shows the appropriate forms when clicking the corresponding links.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.OnCombo_AddNewValue(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Shows the appropriate forms where to add new values.
 </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.ClassCodeEditor_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.CountryEditor_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.PostalCodeEditor_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.VendorEditor_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.SearchComboPostalCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.tabWizard_SelectedPageChanged(System.Object,DevExpress.XtraTab.TabPageChangedEventArgs)">
	<summary>
 Calls for procedures and sets object properties when selecting tab pages.
 </summary>
	<param name="sender"> The event sender. Identifies the tab control that raised the event. </param>
	<param name="e "> A TabPageChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.tabWizard_BeforePageDisplayed(System.Object,Interprise.Presentation.Base.ExtendedXtraTabContol.SelectedPageChangingEventArgs)">
	<summary>
 Calls for procedures and sets object properties when selecting tab pages.
 </summary>
	<param name="sender"> The event sender. Identifies the tab control that raised the event. </param>
	<param name="e "> A SelectedPageChangingEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.tabWizard_Finished(System.Object,System.EventArgs)">
	<summary>
		<para> Create Contact if finished without going to contact page. </para>
		<para> Saves Sales Rep. </para>
		<para> Add a new vendor for the sales rep if no vendor code was specified. </para>
		<para> Saves Sales Rep Contact. </para>
	</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.ComboIsWebAccess_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Sets UserNameEditor readonly property and enables PasswordButton if the selected item is ComboIsWebAccess.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.NewSalesRepDetailControl_Load(System.Object,System.EventArgs)">
	<summary>
 Disables the Finish Button and sets the focus to FindSalesRepGroupNameEditor when loading the control.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.tabWizard_RestartWizard(System.Object,Interprise.Presentation.Base.ExtendedXtraTabContol.RestartWizardEventArgs)">
	<summary>
 Clears related datasets and selects the TabPageSetup as the current tab page.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> A RestartWizardEventArgs object that contains event data.</param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.LabelSalesRepGroupCodeEditor_Enter(System.Object,System.EventArgs)">
	<summary>
 Clears the text in LabelSalesRepGroupCodeEditor if its empty or equals to "[To be generated]" when the editor is clicked. 
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.LabelSalesRepGroupCodeEditor_Leave(System.Object,System.EventArgs)">
	<summary>
 Sets the LabelSalesRepGroupCodeEditor text to "[To be generated]" when leaving the editor.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.tabSalesRepGroupInformation_SelectedPageChanged(System.Object,DevExpress.XtraTab.TabPageChangedEventArgs)">
	<summary>
 Calls for the procedure to create an instance of ContactControl and to add contact when TabPageContact is selected.
 </summary>
	<param name="sender"> The event sender. Identifies the tab control that raised the event. </param>
	<param name="e "> A TabPageChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.PasswordButton_Click(System.Object,System.EventArgs)">
	<summary> Checks for the password input if it is new and shows the password form. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.txtContactName_Leave(System.Object,System.EventArgs)">
	<summary>
 Displays the contact name in the editor.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.NewSalesRepDetailControl.SetFocusUponLoad(System.Object,System.EventArgs)">
	<summary>
 Automatically sets the focus on the editor specified in the customer preference
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.HeaderControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.HeaderControl.CurrentFacade">
	<summary> Pproperty that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.HeaderControl.IsReadOnly">
	<summary> Property to enable/disable controls for editing. </summary>
	<returns> True or False </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.HeaderControl.SalesRepDataset">
	<summary>
 Property that gets the Sales Rep dataset.
 </summary>
	<returns> Framework.Customer.DatasetGateway.SalesRepDatasetGateway Implements Extendable.Customer.Win.UI.SalesRep.IHeaderInterface.SalesRepDataset </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.HeaderControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.HeaderControl.GroupClassEditor_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Shows the Sales Rep Class Template Setup Form.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.HeaderControl.GroupClassEditor_AddNewValue(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Shows the Customer Class Template Setup Form where to add new Class Code.
 </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.HeaderControl.GroupClassEditor_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to displays the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.CustomerListControl.SalesRepDataset">
	<summary>
 Property that gets the Sales Rep dataset.
 </summary>
	<returns> Interprise.Framework.Customer.DatasetGateway.SalesRepDatasetGateway </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CustomerListControl.InitializeGrid">
	<summary>
 Initializes gridCustomer columns' caption.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CustomerListControl.LoadGridSettings">
	<summary>
 Loads default grid settings.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CustomerListControl.hypCustomer_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Shows the Customer Search Form.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CustomerListControl.viewCustomer_EndGrouping(System.Object,System.EventArgs)">
	<summary>
 Calls forthe procedure to expand all groups in the grid view.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CustomerListControl.viewCustomer_HideCustomizationForm(System.Object,System.EventArgs)">
	<summary>
  Saves the grid settings and closes the dialog.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardForm.CreateSalesRepCommissionWizardControl">
	<summary>
 Creates an instance of SalesRepCommissionWizardControl in the form.
 </summary>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.CurrentDataset">
	<summary>
 Property that gets the current dataset.
 </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.CurrentFacade">
	<summary> Pproperty that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.TransactionType">
	<summary>
 Property that gets the transaction type.
 </summary>
	<returns> Framework.Base.Shared.Enum.TransactionType </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.AddData(System.String)">
	<summary>
 Create a blank datarow on the first index of the related tables.
 </summary>
	<param name="documentCode"> The string needed to read data.</param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Converts the CommissionPaid column to its corresponding sales rep's supplier currency value
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.tabWizard_SelectedPageChanged(System.Object,DevExpress.XtraTab.TabPageChangedEventArgs)">
	<summary>
 Extracts data from related tables and displays it depending on the tab page selected. 
 </summary>
	<param name="sender"> The event sender. Identifies the tab control that raised the event. </param>
	<param name="e "> A TabPageChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.tabWizard_Finished(System.Object,System.EventArgs)">
	<summary>
 Saves data to the related tables and read data from the table to be displayed in the Supplier's New Bill Purchase Invoice Form.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.rhypSalesRep_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Shows the Customer's Sales Rep Search Form.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.rhypInvoiceCode_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Shows the Customer's Invoice Search Form.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.rhypSalesRepPayment_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Shows the Customer's Sales Rep Search Form.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionWizard.SalesRepCommissionWizardControl.rchkInvoice_EditValueChanging(System.Object,DevExpress.XtraEditors.Controls.ChangingEventArgs)">
	<summary>
 Assigns a value to the specified column within the currently focused row.  
 </summary>
	<param name="sender"> The event sender (typically the BaseEdit descendant). </param>
	<param name="e"> A ChangingEventArgs object containing data related to the event. </param>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailForm.CustomerCode">
	<summary>
 The primary code of the customer being used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the customer being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.UpdateTaxTotal">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.TaxDetailControl_Load(System.Object,System.EventArgs)">
	<summary>
 Calls the method RefreshCurrency and disable all gridview.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SummaryOptionForm.CreateSummaryOptionControl(Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway,Interprise.Facade.Customer.SalesOrderFacade)">
	<summary>
 Creates an instance of SummaryOptionControl.
 </summary>
	<param name="salesOrderDataset"> Returns SalesOrderDatasetGateway </param>
	<param name="salesOrderFacade"> Returns SalesOrderFacade </param>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryOptionControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryOptionControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryOptionControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryControl.TransactionType">
	<summary>
 Property that gets the transaction type and sets control's visibility property.
 </summary>
	<returns> Framework.Base.Shared.Enum.TransactionType </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToForm.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim salesOrderDataset As New SalesOrderDatasetGateway
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade()
 Dim shipToControl As New ShipToControl(salesOrderDataset, salesOrderFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 '
 'Code to assign the TransactionType
 shipToControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 currentTransType = shipToControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new SalesOrderDatasetGateway();
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade();
 ShipToControl shipToControl = new ShipToControl(salesOrderDataset, salesOrderFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Order;
 // 
 // Code to assign the TransactionType
 shipToControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Order;
 currentTransType = shipToControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim salesOrderDataset As New SalesOrderDatasetGateway
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade()
 Dim shipToControl As New ShipToControl(salesOrderDataset, salesOrderFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 '
 'Code to assign the TransactionType
 shipToControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 currentTransType = shipToControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new SalesOrderDatasetGateway();
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade();
 ShipToControl shipToControl = new ShipToControl(salesOrderDataset, salesOrderFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Order;
 // 
 // Code to assign the TransactionType
 shipToControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Order;
 currentTransType = shipToControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.SalesRepContactCode">
	<summary>
 The primary code of the sales rep contact used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the sales rep contact being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.SalesRepGroupCode">
	<summary>
 The primary code of the sales rep group used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the sales rep group being used on the current
 transaction.
 </value>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.LoadGridSettings">
	<summary>
 Loads default grid settings.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.hypSalesRep_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary> Filters the list of sales rep to be displayed in the VSearchComboTaxScheme depending on the VSearchComboCountry value text. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.hypSalesRep_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.hypSalesRep_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>Shows the Sales Rep CRM's Contact Form.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.hypSalesRepGroup_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>Shows the Customer's SalesRep Form.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.hypSalesRepGroup_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary> Filters the list of sales rep group to be displayed in the VSearchComboTaxScheme depending on the VSearchComboCountry value text. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The CancelEventArgs that provides data for a cancelable event. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.hypSalesRepGroup_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.SalesRepCommissionControl_Load(System.Object,System.EventArgs)">
	<summary>
 Sets the currency symbol base on the sales order currency code.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.SalesRepCommissionGridView_CellValueChanged(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Calls for the procedure to compute for salesrep commission when colCommissionPercent value is changed. 
 </summary>
	<param name="sender"> The event sender (the BaseView descendant representing the view that raised the event). </param>
	<param name="e"> A CellValueChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.SalesRepCommissionGridView_HideCustomizationForm(System.Object,System.EventArgs)">
	<summary>
 Saves the grid settings of the form when the "Yes" button of the Message Window is clicked.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesRepCommissionControl.SalesRepCommissionGridView_InitNewRow(System.Object,DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)">
	<summary>
 Adds new row to the SalesRepCommissionGridView.
 </summary>
	<param name="sender"> The event sender. Identifies the view that raised the event. </param>
	<param name="e"> A InitNewRowEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesQuoteForm.WriteLetter">
	<summary>Procedure that loads the Interprise Word Processor.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>WriteLetter</em></strong> method.</para>
		<code lang="VB" title="WriteLetter" description="Load the Interprise Word Processor.">
 Dim quoteForm As New SalesQuoteForm 
 quoteForm.WriteLetter()
    </code>
		<code lang="CS" title="WriteLetter" description="Load the Interprise Word Processor.">
 SalesQuoteForm quoteForm = new SalesQuoteForm();
 quoteForm.WriteLetter();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesQuoteForm.InitializeMenu">
	<summary>
 Initialize menu items.
 </summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderForm.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderForm.SalesOrderControl">
	<value>Returns the instance of the InvoiceControl being used on this form</value>
	<summary>The instance of the SalesOrderControl being used on this form.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderForm.AddOrderFromCustomer(System.String,System.String,System.String,System.String)">
	<summary>
 Creates a new sales order or RMA transaction from the customer information
 provided.
 </summary>
	<example>
		<code lang="VB" title="AddOrderFromCustomer" description="Create a new sales order or RMA from the paramters provided.">
 Dim soForm As New SalesOrderForm
 Dim customerCode As String = "CUST-000001"
 Dim shiptoCode As String = "SHIP-000001"
 Dim contactCode As String = "CCTC-000001"
 Dim contactFullName As String = "Jerry Seinfeld" 
 soForm.AddOrderFromCustomer(customerCode, shiptoCode, contactCode, contactFullName)
    </code>
		<code lang="CS" title="AddOrderFromCustomer" description="Create a new sales order or RMA from the paramters provided.">
 SalesOrderForm soForm = new SalesOrderForm();
 string customerCode = "CUST-000001";
 string shiptoCode = "SHIP-000001";
 string contactCode = "CCTC-000001";
 string contactFullName = "Jerry Seinfeld";
 soForm.AddOrderFromCustomer(customerCode, shiptoCode, contactCode, contactFullName);
    </code>
	</example>
	<param name="customerCode">The primary code of the customer.</param>
	<param name="shiptoCode">The primary code of the customer ship to.</param>
	<param name="contactCode">The primary code of the customer contact</param>
	<param name="contactFullName">The fullname of the customer contact</param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderForm.CreateSalesOrderFromQuote(System.Data.DataRow[])">
	<summary>
 Calls for the procedure to create sales order from quote.
 </summary>
	<param name="quoteRows"> The datarow that contains the data.</param>
	<returns> Boolean(True or false) </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderForm.CreatePurchaseOrder">
	<summary>
 Calls for the procedure to create purchase order.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderForm.InitializeMenu">
	<summary>
 Initialize menu items.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderForm.BaseForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.RMAForm.RMAControl">
	<value>Returns the instance of the SalesOrderControl being used on this form</value>
	<summary>The instance of the SalesOrderControl being used on this form.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.RMAForm.RMADataset">
	<value>The RMA dataset instance used on this control.</value>
	<summary>The RMA dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.RMAForm.CreateRMAFromInvoice(System.Data.DataRow)">
	<summary>Creates a new RMA transaction from an existing Invoice.</summary>
	<returns>True is successfully created RMA transaction from Invoice</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateRMAFromInvoice</em></strong> method.</para>
		<code lang="VB" title="CreateRMAFromInvoice" description="Create a new RMA transaction from Invoice.">
 Dim rmaForm As New RMAForm
 Dim invoiceRow As DataRow
 Dim isCreated As Boolean 
 isCreated = rmaForm.CreateRMAFromInvoice(invoiceRow)
    </code>
		<code lang="CS" title="CreateRMAFromInvoice" description="Create a new RMA transaction from Invoice.">
 RMAForm rmaForm = new RMAForm();
 DataRow invoiceRow;
 bool isCreated;
 isCreated = rmaForm.CreateRMAFromInvoice(invoiceRow);
    </code>
	</example>
	<requirements>Parameter <em>invoiceRow</em> can't be nothing.</requirements>
	<param name="invoiceRow">The invoice row that will be processed.</param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.RMAForm.WriteLetter">
	<summary>Procedure that loads the Interprise Word Processor.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>WriteLetter</em></strong> method.</para>
		<code lang="VB" title="WriteLetter" description="Load the Interprise Word Processor.">
 Dim rmaForm As New RMAForm 
 rmaForm.WriteLetter()
    </code>
		<code lang="CS" title="WriteLetter" description="Load the Interprise Word Processor.">
 RMAForm quoteForm = new RMAForm();
 rmaForm.WriteLetter();
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ProfitControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ProfitControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.PaymentBreakdownControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.OrderNotesControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.OrderDetailControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.OrderDetailControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.OrderDetailControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.OrderDetailControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim salesOrderDataset As New SalesOrderDatasetGateway
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade()
 Dim orderDetailControl As New OrderDetailControl(salesOrderDataset, salesOrderFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 '
 'Code to assign the TransactionType
 orderDetailControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 currentTransType = orderDetailControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 SalesOrderDatasetGateway salesOrderDataset = new SalesOrderDatasetGateway();
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade();
 OrderDetailControl orderDetailControl = new OrderDetailControl(salesOrderDataset, salesOrderFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 // 
 // Code to assign the TransactionType
 orderDetailControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 currentTransType = orderDetailControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.OrderDetailControl.WarehouseCode">
	<summary>
 The primary code of the warehouse being used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the warehouse being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.OrderDetailControl.IsReadOnly">
	<summary>Property to write enable or disable input controls</summary>
	<value>Returns a boolean value whether the control is read-only or not.</value>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.OrderDetailControl.OntxtOrderNumberValidated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.OrderDetailControl.m_salesOrderFacade_CouponAppliedInvalidOnCurrentOrder(System.String)">
	<summary>
	</summary>
	<param name="message"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.HeaderWarehouseCode">
	<summary>The primary code of the warehouse assigned to the transaction header.</summary>
	<value>
 Returns the primary code of the warehouse assigned to the transaction
 header.
 </value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.IsConverted">
	<summary>Property that</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.IsReadOnly">
	<summary>Property to write enable or disable input controls</summary>
	<value>Returns a boolean value whether the control is read-only or not.</value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.ItemCode">
	<summary>The primary code of the item currently selected on the control.</summary>
	<value>Returns the primary code of the item currently selected on the control.</value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.KitDetailSalesPrice">
	<summary>The sales price value (in customer currency) of the kit item.</summary>
	<value>Returns the sales price value (in customer currency) of the kit item.</value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.SalesPrice">
	<summary>The sales price value (in customer currency) of the item.</summary>
	<value>Returns the sales price value (in customer currency) of the item.</value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.RelatedAvailableQuantity(System.String)">
	<summary>
 Returns the sum of the total quantity order for a single item
 </summary>
	<value>Array Object</value>
	<returns>Returns the sum of the total quantity order for a single item</returns>
	<remarks>Value is used to determine the Stock Level for a single item in an order</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.OriginalRelatedAvailableQuantity(System.String)">
	<summary>
 Returns the sum of the total quantity order for a single item
 </summary>
	<value>Array Object</value>
	<returns>Returns the sum of the total quantity order for a single item</returns>
	<remarks>Value is used to determine the Stock Level for a single item in an order</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.UMInformation">
	<summary>
 Stores in an object array all of the related UM and it's corresponsing qty for items included in the order
 </summary>
	<value>Array Object</value>
	<returns>Array Object</returns>
	<remarks>Element 0 for UMCode and 1 for UMQty</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.CouponDiscountVisibleIndex">
	<summary>
 Property to get/set the column's visible index (colCouponDiscountPercentRate/colCouponDiscountAmountRate)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.AssignQuantityOrdered(System.Data.DataRowView,System.Decimal)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="qtyToShip"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.CloseProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.rcboAccountCode_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 This will handle to delete the value member.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>added by pete.a 06/09/2009

</member><member name="M:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.IsAllowEdit">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.InventoryItemControl.rcboInventoryItem_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
 Event to assign the values of the selected item from the dropdown list to the selected row
 </summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.CommissionControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.BillToControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.BillToControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.BillToControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ApplyCreditControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.AddressesControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.AddressesControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim salesOrderDataset As New SalesOrderDatasetGateway
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade()
 Dim addressControl As New AddressControl(salesOrderDataset, salesOrderFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 '
 'Code to assign the TransactionType
 addressControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 currentTransType = addressControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new SalesOrderDatasetGateway();
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade();
 AddressControl addressControl = new AddressControl(salesOrderDataset, salesOrderFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Order;
 // 
 // Code to assign the TransactionType
 addressControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Order;
 currentTransType = addressControl.TransactionType;
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.AddressesControl.ClearShipToBindings">
	<summary>
 ClearShipToBindings
 </summary>
	<remarks>Will Call change &gt; this will clear all bindings</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.AddressesControl.lblBillToName_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Overides this event to get the updated data pass to txtBillTo directly.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>Added by pete.a 08/25/2009

</member><member name="M:Interprise.Presentation.Customer.SalesOrder.AddressesControl.lblShipToName_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Overides this event to get the updated data pass to txtShipTo directly.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>Added by pete.a 08/25/2009

</member><member name="P:Interprise.Presentation.Customer.SalesOrder.AccountsControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="E:Interprise.Presentation.Customer.Receipt.CreditCardControl.BeforeCreditCardProcess">
	<summary>
 Occurs before Auth/Capture/Void process begins.
 </summary>
	<remarks>To cancel the current credit card process, set e.Cancel parameter to true.</remarks>
</member><member name="E:Interprise.Presentation.Customer.Receipt.CreditCardControl.AfterCreditCardProcess">
	<summary>
 Occurs after Auth/Capture/Void process regardless if the process was successful or not.
 </summary>
	<remarks>The CreditCardProcessed event will be fired if the process completed successfully.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.CreditCardControl.IsProcessing">
	<summary>
 Property that indicates if a current credit card proccess is being executed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.CreditCardControl.IsVoiding">
	<summary>
 Property is set to True when currently voiding a credit card payment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.CreditCardControl.IsReserveAndAllocateReceipt">
	<summary>
 Property to indicate that reserving and allocating receipt(s) is not allowed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.CreditCardControl.PaymentOnProcess">
	<summary>
 Property to indicate the current credit card payment being processed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.CreditCardControl.IsParentTransactionOpen">
	<summary>
 Property to inform this control that the parent transaction(invoice/order) is no longer open(processed/posted/voided)
 </summary>
	<value></value>
	<returns></returns>
</member><member name="M:Interprise.Presentation.Customer.Receipt.CreditCardControl.ProcessCustomCreditCardTransaction(Interprise.Framework.Base.Shared.Enum.CreditCardTransaction)">
	<summary>
	</summary>
	<param name="cardTransaction"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.CreditCardControl.DisableAuthorizeButton(System.Boolean)">
	<summary>
	</summary>
	<param name="enable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.CreditCardControl.ManageAddressControlBindings(System.Boolean)">
	<summary>
	</summary>
	<param name="add"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.CustomerName">
	<summary>
 Returns and sets current CustomerName
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.DefaultAmountPaid">
	<summary>
 Sets DefaultAmountPaid
 </summary>
	<value>Decimal</value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.IsReceiptOnly">
	<summary>
 Property that specifies if the form should show a only receipt form or a receipt form with allocation
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.IsAmendAllocation">
	<summary>
 Property that specifies if the allocation is for amending
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.IsNewAllocation">
	<summary>
 Property that specifies that the allocation is a new one
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.ReceiptDataset">
	<summary>
 Returns the current receipt dataset
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.IsFromCustomerAllocationTab">
	<summary>
 Property that specifies that the selected allocation is from the Customer Allocation tab
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Added By: Blyth L. Kitane    7/15/2009</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.CreateFromSelectedInvoice(System.Data.DataRow[],System.Data.DataRow@)">
	<summary>
 Creates From Selected Invoice. 
 </summary>
	<param name="invoiceRow">invoices to be included in the allocation</param>
	<param name="customerRow">current customer selected</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.CreatePopupNavigator">
	<summary>
 Create menu links for journal
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.CreateRows(System.Data.DataRow)">
	<summary>
 Creates rows. 
 </summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.MainReceiptForm_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.SwitchPage_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.CurrentDataset">
	<summary>
 Property that Gets the Current Dataset
 </summary>
	<value></value>
	<returns>Framework.Base.DatasetComponent.BaseDataset</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.CurrentFacade">
	<summary>
 Property that Gets/Sets the Receipt Facade
 </summary>
	<value></value>
	<returns> Extendable.Base.Facade.IBaseInterface</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.ReceiptDataset">
	<summary>
 Property that Gets/Sets the Receipt Dataset
 </summary>
	<value></value>
	<returns>Framework.Customer.DatasetGateway.ReceiptDatasetGateway</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.IsReadOnly">
	<summary>
 Property to enable/disable controls for editing.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.FormTransactionType">
	<summary>
 Property to read or write Framework.Base.Shared.Enum.TransactionType
 </summary>
	<value></value>
	<returns>Framework.Base.Shared.Enum.TransactionType</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.CustomerRow">
	<summary>
 Property that Gets/Sets the customerRow
 </summary>
	<value></value>
	<returns>System.Data.DataRow</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.AllocationCode">
	<summary>
 Property that Gets/Sets the allocationCode
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.IsLoadPrevAllocation">
	<summary>
 Property that specifies if the form is loading a previous allocation
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.HasAllocations">
	<summary>
 Checks the debit rows if any allocation has been made against.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.LoadDataset">
	<summary>
 Method use to fetch data from the database and populates the tables specified in the parameters.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.CreateDebitRows(System.Data.DataRow)">
	<summary>
 Method use to create the section control and attached them to the main control. 
 </summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.UpdateAllocationDebit">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.ValidateInput(System.Int32)">
	<summary>
 Validates user data input.
 </summary>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.LoadGridSettings(System.Windows.Forms.Form)">
	<summary>
 Loads default grid settings.
 </summary>
	<param name="ParentForm"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.UpdateSummary">
	<summary>
 Calls for the procedure to update total summary.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.gvwAllocationDebit_CellValueChanging(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.DebitsControl.gvwAllocationDebit_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.CurrentFacade">
	<summary>
 Property that Gets/Sets the Receipt Facade
 </summary>
	<value></value>
	<returns> Extendable.Base.Facade.IBaseInterface</returns>
	<remarks>'Added By: Blyth L. Kitane   11/10/2009   'Canadian Taxation 4.3.3-4.3.4</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.IsReadOnly">
	<summary>
 Property to enable/disable controls for editing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.IsAmendAllocation1">
	<summary>
 Sets the options for the grid if it is for amendment
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.FormTransactionType">
	<summary>
 Property to read or write Framework.Base.Shared.Enum.TransactionType
 </summary>
	<value></value>
	<returns>Framework.Base.Shared.Enum.TransactionType</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.CreateCreditRows(System.Data.DataRow)">
	<summary>
 Method use to create the section control and attached them to the main control. 
 </summary>
	<param name="customerRow">customer row from which to get the credits</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.LoadGridSettings(System.Windows.Forms.Form)">
	<summary>
 Loads default grid settings.
 </summary>
	<param name="ParentForm"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.ValidateInput(System.Int32)">
	<summary>
 Validates user data input.
 </summary>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.AllocatedCredit(System.Decimal,System.Decimal)">
	<summary>
 Allocates credit
 </summary>
	<param name="maxAllocatedDebit"></param>
	<param name="maxAllocatedDebitRate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.HideNewRow">
	<summary>
 Hides the new row.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.OnMaxAllocatedCreditChanged(System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="allocated"></param>
	<param name="allocatedrate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.SetColumnValue(System.Data.DataRow,System.String,System.Object)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="columnName"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.UpdateSelected(System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="selected"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.SetGridColumnSelected(System.String,System.Boolean,System.Decimal)">
	<summary>
	</summary>
	<param name="creditCode"></param>
	<param name="selected"></param>
	<param name="amount"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.SetGridColumnSelected(System.String,System.Boolean,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="creditCode"></param>
	<param name="selected"></param>
	<param name="amount"></param>
	<param name="amountModified"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.ChangeFieldBinding">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.gvwAllocationCredit_CustomDrawFooterCell(System.Object,DevExpress.XtraGrid.Views.Grid.FooterCellCustomDrawEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.gvwAllocationCredit_CellValueChanged(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.gvwAllocationCredit_CellValueChanging(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.gvwAllocationCredit_InvalidValueException(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.gvwAllocationCredit_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.AllocateControl.gvwAllocationCredit_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.NewProspect.NewProspectControl.SearchComboCountry_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources._16px_ApplyDiscount">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources._16px_ApplyEmail">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources._16px_CalculateTax">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources._16px_ClearEmail">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources._16px_CopyEmail">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources._16px_LoyaltyPoint">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.accept">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.AccountingViewJournalLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.AccountingViewJournalSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.add_payment">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Address_Verification">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Address_Verification1">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.apply_credit">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ApplyDiscount">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ApplyEmail">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ArrowDownCenter">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ArrowDownCircle">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.auto_allocate">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.AutoAllocateFreeInventoryStockBy14">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.AutoAllocateLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.AutoAllocateSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Calculate_Tax">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CalculateTax_32px">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CardOnFileSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CCAuthCaptureSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CCAuthorizeSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CCCaptureSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CCForceSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CCSaleSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CCSwipeSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CCVerballyAuthorizeSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CCVoidSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ClearEmail">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Close">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CloseSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Convert_Sales_Invoice">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Convert_to_Credit_memo">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.convert_to_customer">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Convert_To_RMA">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Convert_To_Sales_Order">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ConvertToCreditMemoLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ConvertToRMALarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ConvertToSalesInvoiceLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CopyEmail">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Create_Dropship_Order">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Create_excel_template">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Create_Purchase_Order">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Create_refund">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CreateDropShipLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CreateExcelTemplate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CreditCardChargeSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CreditCardNumberSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Criteria">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CriteriaLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMNewActivityLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMNewCaseLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMNewCaseSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMNewContactLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMNewDocumentSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMNewNotesLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMNewOpportunityLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMNewOpportunitySmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CRMWriteEmailLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Customer_Details">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CustomerDetailsLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.CustomerDetailsSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.DeallocateLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.DeallocateStockBy14">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Dealocate">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.DeleteLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.DeleteSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Duplicate_sales_order">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Duplicate_Sales_Quote">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.DuplicateSalesOrderLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.DuplicateSalesQuote">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Export">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ExportBudgetForecast">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ExportPriceList">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Fax">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.FindLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.FindSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Forward">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Freight_Quote">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Gift_certificate">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.GoLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.GoogleCheckout">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Import">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Import_Sales_Order">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Import_Sales_Quote">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ImportBudgetForecast">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ImportPriceList">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ImportSalesOrderLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ImportSalesQuoteLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ItemLookup">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ItemLookup_16px">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Loyalty_adjustment">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.loyalty_points">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.LoyaltyPoint">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.MultiSelectionSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Activity">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Case">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Contact">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Documents">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Invoice">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Mail">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_mail_message">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Note">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Opportunity">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Quote">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.New_Sales_Order">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewFaxSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewInvoiceSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewPayment">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewPayment16">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewQuoteSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewSalesOrderLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewSalesOrderSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewShipTo">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NewSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.NoIconLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.OptionalSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.PayPalLogo">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.PrintLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.PrintPayment">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.PrintPayment16">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.PrintPreviewSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.PrintSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Process">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Product_Lookup">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.PU_PD">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.RateQuoteLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.RateQuoteSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ReAuthorizeSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.RefundCreditCardSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.RequiredSelectionSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SaveAndCloseSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SaveAndNewSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SaveAndPostSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SaveLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SavePayment">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SavePayment16">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SaveSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SearchableSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.select_all">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.select_none">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SelectAllLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SelectAllSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SelectNoneLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SelectNoneSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Send_Statement">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SendCopyInvoiceLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SendCopyInvoiceSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SetPromisedDateLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SetPromisedDateSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SupplierCreatePurchaseOrderLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.SupplierCreatePurchaseOrderSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.UndoLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.UndoPayment">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.UndoPayment16">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.UndoSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.VerifyAddress">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.View_Journal">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.view_payment">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Void">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Void_Check">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.VoidCheckLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.VoidCheckSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.VoidLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.VoidPayment">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.VoidPayment16">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.VoidSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.Write_letter">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.zoom">
	<summary>
  Looks up a localized resource of type DevExpress.Utils.Svg.SvgImage.
</summary>
</member><member name="P:Interprise.Presentation.Customer.My.Resources.Resources.ZoomSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:Interprise.Presentation.Customer.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.TaxDetailForm.IsFreightPageVisible">
	<summary>Property that shows or hide the Feight page.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>IsFreightPageVisible</em></strong> method.</para>
		<code lang="VB" title="IsFreightPageVisible" description="Show or hide the Freight page on the control.">
 Dim taxDetForm As New TaxDetailForm
 Dim isFreightVisible As Boolean = True
 taxDetForm.IsFreightPageVisible = valisFreightVisibleue
    </code>
		<code lang="CS" title="IsFreightPageVisible" description="Show or hide the Freight page on the control.">
 TaxDetailForm taxDetForm = new TaxDetailForm();
 bool isFreightVisible = true;
 taxDetForm.IsFreightPageVisible = valisFreightVisibleue;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.TaxDetailForm.CustomerCode">
	<summary>
 The primary code of the customer being used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the customer being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.Invoice.TaxDetailControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.TaxDetailControl.IsFreightPageVisible">
	<summary>Property that shows or hide the Feight page.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>IsFreightPageVisible</em></strong> method.</para>
		<code lang="VB" title="IsFreightPageVisible" description="Show or hide the Freight page on the control.">
 Dim taxDetControl As New TaxDetailControl
 Dim isFreightVisible As Boolean = True
 taxDetControl.IsFreightPageVisible = valisFreightVisibleue
    </code>
		<code lang="CS" title="IsFreightPageVisible" description="Show or hide the Freight page on the control.">
 TaxDetailControl taxDetControl = new TaxDetailControl();
 bool isFreightVisible = true;
 taxDetControl.IsFreightPageVisible = valisFreightVisibleue;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.TaxDetailControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailControl.UpdateTaxTotal">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryOptionControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryOptionControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryOptionControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim invoiceDataset As New InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade()
 Dim summaryControl As New SummaryControl(invoiceDataset, invoiceFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 '
 'Code to assign the TransactionType
 summaryControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 currentTransType = summaryControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new InvoiceDatasetGateway();
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade();
 SummaryControl summaryControl = new SummaryControl(invoiceDataset, invoiceFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 // 
 // Code to assign the TransactionType
 summaryControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 currentTransType = summaryControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToForm.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim salesOrderDataset As New SalesOrderDatasetGateway
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade()
 Dim shipToControl As New ShipToControl(salesOrderDataset, salesOrderFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 '
 'Code to assign the TransactionType
 shipToControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 currentTransType = shipToControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new SalesOrderDatasetGateway();
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade();
 ShipToControl shipToControl = new ShipToControl(salesOrderDataset, salesOrderFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Order;
 // 
 // Code to assign the TransactionType
 shipToControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Order;
 currentTransType = shipToControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim invoiceDataset As New InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade()
 Dim shipToControl As New ShipToControl(invoiceDataset, invoiceFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 '
 'Code to assign the TransactionType
 shipToControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 currentTransType = shipToControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new InvoiceDatasetGateway();
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade();
 ShipToControl shipToControl = new ShipToControl(invoiceDataset, invoiceFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 // 
 // Code to assign the TransactionType
 shipToControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 currentTransType = shipToControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ProfitControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ProfitControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PaymentBreakdownControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.PaymentBreakdownControl.BasePaymentBreakdownControl_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.OrderNotesControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.OrderDetailControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.OrderDetailControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.OrderDetailControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.OrderDetailControl.WarehouseCode">
	<summary>
 The primary code of the warehouse being used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the warehouse being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.Invoice.OrderDetailControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim invoiceDataset As New InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade()
 Dim orderDetailControl As New OrderDetailControl(invoiceDataset, invoiceFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 '
 'Code to assign the TransactionType
 orderDetailControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 currentTransType = orderDetailControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new InvoiceDatasetGateway();
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade();
 OrderDetailControl orderDetailControl = new OrderDetailControl(invoiceDataset, invoiceFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 // 
 // Code to assign the TransactionType
 orderDetailControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 currentTransType = orderDetailControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.OrderDetailControl.IsReadOnly">
	<summary>Property to write enable or disable input controls</summary>
	<value>Returns a boolean value whether the control is read-only or not.</value>
</member><member name="P:Interprise.Presentation.Customer.Invoice.OrderDetailControl.CurrentCustomerInvoiceViewTable">
	<summary>Gets the current table of the plugin control. </summary>
	<value>InvoiceDatasetGateway.CustomerInvoiceViewDataTable </value>
	<returns>GatewayInvoiceDataset.CustomerInvoiceView</returns>
	<remarks>Rev AG 20080626 ICBPI.CEBU/ICBPIVista10 </remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.OrderDetailControl.OntxtOrderNumberValidated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.OrderDetailControl.m_invoiceFacade_CouponAppliedInvalidOnCurrentOrder(System.String)">
	<summary>
	</summary>
	<param name="message"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceForm.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceForm.InvoiceControl">
	<value>Returns the instance of the InvoiceControl being used on this form</value>
	<summary>The instance of the InvoiceControl being used on this form.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceForm.IsRechargeGiftCard">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceForm.RechargeAmount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceForm.AddInvoiceFromCustomer(System.String,System.String,System.String,System.String)">
	<summary>
 Method that creates a new invoice or credit memo/note from the specified
 parameters.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddInvoiceFromCustomer</em></strong> method.</para>
		<code lang="VB" title="AddInvoiceFromCustomer" description="Creates a new invoice or CM transaction from customer information.">
 Dim invForm As New InvoiceForm()
 Dim customerCode As String = "CUST-000001"
 Dim shiptoCode As String = "SHIP-000001"
 Dim contactCode As String = "CCTC-000001"
 Dim contactFullName As String = "George Constanza"
 invForm.AddInvoiceFromCustomer(customerCode, shiptoCode, contactCode, contactFullName)
    </code>
		<code lang="CS" title="AddInvoiceFromCustomer" description="Creates a new invoice or CM transaction from customer information.">
 InvoiceForm invForm = new InvoiceForm();
 string customerCode = "CUST-000001";
 string shiptoCode = "SHIP-000001";
 string contactCode = "CCTC-000001";
 string contactFullName = "George Constanza";
 invForm.AddInvoiceFromCustomer(customerCode, shiptoCode, contactCode, contactFullName);
    </code>
	</example>
	<param name="customerCode">The primary code of the customer.</param>
	<param name="shiptoCode">The primary code of the customer ship to.</param>
	<param name="contactCode">The primary code of the customer contact</param>
	<param name="contactFullName">The fullname of the customer contact</param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceForm.CreateInvoiceFromSalesOrder(System.Data.DataRow[])">
	<summary>
 Method that creates a new invoice from an existing sales order
 transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateInvoiceFromSalesOrder</em></strong> method.</para>
		<code lang="VB" title="CreateInvoiceFromSalesOrder" description="Create a new invoice transaction from salesOrderRows parameter.">
 Dim invForm As New InvoiceForm
 Dim salesOrderRows As DataRow
 Dim isCreated As Boolean 
 isCreated = invForm.CreateInvoiceFromSalesOrder(salesOrderRows)
    </code>
		<code lang="CS" title="CreateInvoiceFromSalesOrder" description="Create a new invoice transaction from salesOrderRows parameter.">
 InvoiceForm invForm = new InvoiceForm();
 DataRow salesOrderRows;
 bool isCreated;
 isCreated = invForm.CreateInvoiceFromSalesOrder(salesOrderRows);
    </code>
	</example>
	<requirements>Paramter <em>salesOrderRows</em> can't be nothing.</requirements>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceForm.UpdateDataset">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UpdateDataset</em></strong> method.</para>
		<code lang="VB" title="UpdateDataset" description="Save the changes made to the dataset.">
 Dim invForm As New InvoiceForm 
 invForm.UpdateDataset()
    </code>
		<code lang="CS" title="UpdateDataset" description="Save the changes made to the dataset.">
 InvoiceForm invForm = new InvoiceForm();
 invForm.UpdateDataset();
    </code>
	</example>
	<summary>Procedure to send changes on the dataset to the data source.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceForm.Print">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>Print</em></strong> method.</para>
		<code lang="VB" title="Print" description="Method that prints the current invoice or CM transaction.">
 Dim invForm As New InvoiceForm 
 invForm.Print()
    </code>
		<code lang="CS" title="Print" description="Method that prints the current invoice or CM transaction.">
 InvoiceForm invForm = new InvoiceForm();
 invForm.Print();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceForm.WriteLetter">
	<summary>Procedure that loads the Interprise Word Processor.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>WriteLetter</em></strong> method.</para>
		<code lang="VB" title="WriteLetter" description="Load the Interprise Word Processor.">
 Dim invForm As New InvoiceForm 
 invForm.WriteLetter()
    </code>
		<code lang="CS" title="WriteLetter" description="Load the Interprise Word Processor.">
 InvoiceForm invForm = new InvoiceForm();
 invForm.WriteLetter();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceForm.InvoiceForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceForm.BaseForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.InvoiceDataset">
	<value>The invoice dataset instance used on this control.</value>
	<summary>The invoice dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.RootDocumentCode">
	<summary>
 A string value contaning the document code of the source document from which the
 current invoice or credit memo/note originated from.
 </summary>
	<value>
 A string value contaning the document code of the source document from which the
 current invoice or credit memo/note originated from.
 </value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>RootDocumentCode</em></strong> property.</para>
		<code lang="VB" title="RootDocumentCode" description="Retrieves the document code of the source document from which the current transaction came from.">
 Dim rootDocCode As String
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 rootDocCode = invoiceFacade.RootDocumentCode()
    </code>
		<code lang="CS" title="RootDocumentCode" description="Retrieves the document code of the source document from which the current transaction came from.">
 string rootDocCode;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 rootDocCode = invoiceFacade.RootDocumentCode();
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim invoiceDataset As New InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade()
 Dim invControl As New InvoiceControl(invoiceDataset, invoiceFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 '
 'Code to assign the TransactionType
 invControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 currentTransType = invControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new InvoiceDatasetGateway();
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade();
 InvoiceControl invControl = new InvoiceControl(invoiceDataset, invoiceFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 // 
 // Code to assign the TransactionType
 invControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 currentTransType = invControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.ItemSupplierControl">
	<summary>
 Property that assigns or retrieves the instance of the
 ItemSupplierControl.
 </summary>
	<value>The instance of the ItemSupplierControl.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ItemSupplierControl</em></strong> method.</para>
		<code lang="VB" title="ItemSupplierControl" description="Assign or retrive the instance of the ItemSupplierControl.">
 Dim invoiceDataset As New InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(invoiceDataset )
 
 Dim invControl As InvoiceControl(invoiceDataset, invoiceFacade)
 Dim itemSupplierControl As IItemSupplierInterface
 itemSupplierControl = New Presentation.Customer.Invoice.ItemSupplierControl(invoiceDataset, invoiceFacade)
 '
 'Code that assigns the ItemSupplierControl
 invControl.ItemSupplierControl = itemSupplierControl 
 
 '
 'Code that retrieves the ItemSupplierControl
 Dim itemSuppControl As Interprise.Extendable.Customer.Presentation.Invoice.IItemSupplierInterface
 itemSuppControl = invControl.ItemSupplierControl
    </code>
		<code lang="CS" title="ItemSupplierControl" description="Assign or retrive the instance of the ItemSupplierControl.">
 InvoiceDatasetGateway invoiceDataset = New InvoiceDatasetGateway();
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(invoiceDataset);
 InvoiceControl[] invControl = New InvoiceControl[invoiceDataset, invoiceFacade];
 IItemSupplierInterface itemSupplierControl;
 itemSupplierControl = New Presentation.Customer.Invoice.ItemSupplierControl(invoiceDataset, invoiceFacade);
 // 
 // Code that assigns the ItemSupplierControl
 invControl.ItemSupplierControl = itemSupplierControl;
 // 
 // Code that retrieves the ItemSupplierControl
 Presentation.Customer.Invoice.ItemSupplierControl itemSuppControl;
 itemSuppControl = invControl.ItemSupplierControl;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.IsCouponValid">
	<summary>
 Validates coupon applied to the transaction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.OwnerThread">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.DropShipRefenceAlreadyConvertedToReceipt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.HasDropShipOrder(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="order"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.IsRechargeGiftCard">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.RechargeAmount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.IsVoiding">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.AddData(System.Data.DataRow)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddData</em></strong> method.</para>
		<code lang="VB" title="AddData" description="Creates a new invoice transaction.">
 Dim shipToRow As DataRow 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AddData(shipToRow)
    </code>
		<code lang="CS" title="AddData" description="Creates a new invoice transaction.">
 DataRow shipToRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AddData(shipToRow);
    </code>
	</example>
	<requirements>Parameter shipToRow can't be nothing.</requirements>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.ConvertInvoiceToCreditMemo">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ConvertInvoiceToCreditMemo</em></strong> method.</para>
		<code lang="VB" title="ConvertInvoiceToCreditMemo" description="Converts the current invoice transaction into a credit memo/note.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ConvertInvoiceToCreditMemo()
    </code>
		<code lang="CS" title="ConvertInvoiceToCreditMemo" description="Converts the current invoice transaction into a credit memo/note.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway()); 
 invoiceFacade.ConvertInvoiceToCreditMemo();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.CreateCreditMemoFromInvoice(System.Data.DataRow)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateCreditMemoFromInvoice</em></strong> method.</para>
		<code lang="VB" title="CreateCreditMemoFromInvoice" description="Creates a new credit memo/note transaction from the invoice row.">
 Dim invoiceRow As DataRow
 Dim isCreated As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreated = invoiceFacade.CreateCreditMemoFromInvoice(invoiceRow)
    </code>
		<code lang="CS" title="CreateCreditMemoFromInvoice" description="Creates a new credit memo/note transaction from the invoice row.">
 DataRow invoiceRow;
 bool isCreated;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isCreated = invoiceFacade.CreateCreditMemoFromInvoice(invoiceRow);
    </code>
	</example>
	<requirements>Parameter <em>invoiceRow</em> can't be nothing.</requirements>
	<returns>
 True if successfully created a credit memo/note transaction from the
 invoicerow.
 </returns>
	<param name="invoiceRow">
 Contains the invoice transaction information that will be used for the creation
 of a credit memo/note.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.CreateCreditMemoFromRMA(System.Data.DataRow)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateCreditMemoFromRMA</em></strong> method.</para>
		<code lang="VB" title="CreateCreditMemoFromRMA" description="Creates a new RMA transaction from the rmaRow.">
 Dim rmaRow As DataRow
 Dim isCreated As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreated = invoiceFacade.CreateCreditMemoFromRMA(rmaRow)
    </code>
		<code lang="CS" title="CreateCreditMemoFromRMA" description="Creates a new RMA transaction from the rmaRow.">
 DataRow rmaRow;
 bool isCreated;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isCreated = invoiceFacade.CreateCreditMemoFromRMA(rmaRow);
    </code>
	</example>
	<requirements>Parameter rmaRow can't be nothing.</requirements>
	<returns>
 True if successfully created a new credit memo/note transaction from the
 rmaRow.
 </returns>
	<param name="rmaRow">
 Contains the RMA transaction information that will be used in the creation of a
 new credit memo/note.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.CreateInvoiceFromSalesOrder(System.Data.DataRow[])">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateInvoiceFromSalesOrder</em></strong> method.</para>
		<code lang="VB" title="CreateInvoiceFromSalesOrder" description="Creates a new invoice transaction from the salesOrderRow">
 Dim salesOrderRows As DataRow
 Dim isCreated As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreated = invoiceFacade.CreateInvoiceFromSalesOrder(salesOrderRows)
    </code>
		<code lang="CS" title="CreateInvoiceFromSalesOrder" description="Creates a new invoice transaction from the salesOrderRow">
 DataRow salesOrderRows;
 bool isCreated;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 isCreated = invoiceFacade.CreateInvoiceFromSalesOrder(salesOrderRows);
    </code>
	</example>
	<requirements>Parameter <em>salesOrderRows</em> can't be nothing.</requirements>
	<returns>True if successfully created a new invoice transaction from a sales order.</returns>
	<param name="salesOrderRows">
 Contains the sales order transaction information that will be used for the
 creation of a new invoice.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.Print(System.Boolean)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>Print</em></strong> method.</para>
		<code lang="VB" title="Print" description="Loads the printer control to print the current invoice or credit memo/note.">
 Dim invControl As New InvoiceControl 
 invControl.Print()
    </code>
		<code lang="CS" title="Print" description="Loads the printer control to print the current invoice or credit memo/note.">
 InvoiceControl invControl = new InvoiceControl();
 invControl.Print();
    </code>
	</example>
	<summary>Shows the print dialog control for document printing.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadDataSet</em></strong> method.</para>
		<code lang="VB" title="LoadDataSet" description="Retrives the data of the invoice or credit memo/note from the data source.">
 Dim invControl As New Interprise.Presentation.Customer.Invoice.InvoiceControl
 Dim documentCode As String = "INV-000001"
 Dim row As DataRow
 Dim clearTableType As ClearType = Framework.Base.Shared.Enum.ClearType.Specific
 Dim isLoaded As Boolean
 isLoaded = invControl.LoadDataSet(documentCode, row, clearTableType)
    </code>
		<code lang="CS" title="LoadDataset" description="Retrives the data of the invoice or credit memo/note from the data source.">
 Interprise.Presentation.Customer.Invoice.InvoiceControl invControl = new Interprise.Presentation.Customer.Invoice.InvoiceControl();
 string documentCode = "INV-000001";
 DataRow row;
 ClearType clearTableType = Framework.Base.Shared.Enum.ClearType.Specific;
 bool isLoaded;
 isLoaded = invControl.LoadDataSet(documentCode, row, clearTableType);
    </code>
	</example>
	<requirements>Parameter <em>row</em> can't be nothing.</requirements>
	<returns>
 True if the successfully retrieved the invoice or credit memo/note
 transaction.
 </returns>
	<summary>
		<para>Retieves information of record/s from the datasource using the specified
    parameters.</para>
	</summary>
	<param name="documentCode">The primary code of the invoice or CM document to load.</param>
	<param name="row">The row should contain the invoice or credit memo/note row information.</param>
	<param name="clearTableType">ClearType can be any of the following: None, Specific, All</param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.LoadDataSet(Interprise.Framework.Base.Shared.Structure.SelectedRows)">
	<summary>
	</summary>
	<param name="selectedSearchRows"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.LoadDataSet(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="selectedSearchRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.SetAppliedCredit">
	<summary>
 Assigns value to AppliedCreditsAmountRate and AppliedCreditsAmount
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.ReadItemAvailability(System.String,System.String,System.String,System.DateTime)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="unitMeasureCode"></param>
	<param name="itemDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.SetAvailabilityDatasource(Interprise.Framework.Base.DatasetGateway.AvailabilityDatasetGateway)">
	<summary>
 Resets the datasource of the ItemsAvailabilityControl
 </summary>
	<param name="datasource"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.LoadAsync_Completed(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>Procedure to send changes on the dataset to the data source.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UpdateDataSet</em></strong> method.</para>
		<code lang="VB" title="UpdateDataSet" description="Save the changes made to the dataset.">
 Dim invControl As New Interprise.Presentation.Customer.Invoice.InvoiceControl
 Dim confirm As Boolean = False
 Dim clear As Boolean = False
 Dim isUseCache As Boolean = False
 Dim saveResult As DialogResult
 saveResult = invControl.UpdateDataSet(confirm, clear, isUseCache)
    </code>
		<code lang="CS" title="UpdateDataSet" description="Save the changes made to the dataset.">
 Interprise.Presentation.Customer.Invoice.InvoiceControl invControl = new Interprise.Presentation.Customer.Invoice.InvoiceControl();
 bool confirm = false;
 bool clear = false;
 bool isUseCache = false;
 DialogResult saveResult;
 saveResult = invControl.UpdateDataSet(confirm, clear, isUseCache);
    </code>
	</example>
	<returns>
 Returns value of DialogResult.OK if saving is successful, otherwise
 DialogResult.Cancel
 </returns>
	<param name="confirm">
 Boolean value to indicate whether the saving procedure still needs
 confirmation
 </param>
	<param name="clear">
 Boolean value to indicate whether to clear the contents of the dataset after
 saving
 </param>
	<param name="isUseCache">
 Boolean value to indicate whether to save changes to the Online or Offline
 database. True saves the changes to the cache batabase.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.UpdateDataset(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>Procedure to send changes on the dataset to the data source.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UpdateDataset</em></strong> method.</para>
		<code lang="VB" title="UpdateDataset" description="Save the changes made to the dataset.">
 Dim invControl As New Interprise.Presentation.Customer.Invoice.InvoiceControl
 Dim confirm As Boolean = True
 Dim clearTable As Boolean = True
 Dim isUseCache As Boolean = False
 Dim isPost As Boolean = True
 Dim saveResult As DialogResult
 saveResult = invControl.UpdateDataset(confirm, clearTable, isUseCache, isPost)
    </code>
		<code lang="CS" title="UpdateDataset" description="Save the changes made to the dataset.">
 Interprise.Presentation.Customer.Invoice.InvoiceControl invControl = new Interprise.Presentation.Customer.Invoice.InvoiceControl();
 bool confirm = true;
 bool clearTable = true;
 bool isUseCache = false;
 bool isPost = true;
 DialogResult saveResult;
 saveResult = invControl.UpdateDataset(confirm, clearTable, isUseCache, isPost);
    </code>
	</example>
	<returns>
 Returns value of DialogResult.OK if saving is successful, otherwise
 DialogResult.Cancel
 </returns>
	<param name="confirm">
 Boolean value to indicate whether the saving procedure still needs
 confirmation
 </param>
	<param name="clearTable">
 Boolean value to indicate whether to clear the contents of the dataset after
 saving
 </param>
	<param name="isUseCache">
 Boolean value to indicate whether to save changes to the Online or Offline
 database. True saves the changes to the cache batabase.
 </param>
	<param name="isPost">
 Boolean value to indicate whether to post the changes made to the invoice or
 credit memo/note transaction to the accounting journal.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.ChangeStatus(System.String)">
	<summary>
 Change the status text displayed in the status bar.
 </summary>
	<param name="status"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.ShowNewForm">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ShowNewForm</em></strong> method.</para>
		<code lang="VB" title="ShowNewForm" description="Load a new invoice, credit memo/note form.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ShowNewForm()
    </code>
		<code lang="CS" title="ShowNewForm" description="Load a new invoice, credit memo/note form.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway()); 
 invoiceFacade.ShowNewForm();
    </code>
	</example>
	<summary>Loads a new invoice or credit memo/note transaction form.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.ShowUPSTimeInTransit">
	<excludetoc/>
	<exclude/>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.UndoChanges">
	<summary>
 Rejects the changes made to the current invoice or credit memo/note
 transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UndoChanges</em></strong> method.</para>
		<code lang="VB" title="UndoChanges" description="Rejects any changes made to the dataset and reverts to the original data.">
 Dim invControl As New Interprise.Presentation.Customer.Invoice.InvoiceControl
 invControl.UndoChanges()
    </code>
		<code lang="CS" title="UndoChanges" description="Rejects any changes made to the dataset and reverts to the original data.">
 Interprise.Presentation.Customer.Invoice.InvoiceControl invControl = new Interprise.Presentation.Customer.Invoice.InvoiceControl();
 invControl.UndoChanges();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.Void">
	<summary>Nullifies the current invoice transaction and mark it as voided.</summary>
	<example>
		<para>The following codes shows how to implement the <strong><em>Void</em></strong>
    method.</para>
		<code lang="VB" title="Void" description="Voids the current invoice transaction.">
 Dim invControl As New InvoiceControl 
 invControl.Void()
 </code>
		<code lang="CS" title="Void" description="Voids the current invoice transaction.">
 InvoiceControl invControl = new InvoiceControl();
 invControl.Void();
    </code>
	</example>
	<remarks>
 If the invoice being voided is not yet posted, the invoice document if just gonna
 be marked as voided. If the invoice is already voided, the voiding procedure creates a
 equivalent Credit Memo/Note document and allocates them to cancel/zero out the amount
 of the invoice. Should the invoice being voided already has already been allocated
 against a Debit document, voiding will not be allowed.
 </remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.Find">
	<example>
		<para>The following codes shows how to implement the <strong><em>Find</em></strong>
    method.</para>
		<code lang="VB" title="Find" description="Closes the current form and loads the search list dashboard for searching.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.Find()
    </code>
		<code lang="CS" title="Find" description="Closes the current form and loads the search list dashboard for searching.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway()); 
 invoiceFacade.Find();
    </code>
	</example>
	<summary>Loads the search list dashboard.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.CheckCustomerOnHoldStatus(System.String,System.String)">
	<summary>
 Checks customer status if on hold.
 </summary>
	<returns>Returns value of type <Strong>Boolean</Strong> indicating that customer is on hold.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.UpdateStockLevel">
	<summary>
 Update the stocklevel column.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.CheckDefaultWarehouse">
	<summary>
 Check and Set to default warehouse if the customer's current setup warehouse is an inactive warehouse
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.OrderDetailControl_ShippingMethodChanged(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
 OrderDetailControl_ShippingMethodChanged
 </summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks>Will Call change &gt; this will fire when the shipping method is changed</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.AutoReserveOrVoidDropShipOrder(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewDataTable)">
	<summary>
	</summary>
	<param name="invoiceDetail"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.VoidDropShipPurchaseOrder(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewDataTable)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.ConvertDropShipPOToGRN(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.ProcessRechargeGiftCard(System.String,System.Decimal)">
	<summary>
	</summary>
	<param name="rechargeAmount"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.NotifyInvoiceHasBackOrder">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.TransactionReceiptFacade_AuthorizationFinish(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.TransactionReceiptFacade_AuthorizationStart(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.m_inventoryItem_AfterDeleteLineItem(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Fires on after deleting inventory line item
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>Pete.A 07/01/2009

</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.ReadKitAvailabilityAsync_Completed(System.IAsyncResult)">
	<summary>
 Method triggered after asynchronous reading of kit data.
 </summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.m_invoiceFacade_CreditCardAuthorizationFailed(System.Object,Interprise.Framework.Customer.EventArguments.CreditCardAuthorizationFailedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.m_invoiceFacade_VoidingSuccessfullWithFailedVoidingReceipt(System.Object,Interprise.Framework.Customer.EventArguments.CommonEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.PaymentForm_ReceiptAdded(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InventoryItemControl.RelatedAvailableQuantity(System.String)">
	<summary>
 Returns the sum of the total quantity order for a single item
 </summary>
	<value>Array Object</value>
	<returns>Returns the sum of the total quantity order for a single item</returns>
	<remarks>Value is used to determine the Stock Level for a single item in an order</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InventoryItemControl.OriginalRelatedAvailableQuantity(System.String)">
	<summary>
 Returns the sum of the total quantity order for a single item
 </summary>
	<value>Array Object</value>
	<returns>Returns the sum of the total quantity order for a single item</returns>
	<remarks>Value is used to determine the Stock Level for a single item in an order</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InventoryItemControl.CouponDiscountVisibleIndex">
	<summary>
 Property to get/set the column's visible index (colCouponDiscountPercentRate/colCouponDiscountAmountRate)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InventoryItemControl.AssignQuantityBackOrder(System.Data.DataRowView)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InventoryItemControl.CloseProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InventoryItemControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InventoryItemControl.rcboAccountCode_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 This will handle to delete the value member.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>added by pete.a 06/09/2009

</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ProcessCreditMemoControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ProcessCreditMemoControl.InvoiceDataset">
	<value>The invoice dataset instance used on this control.</value>
	<summary>The invoice dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ProcessCreditMemoControl.ProcessControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.CreditMemoForm.CreditMemoControl">
	<value>Returns the instance of the InvoiceControl being used on this form</value>
	<summary>The instance of the InvoiceControl being used on this form.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.CreditMemoForm.CreditMemoDataset">
	<value>Returns the instance of the credit memo dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The credit memo dataset instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.CreditMemoForm.CreateCreditMemoFromRMA(System.Data.DataRow)">
	<summary>Creates a new Credit Memo from an existing RMA transaction.</summary>
	<returns>True if successfully created a CM from an RMA.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateCreditMemoFromRMA</em></strong> method.</para>
		<code lang="VB" title="CreateCreditMemoFromRMA" description="Create a CM transaction from the rmaRow parameter.">
 Dim creditMemoForm As New CreditMemoForm
 Dim rmaRow As DataRow
 Dim isCreated As Boolean 
 isCreated = creditMemoForm.CreateCreditMemoFromRMA(rmaRow)
    </code>
		<code lang="CS" title="CreateCreditMemoFromRMA" description="Create a CM transaction from the rmaRow parameter.">
 CreditMemoForm creditMemoForm = new CreditMemoForm();
 DataRow rmaRow;
 bool isCreated;
 isCreated = creditMemoForm.CreateCreditMemoFromRMA(rmaRow);
    </code>
	</example>
	<requirements>Parameter <em>rmaRow</em> can't be nothing.</requirements>
	<param name="rmaRow">The RMA row information to be processed.</param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.CreditMemoForm.CreateCreditMemoFromInvoice(System.Data.DataRow)">
	<summary>Creates a new Credit Memo from an existing posted invoice transaction.</summary>
	<returns>True if successfully created a CM from an Invoice.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateCreditMemoFromInvoice</em></strong> method.</para>
		<code lang="VB" title="CreateCreditMemoFromInvoice" description="Create a CM transaction from the invoiceRow parameter.">
 Dim creditMemoForm As New CreditMemoForm
 Dim invoiceRow As DataRow
 Dim isCreated As Boolean 
 isCreated = creditMemoForm.CreateCreditMemoFromInvoice(rmaRow)
    </code>
		<code lang="CS" title="CreateCreditMemoFromInvoice" description="Create a CM transaction from the invoiceRow parameter.">
 CreditMemoForm creditMemoForm = new CreditMemoForm();
 DataRow invoiceRow;
 bool isCreated;
 isCreated = creditMemoForm.CreateCreditMemoFromInvoice(rmaRow);
    </code>
	</example>
	<requirements>Parameter <em>rmaRow</em> can't be nothing.</requirements>
	<param name="invoiceRow">The Invoice row information to be processed.</param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.CreditMemoForm.WriteLetter">
	<summary>Procedure that loads the Interprise Word Processor.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>WriteLetter</em></strong> method.</para>
		<code lang="VB" title="WriteLetter" description="Load the Interprise Word Processor.">
 Dim credmemoForm As New CreditMemoForm 
 credmemoForm.WriteLetter()
    </code>
		<code lang="CS" title="WriteLetter" description="Load the Interprise Word Processor.">
 CreditMemoForm credmemoForm = new CreditMemoForm();
 credmemoForm.WriteLetter();
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyControl_OLD.ReceiptDataset">
	<value>The receipt dataset instance used on this control.</value>
	<summary>The receipt dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyControl_OLD.InvoiceDataset">
	<value>The invoice dataset instance used on this control.</value>
	<summary>The invoice dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyControl_OLD.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyControl_OLD.SetDisplayText">
	<summary>Procedure that assigns the text caption of the apply control.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>SetDisplayText</em></strong> method.</para>
		<code lang="VB" title="Dim applyControl As New ApplyControl " description="Assign the text caption of the apply control.">
 Dim applyControl As New ApplyControl 
 applyControl.SetDisplayText()
    </code>
		<code lang="CS" title="SetDisplayText" description="Assign the text caption of the apply control.">
 ApplyControl applyControl = New ApplyControl();
 applyControl.SetDisplayText();
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CommissionControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BillToControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BillToControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BillToControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.SalesDetailControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.SalesDetailControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.SalesDetailControl.IsReadOnly">
	<summary>Property to write enable or disable grid columns</summary>
	<value>Returns a boolean value whether the control is read-only or not.</value>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDiscountDetailControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDiscountDetailControl.IsReadOnly">
	<summary>Property to write enable or disable input controls</summary>
	<value>Returns a boolean value whether the control is read-only or not.</value>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDiscountDetailControl.ComputeDiscount(System.DateTime)">
	<excludetoc/>
	<exclude/>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDetailControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDetailControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDetailControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDetailControl.IsReadOnly">
	<summary>Property to write enable or disable input controls</summary>
	<value>Returns a boolean value whether the control is read-only or not.</value>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDetailControl.txtInvoiceCode_GotFocus(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.OrderDetailControl.txtInvoiceCode_Validated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.CustomerDetailControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.CustomerDetailControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.CustomerDetailControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
		<para>Retieves information of record/s from the datasource using the specified
    parameters.</para>
	</summary>
	<returns>
 True if the successfully retrieved the invoice or credit memo/note
 transaction.
 </returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadDataSet</em></strong> method.</para>
		<code lang="VB" title="LoadDataSet" description="Retrives the data of the invoice or credit memo/note from the data source.">
 Dim custControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.CustomerDetailControl()
 Dim documentCode As String = "INV-000001"
 Dim row As DataRow
 Dim clearTableType As ClearType = Framework.Base.Shared.Enum.ClearType.Specific
 Dim isLoaded As Boolean
 isLoaded = custControl.LoadDataSet(documentCode, row, clearTableType)
    </code>
		<code lang="CS" title="LoadDataSet" description="Retrives the data of the invoice or credit memo/note from the data source.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.CustomerDetailControl custControl = new Interprise.Presentation.Customer.Invoice.BatchInvoice.CustomerDetailControl(); 
 string documentCode = "INV-000001"; 
 DataRow row; 
 ClearType clearTableType = Framework.Base.Shared.Enum.ClearType.Specific; 
 bool isLoaded; 
 isLoaded = custControl.LoadDataSet(documentCode, row, clearTableType);
    </code>
	</example>
	<requirements>Parameter <em>row</em> can't be nothing.</requirements>
	<param name="documentCode">The primary code of the customer information to load.</param>
	<param name="row">The row should contain the invoice or credit memo/note row information.</param>
	<param name="clearTableType">ClearType can be any of the following: None, Specific, All.</param>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceForm.BatchInvoiceControl">
	<value>Returns the instance of the InvoiceControl being used on this form</value>
	<summary>The instance of the InvoiceControl being used on this form.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceForm.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="E:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.OnTransactiontypeChanged">
	<summary>
 An event that changes the TransactionType property of the current
 transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>OnTransactiontypeChanged</em></strong> method.</para>
		<code lang="VB" title="OnTransactiontypeChanged" description="Changes the TransactionType property of the current transaction.">
 Dim WithEvents batchInvoiceControl As New Interprise.Presentation.Customer.BatchInvoiceControl
 Dim transactionType As String = "Invoice"
 batchInvoiceControl.OnTransactiontypeChanged(transactionType)
    </code>
		<code lang="CS" title="OnTransactiontypeChanged" description="Changes the TransactionType property of the current transaction.">
 Object WithEvents;
 Interprise.Presentation.Customer.BatchInvoiceControl batchInvoiceControl = New Interprise.Presentation.Customer.BatchInvoiceControl();
 String transactionType = "Invoice";
 batchInvoiceControl.OnTransactiontypeChanged(transactionType);
    </code>
	</example>
	<remarks>
 The parameter transactionType can be either an <em>Invoice</em> or <em>Credit
 Memo</em>.
 </remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.RootDocumentCode">
	<summary>
 The primary code of the source document wherein the current invoice/credit memo transaction originated from
 transaction.
 </summary>
	<value>
 Returns the primary code of the source document wherein the current invoice/credit memo transaction originated from
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.ShipToCode">
	<summary>
 The primary code of the customer ship to beinf used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the customer ship to being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.CustomerCode">
	<summary>
 The primary code of the customer being used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the customer being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim invoiceDataset As New InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade()
 Dim batchInvControl As New BatchInvoiceControl(invoiceDataset, invoiceFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 '
 'Code to assign the TransactionType
 batchInvControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 currentTransType = batchInvControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new InvoiceDatasetGateway();
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade();
 BatchInvoiceControl batchControl = new BatchInvoiceControl(invoiceDataset, invoiceFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 // 
 // Code to assign the TransactionType
 batchControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 currentTransType = batchControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.InvoiceCode">
	<summary>
 The primary code of the the current invoice/credit memo transaction
 transaction.
 </summary>
	<value>
 Returns the primary code of the current invoice/credit memo transaction
 transaction.
 </value>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.GetCustomFieldControl(System.Data.DataTable,Interprise.Extendable.Base.Presentation.SharedControl.ICustomFieldInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.AddData(System.Data.DataRow)">
	<summary>Creates a new BatchInvoice or BatchCredit transaction.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddData</em></strong> method.</para>
		<code lang="VB" title="AddData" description="Creates a new BatchInvoice or BatchCredit transaction.">
 Dim batchInvoiceControl As New Interprise.Presentation.Customer.BatchInvoice.BatchInvoiceControl
 Dim shipToRow As DataRow 
 batchInvoiceControl.AddData(shipToRow)
    </code>
		<code lang="CS" title="AddData" description="Creates a new BatchInvoice or BatchCredit transaction.">
 Interprise.Presentation.Customer.BatchInvoice.BatchInvoiceControl batchInvoiceControl = new Interprise.Presentation.Customer.BatchInvoice.BatchInvoiceControl();
 DataRow shipToRow;
 batchInvoiceControl.AddData(shipToRow);
    </code>
	</example>
	<requirements>Paramter <em>shipToRow</em> can't be nothing.</requirements>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
		<para>Retieves information of record/s from the datasource using the specified
    parameters.</para>
	</summary>
	<requirements>Parameter row can't be nothing.</requirements>
	<returns>
 True if the successfully retrieved the invoice or credit memo/note
 transaction.
 </returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadDataSet</em></strong> method.</para>
		<code lang="VB" title="LoadDataSet" description="Retrives the data of the invoice or credit memo/note from the data source.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.InvoiceControl
 Dim documentCode As String = "CUST-000001"
 Dim row As DataRow
 Dim clearTableType As ClearType = Framework.Base.Shared.Enum.ClearType.Specific
 Dim isLoaded As Boolean
 isLoaded = batchInvControl.LoadDataSet(documentCode, row, clearTableType)
    </code>
		<code lang="CS" title="LoadDataSet" description="Retrives the data of the invoice or credit memo/note from the data source.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.InvoiceControl batchInvControl = new Interprise.Presentation.Customer.Invoice.BatchInvoice.InvoiceControl();
 string documentCode = "INV-000001";
 DataRow row;
 ClearType clearTableType = Framework.Base.Shared.Enum.ClearType.Specific;
 bool isLoaded;
 isLoaded = batchInvControl.LoadDataSet(documentCode, row, clearTableType);
    </code>
	</example>
	<param name="documentCode">The primary code of the Batch Invoice or CM document to load.</param>
	<param name="row">The row should contain the invoice or credit memo/note row information.</param>
	<param name="clearTableType">ClearType can be any of the following: None, Specific, All</param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>Procedure to send changes on the dataset to the data source.</summary>
	<returns>
 Returns value of DialogResult.OK if saving is successful, otherwise
 DialogResult.Cancel
 </returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UpdateDataset</em></strong> method.</para>
		<code lang="VB" title="UpdateDataSet" description="Save the changes made to the dataset.">
 Dim batchInvControl As Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl
 Dim confirm As Boolean = False
 Dim clear As Boolean = False
 Dim isUseCache As Boolean = False
 Dim saveResult As DialogResult 
 saveResult = batchInvControl.UpdateDataSet(confirm, clear, isUseCache)
    </code>
		<code lang="CS" title="UpdateDataSet" description="Save the changes made to the dataset.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl;
 bool confirm = False;
 bool clear = False;
 bool isUseCache = False;
 DialogResult saveResult;
 saveResult = batchInvControl.UpdateDataSet(confirm, clear, isUseCache);
    </code>
	</example>
	<param name="confirm">
 Boolean value to indicate whether the saving procedure still needs
 confirmation
 </param>
	<param name="clear">
 Boolean value to indicate whether to clear the contents of the dataset after
 saving
 </param>
	<param name="isUseCache">
 Boolean value to indicate whether to save changes to the Online or Offline
 database. True saves the changes to the cache batabase.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.UpdateDataset(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>Procedure to send changes on the dataset to the data source.</summary>
	<returns>
 Returns value of DialogResult.OK if saving is successful, otherwise
 DialogResult.Cancel
 </returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UpdateDataset</em></strong> method.</para>
		<code lang="VB" title="UpdateDataset" description="Save the changes made to the dataset.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl
 Dim confirm As Boolean = False
 Dim clearTable As Boolean = False
 Dim isUseCache As Boolean = False
 Dim post As Boolean = True
 Dim saveResult As DialogResult 
 saveResult= batchInvControl.UpdateDataset(confirm, clearTable, isUseCache, post)
    </code>
		<code lang="CS" title="UpdateDataset" description="Save the changes made to the dataset.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = new Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 bool confirm = false;
 bool clearTable = false;
 bool isUseCache = false;
 bool post = true;
 DialogResult saveResult;
 saveResult = batchInvControl.UpdateDataset(confirm, clearTable, isUseCache, post);
    </code>
	</example>
	<param name="confirm">
 Boolean value to indicate whether the saving procedure still needs
 confirmation
 </param>
	<param name="clearTable">
 Boolean value to indicate whether to clear the contents of the dataset after
 saving
 </param>
	<param name="isUseCache">
 Boolean value to indicate whether to save changes to the Online or Offline
 database. True saves the changes to the cache batabase.
 </param>
	<param name="post">
 Boolean value to indicate whether to post the changes made to the invoice or
 credit memo/note transaction to the accounting journal.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.ShowCustomerDetail">
	<summary>Method that shows the Customer form.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ShowCustomerDetail</em></strong> method.</para>
		<code lang="VB" title="ShowCustomerDetail" description="Loads the customer form .">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl
 batchInvControl.ShowCustomerDetail()
    </code>
		<code lang="CS" title="ShowCustomerDetail" description="Loads the customer form .">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = new Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.ShowCustomerDetail();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.ShowNewForm">
	<summary>
 Method that loads a new instance of the
 <strong>Inteprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl</strong>
 for a new transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ShowNewForm</em></strong> method.</para>
		<code lang="VB" title="ShowNewForm" description="Loads a new instance of the BatchInvoice control for new transaction.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl 
 batchInvControl.ShowNewForm()
    </code>
		<code lang="CS" title="ShowNewForm" description="Loads a new instance of the BatchInvoice control for new transaction.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = new Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.ShowNewForm();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.UndoChanges">
	<summary>
 Rejects the changes made to the current invoice or credit memo/note
 transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UndoChanges</em></strong> method.</para>
		<code lang="VB" title="UndoChanges" description="Rejects any changes made to the dataset and reverts to the original data.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl()
 batchInvControl.UndoChanges()
    </code>
		<code lang="CS" title="UndoChanges" description="Rejects any changes made to the dataset and reverts to the original data.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.UndoChanges();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.Void">
	<example>
		<para>The following codes shows how to implement the <strong><em>Void</em></strong>
    method.</para>
		<code lang="VB" title="Void" description="Voids the current invoice transaction.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl()
 batchInvControl.Void()
    </code>
		<code lang="CS" title="Void" description="Voids the current invoice transaction.">
 Interprise.Presentation.Customer.Invoice.InvoiceControl invControl = New Interprise.Presentation.Customer.Invoice.InvoiceControl(); 
 invoiceFacade.Void();
    </code>
	</example>
	<summary>Nullifies the current invoice transaction and mark it as voided.</summary>
	<remarks>
 If the invoice being voided is not yet posted, the invoice document if just gonna
 be marked as voided. If the invoice is already voided, the voiding procedure creates a
 equivalent Credit Memo/Note document and allocates them to cancel/zero out the amount
 of the invoice. Should the invoice being voided already has already been allocated
 against a Debit document, voiding will not be allowed.
 </remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.Void(System.Data.DataRow)">
	<example>
		<para>The following codes shows how to implement the <strong><em>Void</em></strong>
    method.</para>
		<code lang="VB" title="Void" description="Voids the current invoice transaction.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl
 Dim row As DataRow 
 batchInvControl.Void(row)
    </code>
		<code lang="CS" title="Void" description="Voids the current invoice transaction.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = new Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 DataRow row;
 batchInvControl.Void(row);
    </code>
	</example>
	<summary>Nullifies the current invoice transaction and mark it as voided.</summary>
	<remarks>
 If the invoice being voided is not yet posted, the invoice document if just gonna
 be marked as voided. If the invoice is already voided, the voiding procedure creates a
 equivalent Credit Memo/Note document and allocates them to cancel/zero out the amount
 of the invoice. Should the invoice being voided already has already been allocated
 against a Debit document, voiding will not be allowed.
 </remarks>
	<param name="row">Contains the row information of the invoice record to be voided.</param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.Find">
	<example>
		<para>The following codes shows how to implement the <strong><em>Find</em></strong>
    method.</para>
		<code lang="VB" title="Find" description="Closes the current form and loads the search list dashboard for searching.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl 
 batchInvControl.Find()
    </code>
		<code lang="CS" title="Find" description="Closes the current form and loads the search list dashboard for searching.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = new Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.Find();
    </code>
	</example>
	<summary>Loads the search list dashboard.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.NewActivity">
	<summary>
 Method that creates a new CRM activity for the current transaction's customer
 contact.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewActivity</em></strong> method.</para>
		<code lang="VB" title="NewActivity" description="Creates a new CRM Activity.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl 
 batchInvControl.NewActivity()
    </code>
		<code lang="CS" title="NewActivity" description="Creates a new CRM Activity.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = new Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.NewActivity();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.NewCase">
	<summary>
 Method that creates a new CRM case for the current transaction's customer
 contact.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewCase</em></strong> method.</para>
		<code lang="VB" title="NewCase" description="Creates a new CRM case.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl
 batchInvControl.NewCase()
    </code>
		<code lang="CS" title="NewCase" description="Creates a new CRM case.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl(); 
 batchInvControl.NewCase();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.NewOpportunity">
	<summary>
 Method that creates a new CRM opportunity for the current transaction's customer
 contact.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewOpportunity</em></strong> method.</para>
		<code lang="VB" title="NewOpportunity" description="Creates a new CRM opportunity.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl 
 batchInvControl.NewOpportunity()
    </code>
		<code lang="CS" title="NewOpportunity" description="Creates a new CRM opportunity.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.NewOpportunity();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.NewContact">
	<summary>
 Method that creates a new CRM contact for the current transaction's
 customer.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewContact</em></strong> method.</para>
		<code lang="VB" title="NewContact" description="Creates a new CRM contact.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl 
 batchInvControl.NewContact()
    </code>
		<code lang="CS" title="NewContact" description="Creates a new CRM contact.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.NewContact();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.NewDocument">
	<summary>
 Method that creates a new CRM document for the current transaction's customer
 contact.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>NewDocument</em></strong> method.
    <code lang="VB" title="NewDocument" description="Creates a new CRM document.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl 
 batchInvControl.NewDocument()
    </code>
		<code lang="CS" title="NewDocument" description="Creates a new CRM document.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.NewDocument();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.NewEmail">
	<summary>
 Method that creates a new CRM e-mail for the current transaction's customer
 contact.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewEmail</em></strong> method.</para>
		<code lang="VB" title="NewEmail" description="Creates a new CRM e-mail.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl 
 batchInvControl.NewEmail()
    </code>
		<code lang="VB" title="NewEmail" description="Creates a new CRM e-mail.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.NewEmail();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.NewNote">
	<summary>
 Method that creates a new CRM note for the current transaction's customer
 contact.
 </summary>
	<example>
    The following codes shows how to implement the <strong><em>NewNote</em></strong>
    method.
    <code lang="VB" title="NewNote" description="Creates a new CRM note.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl
 batchInvControl.NewNote()
    </code>
		<code lang="CS" title="NewNote" description="Creates a new CRM note.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 batchInvControl.NewNote();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.ShowJournal(System.String)">
	<summary>
 Method that loads the accounting journal created for the current
 transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ShowJournal</em></strong> method.</para>
		<code lang="VB" title="ShowJournal" description="Loads the journal created after the current transaction was posted.">
 Dim batchInvControl As New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl
 Dim referenceCode As String = "INV-000001" 
 batchInvControl.ShowJournal(referenceCode)
    </code>
		<code lang="CS" title="ShowJournal" description="Loads the journal created after the current transaction was posted.">
 Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl batchInvControl = New Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl();
 String referenceCode = "INV-000001";
 batchInvControl.ShowJournal(referenceCode);
    </code>
	</example>
	<param name="referenceCode">The document of the current batch invoice or credit memo transaction.</param>
</member><member name="P:Interprise.Presentation.Customer.Invoice.AddressesControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.AddressesControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim invoiceDataset As New InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade()
 Dim addControl As New AddressControl(invoiceDataset, invoiceFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 '
 'Code to assign the TransactionType
 addControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 currentTransType = addControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new InvoiceDatasetGateway();
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade();
 AddressControl addControl = new AddressControl(invoiceDataset, invoiceFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 // 
 // Code to assign the TransactionType
 addControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 currentTransType = addControl.TransactionType;
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.AddressesControl.ClearShipToBindings">
	<summary>
 ClearShipToBindings
 </summary>
	<remarks>Will Call change &gt; this will clear all bindings</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.AddressesControl.lblBillToName_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Overides this event to get the updated data pass to txtBillTo directly.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>Added by pete.a 08/25/2009

</member><member name="M:Interprise.Presentation.Customer.Invoice.AddressesControl.lblShipToName_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Overides this event to get the updated data pass to txtShipTo directly.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>Added by pete.a 08/25/2009

</member><member name="P:Interprise.Presentation.Customer.Invoice.AccountsControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.TradingInfoControl.TransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.ShipToListControl.InitializeControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.SetupControl.CurrentCustomerViewTable">
	<summary>Gets the current table of the plugin control.</summary>
	<value>Customer.DatasetComponent.CustomerDetailDataset.CustomerViewDataTable</value>
	<returns>CustomerGateway.CustomerView</returns>
	<remarks>Rev AG 20080625 ICBPI.CEBU/ICBPIVista10 </remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.RecentSalesControl.WorkCompleted(System.IAsyncResult)">
	<summary>
 A callback method to process additional task/s after asynchronous task has been completed
 </summary>
	<param name="result">A <strong>System.IAsyncResult</strong> that will contain the result of the asynchronous method</param>
	<remarks></remarks>&gt;

</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.RecentSalesControl.ContinueLoadDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.HeaderControl.CurrentCustomerViewTable">
	<summary>Gets the current table of the plugin control.</summary>
	<value>CustomerDetailDatasetGateway.CustomerViewDataTable</value>
	<returns>CustomerGateway.CustomerView</returns>
	<remarks>Rev AG 20080624 ICBPI.CEBU/ICBPIVista10 </remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.HeaderControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.HeaderControl.btnCustomerName_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.HeaderControl.barmanagerCustomerName_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerServiceContractControl.repCboDocumentAttachment_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 This opens the file from the service contract control
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This change in implementation is necessary due to the duplicate opening of the files happening before.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerItemsControl.gvwCustomerItems_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerBuyingHistoryControl.WorkCompleted(System.IAsyncResult)">
	<summary>
 A callback method to process additional task/s after asynchronous task has been completed
 </summary>
	<param name="result">A <strong>System.IAsyncResult</strong> that will contain the result of the asynchronous method</param>
	<remarks></remarks>&gt;

</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerBuyingHistoryControl.ContinueLoadDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.AccountsControl.ShipToDataset">
	<summary> Property that gets the current facade</summary>
	<returns> Interprise.Framework.Customer.DatasetGateway.ShipToDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.ShipToDetail.AccountsControl.CurrentFacade">
	<summary> Property that gets the current dataset. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.AccountsControl.LoadGridSettings">
	<summary> Loads default grid settings. </summary>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.AccountsControl.SearchComboAccount_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.AccountsControl.cboglclass_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Displays the selected item from the combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.AccountsControl.CustomerShipToView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary> Fires the cboglclass_PopupClose event if the row has no GLClassCode. </summary>
	<param name="sender">The source of the event. </param>
	<param name="e"> A DataColumnChangeEventArgs object that contains data related to the event. </param>
</member><member name="M:Interprise.Presentation.Customer.ShipToDetail.AccountsControl.gvwglclass_HideCustomizationForm(System.Object,System.EventArgs)">
	<summary> Finds the form where the gvwglclass control is on after clicking the "Yes" button of the message window. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.Shared.Common.FindDeviceFromGuid(System.Guid,System.String[]@)">
	<summary>
 Retrieves a device information set for a specified group of devices.
 SetupDiEnumDeviceInterfaces uses the device information set.
 </summary>
	<param name="myguid">Interface class GUID.</param>
	<param name="devicePathName">Retrieve information for all device instances</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ProductLookupMainControl.PluginContainerControlProductLookup_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ProductLookupMainControl.PluginContainerControlProductLookupPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SharedControl.IProductLookupInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ProductLookupForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ProductLookupForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IProductLookupInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.SalesOrderDataset">
	<summary> Property that gets the Sales Order dataset. </summary>
	<returns> SalesOrderDatasetGateway </returns>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.SalesOrderFacade">
	<summary> Property that gets the current facade. </summary>
	<returns> Extendable.Customer.Facade.ISalesOrderInterface Implements Extendable.Customer.Presentation.SharedControl.IConvertOrderToInvoiceFormInterface.SalesOrderFacade </returns>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.DataRowSelected">
	<summary> Sets the value of the data row selected. </summary>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.InitializeConversion">
	<summary> Calls for the procedure to initialize conversion. </summary>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.InitializeCommandPattern">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.MenuItemActivateAllAction(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.MenuItemCancelAction(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.MenuItemDeactivateAllAction(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.MenuItemOKAction(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SharedControl.IConvertOrderToInvoiceInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.CurrentFacade">
	<summary> Property that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.InitializeConvertion">
	<summary> Calls for the procedure to initialize conversion.  </summary>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.LoadGridSettings">
	<summary> Loads default grid settings. </summary>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.SelectAll">
	<summary> Calls for the procedure to select all items in invoice. </summary>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.SelectNone">
	<summary> Calls for the procedure to select none of the items in invoice.  </summary>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.gvwWarehouse_CellValueChanging(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary> Calls for the procedure to select the handled row items to invoice</summary>
	<param name="sender"> The event sender (the BaseView descendant representing the view that raised the event). </param>
	<param name="e"> A CellValueChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.gvwWarehouse_EndGrouping(System.Object,System.EventArgs)">
	<summary> Calls for the procedure to expand all groups. </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.gvwWarehouse_HideCustomizationForm(System.Object,System.EventArgs)">
	<summary> Finds the form where the gvwWarehouse control is on after clicking the "Yes" button of the Save Grid Settings message window. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SharedControl.ConvertOrderToInvoiceControl_OLD.rhypItem_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary> Shows the Inventory Warehouse form.</summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepInformationControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepInformationControl.CurrentFacade">
	<summary> Pproperty that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepInformationControl.SalesRepDataset">
	<summary> Property that gets the Sales Rep Dataset. </summary>
	<returns> Interprise.Framework.Customer.DatasetGateway.SalesRepDatasetGateway Implements Extendable.Customer.Presentation.SalesRep.ISalesRepInformationInterface.SalesRepDataset </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepInformationControl.SearchComboCountry_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected row item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepInformationControl.SearchComboPostal_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to display the selected row item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailForm.SalesRepDataset">
	<summary> Property that gets the Sales Rep Dataset. </summary>
	<returns> SalesRepDatasetGateway </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailForm.LoadData(System.String)">
	<summary> Method that calls for the procedure to read data from the table in the dataset. </summary>
	<param name="customerCode"> String needed to read data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailForm.Find">
	<summary>
 Shows the Customer Sales Rep FInd Form.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailForm.WriteLetter">
	<summary>
 Shows the Interprise Word Form.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailForm.salesRepDetail_IsReadOnlyChanged(System.Object,System.EventArgs)">
	<summary> Disables some of the menu items in the menu bar when a grid control is displayed for the first time. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="e"> The base class for classes containing event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailForm.MenuItemWriteLetter_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
 Shows the letterWriterForm after setting its tablename and datasource property.
 </summary>
	<param name="sender "> The object that executes the event. </param>
	<param name="e "> A BarItem class instance whose link was clicked.</param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.DocumentCode">
	<summary>
 Property that gets or sets the document code.
 </summary>
	<returns> The string format document code. </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.CustomerCode">
	<summary>
 Property that gets or sets the Customer Code.
 </summary>
	<returns> The string format Customer Code. </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.CurrentFacade">
	<summary> Pproperty that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.IsReadOnly">
	<summary> Property to enable/disable controls for editing. </summary>
	<returns> True or False </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.SalesRepDataset">
	<summary>
 Property that gets the Sales Rep Dataset.
 </summary>
	<returns> Interprise.Framework.Customer.DatasetGateway.SalesRepDatasetGateway Implements Interprise.Extendable.Customer.Presentation.SalesRep.ISalesRepDetailInterface.SalesRepDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.TransactionType">
	<summary>
 Property that gets the transaction type.
 </summary>
	<returns> Framework.Base.Shared.Enum.TransactionType </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.ShowNewForm">
	<summary>
 Shows the NewSalesRep setup form after saving.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.LoadDataset(System.String,System.Boolean)">
	<summary> Method use to fetch data from the database and populates the tables specified in the parameters. </summary>
	<param name="salesRepCode"> String needed to read data.</param>
	<param name="isLoadSalesRep">
		<para> True - Adds the CustomerShipToView table. </para>
		<para> False - Doesn't add the CustomerShipToView table. </para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.UpdateDataset(System.Boolean,System.Boolean,System.Boolean)">
	<summary> Method that saves data to the tables in the dataset .</summary>
	<param name="confirm">
		<para> True - Asks confirmation from the user whether to save or cancel saving.</para>
		<para> False - Automatically saves data without confirmation from the user.</para>
	</param>
	<param name="clear">
		<para> True - Clears all the previously saved data from the table before saving.</para>
		<para> False - Saves the data without affecting the previously saved data.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.UndoChanges">
	<summary>
 Rejects changes made in the table.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.CreateChildControls(System.String)">
	<summary>
 Selects the procedure to create an instance of a control depending on the the selected tab page's name. 
 </summary>
	<param name="tabSenderName"> The string format tabpage's name where to instantiate the control</param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.GetCommissionByCategoryControl(Interprise.Extendable.Customer.Presentation.SalesRep.ICommissionByCategoryInterface)">
	<summary>
 Creates an instance of CommissionByCategoryControl 
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.GetCommissionDocuments(Interprise.Extendable.Customer.Presentation.SalesRep.ICommissionDocumentsInterface)">
	<summary>
 Creates an instance of CommissionDocuments 
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.GetCustomerListControl(Interprise.Extendable.Customer.Presentation.SalesRep.ICustomerListInterface)">
	<summary>
 Creates an instance of CustomerListControl 
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.ClearDataset">
	<summary>
 Clears the GatewaySalesRepDataset if the current control is readonly.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.Find">
	<summary>
 Code to call the Search Form containing the Ship To Details
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.NewContact">
	<summary>
 Adds new contact row details in CustomerSalesRepView table.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.PluginContainerLinkedOpportunities_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.PluginContainerLinkedOpportunitiesPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.CRM.Opportunity.IListInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.PluginContainerCustomField_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.SalesRepDetailControl.PluginContainerCustomFieldPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.ICustomFieldInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.CommissionByCategoryControl.CurrentDataset">
	<summary> Property that gets the current dataset. </summary>
	<returns> Interprise.Framework.Base.DatasetComponent.BaseDataset </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.CommissionByCategoryControl.CurrentFacade">
	<summary> Pproperty that gets the current facade. </summary>
	<returns> Extendable.Base.Facade.IBaseInterface </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.CommissionByCategoryControl.IsReadOnly">
	<summary> Property to enable/disable controls for editing. </summary>
	<returns> True or False </returns>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.CommissionByCategoryControl.SalesRepDataset">
	<summary>
 Property that gets the Sales Rep dataset.
 </summary>
	<returns> Framework.Customer.DatasetGateway.SalesRepDatasetGateway </returns>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.CommissionByCategoryControl.#ctor(Interprise.Framework.Customer.DatasetGateway.SalesRepDatasetGateway,Interprise.Facade.Customer.SalesRepFacade)">
	<summary>
 Create the instance of this class.
 </summary>
	<param name="salesRepDataset"> The shared dataset passed by the parent control. </param>
	<param name="salesRepFacade"> The shared business facade passed by the parent control. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.BatchCommission.BatchCommissionForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.BatchCommission.BatchCommissionForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesRep.BatchCommission.IBatchCommissionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.BatchCommission.BatchCommissionControl.PluginContainerHeader_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.BatchCommission.BatchCommissionControl.PluginContainerHeaderPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesRep.BatchCommission.IBatchCommissionHeaderInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesRep.BatchCommission.BatchCommissionControl.PluginContainerDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesRep.BatchCommission.BatchCommissionControl.PluginContainerDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesRep.BatchCommission.IBatchCommissionDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.WorkflowControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.WorkflowControl.LoadGridSettings">
	<summary>
 Loads default grid settings.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.WorkflowControl.UpdateCurrentRow">
	<summary>Saves the changes made to the grid control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.WorkflowControl.GridViewWorkflow_CellValueChanged(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Calls for the procedure to assign workflow stage when colStage value is changed. 
 </summary>
	<param name="sender"> The event sender (the BaseView descendant representing the view that raised the event). </param>
	<param name="e"> A CellValueChangedEventArgs object that contains event data. </param>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailReturnItemTaxGridControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailReturnItemTaxGridControl.OnLineItemTaxChanged(DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Calls for the procedure to convert the line item tax currency.
 </summary>
	<param name="e"> A CellValueChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailReturnItemTaxGridControl.gvwLineItemTax_CustomUnboundColumnData(System.Object,DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs)">
	<summary>
 Display the extended price and settlement discounted extended price of item lines.
 </summary>
	<param name="sender"> The event source. </param>
	<param name="e"> A CustomColumnDataEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailReturnItemTaxGridControl.gvwLineItemTax_CustomDrawGroupRow(System.Object,DevExpress.XtraGrid.Views.Base.RowObjectCustomDrawEventArgs)">
	<summary>
 Handles the CustomDrawGroupRow event of gvwLineItemTax; draws the text containing item and tax details on the row using CustomDrawGridView
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A RowObjectCustomDrawEventArgs containing the data for the event</param>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailLineItemTaxGridControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailLineItemTaxGridControl.OnLineItemTaxChanged(DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Calls for the procedure to convert the line item tax currency.
 </summary>
	<param name="e"> A CellValueChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailLineItemTaxGridControl.gvwLineItemTax_CustomUnboundColumnData(System.Object,DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs)">
	<summary>
 Display the extended price and settlement discounted extended price of item lines.
 </summary>
	<param name="sender"> The event source. </param>
	<param name="e"> A CustomColumnDataEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailLineItemTaxGridControl.gvwLineItemTax_CustomDrawGroupRow(System.Object,DevExpress.XtraGrid.Views.Base.RowObjectCustomDrawEventArgs)">
	<summary>
 Handles the CustomDrawGroupRow event of gvwLineItemTax; draws the text containing item and tax details on the row using CustomDrawGridView
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A RowObjectCustomDrawEventArgs containing the data for the event</param>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailFreightOtherTaxControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailFreightOtherTaxControl.OnFreightOtherTaxChanged(DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Calls for the procedure to convert the freight and other tax currency.
 </summary>
	<param name="e"> A CellValueChangedEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailFreightOtherTaxControl.gvwFreightOtherTax_CustomUnboundColumnData(System.Object,DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs)">
	<summary>
 Display the price and settlement discounted price of freight and other charge.
 </summary>
	<param name="sender"> The event source. </param>
	<param name="e"> A CustomColumnDataEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.ITaxDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.PluginContainerTaxSummary_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.PluginContainerTaxSummaryPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.IBaseTaxDetailTaxSummaryGridInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.PluginContainerTotal_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.PluginContainerTotalPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.IBaseTaxDetailTotalInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.PluginContainerLineItem_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.PluginContainerLineItemPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.IBaseTaxDetailLineItemTaxGridInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.PluginContainerFreightOther_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.TaxDetailControl.PluginContainerFreightOtherPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.IBaseTaxDetailFreightOtherTaxInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryOptionGeneralControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryOptionGeneralControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryOptionGeneralControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SummaryOptionGeneralControl.ReadTransactionTaxDetail">
	<summary>
 Method to extract TransactionTaxDetail data from the dataset.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SummaryOptionGeneralControl.FreightTaxCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to read and compute for freight taxes and display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SummaryOptionGeneralControl.OtherTaxCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary> Calls for the procedure to read and compute for other taxes and display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows.  </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SummaryOptionForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryOptionForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SummaryOptionControl.PluginContainerSummaryOptionGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SummaryOptionControl.PluginContainerSummaryOptionGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.ISummaryOptionGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToGeneralControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToGeneralControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToGeneralControl.TransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToGeneralControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.ShipToGeneralControl.cboShipToCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>  Calls for the procedure to assign ShipTo and display the selected item from the search combo to the editor. </summary>
	<param name="sender"> The object that executes the event. </param>
	<param name="eRow"> A RowSelectedEventArgs object that provides the selected rows. </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.ShipToForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IShipToInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.ShipToControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShipToControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IShipToGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.ShippingFreightForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ShippingFreightForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IShippingFreightInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SerialNumberControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesQuoteForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.IsAllowAction(Interprise.Framework.Customer.Shared.Enum.SOPAction)">
	<summary>
 Property that checks if the sales order complies with the order's workflow
 stage.
 </summary>
	<value>True if method to be executed can be allowed.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>IsAllowAction</em></strong> method.</para>
		<code lang="VB" title="IsAllowAction" description="Procedure that checks sales order workflow.">
 Dim soControl As New SalesOrderControl()
 Dim action As SOPAction = Framework.Customer.Shared.Enum.SOPAction.ApproveCredit
 Dim isAllow As Boolean 
 isAllow= soControl.IsAllowAction(action)
    </code>
		<code lang="CS" title="IsAllowAction" description="Procedure that checks sales order workflow.">
 SalesOrderControl soControl = new SalesOrderControl();
 SOPAction action = Framework.Customer.Shared.Enum.SOPAction.ApproveCredit;
 bool isAllow;
 isAllow = soControl.IsAllowAction(action);
    </code>
	</example>
	<param name="action">An enumeration of Interprise.Framework.Customer.Shared.Enum.SOPAction.</param>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.RootDocumentCode">
	<summary>
 A string value contaning the document code of the source document from which the
 current sales order originated from.
 </summary>
	<value>
 A string value contaning the document code of the source document from which the
 current sales order originated from.
 </value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>RootDocumentCode</em></strong> property.</para>
		<code lang="VB" title="RootDocumentCode" description="Retrieves the document code of the source document from which the current transaction came from.">
 Dim rootDocCode As String
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 rootDocCode = salesOrderFacade.RootDocumentCode()
    </code>
		<code lang="CS" title="RootDocumentCode" description="Retrieves the document code of the source document from which the current transaction came from.">
 string rootDocCode;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 rootDocCode = salesOrderFacade.RootDocumentCode();
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.TransactionType">
	<summary>The current TransactionType of the transaction.</summary>
	<value>The current TransactionType of the transaction.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>TransactionType</em></strong> method.</para>
		<code lang="VB" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 Dim salesOrderDataset As New SalesOrderDatasetGateway
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade()
 Dim soControl As New SalesOrderControl(salesOrderDataset, salesOrderFacade)
 Dim transType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 '
 'Code to assign the TransactionType
 soControl.TransactionType = transType
 
 '
 'Code to retrieve the TransactionType
 Dim currentTransType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Order
 currentTransType = soControl.TransactionType
    </code>
		<code lang="CS" title="TransactionType" description="Property that assign or retrieve the controls's TransactionType.">
 InvoiceDatasetGateway invoiceDataset = new SalesOrderDatasetGateway();
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade();
 SalesOrderControl soControl = new SalesOrderControl(salesOrderDataset, salesOrderFacade);
 TransactionType transType = Framework.Base.Shared.Enum.TransactionType.Order;
 // 
 // Code to assign the TransactionType
 soControl.TransactionType = transType;
 // 
 // Code to retrieve the TransactionType
 TransactionType currentTransType = Framework.Base.Shared.Enum.TransactionType.Order;
 currentTransType = soControl.TransactionType;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.ItemSupplierControl">
	<summary>
 Property that assigns or retrieves the instance of the
 ItemSupplierControl.
 </summary>
	<value>The instance of the ItemSupplierControl.</value>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ItemSupplierControl</em></strong> method.</para>
		<code lang="VB" title="ItemSupplierControl" description="Assign or retrive the instance of the ItemSupplierControl.">
 Dim salesOrderDataset As New SalesOrderDatasetGateway
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(salesOrderDataset)
 
 Dim soControl As SalesOrderControl(salesOrderDataset, salesOrderFacade)
 Dim itemSupplierControl As IItemSupplierInterface
 itemSupplierControl = New Presentation.Customer.SalesOrder.ItemSupplierControl(salesOrderDataset, salesOrderFacade)
 '
 'Code that assigns the ItemSupplierControl
 soControl.ItemSupplierControl = itemSupplierControl 
 
 '
 'Code that retrieves the ItemSupplierControl
 Dim itemSuppControl As Interprise.Extendable.Customer.Presentation.SalesOrder.IItemSupplierInterface
 itemSuppControl = soControl.ItemSupplierControl
    </code>
		<code lang="CS" title="ItemSupplierControl" description="Assign or retrive the instance of the ItemSupplierControl.">
 SalesOrderDatasetGateway salesOrderDataset = New SalesOrderDatasetGateway();
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(salesOrderDataset);
 SalesOrderControl[] soControl = New SalesOrderControl[salesOrderDataset, salesOrderFacade];
 IItemSupplierInterface itemSupplierControl;
 itemSupplierControl = New Presentation.Customer.SalesOrder.ItemSupplierControl(salesOrderDataset, salesOrderFacade);
 // 
 // Code that assigns the ItemSupplierControl
 soControl.ItemSupplierControl = itemSupplierControl;
 // 
 // Code that retrieves the ItemSupplierControl
 Presentation.Customer.SalesOrder.ItemSupplierControl itemSuppControl;
 itemSuppControl = soControl.ItemSupplierControl;
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.IsFormClosing">
	<summary>
 Property to indicate that the form is closing
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.IsCouponValid">
	<summary>
 Validates coupon applied to the transaction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.DropShipRefenceAlreadyConvertedToReceipt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.HasDropShipOrder">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.AllocateStock">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.AddData(System.Data.DataRow)">
	<summary>Creates a new sales order transaction.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddData</em></strong> method.</para>
		<code lang="VB" title="AddData" description="Creates a new sales order transaction.">
 Dim soControl As New SalesOrderControl
 Dim shipToRow As DataRow 
 soControl.AddData(shipToRow)
    </code>
		<code lang="CS" title="AddData" description="Creates a new sales order transaction.">
 SalesOrderControl soControl = new SalesOrderControl();
 DataRow shipToRow;
 soControl.AddData(shipToRow);
    </code>
	</example>
	<requirements>Parameter <em>shipToRow</em> can't be nothing.</requirements>
	<param name="shipToRow">The ship to information record to create the sales order to.</param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.DuplicateSalesOrder">
	<summary>
 Procedure that creates a copy of the current sales order to either the same
 customer or a different one.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>DuplicateSalesOrder</em></strong> method.</para>
		<code lang="VB" title="DuplicateSalesOrder" description="Create a copy of the current sales order transaction.">
 Dim soControl As New SalesOrderControl 
 soControl.DuplicateSalesOrder()
    </code>
		<code lang="CS" title="DuplicateSalesOrder" description="Create a copy of the current sales order transaction.">
 SalesOrderControl soControl = New SalesOrderControl();
 soControl.DuplicateSalesOrder();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.CreateRMAFromInvoice(System.Data.DataRow)">
	<summary>Create a new RMA transaction from an existing invoice record.</summary>
	<returns>True if successfully created an RMA transaction.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateRMAFromInvoice</em></strong> method.</para>
		<code lang="VB" title="CreateRMAFromInvoice" description="Create a new RMA transaction from invoice.">
 Dim soControl As New SalesOrderControl
 Dim invoiceRow As DataRow
 Dim isCreated As Boolean 
 isCreated = soControl.CreateRMAFromInvoice(invoiceRow)
    </code>
		<code lang="CS" title="CreateRMAFromInvoice" description="Create a new RMA transaction from invoice.">
 SalesOrderControl soControl = new SalesOrderControl();
 DataRow invoiceRow;
 bool isCreated;
 isCreated = soControl.CreateRMAFromInvoice(invoiceRow);
    </code>
	</example>
	<requirements>Parameter <em>invoiceRow</em> can't be nothing.</requirements>
	<param name="invoiceRow">The invoice row that will be processed.</param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.CreatePurchaseOrder">
	<summary>
 Procedure that creates a Purchase Order transaction from the current sales
 order.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreatePurchaseOrder</em></strong> method.</para>
		<code lang="VB" title="CreatePurchaseOrder" description="Create supplier purchase order from the current sales order.">
 Dim soControl As New SalesOrderControl 
 soControl.CreatePurchaseOrder()
    </code>
		<code lang="CS" title="CreatePurchaseOrder" description="Create supplier purchase ordUsePluginItemTaxComputationer from the current sales order.">
 SalesOrderControl soControl = New SalesOrderControl();
 soControl.CreatePurchaseOrder();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.CreateSalesOrderFromQuote(System.Data.DataRow[])">
	<summary>Procedure that creates a new Sales Order from existing Quotes transaction.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateSalesOrderFromQuote</em></strong> method.</para>
		<code lang="VB" title="CreateSalesOrderFromQuote" description="Create a sales order transaction from multiple quote records.">
 Dim soControl As New SalesOrderControl
 Dim quoteRows As DataRow()
 Dim isCreated As Boolean 
 isCreated = soControl.CreateSalesOrderFromQuote(quoteRows)
    </code>
		<code lang="CS" title="CreateSalesOrderFromQuote" description="Create a sales order transaction from multiple quote records.">
 SalesOrderControl soControl = new SalesOrderControl();
 DataRow[] quoteRows;
 bool isCreated;
 isCreated = soControl.CreateSalesOrderFromQuote(quoteRows);
    </code>
	</example>
	<requirements>Parameter <em>quoteRows</em> can't be nothing.</requirements>
	<remarks>
 The paramater quoteRows can contain multiple quote rows from 1 or more customers.
 The quote records will then be grouped per customer to create 1 sales order transaction
 per customer.
 </remarks>
	<param name="quoteRows">The quote transactions that will be processed</param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.MergeTransactionReservation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.DeleteData">
	<summary>Deletes the current sales order transaction.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>DeleteData</em></strong> method.</para>
		<code lang="VB" title="DeleteData" description="Delete the current sales order transaction.">
 Dim soControl As New SalesOrderControl 
 soControl.DeleteData()
    </code>
		<code lang="CS" title="DeleteData" description="Delete the current sales order transaction.">
 SalesOrderControl soControl = new SalesOrderControl();
 soControl.DeleteData();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.ImportQuote">
	<summary>Adds the quote item lines to the current sales order transaction.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ImportQuote</em></strong> method.</para>
		<code lang="VB" title="ImportQuote" description="Adds the selected quote item lines into the current sales order.">
 Dim soControl As New SalesOrderControl
 Dim importResult As DialogResult 
 importResult = soControl.ImportQuote()
    </code>
		<code lang="CS" title="ImportQuote" description="Adds the selected quote item lines into the current sales order.">
 SalesOrderControl soControl = new SalesOrderControl();
 DialogResult importResult;
 importResult = soControl.ImportQuote();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.Print(System.Boolean)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>Print</em></strong> method.</para>
		<code lang="VB" title="Print" description="Loads the printer control to print the current sales order.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 invoiceFacade.Print()
    </code>
		<code lang="CS" title="Print" description="Loads the printer control to print the current sales order.">
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway()); 
 invoiceFacade.Print();
    </code>
	</example>
	<summary>Shows the print dialog control for document printing.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadDataSet</em></strong> method.</para>
		<code lang="VB" title="LoadDataSet" description="Retrives the data of the sales order from the data source.">
 Dim soControl As New Interprise.Presentation.Customer.SalesOrder.SalesOrderControl
 Dim documentCode As String = "SO-000001"
 Dim row As DataRow
 Dim clearTableType As ClearType = Framework.Base.Shared.Enum.ClearType.Specific
 Dim isLoaded As Boolean
 isLoaded = soControl.LoadDataSet(documentCode, row, clearTableType)
    </code>
		<code lang="CS" title="LoadDataset" description="Retrives the data of the sales order from the data source.">
 Interprise.Presentation.Customer.SalesOrder.SalesOrderControl soControl = new Interprise.Presentation.Customer.SalesOrder.SalesOrderControl();
 string documentCode = "SO-000001";
 DataRow row;
 ClearType clearTableType = Framework.Base.Shared.Enum.ClearType.Specific;
 bool isLoaded;
 isLoaded = invControl.LoadDataSet(documentCode, row, clearTableType);
    </code>
	</example>
	<requirements>Parameter <em>row</em> can't be nothing.</requirements>
	<returns>
 True if the successfully retrieved the sales order
 transaction.
 </returns>
	<summary>
		<para>Retieves information of record/s from the datasource using the specified
    parameters.</para>
	</summary>
	<param name="documentCode">The primary code of the sales order document to load.</param>
	<param name="row">The row should contain the sales order row information.</param>
	<param name="clearTableType">ClearType can be any of the following: None, Specific, All</param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.SetAppliedCredit">
	<summary>
 Assigns value to AppliedCreditsAmountRate and AppliedCreditsAmount
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.SetAvailabilityDatasource(Interprise.Framework.Base.DatasetGateway.AvailabilityDatasetGateway)">
	<summary>
 Resets the datasource of the ItemsAvailabilityControl
 </summary>
	<param name="datasource"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.LoadAsync_Completed(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>Procedure to send changes on the dataset to the data source.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UpdateDataSet</em></strong> method.</para>
		<code lang="VB" title="UpdateDataSet" description="Save the changes made to the dataset.">
 Dim soControl As New Interprise.Presentation.Customer.SalesOrder.SalesOrderControl
 Dim confirm As Boolean = False
 Dim clear As Boolean = False
 Dim isUseCache As Boolean = False
 Dim saveResult As DialogResult
 saveResult = soControl.UpdateDataSet(confirm, clear, isUseCache)
    </code>
		<code lang="CS" title="UpdateDataSet" description="Save the changes made to the dataset.">
 Interprise.Presentation.Customer.SalesOrder.SalesOrderControl soControl = new Interprise.Presentation.Customer.SalesOrder.SalesOrderControl();
 bool confirm = false;
 bool clear = false;
 bool isUseCache = false;
 DialogResult saveResult;
 saveResult = soControl.UpdateDataSet(confirm, clear, isUseCache);
    </code>
	</example>
	<returns>
 Returns value of DialogResult.OK if saving is successful, otherwise
 DialogResult.Cancel
 </returns>
	<param name="confirm">
 Boolean value to indicate whether the saving procedure still needs
 confirmation
 </param>
	<param name="clear">
 Boolean value to indicate whether to clear the contents of the dataset after
 saving
 </param>
	<param name="isUseCache">
 Boolean value to indicate whether to save changes to the Online or Offline
 database. True saves the changes to the cache batabase.
 </param>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.ShowNewForm">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ShowNewForm</em></strong> method.</para>
		<code lang="VB" title="ShowNewForm" description="Load a new sales order form.">
 Dim soControl As New SalesOrderControl 
 soControl.ShowNewForm()
    </code>
		<code lang="CS" title="ShowNewForm" description="Load a new sales order form.">
 SalesOrderControl soControl = new SalesOrderControl();
 soControl.ShowNewForm();
    </code>
	</example>
	<summary>Loads a new sales order transaction form.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.UndoChanges">
	<summary>
 Rejects the changes made to the current sales order.
 transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UndoChanges</em></strong> method.</para>
		<code lang="VB" title="UndoChanges" description="Rejects any changes made to the dataset and reverts to the original data.">
 Dim soControl As New Interprise.Presentation.Customer.SalesOrder.SalesOrderControl
 soControl .UndoChanges()
    </code>
		<code lang="CS" title="UndoChanges" description="Rejects any changes made to the dataset and reverts to the original data.">
 Interprise.Presentation.Customer.SalesOrder.SalesOrderControl soControl = new Interprise.Presentation.Customer.SalesOrder.SalesOrderControl();
 soControl.UndoChanges();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.Void">
	<summary>Nullifies the current invoice transaction and mark it as voided.</summary>
	<example>
		<para>The following codes shows how to implement the <strong><em>Void</em></strong>
    method.</para>
		<code lang="VB" title="Void" description="Voids the current invoice transaction.">
 Dim soControl As New SalesOrderControl 
 soControl.Void()
 </code>
		<code lang="CS" title="Void" description="Voids the current invoice transaction.">
 SalesOrderControl soControl = new SalesOrderControl();
 soControl.Void();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.Find">
	<example>
		<para>The following codes shows how to implement the <strong><em>Find</em></strong>
    method.</para>
		<code lang="VB" title="Find" description="Closes the current form and loads the search list dashboard for searching.">
 Dim soControl As New SalesOrderControl 
 soControl.Find()
    </code>
		<code lang="CS" title="Find" description="Closes the current form and loads the search list dashboard for searching.">
 SalesOrderControl soControl = new SalesOrderControl();
 soControl.Find();
    </code>
	</example>
	<summary>Loads the search list dashboard.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.CreateDropShipOrder(System.Boolean)">
	<summary>Creates supplier drop ship order from the current sales order transaction.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateDropShipOrder</em></strong> method.</para>
		<code lang="VB" title="CreateDropShipOrder" description="Create Drop Ship Order from the sales order.">
 Dim soControl As SalesOrderControl 
 soControl.CreateDropShipOrder()
    </code>
		<code lang="CS" title="CreateDropShipOrder" description="Create Drop Ship Order from the sales order.">
 SalesOrderControl soControl = new SalesOrderControl();
 soControl.CreateDropShipOrder();
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.CheckDefaultWarehouse">
	<summary>
 Check and Set to default warehouse if the customer's current setup warehouse is an inactive warehouse
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.OnFocusColumnChanged(System.Object,Interprise.Framework.Base.EventArguments.FocusColumnChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.VoidDropShipPurchaseOrder">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.ConvertDropShipPOToGRN">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.ValidatePriorityItems">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.EvaluateAuthorizedPayment">
	<summary> 
 Added by Jb Mago 12/01/2015
 Checks the authorized payment
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PaymentForm_ReceiptAdded(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.TransactionReceiptFacade_AuthorizationFinish(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.m_inventoryItem_AfterDeleteLineItem(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Fires on after deleting inventory line item
 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>Pete.A 07/01/2009

</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.ReadKitAvailabilityAsync_Completed(System.IAsyncResult)">
	<summary>
 Method triggered after asynchronous reading of kit data.
 </summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.OrderDetailControl_ShippingMethodChanged(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
 OrderDetailControl_ShippingMethodChanged
 </summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks>Will Call change &gt; this will fire when the shipping method is changed</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PluginContainerSupplier_AfterInitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PluginContainerCustomFields_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PluginContainerMaxMind_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PluginContainerMaxMindPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PluginControlShipList_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PluginControlShipListPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PluginContainerInternalPublicNotes_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.SalesOrderControl.PluginContainerInternalPublicNotesPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IInternalAndPublicNotesControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.RMAForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.PaymentBreakdownGeneralControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.PaymentBreakdownForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.PaymentBreakdownForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.PaymentBreakdownControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.PaymentBreakdownControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.MaxMindControl.SalesOrderDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.MaxMindControl.MaxMindControl_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.SalesOrderCBNControl.OnVisibleChanged(System.EventArgs)">
	<summary>
 Use this method to call checking on CBNState before the form loads
 </summary>
	<param name="e"></param>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ItemSupplierControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.ItemSupplierControl.LoadDataSet(System.String,System.String)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadDataSet</em></strong> method.</para>
		<code lang="VB" title="LoadDataSet" description="Retrives the data of the salesOrder or credit memo/note from the data source.">
 Dim invControl As New Interprise.Presentation.Customer.SalesOrder.SalesOrderControl
 Dim documentCode As String = "SO-000001"
 Dim row As DataRow
 Dim clearTableType As ClearType = Framework.Base.Shared.Enum.ClearType.Specific
 Dim isLoaded As Boolean
 isLoaded = invControl.LoadDataSet(documentCode, row, clearTableType)
    </code>
		<code lang="CS" title="LoadDataset" description="Retrives the data of the salesOrder or credit memo/note from the data source.">
 Interprise.Presentation.Customer.SalesOrder.SalesOrderControl invControl = new Interprise.Presentation.Customer.SalesOrder.SalesOrderControl();
 string documentCode = "SO-000001";
 DataRow row;
 ClearType clearTableType = Framework.Base.Shared.Enum.ClearType.Specific;
 bool isLoaded;
 isLoaded = invControl.LoadDataSet(documentCode, row, clearTableType);
    </code>
	</example>
	<requirements>Parameter <em>row</em> can't be nothing.</requirements>
	<returns>
 True if the successfully retrieved the salesOrder or credit memo/note
 transaction.
 </returns>
	<summary>
		<para>Retieves information of record/s from the datasource using the specified
    parameters.</para>
	</summary>
	<param name="itemCode">The primary code of the item being to be loaded.</param>
	<param name="warehouseCode">The primary code of the warehouse to be loaded.</param>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsForm.IsReadOnly">
	<summary>
 Property to enable/disable controls for editing.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsForm.#ctor(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Facade.Customer.ReceiptFacade)">
	<summary>
 Main Constructor of the class
 </summary>
	<param name="p_receiptDataset"></param>
	<param name="p_receiptFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsForm.CreateApplyCreditControl">
	<summary>
 Creates an instance of the ApplyCreditControl
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsForm.LoadData(System.String,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<param name="customerRow"></param>
	<param name="allocationCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsForm.m_applyCredits_Allocated(System.Object,System.EventArgs)">
	<summary>
 Raises an event Allocated to updated the summary of the DebitControl
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.NewCustomerDetailControl.ValidateShipToAlreadyExist">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.NewCustomerDetailControl.SetFocusUponLoad(System.Object,System.EventArgs)">
	<summary>
 Automatically sets the focus on the editor specified in the customer preference
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerInformationControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditHistoryControl.LoadCompleted(System.IAsyncResult)">
	<summary>
 Procedure that will be called when the asynchronous read is done.
 </summary>
	<param name="result">Contains the result of the asynchronous call.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditHistoryControl.ContinueLoadDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.PromisedGeneralDetailControl.CustomerCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.Criteria.CriteriaPromisedForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.Criteria.CriteriaPromisedForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.PromisedPayment.Criteria.ICriteriaPromisedControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallGeneralDetailControl.FocusedRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallGeneralDetailControl.SortColumn">
	<summary>
 Returns the name of the table column used in sorting.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.GetDetailReportCorrespondingColumn(System.String)">
	<summary>
 Return the grid columns' corresponding detail report column.
 </summary>
	<param name="gridColumn">Grid column name.</param>
	<returns>Returns a value of type <Strong>String</Strong> containing the detail report column name.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.GetSummaryReportCorrespondingColumn(System.String)">
	<summary>
 Returns the grid columns' corresponding summary report column.
 </summary>
	<param name="gridColumn">Grid column name.</param>
	<returns>Returns a value of type <Strong>String</Strong> containing the summary report column name.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.NewActivity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.NewCase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.NewOpportunity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.NewContact">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.NewEmail">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.NewNote">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.NewDocument">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.Common.DetailControl.FocusedRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.Common.DetailControl.LoadGridSettings(System.Windows.Forms.Form)">
	<summary>
 Loads default grid settings.
 </summary>
	<param name="ParentForm"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.Common.DetailControl.DetailControl_HandleCreated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.Common.DetailControl.DetailControl_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedDateForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedDateForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.IPromisedDateInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowDetailControl.FocusedRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.TransactionAuditTrailControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.TransactionAuditTrailControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.TransactionAuditTrailControl.EndLoadDataSet(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.TransactionAuditTrailControl.FinalizeLoadDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.TransactionReceiptFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.ContactCode">
	<summary>
 Property to get or set the contact code of the transaction.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.TotalAuthorizedPaymentRate(System.String)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.HasReservedToInvoice">
	<summary>
 Method that checks if the payment has already been reserved to an Invoice transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.IsAllowVoidReceipt">
	<summary>
 Property that indicates if voiding a payment transaction is allowed
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Can only void payments from the SO form or an Invoice that is not from an SO.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.IsTransactionOpen">
	<summary>
 Property that indicates if voiding a payment transaction is allowed
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If an SO status is Open then True, else False</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.InvokeReceiptAllocationMethod">
	<summary>
 Property that indicates that ReceiptAllocation method shall be invoked.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.EventTabReceipt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.IsCreditCard">
	<summary>
 Gets the value whether the current payment method is Credit Card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.GetReceiptControl(Interprise.Extendable.Customer.Presentation.Receipt.Allocation.IMainReceiptInterface)">
	<summary>
 Creates an instance of the ReceiptControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>1

</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.GetOutstandingCreditControl(Interprise.Extendable.Customer.Presentation.Receipt.IOutstandingCreditInterface)">
	<summary>
 Create an instance of OutstandingCreditControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.VoidCreditCard">
	<summary>
 Method that void's a Credit Card Payment.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.GridViewTransactionReceipt_FocusedRowChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.UserControl_AmountPaidChanged(System.Object,Interprise.Framework.Customer.EventArguments.AmountPaidChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.KitConfiguratorControl.CustomerOverallDiscount">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.KitConfiguratorControl.CouponInfo">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ItemShippedControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.ItemShippedControl.CurrencyCode">
	<value>Returns currency code of the transaction.</value>
	<summary>The currency code of the transaction.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemReturnedControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemReturnedControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemReturnedControl.RelatedAvailableQuantity(System.String)">
	<summary>
 Returns the sum of the total quantity order for a single item
 </summary>
	<value>Array Object</value>
	<returns>Returns the sum of the total quantity order for a single item</returns>
	<remarks>Value is used to determine the Stock Level for a single item in an order</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemReturnedControl.OriginalRelatedAvailableQuantity(System.String)">
	<summary>
 Returns the sum of the total quantity order for a single item
 </summary>
	<value>Array Object</value>
	<returns>Returns the sum of the total quantity order for a single item</returns>
	<remarks>Value is used to determine the Stock Level for a single item in an order</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InventoryItemReturnedControl.CouponDiscountVisibleIndex">
	<summary>
 Property to get/set the column's visible index (colCouponDiscountPercentRate/colCouponDiscountAmountRate)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.InventoryItemReturnedControl.rcboAccountCode_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 This will handle to delete the value member.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>added by pete.a 06/09/2009

</member><member name="P:Interprise.Presentation.Customer.SalesOrder.InternalAndPublicNotesControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.FreightShippingControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.FreightAllocationTotalControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.FreightAllocationForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.FreightAllocationForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Supplier.Presentation.BillsAndDebitMemos.BaseControls.ITaxDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.FreightAllocationDetailControl.PluginContainerTaxSummary_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.FreightAllocationDetailControl.PluginContainerTaxSummaryPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.IBaseTaxDetailTaxSummaryGridInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.FreightAllocationDetailControl.PluginContainerLineItem_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.FreightAllocationDetailControl.PluginContainerLineItemPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IFreightShippingInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.FreightAllocationDetailControl.PluginContainerFreightOther_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.FreightAllocationDetailControl.PluginContainerFreightOtherPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IDiscountInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.FreightAllocationDetailControl.PluginContainerTotal_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.FreightAllocationDetailControl.PluginContainerTotalPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IFreightAllocationTotalInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderGeneralControl.UseSameCustomer">
	<summary>
 Property that specifies whether the duplicate sales order routine should use the
 same customer assigned to the current sales order.
 </summary>
	<value>True if the duplicate SO routine should use the same customer.</value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderGeneralControl.SelectedRecord">
	<summary>
 Property that specifies whether the duplicate sales order routine should use a
 different customer rather than the currently assigned customer of the sales
 order.
 </summary>
	<value>True if the duplicate SO routine should use a different customer.</value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderForm.UseSameCustomer">
	<summary>
 Property that specifies whether the duplicate sales order routine should use the
 same customer assigned to the current sales order.
 </summary>
	<value>True if the duplicate SO routine should use the same customer.</value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderForm.SelectedRecord">
	<summary>
 Property that specifies whether the duplicate sales order routine should use a
 different customer rather than the currently assigned customer of the sales
 order.
 </summary>
	<value>True if the duplicate SO routine should use a different customer.</value>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IDuplicateSalesOrderControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderControl.UseSameCustomer">
	<summary>
 Property that specifies whether the duplicate sales order routine should use the
 same customer assigned to the current sales order.
 </summary>
	<value>True if the duplicate SO routine should use the same customer.</value>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderControl.SelectedRecord">
	<summary>
 Property that specifies whether the duplicate sales order routine should use a
 different customer rather than the currently assigned customer of the sales
 order.
 </summary>
	<value>True if the duplicate SO routine should use a different customer.</value>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.DuplicateSalesOrderControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IDuplicateSalesOrderControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.BillToGeneralControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.BillToGeneralControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.BillToGeneralControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.SalesOrder.BillToGeneralControl.SalesOrderDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.BillToForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesOrder.BillToControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.RechargeGiftCard.RechargeGiftCardForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.RechargeGiftCard.RechargeGiftCardForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.RechargeGiftCard.IMainInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.RechargeGiftCard.RechargeGiftCardDetailControl.CreateNewInvoice">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.RechargeGiftCard.RechargeGiftCardDetailControl.GetCustomerRow(System.String)">
	<summary>
	</summary>
	<param name="customerCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.RechargeGiftCard.RechargeGiftCardDetailControl.GetShipToRow(System.String)">
	<summary>
	</summary>
	<param name="shipToCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.RechargeGiftCard.RechargeGiftCardDetailControl.RechargeGiftCard">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.WebCheckoutControl.ChangeLogo(System.String)">
	<summary>
 Changes the current selected Web Checkout Type
 </summary>
	<param name="webCheckoutType">Web Checkout Type</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SwipeCard.SwipeCardForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SwipeCard.SwipeCardForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SwipeCard.ISwipeCardInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SwipeCard.SwipeCardControl.ExpDate">
	<summary>
 Gets the expiration date in this format: YYMM
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentForm.HideAllocation">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.IPaymentInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.IsCustomerRefund">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.IsCustomerVoidReceipt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.IsDeallocated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.HideAllocation">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.AddAllocation(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="rowCustomer"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.AddAllocationHeader(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="rowCustomer"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.AddAmountAllocated">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.AutoAllocate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.ContinueAllPending">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.EnableDisableControls">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.CreateRows(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.AfterAllocationPosted">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.RefreshCurrencyDelegate">
	<summary>
	</summary>
	<param name="currencyCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.SetReceiptFormText(System.String,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.SetFormText">
	<summary>
 Me.EntityName 
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.UpdateDataset(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isPost"></param>
	<param name="isSaveAllocation"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.OnAuthorizationFinish(System.EventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.m_information_PaymentMethodChanged(System.Object,System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="receiptMethod"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.Deallocate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.SaveAndPostAllocation(System.Windows.Forms.DialogResult@,System.Boolean,System.String@)">
	<summary>
	</summary>
	<param name="isRepost"></param>
	<param name="errorMsg"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.UpdateAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.Print(System.Boolean)">
	<summary>
	</summary>
	<param name="isSilent"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.m_information_AutoAllocated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.m_information_AmountPaidChanged(System.Object,Interprise.Framework.Customer.EventArguments.AmountPaidChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.PluginContainerDebits_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.PluginContainerDebitsPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.IDebitInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.PluginContainerCredits_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.PaymentControl.PluginContainerCreditsPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.ApplyCredit.ICreditInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.UpdateDatasetFunction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.PaymentTransactionNotYetProcess">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.FromUpdatingAllocation">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.OverrideAmountPaid">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.ApplyDiscount">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.AutoWriteOff(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="debit"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.AssignPotentialDiscount(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="debit"></param>
	<param name="discount"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.CalculateBalance(System.Data.DataRow,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="debit"></param>
	<param name="discount"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.CalculateProposeAllocatedValue(System.Data.DataRow)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.ComputeDiscount(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="debit"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.CreateDebitRows(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.CreateRefundRow(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.DeallocateDebit">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.DeallocateDebit(System.Int32)">
	<summary>
	</summary>
	<param name="gridFocusedRowHandle"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.LoadCustomer">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.RemoveDiscount(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="debit"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.SetColumnValue(System.Data.DataRow,System.String,System.Object)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="columnName"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.UnapplyDiscount">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.UpdateAllocationBalance(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.UpdateCreditAllocatedAmount(System.Decimal)">
	<summary>
	</summary>
	<param name="allocated"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.UpdateSelected(System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="selected"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.UpdateUI">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.WriteOff(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="debit"></param>
	<param name="writeOffAmount"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.ValidateDebitAllocation(System.Int32)">
	<summary>
	</summary>
	<param name="gridFocusedRowHandle"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.CheckSelect(System.Boolean,System.Int32)">
	<summary>
	</summary>
	<param name="check"></param>
	<param name="rowHandle"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.UpdateAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.gvwAllocationDebit_CellValueChanged(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.gvwAllocationDebit_CellValueChanging(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.gvwAllocationDebit_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.rhypApplied_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.rhypApplCredits_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.rchkSelect_EditValueChanging(System.Object,DevExpress.XtraEditors.Controls.ChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.rchkisApplyPotentialDiscount_EditValueChanging(System.Object,DevExpress.XtraEditors.Controls.ChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.gvwAllocationDebit_CustomRowCellEdit(System.Object,DevExpress.XtraGrid.Views.Grid.CustomRowCellEditEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.gvwAllocationDebit_CustomDrawCell(System.Object,DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.DebitControl.rhypDocumentCode_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainForm.SelectedDebitTransaction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.ApplyCredit.IMainInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.BeginLoadAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.FinalizeCreationCreditRowsDelegate">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.CreateCreditRowsDelegate">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.LoadAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.RefreshCurrencyDelegate">
	<summary>
	</summary>
	<param name="currencyCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.m_allocateControl_CreditAllocationChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.PluginContainerDebits_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.PluginContainerDebitsPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.ApplyCredit.IDebitInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.PluginContainerReceiptHeader_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.MainControl.PluginContainerReceiptHeaderPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.ApplyCredit.ICreditInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.DebitControl.SelectedDebitTransaction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.DebitControl.CreateDebitRows(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.DebitControl.RearrangeUI">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.DebitControl.MakeInvoiceSelected">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.IsAmendAllocation1">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.SelectedDebitTransaction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.PaymentTransactionNotYetProcess">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.FromUpdatingAllocation">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.OverrideAmountPaid">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.#ctor(Interprise.Facade.Customer.ReceiptFacade,Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.RearrangeUI">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.SetColumnValue(System.Data.DataRow,System.String,System.Object)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="columnName"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.UpdateSelected(System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="selected"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.UpdateAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.DeallocateCredit">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.gvwAllocationCredit_CellValueChanged(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.gvwAllocationCredit_CellValueChanging(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.gvwAllocationCredit_CustomDrawFooterCell(System.Object,DevExpress.XtraGrid.Views.Grid.FooterCellCustomDrawEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.gvwAllocationCredit_CustomUnboundColumnData(System.Object,DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.gvwAllocationCredit_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.rchkSelect_CheckedChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.ApplyCredit.CreditControl.rhypDocumentCode_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedForm.SelectedDebitTransaction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedForm.TransactionCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.IAppliedInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedDebitControl.LoadGridSettings">
	<summary>
 Method use to load grid settings. 
 </summary>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedCreditControl.LoadGridSettings">
	<summary>
 Method use to load grid settings. 
 </summary>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedControl.PluginContainerDebit_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedControl.PluginContainerDebitPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.IAppliedDebitInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedControl.PluginContainerCredits_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.SimplePayment.AppliedControl.PluginContainerCreditsPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.SimplePayment.IApplyCreditInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.OutstandingCreditControl.TransactionRow">
	<summary>
 Property to get/set the sales order/invoice information of the transaction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.OutstandingCreditControl.IsFromSOInvoice">
	<summary>
 Property that specifies that the selected allocation is from SO or Invoice
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Added By: Blyth L. Kitane    1/19/2010</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.OutstandingCreditControl.CreateCreditRows(System.Data.DataRow)">
	<summary>
 Method use to create the section control and attached them to the main control. 
 </summary>
	<param name="customerRow">customer row from which to get the credits</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.OutstandingCreditControl.LoadGridSettings(System.Windows.Forms.Form)">
	<summary>
 Loads default grid settings.
 </summary>
	<param name="ParentForm"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.OutstandingCreditControl.AllocateCredit(System.Boolean,System.Decimal)">
	<summary>
 Allocate SI/SO to customer credit
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.OutstandingCreditControl.ValidateInput(System.Int32)">
	<summary>
 Validates user data input.
 </summary>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.OutstandingCreditControl.gvwAllocationCredit_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary>
 Validate input
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.InformationControl.PaymentMethod">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.InformationControl.IsFromSOInvoice">
	<summary>
 Property that specifies that the selected allocation is from SO or Invoice
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Added By: Blyth L. Kitane    1/19/2010</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.InformationControl.IsDisposeCurrentFacadeAndDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.Changecontrols(System.String)">
	<summary>
 Changes the visibility of the control
 </summary>
	<param name="p_PaymentMethod"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.InitializePayment(Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.SetOriginalPaymentMethod(System.String)">
	<summary>
	</summary>
	<param name="paymentMethod"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.EndCurrentEdit(System.String[])">
	<summary>
	</summary>
	<param name="relatedTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.SetFocusToAmountPaid">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.numTotalAmountPaid_EditValueChanging(System.Object,DevExpress.XtraEditors.Controls.ChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.numTotalAmountPaid_Validated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.numTotalAmountPaid_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.SeachComboPayType_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Cancels the event if Payment Method is WEB CHECKOUT [READ-ONLY]
 Added by Aaron Castaños 10.20.2009
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.InformationControl.ReceiptNotesControl_NotesChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.DifferentCurrencyBankAccountForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.DifferentCurrencyBankAccountForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.IDifferentCurrencyBankAccountInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.DifferentCurrencyBankAccountControl.PluginContainerBaseDifferentCurrencyBankAccount_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.DifferentCurrencyBankAccountControl.PluginContainerBaseDifferentCurrencyBankAccountPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Receipt.IDifferentCurrencyBankAccountGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="E:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BeforeCreditCardProcess">
	<summary>
 Occurs before Auth/Capture/Void process begins.
 </summary>
	<remarks>To cancel the current credit card process, set e.Cancel parameter to true.</remarks>
</member><member name="E:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AfterCreditCardProcess">
	<summary>
 Occurs after Auth/Capture/Void process regardless if the process was successful or not.
 </summary>
	<remarks>The CreditCardProcessed event will be fired if the process completed successfully.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AllocationDifference">
	<summary>
 Returns AllocationDifference (Credits - Debits)
 </summary>
	<value></value>
	<returns>Decimal</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CurrentDataset">
	<summary>
 Returns the CurrentDataset.
 </summary>
	<value></value>
	<returns>Framework.Base.DatasetComponent.BaseDataset</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CurrentFacade">
	<summary>
 Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.
 </summary>
	<value></value>
	<returns>Extendable.Base.Facade.IBaseInterface</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.DefaultAmountPaid">
	<summary>
 Sets DefaultAmountPaid
 </summary>
	<value>Decimal</value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ReceiptDataset">
	<summary>
 Returns ReceiptDataset.
 </summary>
	<value></value>
	<returns>Framework.Customer.DatasetGateway.ReceiptDatasetGateway</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.TransactionType">
	<summary>
 Property to read or write Framework.Base.Shared.Enum.TransactionType
 </summary>
	<value></value>
	<returns>Framework.Base.Shared.Enum.TransactionType</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsReceiptOnly">
	<summary>
 Returns and sets the form if is a receipt only form
 </summary>
	<value></value>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsAmendAllocation">
	<summary>
 Property that specifies if allocation if for amending
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsCustomerRefund">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsCustomerVoidReceipt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsDeallocated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsNewAllocation">
	<summary>
 Specifies if the allocation is new one
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CustomerCode">
	<summary>
 Property that Gets/Sets the current customer code
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.DocumentCode">
	<summary>
 Property that Gets/Sets the current document code
 </summary>
	<value></value>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsCreditCardReadonly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ContactCode">
	<summary>
 Property to get or set the contact code of the transaction.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsFormClosing">
	<summary>
 Property to indicate that the form is closing
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.HasReservedToInvoice(System.String)">
	<summary>
 Method that checks if the payment has already been reserved to an Invoice transaction.
 </summary>
	<param name="param"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsReserveAndAllocateReceipt">
	<summary>
 Property to indicate that reserving and allocating receipt(s) is not allowed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.PaymentOnProcess">
	<summary>
 Property to indicate the current credit card payment being processed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsFromSOInvoice">
	<summary>
 Property that specifies that the selected allocation is from SO or Invoice
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsParentTransactionOpen">
	<summary>
 Property to inform the child controls that the parent transaction(invoice/order) is no longer open(processed/posted/voided)
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.TransactionRow">
	<summary>
 Property to get/set the sales order/invoice information of the transaction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.IsFromCustomerAllocationTab">
	<summary>
 Property that specifies that the selected allocation is from the Customer Allocation tab
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.UseOldAllocationMode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ReceiptListControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CanOverrideCreditCardPayment">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AddData(System.Data.DataRow)">
	<summary>
 Insert a new blank datarow on the datatable
 </summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AddAllocationHeader(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="rowCustomer"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AddAllocationCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AutoAllocate">
	<summary>
 Automatically allocates credit
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AllocateControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ChangeControls(System.String)">
	<summary>
	</summary>
	<param name="paymentMethod"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CreateFromSelectedInvoice(System.Data.DataRow[],System.Data.DataRow@)">
	<summary>
 Creates From Selected Invoice. 
 </summary>
	<param name="invoiceRow">invoices to be included in the allocation</param>
	<param name="customerRow">current customer selected</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CreateRows(System.Data.DataRow)">
	<summary>
 Copies rows to the datatable . 
 </summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.Deallocate">
	<summary>
 Deallocates the allocation values and return the form to it's original state
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.EnableDisableControls">
	<summary>
 Enable/disable menu commands
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.EndCurrentEdit">
	<summary>
 Refeshes list by rebinding controls
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.UnApplyInvoicePayment">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ReturnReceipt">
	<summary>
 Returns Receipt depending on payment method
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
 Method use to fetch data from the database and populates the tables specified in the parameters.
 </summary>
	<param name="documentCode">document to be read</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.WorkCompleted(System.IAsyncResult)">
	<summary>
 A callback method to process additional task/s after asynchronous task has been completed
 </summary>
	<param name="result">A <strong>System.IAsyncResult</strong> that will contain the result of the asynchronous method</param>
	<remarks></remarks>&gt;

</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ContinueAllPending">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.SetDefaultSettings">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AfterAllocationPosted">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.PromptUserWhenNoDebitSelected">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.SaveAndPostAllocation(System.Windows.Forms.DialogResult@,System.Boolean,System.String@)">
	<summary>
	</summary>
	<param name="updateResult"></param>
	<param name="isRepost"></param>
	<param name="errorMsg"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.UpdateAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.SetCaption">
	<summary>
 Sets captions of the form depending on the transaction type
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ShowCustomerDetail">
	<summary>
 Shows CustomerDetails form
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ShowNewForm">
	<summary>
 Show new record/transaction.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ProcessKeyPreview(System.Windows.Forms.Message@)">
	<summary>
 Detects and handles the key pressed down by the user
 </summary>
	<param name="m"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.SelectPage(System.Int32)">
	<summary>
 Set focus from one page to another. Page is a group of controls.
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.Find">
	<summary>
 Finds a record/transaction.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.Void">
	<summary>
 Voids changes in the dataset
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.OnRefreshReceiptList(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.UndoChanges">
	<summary>
 Undo changes made to the dataset.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.NewActivity">
	<summary>
 Shows NewActivity 
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.NewCase">
	<summary>
 Shows NewCase
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.NewOpportunity">
	<summary>
 Shows NewOpportunity
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.NewContact">
	<summary>
 Shows NewContact
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.NewDocument">
	<summary>
 Shows NewDocument
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.NewEmail">
	<summary>
 Shows NewEmail
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.NewNote">
	<summary>
 Shows NewNote
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ForceInitializeControl">
	<summary>
 Call the method to forcibly instantiate the child controls.
 </summary>
	<remarks>InitializeControl is called automatically upon loading of this control. Call ForceInitializeControl when this control is instantiated but not yet loaded.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.SynchronizeCustomerCredit">
	<summary>
 Update the available and allocated credits of each receipt per customer
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BeginCreateAllocationRows">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CreationAllocationRowsCompleted(System.IAsyncResult)">
	<summary>oloapuy
 
 
 </summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.FinalizeCreationAllocationRows">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BeginCreditRows(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CreationCreditRowsCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.CreateCreditRowsDelegate">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.FinalizeCreationCreditRowsDelegate">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.GetCreditCardControl(Interprise.Extendable.Customer.Presentation.Receipt.ICreditCardInterface)">
	<summary>
 Create an instance of CreditCardControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.ProcessOverrideCreditCardPayment(Interprise.Presentation.Customer.Receipt.InformationControl)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.DisableAuthorizeButton(System.Boolean)">
	<summary>
	</summary>
	<param name="enable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AcceptGiftCardOrCertificate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.AcceptLoyaltyPoints">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.LoadCustomer">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.OnAfterCreditCardProcess(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BackgroundAddReceipt_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BackgroundAddReceipt_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BackgroundCreateDebitRowsAndAllocate_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BackgroundCreateDebitRowsAndAllocate_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BackgroundWorkerCreateRows_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.BackgroundWorkerCreateRows_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.m_debitsControl_CreditsAllocated">
	<summary>
 Disable Auto Allocate when user allocates from the Apply Credits Form.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.m_information_AmountPaidChanged(System.Object,Interprise.Framework.Customer.EventArguments.AmountPaidChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.m_receiptAllocationFacade_InvalidatedOnSaving(System.Object,System.String)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="errorMessage"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.#ctor">
	<summary>
 Class' main constructor
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.MainReceiptControl.PluginContainerPaymentInformation_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsControl_OLD.InvoiceCode">
	<summary>
 Gets/Sets the invoiceCode property
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsControl_OLD.IsReadOnly">
	<summary>
 Property to enable/disable controls for editing.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsControl_OLD.#ctor(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Facade.Customer.ReceiptFacade)">
	<summary>
 Main Constructor of the class
 </summary>
	<param name="p_receiptDataset"></param>
	<param name="p_receiptFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsControl_OLD.ValidateInput(System.Int32)">
	<summary>
 Validates user data input.
 </summary>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsControl_OLD.LoadCreditRows(System.String,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<param name="customerRow"></param>
	<param name="allocationCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Receipt.Allocation.ApplyCreditsControl_OLD.ApplyAllocatedCredit">
	<summary>
 Raises a method in the facade to apply the selected credits.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.PaymentForm.VoidResult">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.PaymentForm.ReceiptListControl_ReceiptAdded(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.PaymentForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.PaymentForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IReceiptListInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.ProspectDetailForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.MenuActionAttribute.#ctor(Interprise.Framework.Base.Shared.Enum.MenuAction.MenuCustomer)">
	<summary>
 Create instance of this class.
 </summary>
	<param name="action">Indicates action or usage to be performed by the class.</param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.LoyaltyPoints.LoyaltyPointsForm.TransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.LoyaltyPoints.LoyaltyPointsForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.LoyaltyPoints.LoyaltyPointsForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.LoyaltyPoints.ILoyaltyPointsInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.LoyaltyPoints.LoyaltyPointsControl.TransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.LoyaltyPoints.LoyaltyPointsControl.PluginContainerHeaderControl_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.LoyaltyPoints.LoyaltyPointsControl.PluginContainerHeaderControlPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.LoyaltyPoints.IDocumentDetailsInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.LoyaltyPoints.LoyaltyPointsControl.PluginContainerDetailControl_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.LoyaltyPoints.LoyaltyPointsControl.PluginContainerDetailControlPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.LoyaltyPoints.IDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.LoyaltyPoints.Adjustment.MainForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.LoyaltyPoints.Adjustment.MainForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.TaxDetailReturnItemTaxGridControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailReturnItemTaxGridControl.OnLineItemTaxChanged(DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Procedure that reassigns the Line Item tax amount to the datarow when it is
 changed on the grid.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailReturnItemTaxGridControl.gvwLineItemTax_CustomDrawGroupRow(System.Object,DevExpress.XtraGrid.Views.Base.RowObjectCustomDrawEventArgs)">
	<summary>
 Handles the CustomDrawGroupRow event of gvwLineItemTax; draws the text containing item and tax details on the row using CustomDrawGridView
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A RowObjectCustomDrawEventArgs containing the data for the event</param>
</member><member name="P:Interprise.Presentation.Customer.Invoice.TaxDetailLineItemTaxGridControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailLineItemTaxGridControl.OnLineItemTaxChanged(DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Procedure that reassigns the Line Item tax amount to the datarow when it is
 changed on the grid.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailLineItemTaxGridControl.gvwLineItemTax_CustomDrawGroupRow(System.Object,DevExpress.XtraGrid.Views.Base.RowObjectCustomDrawEventArgs)">
	<summary>
 Handles the CustomDrawGroupRow event of gvwLineItemTax; draws the text containing item and tax details on the row using CustomDrawGridView
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A RowObjectCustomDrawEventArgs containing the data for the event</param>
</member><member name="P:Interprise.Presentation.Customer.Invoice.TaxDetailFreightOtherTaxControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailFreightOtherTaxControl.OnFreightOtherTaxChanged(DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Procedure that reassigns the Freight tax amount to the datarow when it is changed
 on the grid.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailControl.PluginContainerTaxSummary_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailControl.PluginContainerTotal_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailControl.PluginContainerLineItem_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.TaxDetailControl.PluginContainerFreightOther_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryOptionGeneralControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryOptionGeneralControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryOptionGeneralControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.SummaryOptionForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryOptionForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.SummaryOptionControl.PluginContainerSummaryOptionGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SummaryOptionControl.PluginContainerSummaryOptionGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToGeneralControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToGeneralControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.ShipToForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IShipToInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.ShipToControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShipToControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.IShipToGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.ShippingFreightForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ShippingFreightForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.IShippingFreightInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SerialNumberControl.InvoiceDataset">
	<value>The invoice dataset instance used on this control.</value>
	<summary>The invoice dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SalesRepCommissionControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SalesRepCommissionControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SalesRepCommissionControl.SalesRepContactCode">
	<summary>
 The primary code of the sales rep contact used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the sales rep contact being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.Invoice.SalesRepCommissionControl.SalesRepGroupCode">
	<summary>
 The primary code of the sales rep group used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the sales rep group being used on the current
 transaction.
 </value>
</member><member name="M:Interprise.Presentation.Customer.Invoice.SalesRepCommissionControl.hypSalesRep_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Shows the CRM's Contact Form.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.SalesRepCommissionControl.hypSalesRepGroup_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Shows the Customer's SalesRep Form.
 </summary>
	<param name="sender"> The source of the event. </param>
	<param name="e"> An OpenLinkEventArgs object that contains event data. </param>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PostInvoiceControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PostInvoiceControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PostInvoiceControl.IsProcess">
	<summary>
 IsProcess
 </summary>
	<value></value>
	<returns></returns>
	<remarks>added by mac.c for Bug 837</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.PostInvoiceControl.Post(System.Data.DataRow[])">
	<summary>Procedure that calls the post method of the InvoiceFacade.</summary>
	<example>
		<para>The following codes shows how to implement the <strong><em>Post</em></strong>
    method.</para>
		<code lang="VB" title="Post" description="Posts the information on the rowInvoice to the accounting journal.">
 Dim postInvControl As New PostInvoiceControl
 Dim rowInvoice As DataRow 
 postInvControl.Post(rowInvoice)
    </code>
		<code lang="CS" title="Post" description="Posts the information on the rowInvoice to the accounting journal.">
 PostInvoiceControl postInvControl = new PostInvoiceControl();
 DataRow rowInvoice;
 postInvControl.Post(rowInvoice);
    </code>
	</example>
	<requirements>Parameter <em>rowInvoice</em> can't be nothing.</requirements>
	<param name="rowInvoice">The invoice row to be posted in the accounting journal.</param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.PostInvoiceControl.NotifyInvoiceHasBackOrder(System.Data.DataRow[])">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.PopupInvoiceDateForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PopupInvoiceDateForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.IPopupInvoiceDateInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.PopupInvoiceDateControl.PluginContainerPopupInvoiceDate_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PopupInvoiceDateControl.PluginContainerPopupInvoiceDatePluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.IPopupInvoiceDateDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PaymentBreakdownGeneralControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.PaymentBreakdownForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PaymentBreakdownForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.PaymentBreakdownControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.PaymentBreakdownControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ItemSupplierControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.ItemSupplierControl.LoadDataSet(System.String,System.String)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadDataSet</em></strong> method.</para>
		<code lang="VB" title="LoadDataSet" description="Retrives the data of the salesOrder or credit memo/note from the data source.">
 Dim invControl As New Interprise.Presentation.Customer.SalesOrder.SalesOrderControl
 Dim documentCode As String = "SO-000001"
 Dim row As DataRow
 Dim clearTableType As ClearType = Framework.Base.Shared.Enum.ClearType.Specific
 Dim isLoaded As Boolean
 isLoaded = invControl.LoadDataSet(documentCode, row, clearTableType)
    </code>
		<code lang="CS" title="LoadDataset" description="Retrives the data of the salesOrder or credit memo/note from the data source.">
 Interprise.Presentation.Customer.SalesOrder.SalesOrderControl invControl = new Interprise.Presentation.Customer.SalesOrder.SalesOrderControl();
 string documentCode = "SO-000001";
 DataRow row;
 ClearType clearTableType = Framework.Base.Shared.Enum.ClearType.Specific;
 bool isLoaded;
 isLoaded = invControl.LoadDataSet(documentCode, row, clearTableType);
    </code>
	</example>
	<requirements>Parameter <em>row</em> can't be nothing.</requirements>
	<returns>
 True if the successfully retrieved the salesOrder or credit memo/note
 transaction.
 </returns>
	<summary>
		<para>Retieves information of record/s from the datasource using the specified
    parameters.</para>
	</summary>
	<param name="itemCode">The primary code of the item being to be loaded.</param>
	<param name="warehouseCode">The primary code of the warehouse to be loaded.</param>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.PluginContainerCustomFields_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.PluginControlShipList_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.PluginControlShipListPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InvoiceControl.PluginContainerInternalPublicNotes_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InvoiceControl.PluginContainerInternalPublicNotesPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.IInternalAndPublicNotesControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InventoryItemReturnedControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InventoryItemReturnedControl.RelatedAvailableQuantity(System.String)">
	<summary>
 Returns the sum of the total quantity order for a single item
 </summary>
	<value>Array Object</value>
	<returns>Returns the sum of the total quantity order for a single item</returns>
	<remarks>Value is used to determine the Stock Level for a single item in an order</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InventoryItemReturnedControl.OriginalRelatedAvailableQuantity(System.String)">
	<summary>
 Returns the sum of the total quantity order for a single item
 </summary>
	<value>Array Object</value>
	<returns>Returns the sum of the total quantity order for a single item</returns>
	<remarks>Value is used to determine the Stock Level for a single item in an order</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.InventoryItemReturnedControl.CouponDiscountVisibleIndex">
	<summary>
 Property to get/set the column's visible index (colCouponDiscountPercentRate/colCouponDiscountAmountRate)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.InventoryItemReturnedControl.rcboAccountCode_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 This will handle to delete the value member.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>added by pete.a 06/09/2009

</member><member name="P:Interprise.Presentation.Customer.Invoice.InternalAndPublicNotesControl.InvoiceDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.FreightShippingControl.InvoiceDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.FreightAllocationForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.FreightAllocationForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.IFreigtAllocationDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.FreightAllocationDetailControl.PluginContainerLineItem_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.FreightAllocationDetailControl.PluginContainerLineItemPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.IFreightShippingInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.FreightAllocationDetailControl.PluginContainerFreightOther_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.FreightAllocationDetailControl.PluginContainerFreightOtherPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.IDiscountInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.FreightAllocationDetailControl.PluginContainerTaxSummary_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.FreightAllocationDetailControl.PluginContainerTaxSummaryPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.FreightAllocationDetailControl.PluginContainerTotal_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.FreightAllocationDetailControl.PluginContainerTotalPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.IFreightAllocationTotalInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundForm.CreditRow">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundForm.DefaultAmountPaid">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundForm.RefundControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundForm.#ctor(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundForm.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundControl.CreditRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundControl.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundControl.CreateRows(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundControl.EnableDisableControls">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundControl.OnAfterCreditCardProcess(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.RefundControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ProcessCreditMemoGeneralControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ProcessCreditMemoGeneralControl.ProcessCreditMemo">
	<summary>
 Property that assigns the process the credit memo transaction should
 apply.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ProcessCreditMemo</em></strong> method.</para>
		<code lang="VB" title="ProcessCreditMemo" description="Assign/retrive the value of ProcessCreditMemo.">
 Dim processCMControl As New ProcessCreditMemoControl
 Dim process As String = "Apply"
 '
 'Procedure to assign the value to property
 processCMControl.ProcessCreditMemo = process
 '
 'Procedure to retrieve the value to property
 process = processCMControl.ProcessCreditMemo
    </code>
		<code lang="CS" title="ProcessCreditMemo" description="Assign/retrive the value of ProcessCreditMemo.">
 ProcessCreditMemoControl processCMControl = new ProcessCreditMemoControl();
 string process = "Apply";
 // 
 // Procedure to assign the value to property
 processCMControl.ProcessCreditMemo = process;
 // 
 // Procedure to retrieve the value to property
 process = processCMControl.ProcessCreditMemo;
    </code>
	</example>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.ProcessCreditMemoGeneralControl.Validate">
	<summary>Validates the data etries on the control for errors.</summary>
	<remarks>If set to true, there were no errors found</remarks>
	<example>
    The following codes shows how to implement the <strong><em>Validate</em></strong>
    method. 
    <code lang="VB" title="Validate" description="Checks the data entries for errors.">
 Dim processCMControl As New ProcessCreditMemoControl
 Dim isValid As Boolean 
 isValid = processCMControl.Validate()
 </code>
		<code lang="CS" title="Validate" description="Checks the data entries for errors.">
 ProcessCreditMemoControl processCMControl = new ProcessCreditMemoControl();
 bool isValid;
 isValid = processCMControl.Validate();
    </code>
	</example>
	<returns>True if errors are found on the validation procedure.</returns>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.ProcessCreditMemoForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.ProcessCreditMemoControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.CreditMemoForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.CODReturned.MainForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.CODReturned.MainForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.CreditMemo.CODReturned.IMainInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.CODReturned.MainControl.PluginContainerMain_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.CODReturned.MainControl.PluginContainerMainPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.CreditMemo.CODReturned.IDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.IBaseInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyDetailControl.InvoiceDataset">
	<value>The invoice dataset instance used on this control.</value>
	<summary>The invoice dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyDetailControl.SetDisplayText">
	<summary>Procedure that assigns the text caption of the apply control.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>SetDisplayText</em></strong> method.</para>
		<code lang="VB" title="Dim applyControl As New ApplyControl " description="Assign the text caption of the apply control.">
 Dim applyControl As New ApplyControl 
 applyControl.SetDisplayText()
    </code>
		<code lang="CS" title="SetDisplayText" description="Assign the text caption of the apply control.">
 ApplyControl applyControl = New ApplyControl();
 applyControl.SetDisplayText();
    </code>
	</example>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyControl.InvoiceDataset">
	<value>The invoice dataset instance used on this control.</value>
	<summary>The invoice dataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyControl.PluginContainerDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.CreditMemo.ApplyControl.PluginContainerDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.CreditMemo.IApplyDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BillToGeneralControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BillToGeneralControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BillToGeneralControl.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BillToGeneralControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BillToForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BillToControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.PluginContainerAging_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.PluginContainerSalesSummary_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.PluginContainerCustomFields_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.BatchInvoice.BatchInvoiceControl.PluginContainerCustomFieldsPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.ICustomFieldInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Invoice.ApplyCreditControl_OLD.InvoiceDataset">
	<value>Returns the instance of the invoice dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The invoice dataset instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.RecentSalesControl.PluginCriteriaBuilder_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomPricingControl.popupmenuPriceBreak_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomPricingControl.barmangerPriceBreak_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CustomerRecentSalesSearchControl.SelectedWarehouse">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CustomerRecentSalesSearchControl.CurrentFilter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CustomerRecentSalesSearchControl.PreviousFilter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CustomerRecentSalesSearchControl.IsReloaded">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CustomerRecentSalesSearchControl.Reload">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerRecentSalesSearchControl.PluginCriteriaSearchBuilder_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.CancelMenuAction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<param name="row"></param>
	<param name="clearTableType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.GetTradingInfoControl(Interprise.Extendable.Customer.Presentation.CustomerDetail.ITradingInfoInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.Refresh">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.TabGroupCustomer_SelectedPageChanging(System.Object,DevExpress.XtraLayout.LayoutTabPageChangingEventArgs)">
	<summary>
 Disallow selecting other tab pages when there is an error in the required field. ''' 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Added By: Blyth L. Kitane 6/10/2009</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerCustomField_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerTurnoverAnalysisChart_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerTurnoverDetails_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerServiceContracts_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerServiceContractDetails_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerHeader_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerTradingInfo_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerSetup_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerCustomerPartCodes_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerSpecialPricing_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerAnalysis_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerDetailControl.PluginContainerCreditsReceivables_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetailCBNControl.CustomerDetailCBNControlSection.PluginControlReference_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetailCBNControl.CustomerDetailCBNControlSection.PluginControlReferencePluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetailCBNControl.CustomerDetailCBNControlSection.PluginControlProfile_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetailCBNControl.CustomerDetailCBNControlSection.PluginControlProfilePluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetailCBNControl.CustomerDetailCBNControlSection.PluginContainerWebsiteLogin_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CustomerCriteriaBuilderControl.AdditionalFilter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CustomerCriteriaBuilderControl.CurrentFilter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerCriteriaBuilderControl.InitializeControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CustomerCriteriaBuilderControl.ResetCriteria">
	<summary>
 Resets the criteria builder.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditReceivableControl.m_creditInformationControl_ContactCode_Changed(System.Object,System.EventArgs)">
	<summary>
 Change the contact code for the notes control
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditReceivableControl.PluginContainerCreditInformation_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditReceivableControl.PluginContainerAging_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditReceivableControl.PluginContainerOptions_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditReceivableControl.PluginContainerCreditReceivables_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditReceivableControl.PluginContainerNotes_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditInformationControl.LoadCompleted(System.IAsyncResult)">
	<summary>
 Procedure that will be called when the asynchronous read is done.
 </summary>
	<param name="result">Contains the result of the asynchronous call.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditInformationControl.ContinueLoadDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.BeginCreateCustomerStatementRuns(System.Decimal,System.Boolean,System.DateTime,System.String)">
	<summary>
	</summary>
	<param name="minBalance"></param>
	<param name="isIncludeOnHold"></param>
	<param name="ageDate"></param>
	<param name="customerCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.BeginLoadCustomerStatements">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.CloseProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.CreateCustomerStatementRunsCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.GetDetailControl(Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.Common.IDetailInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.GetInterestChargeControl(Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.Common.IInterestChargeInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.LoadDatasetCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.LoadDatasetInterestCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.ShowProgressForm(System.Boolean)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.StartProgressForm(System.Boolean)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.IsInterestCharge">
	<summary>
 Gets whether the transaction includes the calculation of the interest charge.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.tabWizard_SelectedPageChanged(System.Object,DevExpress.XtraTab.TabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.PluginContainerGeneral_SelectAllButtonClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.StatementRunWizard.StatementRunWizardControl.PluginContainerGeneral_SelectNoneButtonClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.PromisedPaymentForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.PromisedPaymentForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.PromisedPayment.IPromisedPaymentControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.PromisedPaymentControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.PromisedPaymentControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.PromisedPayment.IPromisedGeneralDetailControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.Criteria.CriteriaPromisedControl.PluginContainerDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedPayment.Criteria.CriteriaPromisedControl.PluginContainerDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.PromisedPayment.Criteria.ICriteriaPromisedDetailControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedDateControl.PluginContainerPromisedDate_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PromisedDateControl.PluginContainerPromisedDatePluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.IPromisedDateDetailControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.PredictedCashFlow.IPredictedCashFlowInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.CashFlowDetail">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.NewActivity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.NewCase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.NewOpportunity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.NewContact">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.NewEmail">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.NewNote">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.NewDocument">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.PluginContainerDailyCashFlow_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.PluginContainerDailyCashFlowPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.PredictedCashFlow.IDailyChartInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.PluginContainerCumulativeCashFlow_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.PluginContainerCumulativeCashFlowPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.PredictedCashFlow.ICumulativeChartInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.PluginContainerContainerCashFlowDetails_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.PredictedCashFlow.PredictedCashFlowControl.PluginContainerContainerCashFlowDetailsPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.PredictedCashFlow.IPredictedCashFlowDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.OverallAgedDebt.IOverallGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.PluginContainerOverallAgedDebt_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OverallAgedDebt.OverallAgedDebtControl.PluginContainerOverallAgedDebtPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.OverallAgedDebt.IOverallGeneralDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.OutstandingBalance.IOutstandingBalanceInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.DetailControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.IsLoading">
	<summary>
 Gets or sets a value indicating whether the LoadDataset is currently in process of loading data.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.LoadCompleted(System.IAsyncResult)">
	<summary>
 Procedure that will be called when the asynchronous read is done.
 </summary>
	<param name="result">Contains the result of the asynchronous call.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.LoadCompletedAging(System.IAsyncResult)">
	<summary>
 Procedure that will be called when the asynchronous read is done.
 </summary>
	<param name="result">Contains the result of the asynchronous call.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.ContinueLoadDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.ContinueLoadDatasetAging">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.NewActivity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.NewCase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.NewOpportunity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.NewContact">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.NewEmail">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.NewNote">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.NewDocument">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.PluginContainerFilter_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.PluginContainerFilterPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.OutstandingBalance.IFilterInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.PluginContainerDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.PluginContainerDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.Common.IDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.PluginContainerAgedAnalysis_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.PluginContainerAgedAnalysisPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.OutstandingBalance.IOutstandingChartInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.PluginContainerBalanceRepresents_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.OutstandingBalanceControl.PluginContainerBalanceRepresentsPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.CustomerDetail.CreditControl.OutstandingBalance.IOverallFigureInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.Common.InterestChargeControl.rhypInvoiceCode_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CBNForwardCustomer.CBNForwardCustomerForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CBNForwardCustomer.CBNForwardCustomerForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.InventoryItemListControl.CurrentDataset">
	<summary>Return the Current Dataset</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.InventoryItemListControl.CurrentFacade">
	<summary>Return the Current Facade</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.InventoryItemListControl.#ctor(Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway,Interprise.Facade.Customer.CouponFacade)">
	<summary>Initialize the Dataset, Facade, and Control</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.InventoryItemListControl.rsearchcomboItems_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.InventoryItemListControl.rsearchcomboCategories_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.InventoryItemListControl.rsearchcomboManufacturers_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.InventoryItemListControl.rsearchcomboDepartments_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.HeaderControl.CurrentFacade">
	<summary>Return the Current Facade</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.HeaderControl.LanguageCode">
	<summary>
 Gets/sets language Code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.HeaderControl.#ctor(Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway,Interprise.Facade.Customer.CouponFacade)">
	<summary>initialize the Dataset, Facade, and Control</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.DiscountControl.#ctor(Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway,Interprise.Facade.Customer.CouponFacade)">
	<summary>initialize the Dataset, Facade, and Control</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.DiscountControl.CurrentDataset">
	<summary>Return the Current Dataset</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.DiscountControl.CurrentFacade">
	<summary>Return the Current Facade</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CustomerListControl.#ctor(Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway,Interprise.Facade.Customer.CouponFacade)">
	<summary>Initialize the Dataset, Facade, and Control</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.CustomerListControl.CurrentDataset">
	<summary>Return the Current Dataset</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.CustomerListControl.CurrentFacade">
	<summary>Return the Current Facade</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CustomerListControl.LoadGridSettings">
	<summary>Overrides LoadGridSetting</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponForm.#ctor">
	<summary>
 Initialize the Form and CouponControl
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.#ctor">
	<summary>Initialize the Dataset, Facade, and Control</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.CurrentFacade">
	<summary>Return the Current Facade</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.CurrentDataset">
	<summary>Return the Current Facade</summary>
</member><member name="P:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.LanguageCode">
	<summary>
 Gets/sets language Code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.AddData(System.String)">
	<summary>Add New Data in the Dataset</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.ValidateCoupon">
	<summary>
 Validates the coupon discount if DiscountIncludesFreeShipping flag is uncheck or set to false and the amount/percent value is less than or equal to zero.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>Save the Data</summary>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.PluginContainerHeader_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.PluginContainerDiscounts_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.PluginContainerExpiration_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.PluginContainerCustomers_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerCoupon.CouponControl.PluginContainerProducts_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.ConfirmPickedRoutine.SerialNumberControl.ConfirmPickedRoutineDataset">
	<value>The sales order dataset instance used on this control.</value>
	<summary>The sales order dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.ConfirmPickedRoutine.HeaderControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.ConfirmPickedRoutine.HeaderControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.ConfirmPickedRoutine.HeaderControl.ConfirmPickedRoutineDataset">
	<value>The ConfirmPickedRoutineDataset instance used on this control.</value>
	<summary>The ConfirmPickedRoutineDataset instance used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.ConfirmPickedRoutine.HeaderControl.ConvertDropShipPOToGRN(System.String[])">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ConfirmPickedRoutine.ConfirmPickedRoutineForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.ConfirmPickedRoutine.ConfirmPickedRoutineControl.KitDetailItemCode">
	<summary>The primary code of the kit item currently selected on the control.</summary>
	<value>Returns the primary code of the kit item currently selected on the control.</value>
</member><member name="M:Interprise.Presentation.Customer.ConfirmPickedRoutine.ConfirmPickedRoutineControl.SelectAll">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ConfirmPickedRoutine.ConfirmPickedRoutineControl.SelectNone">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.ConfirmPickedRoutine.ConfirmPickedRoutineControl.PluginContainerHeader_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.ConfirmPickedRoutine.ConfirmPickedRoutineControl.PluginContainerSerialLot_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.WPFAgingControl.SetChartDatasource(System.Object)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.WPFAgingControl.ChartAging_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CustomerTurnoverAnalysisChartControl.SetChartSource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CustomerTurnoverAnalysisChartControl.WorkCompleted(System.IAsyncResult)">
	<summary>
 A callback method to process additional task/s after asynchronous task has been completed
 </summary>
	<param name="result">A <strong>System.IAsyncResult</strong> that will contain the result of the asynchronous method</param>
	<remarks></remarks>&gt;

</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CustomerMonthlyAnalysisControl.SetChartSource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CustomerMonthlyAnalysisControl.WorkCompleted(System.IAsyncResult)">
	<summary>
 A callback method to process additional task/s after asynchronous task has been completed
 </summary>
	<param name="result">A <strong>System.IAsyncResult</strong> that will contain the result of the asynchronous method</param>
	<remarks></remarks>&gt;

</member><member name="P:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.PredictedCashFlow.DailyChartControl.CreditControlDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.DailyBarChartControl.SetChartDatasource(System.Object)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.PredictedCashFlow.CumulativeChartControl.CreditControlDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CumulativeBarChartControl.SetChartDatasource(System.Object)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OverallAgedDebt.OverallGeneralControl.CreditControlDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.OverallFigureControl.CreditControlDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.OverallFigureControl.BeginLoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,System.AsyncCallback,System.Object)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="callBack"></param>
	<param name="asyncState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.OverallFigureControl.EndLoadDataSet(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.ChartControl.CreditControlDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.ChartControl.#ctor(Interprise.Framework.Customer.DatasetGateway.CreditControlDatasetGateway,Interprise.Facade.Customer.CreditControlFacade)">
	<summary>
	</summary>
	<param name="creditControlDataset"></param>
	<param name="creditControlFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.ChartControl.BeginLoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,System.AsyncCallback,System.Object)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="callBack"></param>
	<param name="asyncState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.ChartControl.CreateGridDatasource">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.ChartControl.Display">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.OutstandingBalance.ChartControl.EndLoadDataSet(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.CustomerDetail.CreditControl.OutstandingBalance.AgedAnalysisChart.SetChartDatasource(System.Object)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.AgingControl.CreditControlDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.AgingControl.LoadCompleted(System.IAsyncResult)">
	<summary>
 Procedure that will be called when the asynchronous read is done.
 </summary>
	<param name="result">Contains the result of the asynchronous call.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Chart.CustomerDetail.CreditControl.AgingControl.ContinueLoadDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.SalesAnalysisBarChartControl.SetChartDatasource(System.Object)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupControl.CurrentDataset">
	<summary> Property that gets the value of CurrentDataset. </summary>
	<value>Framework.Base.DatasetComponent.BaseDataset </value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupControl.CurrentFacade">
	<summary> Property that gets the instance of the business facade that will be use by the ReadData and SaveData method. </summary>
	<value>Extendable.Base.Facade.IBaseInterface </value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupControl.AddData(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupControl.LoadDataSet(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupControl.Print(System.Boolean)">
	<summary>
 Print report for current transaction.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupControl.UndoChanges">
	<summary>
 Reject changes made to the datasouce.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Setup.SetupControl.ListGridView_InitNewRow(System.Object,DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)">
	<summary> Method use to initialize new row. </summary>
	<remarks>
	</remarks>
	<param name="sender ">
	</param>
	<param name="e ">
	</param>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Import.ImportForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.Import.ImportForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Automotive.Presentation.PORequisition.IRequisitionControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Import.ImportControl.DoProgress(System.Int32,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="value"></param>
	<param name="totalRecordCount"></param>
	<param name="statusText"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Import.ImportControl.DoProgressExport(System.Int32,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="value"></param>
	<param name="totalRecordCount"></param>
	<param name="statusText"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Import.ImportControl.ShowExportedSpreadSheetGear">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Import.ImportControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.Import.ImportControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Automotive.Presentation.PORequisition.IGeneralControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Import.ImportControl.PluginContainerDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.Import.ImportControl.PluginContainerDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Automotive.Presentation.PORequisition.IDetailControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Comment.CommentForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.Comment.CommentForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.Comment.CommentControl.CommentPluginContainerControl_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.Comment.CommentControl.CommentPluginContainerControlPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.BudgetForecast.Presentation.BudgetForecast.Comment.IDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.BudgetForecastForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.BudgetForecastForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.BudgetForecastControl.PluginContainerHeader_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.BudgetForecastControl.PluginContainerHeaderPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.BudgetForecast.Presentation.BudgetForecast.IHeaderInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.BudgetForecast.BudgetForecastControl.PluginContainerDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.BudgetForecast.BudgetForecastControl.PluginContainerDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.BudgetForecast.Presentation.BudgetForecast.IExistingInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.RMAHistoryControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.RMAHistoryControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ReceiptListControl.PluginContainerPaymentControl_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.PromoItems.PromoItemForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.PromoItems.PromoItemForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.LastPriceForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.LastPriceForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.ILastPriceInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.LastPriceDetailControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.LastPriceDetailControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.LastPriceControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.LastPriceControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.LastPriceControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.LastPriceControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.ILastPriceDetailInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.KitConfiguratorForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.KitConfiguratorControl.PluginContainerGeneral_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ItemMatrixEntryForm.m_itemMatrixEntryControl_MatrixGroupAdded(System.Object,Interprise.Framework.Customer.EventArguments.MatrixGroupAddedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ItemMatrixEntryForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ItemMatrixEntryForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IItemMatrixEntry</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ItemMatrixEntryControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ItemMatrixEntryControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ItemMatrixEntryControl.OnMatrixGroupAdded(System.Object,Interprise.Framework.Customer.EventArguments.MatrixGroupAddedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ItemMatrixEntryControl.m_itemMatrixFacade_MatrixGroupAdded(System.Object,Interprise.Framework.Customer.EventArguments.MatrixGroupAddedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.ItemMatrixEntryControl.m_itemMatrixFacade_SetAllTransactionUpdateProgress(System.Object,System.Int32)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.ItemHistoryControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseShippingFreightForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BundleItemConfigurator.BundleItemConfiguratorForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BundleItemConfigurator.BundleItemConfiguratorForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.BundleItemConfigurator.IBundleItemConfiguratorMainControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BundleItemConfigurator.BundleItemConfiguratorMainControl.PluginContainerDetail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BundleItemConfigurator.BundleItemConfiguratorMainControl.PluginContainerDetailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.BundleItemConfigurator.IBundleItemConfiguratorDetailControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSummaryOptionGeneralControl.cboFreightTaxCode_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSummaryOptionGeneralControl.cboOtherTaxCode_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSummaryOptionGeneralControl.cboFreightTaxCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
 '
 </summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSummaryOptionGeneralControl.cboOtherTaxCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSummaryOptionForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSummaryOptionControl.PluginContainerSummaryOptionGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.ISummaryOptionGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSerialNumberControl.DataSource">
	<summary>
 Gets and sets the value for the grdSerialNumber.DataSource
 </summary>
	<value>The dataset that will be used as the controls datasource</value>
	<returns>grdSerialNumber.DataSource</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSerialNumberControl.DataMember">
	<summary>
 Gets and sets the value for the grdSerialNumber.DataMember
 </summary>
	<value>The table name that will be used as the controls datamember</value>
	<returns>grdSerialNumber.DataMember</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSerialNumberControl.AutoGenerate">
	<summary>
 Get the auto generate flag in InventoryItem table
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.IsFromCollision">
	<summary>
 Flag that indicate that the current transaction do have collision
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>pete.a 06/26/2009

</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.IsFormClosing">
	<summary>
 Gets or sets a value indicating whether the form is closing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.IncomingStockReservationControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetAgingAnalysisControl(Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IAgingAnalysisInterface)">
	<summary>
 Creates Aging Analysis Control
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetAttachmentControl(Interprise.Extendable.Base.Presentation.CRM.Document.IListInterface)">
	<summary>
 Create an instance of AttachmentControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetAvailabilityControl(Interprise.Extendable.Base.Presentation.SharedControl.IAvailabilityInterface)">
	<summary>
 Create an instance of AvailabilityControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetItemsAvailabilityControl(Interprise.Extendable.Base.Presentation.SharedControl.IAvailabilityInterface)">
	<summary>
 Creates an instance of ItemsAvailabilityControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetCrossSellControl(Interprise.Extendable.Customer.Presentation.Base.CustomerFile.IFastItemsInterface)">
	<summary>
 Creates an instance of CrossSellControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetCustomerSummaryInformationControl(Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IBaseCustomerSummaryInformationInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetCustomFieldControl(System.Data.DataTable,System.String,Interprise.Extendable.Base.Presentation.SharedControl.ICustomFieldInterface)">
	<summary>
 Create an instance of CustomFieldControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetExtDescriptionControl(Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IExtDescriptionInterface)">
	<summary>
 Create an instance of ExtDescriptionControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetItemHistoryControl(Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IItemHistoryInterface)">
	<summary>
 Create an instance of ItemHistoryControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetMiscAccessoryControl(Interprise.Extendable.Base.Presentation.SharedControl.IAccessoryAvailabilityInterface)">
	<summary>
 Create an instance of AccessoryAvailabilityControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetMiscSubstituteControl(Interprise.Extendable.Base.Presentation.SharedControl.ISubstituteAvailabilityInterface)">
	<summary>
 Create an instance of SubstituteAvailabilityControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.LoadingTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.Initialized">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.InitializeControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.ClearTradingInfo(System.Data.DataSet)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.MergeTradingInfo">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.ReloadTradingInfo(System.String)">
	<summary>
	</summary>
	<param name="customerCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetReceiptListControl(Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IReceiptListInterface)">
	<summary>
 Creates an instance of ReceiptListControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetRMAHistoryControl(Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IRMAHistoryInterface)">
	<summary>
 Creates an instance of RMAHistoryControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetSalesAnalysisControl(Interprise.Extendable.Customer.Presentation.Base.SalesOrder.ISalesAnalysisInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetTransactionControl(Interprise.Extendable.Base.Presentation.SharedControl.ITransactionInterface)">
	<summary>
 Creates an instance of TransactionControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetTransactionAuditTrailControl(Interprise.Extendable.Customer.Presentation.Base.SalesOrder.ITransactionAuditTrailInterface)">
	<summary>
 Creates an instance of TransactionAuditTrailControl
 </summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.GetTradingInfoControl(Interprise.Extendable.Customer.Presentation.CustomerDetail.ITradingInfoInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.FinalizeShowMiscelleneaousItemsDelegate">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="shippingDate"></param>
	<param name="unitMeasureCode"></param>
	<param name="itemDescription"></param>
	<param name="isAccessoriesExists"></param>
	<param name="isSubstitutesExists"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.ShowMiscItemsActual(System.Boolean,System.String,System.String,System.String,System.String,System.Decimal,System.Boolean@,System.Boolean@)">
	<summary>
 Shows the actual misc items.
 </summary>
	<param name="isNewRow"></param>
	<param name="focusedField"></param>
	<param name="itemCode"></param>
	<param name="unitMeasureCode"></param>
	<param name="itemDescription"></param>
	<param name="quantity"></param>
	<param name="isAccessoriesExist"></param>
	<param name="isSubstitutesExist"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.IsCollisionOnPostedField(Interprise.Framework.Base.Exceptions.DataConcurrencyException@)">
	<summary>
 IsCollisionOnPostedField method used to handle the collision on data concurrency with regards to posted field.
 </summary>
	<param name="dbCollision"></param>
	<returns></returns>
	<remarks></remarks> pete.a 06/25/2009

</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.ReadKitAvailability(System.Data.DataRow[])">
	<summary>
 Loads the kit stock information base on the kit components selected by the user.
 </summary>
	<param name="itemKitDetailRows"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.ReadKitAvailabilityAsync(System.String)">
	<summary>
 Loads the kit components stock asynchronously
 </summary>
	<param name="commandText"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.ReadKitAvailabilityAsync_Completed(System.IAsyncResult)">
	<summary>
 Method triggered after asynchronous reading of kit data.
 </summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.ButtonCustomField_Click(System.Object,System.EventArgs)">
	<summary>
 Loads the customization form.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControlOld.m_inventoryItem_AfterDeleteLineItem(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 After deleting line item
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>Pete.A 07/01/2009

</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.CustomerGateway">
	<summary>
 CustomerDetail Gateway
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.CustomerFacade">
	<summary>
 CustomerDetail Facade
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.IsFromCollision">
	<summary>
 Flag that indicate that the current transaction do have collision
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>pete.a 06/26/2009

</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.IsFormClosing">
	<summary>
 Gets or sets a value indicating whether the form is closing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.IncomingStockReservationControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.IsIncomingStockReservationControlReadonly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.TransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.DropShipRefenceAlreadyConvertedToReceipt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ForcedCloseForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.InitializeControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ClearTradingInfo(System.Data.DataSet)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.MergeTradingInfo">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ReloadTradingInfo(System.String)">
	<summary>
	</summary>
	<param name="customerCode"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.FinalizeShowMiscelleneaousItemsDelegate">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="shippingDate"></param>
	<param name="unitMeasureCode"></param>
	<param name="itemDescription"></param>
	<param name="isAccessoriesExists"></param>
	<param name="isSubstitutesExists"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ShowMiscItemsActual(System.Boolean,System.String,System.String,System.String,System.String,System.Decimal,System.Boolean@,System.Boolean@)">
	<summary>
 Shows the actual misc items.
 </summary>
	<param name="isNewRow"></param>
	<param name="focusedField"></param>
	<param name="itemCode"></param>
	<param name="unitMeasureCode"></param>
	<param name="itemDescription"></param>
	<param name="quantity"></param>
	<param name="isAccessoriesExist"></param>
	<param name="isSubstitutesExist"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ReloadTransactionReservation(System.Windows.Forms.DialogResult)">
	<summary>
	</summary>
	<param name="updateResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.UpdateDataSet(System.String[][],System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="confirm"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.IsCollisionOnPostedField(Interprise.Framework.Base.Exceptions.DataConcurrencyException@)">
	<summary>
 IsCollisionOnPostedField method used to handle the collision on data concurrency with regards to posted field.
 </summary>
	<param name="dbCollision"></param>
	<returns></returns>
	<remarks></remarks> pete.a 06/25/2009

</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ReadKitAvailability(System.Data.DataRow[])">
	<summary>
 Loads the kit stock information base on the kit components selected by the user.
 </summary>
	<param name="itemKitDetailRows"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ReadKitAvailabilityAsync(System.String)">
	<summary>
 Loads the kit components stock asynchronously
 </summary>
	<param name="commandText"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ReadKitAvailabilityAsync_Completed(System.IAsyncResult)">
	<summary>
 Method triggered after asynchronous reading of kit data.
 </summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.LoadIncomingStockReservation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ReserveStock(System.Data.DataRow)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ShowHidePOStockReservationControl(System.Boolean)">
	<summary>
	</summary>
	<param name="visible"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.StoreLineItemToBeDelete">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.DeleteStockReservation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ConcurrencyForm_QuantityValueChanged(System.Object,Interprise.Framework.Base.EventArguments.QuantityChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.UpdateAllQuantityShippedAndBackOrdered">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.SetAllPluginReadOnly(System.Boolean)">
	<summary>
	</summary>
	<param name="isReadOnly"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ValidateHasReservation">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.AllowBackOrderWithReservation(System.Boolean,System.Windows.Forms.DialogResult)">
	<summary>
	</summary>
	<param name="allowBackOrder"></param>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ReloadKitComponents">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.UpdateDropShippingDate(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.ZoomInOrOut(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface)">
	<summary>
	</summary>
	<param name="pluginInstance"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.OndteOrderDateEditValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_FocusedCellChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_MatrixGroupAdded(System.Object,Interprise.Framework.Customer.EventArguments.MatrixGroupAddedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_OnKitPricingTypeChanged(System.Object,Interprise.Framework.Customer.EventArguments.KitPricingTypeChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_AfterInsertLineItem(System.Object,Interprise.Framework.Customer.EventArguments.LineItemEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_AfterDeleteLineItem(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 After deleting line item
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>Pete.A 07/01/2009

</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_QuantityValueChanged(System.Object,Interprise.Framework.Base.EventArguments.QuantityChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_UnitOfMeasureChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_WarehouseChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.DefaultTabGroupMiscItemsHeight(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_orderDetail_AllowBackOrderCheckChanging(System.Object,Interprise.Framework.Customer.EventArguments.CheckChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.TransactionReceiptFacade_AuthorizationStart(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.TransactionReceiptFacade_AuthorizationFinish(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PaymentForm_ReceiptAdded(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_Zoom(System.Object,Interprise.Framework.Customer.EventArguments.ZoomEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.m_inventoryItem_InitializeDelete(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerCustomFields_AfterInitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerAuditTrail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerAuditTrailPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IRMAHistoryInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerCustomerHistory_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerCustomerHistoryPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IRMAHistoryInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerAgingAnalysis_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerAgingAnalysisPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IRMAHistoryInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerSalesSummary_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerSalesSummaryPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IRMAHistoryInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerRMAHistory_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerRMAHistoryPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IRMAHistoryInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerIncomingStockReservation_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerIncomingStockReservationPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.SharedControl.IReservationInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerIncomingStockReservation_AddEventHandler(System.Object,System.EventArgs)">
	<summary>
 This function holds all declaration of association between an event and event handler.
 </summary>
	<remarks>This is a code generated by Interprise Solution's Plugin Event Management. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.RemoveCustomEventHandler">
	<summary>
 This function holds all declaration of association between an event and event handler.
 </summary>
	<remarks>This is a code generated by Interprise Solution's Plugin Event Management. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.Before_PluginContainerIncomingStockReservation_Plugin_ReserveQuantityChanged(System.Object,Interprise.Framework.Base.EventArguments.ReserveQuantityChangedEventArgs)">
	<summary>
 Trigger before this function 'ReserveQuantityChanged' is executed.
 </summary>
	<param name="sender">The value for this parameter will come from the event 'ReserveQuantityChanged' when raised.</param>
	<param name="e">The value for this parameter will come from the event 'ReserveQuantityChanged' when raised.</param>
	<remarks>This is a code generated by Interprise Solution's Plugin Event Management. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerIncomingStockReservation_Plugin_ReserveQuantityChanged(System.Object,Interprise.Framework.Base.EventArguments.ReserveQuantityChangedEventArgs)">
	<summary>
 Execute this function 'ReserveQuantityChanged'.
 </summary>
	<param name="sender">The value for this parameter will come from the event 'ReserveQuantityChanged' when raised.</param>
	<param name="e">The value for this parameter will come from the event 'ReserveQuantityChanged' when raised.</param>
	<remarks>This is a code generated by Interprise Solution's Plugin Event Management. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.After_PluginContainerIncomingStockReservation_Plugin_ReserveQuantityChanged(System.Object,Interprise.Framework.Base.EventArguments.ReserveQuantityChangedEventArgs)">
	<summary>
 Trigger after this function 'ReserveQuantityChanged' is executed.
 </summary>
	<param name="sender">The value for this parameter will come from the event 'ReserveQuantityChanged' when raised.</param>
	<param name="e">The value for this parameter will come from the event 'ReserveQuantityChanged' when raised.</param>
	<remarks>This is a code generated by Interprise Solution's Plugin Event Management. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseSalesOrderControl.PluginContainerIncomingStockReservation_Plugin_OnShipDateChanged(System.Object,System.EventArgs)">
	<summary>
 Execute this function 'ReserveQuantityChanged'.
 </summary>
	<param name="sender">The value for this parameter will come from the event 'ReserveQuantityChanged' when raised.</param>
	<param name="e">The value for this parameter will come from the event 'ReserveQuantityChanged' when raised.</param>
	<remarks>This is a code generated by Interprise Solution's Plugin Event Management. Modifying the generated code manually may cause errors.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BasePaymentBreakdownForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Invoice.ISummaryOptionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BasePaymentBreakdownControlOld.SearchComboCouponCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BasePaymentBreakdownControl.PluginContainerGeneralPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.SalesOrder.ISummaryOptionGeneralInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.OntxtOrderNumberValidated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.dteOrderDate_Closed(System.Object,DevExpress.XtraEditors.Controls.ClosedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.SearchComboCouponCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.SearchComboCouponCode_EditValueChanging(System.Object,DevExpress.XtraEditors.Controls.ChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.txtOrderNumber_GotFocus(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.txtOrderNumber_Validated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.dteOrderDate_EditValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.dteOrderDate_EditValueChanging(System.Object,DevExpress.XtraEditors.Controls.ChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.dteOrderDate_Leave(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.HyperlinkSearchComboWebStore_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.HyperlinkSearchComboWebStore_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.HyperlinkSearchComboWebStore_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseOrderDetailControl.chkAllowBackOrder_EditValueChanging(System.Object,DevExpress.XtraEditors.Controls.ChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.FreeStock">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.LineItemRowToDelete">
	<summary>
 Property to retrieve the row being deleted in the grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.CouponDiscountVisibleIndex">
	<summary>
 Property to get/set the column's visible index (colCouponDiscountPercentRate/colCouponDiscountAmountRate)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.IsAllowEdit">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.IsDropShipTransaction(System.Int32)">
	<summary>
	</summary>
	<param name="rowHandle"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.QuantityOrderIncreased(System.Data.DataRowView)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.AllowDiscount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.OnAfterDeleteLineItem(System.ComponentModel.CancelEventArgs)">
	<summary>
 After deleting a line item
 </summary>
	<remarks></remarks>pete.a 07/01/2009

</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.LoadItemDefaults(System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="salesItemRows"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.SelectFromItemMatrix(System.Data.DataRow,System.Int32)">
	<summary>
	</summary>
	<param name="matrixGroupRow"></param>
	<param name="matrixBatch"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.AssignQuantityShipped(System.Data.DataRowView)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.AssignQuantityBackOrder(System.Data.DataRowView)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.CollapseSelectedMasterRow">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.ExpandSelectedMasterRow">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.OnAssignQuantityOrder(System.Data.DataRowView,System.Decimal)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="quantityOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.OnAssignQuantityToAllocate(System.Data.DataRowView,System.Decimal)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="quantityToAllocate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.OnAssignQuantityToAllocate(System.Data.DataRowView,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="quantityToAllocate"></param>
	<param name="allowBackOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.OnAssignQuantity(System.Data.DataRowView,System.String,System.Decimal)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="fieldname"></param>
	<param name="quantity"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.RemoveDropShipReservation(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.UpdateDropShipReservation(System.Data.DataRowView,System.String)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.UpdateDropShipReservation(System.Data.DataRowView,Interprise.Framework.Base.DatasetGateway.ReservationDatasetGateway)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.CheckApplyDiscount(System.Decimal,System.Decimal)">
	<summary>
 '
 </summary>
	<param name="p_proposedValue"></param>
	<param name="p_itemMaxDiscount"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.UpdateQuantityShippedAndBackOrder(System.Data.DataRowView,System.Boolean)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.UnitMeasureChanged(System.Data.DataRowView)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.OnMatrixGroupAdded(System.Object,Interprise.Framework.Customer.EventArguments.MatrixGroupAddedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.gvwInventoryItem_CellValueChanged(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.rcboInventoryItem_AddNewValue(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 This event will triger if the UPC or Item inputed does not exist.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.RepositoryItemDateEditDue_EditValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.RepositoryItemDateEditDue_EditValueChanging(System.Object,DevExpress.XtraEditors.Controls.ChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInventoryItemControl.itemMatrixEntryForm_MatrixGroupAdded(System.Object,Interprise.Framework.Customer.EventArguments.MatrixGroupAddedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseInternalAndPublicNotesControl.InitializeSpellChecker">
	<summary>
 This method will apply spell checker to the base notes control
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseForm.BaseForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseForm.BaseForm_HandleCreated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseCustomerSummaryinformationControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseApplyPaymentForm.CreditCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseApplyPaymentForm.TransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseApplyPaymentForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseApplyPaymentForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.SalesOrder.IBaseApplyPaymentInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.SalesOrder.BaseApplyPaymentControl.TransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseApplyPaymentControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<param name="row"></param>
	<param name="clearTableType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.SalesOrder.BaseApplyPaymentControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 '
 </summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.LegacyTransactionsControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.LegacyTransactionsControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.LegacyTransactionsControl.LegacyTransactionsDataset">
	<value>The legacy transaction dataset instance used on this control.</value>
	<summary></summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.FastItemsControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.FastItemsControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.FastItemsControl.CustomerDetailDataset">
	<value>The customer detail dataset instance used on this control.</value>
	<summary>The invoice dataset instance used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.CustomerRelationsControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.btnCustomField_Click(System.Object,System.EventArgs)">
	<summary>
Loads the customization form.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerTransactions_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerRelations_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerRecentHistory_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerContact_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerRelatedContact_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerNote_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerActivities_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerCases_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerOpportunities_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerEmail_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerDocuments_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerWaveActivity_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerControlLegacy_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerControlLegacyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.Base.CustomerFile.ILegacyTransactionsControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerControl1_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerControl1PluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.ShipToDetail.ICarrierAccountInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerCarrierAccount_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.CustomerFileControl.PluginContainerCarrierAccountPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Customer.Presentation.ShipToDetail.ICarrierAccountInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.CreditControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.CreditControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.BillingSetupControl.CurrentDataset">
	<value>Returns the instance of the dataset that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current dataset instance being used on this control.</summary>
</member><member name="P:Interprise.Presentation.Customer.Base.CustomerFile.BillingSetupControl.CurrentFacade">
	<value>Returns the instance of the business facade that will be use by the LoadDataset and UpdateDataset method.</value>
	<summary>The current facade instance being used on this control.</summary>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.BillingSetupControl.btnCustomerName_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.CustomerFile.BillingSetupControl.barmanagerCustomerName_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.BaseRibbonForm.IsMenuToolVisible(System.String[],System.Boolean)">
	<summary>
 Property to set the menu items to visible/invisible.
 </summary>
	<param name="menuItems"></param>
	<param name="includeCommonMenuItems"></param>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseRibbonForm.BaseRibbonForm_HandleCreated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.BaseNotesControl.IsDisposeCurrentFacadeAndDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Customer.Base.BaseControl.CustomerCode">
	<summary>
 The primary code of the customer being used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the customer being used on the current
 transaction.
 </value>
</member><member name="P:Interprise.Presentation.Customer.Base.BaseControl.ShipToCode">
	<summary>
 The primary code of the customer ship to being used on the current
 transaction.
 </summary>
	<value>
 Returns the primary code of the customer ship to being used on the current
 transaction.
 </value>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.GetPageBoundField(System.Windows.Forms.Control,System.String[])">
	<summary>
 Function that returns jagged array of string that contains all the control that
 have data field bindings.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>GetPageBoundField</em></strong> method.</para>
		<code lang="VB" title="GetPageBoundField" description="Procedure to get all the control that have data field bindings.">
 Dim myControl As New BaseControl
 Dim parent As Control = CustomerDetailControl
 Dim tables As String = New String() {"CustomerView", "CRMContactView"}
 Dim boundFields As String()() 
 boundFields = myControl.GetPageBoundField(parent, tables)
    </code>
		<code lang="CS" title="GetPageBoundField" description="Procedure to get all the control that have data field bindings.">
 BaseControl myControl = new BaseControl();
 Control parent = CustomerDetailControl;
 string tables = new string[] {
        "CustomerView",
        "CRMContactView"};
 string[] boundFields;
 boundFields = myControl.GetPageBoundField(parent, tables);
    </code>
	</example>
	<returns>
 Returns a jagged array of string that contains all the control that have data
 field bindings.
 </returns>
	<param name="parent">The root container control where all other controls are placed.</param>
	<param name="tables">
 A 1-dimensional array of string that contains which tables are to be searched for
 field bindings.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.SetCursor(System.Windows.Forms.Cursor)">
	<summary>Assigns the cursor type for the current control.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>SetCursor</em></strong> method.</para>
		<code lang="VB" title="SetCursor" description="Assigns the cursor parameter as the control's current cursor.">
 Dim myControl As New BaseControl
 Dim newCursor As Cursor = System.Windows.Forms.Cursors.WaitCursor 
 myControl.SetCursor(newCursor)
    </code>
		<code lang="CS" title="SetCursor" description="Assigns the cursor parameter as the control's current cursor.">
 BaseControl myControl = new BaseControl();
 Cursor newCursor = System.Windows.Forms.Cursors.WaitCursor;
 myControl.SetCursor(newCursor);
    </code>
	</example>
	<requirements>
 Parameter <em>newCursor</em> must be of type
 <strong>System.Windows.Forms.Cursors</strong>.
 </requirements>
	<param name="newCursor">
 A <strong>System.Windows.Forms.Cursors</strong> that will be assigned as the
 current control's cursor.
 </param>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.RestoreCursor">
	<summary>
 Resets the control's current cursor to
 <strong>System.Windows.Forms.Cursors.Default</strong>.
 </summary>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.SetTimeZone(DevExpress.XtraEditors.ComboBoxEdit)">
	<summary>Adds all available TimeZones to the cboTimeZone control list items.</summary>
	<example>
    The following codes shows how to implement the
    <strong><em>SetTimeZone</em></strong> method.
    <code lang="VB" title="SetTimeZone" description="Adds all available TimeZones to the cboTimeZone item list.">
 Dim myControl As New BaseControl
 Dim cboTimeZone As New ComboBoxEdit 
 myControl.SetTimeZone(cboTimeZone)
    </code>
		<code lang="CS" title="SetTimeZone" description="Adds all available TimeZones to the cboTimeZone item list.">
 BaseControl myControl = new BaseControl();
 ComboBoxEdit cboTimeZone = new ComboBoxEdit();
 myControl.SetTimeZone(cboTimeZone);
    </code>
	</example>
	<param name="cboTimeZone">A</param>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.NewActivity">
	<summary>
 Method that creates a new CRM activity for the current transaction's customer
 contact.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewActivity</em></strong> method.</para>
		<code lang="VB" title="NewActivity" description="Creates a new CRM Activity.">
 Dim myControl As New BaseControl
 myControl.NewActivity()
    </code>
		<code lang="CS" title="NewActivity" description="Creates a new CRM Activity.">
 BaseControl myControl = new BaseControl();
 myControl.NewActivity();
    </code>
	</example>
	<remarks>Overriden in the Main control of the form.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.NewCase">
	<summary>
 Method that creates a new CRM case for the current transaction's customer
 contact.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewCase</em></strong> method.</para>
		<code lang="VB" title="NewCase" description="Creates a new CRM case.">
 Dim myControl As New BaseControl
 myControl.NewCase()
    </code>
		<code lang="CS" title="NewCase" description="Creates a new CRM case.">
 BaseControl myControl = New BaseControl(); 
 myControl.NewCase();
    </code>
	</example>
	<remarks>Overriden in the Main control of the form.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.NewContact">
	<summary>
 Method that creates a new CRM contact for the current transaction's
 customer.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewContact</em></strong> method.</para>
		<code lang="VB" title="NewContact" description="Creates a new CRM contact.">
 Dim myControl As New BaseControl
 myControl.NewContact()
    </code>
		<code lang="CS" title="NewContact" description="Creates a new CRM contact.">
 BaseControl myControl = New BaseControl();
 myControl.NewContact();
    </code>
	</example>
	<remarks>Overriden in the Main control of the form.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.NewDocument">
	<summary>
 Method that creates a new CRM document for the current transaction's customer
 contact.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>NewDocument</em></strong> method.
    <code lang="VB" title="NewDocument" description="Creates a new CRM document.">
 Dim myControl As New BaseControl
 myControl.NewDocument()
    </code>
		<code lang="CS" title="NewDocument" description="Creates a new CRM document.">
 BaseControl myControl = New BaseControl();
 myControl.NewDocument();
    </code>
	</example>
	<remarks>Overriden in the Main control of the form.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.NewEmail">
	<summary>
 Method that creates a new CRM e-mail for the current transaction's customer
 contact.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewEmail</em></strong> method.</para>
		<code lang="VB" title="NewEmail" description="Creates a new CRM e-mail.">
 Dim myControl As New BaseControl
 myControl.NewEmail()
    </code>
		<code lang="VB" title="NewEmail" description="Creates a new CRM e-mail.">
 BaseControl myControl = New BaseControl();
 myControl.NewEmail();
    </code>
	</example>
	<remarks>Overriden in the Main control of the form.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.NewFax">
	<summary>
 Method that creates a new CRM fax for the current transaction's customer
 contact.
 </summary>
	<example>
    The following codes shows how to implement the <strong><em>NewFax</em></strong>
    method.
    <code lang="VB" title="NewFax" description="Creates a new CRM fax.">
 Dim myControl As New BaseControl
 myControl.NewFax()
    </code>
		<code lang="CS" title="NewFax" description="Creates a new CRM fax.">
 BaseControl myControl = New BaseControl();
 myControl.NewFax();
    </code>
	</example>
	<remarks>Overriden in the Main control of the form.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.NewNote">
	<summary>
 Method that creates a new CRM note for the current transaction's customer
 contact.
 </summary>
	<example>
    The following codes shows how to implement the <strong><em>NewNote</em></strong>
    method.
    <code lang="VB" title="NewNote" description="Creates a new CRM note.">
 Dim myControl As New BaseControl
 myControl.NewNote()
    </code>
		<code lang="CS" title="NewNote" description="Creates a new CRM note.">
 BaseControl myControl = New BaseControl();
 myControl.NewNote();
    </code>
	</example>
	<remarks>Overriden in the Main control of the form.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.NewOpportunity">
	<summary>
 Method that creates a new CRM opportunity for the current transaction's customer
 contact.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>NewOpportunity</em></strong> method.</para>
		<code lang="VB" title="NewOpportunity" description="Creates a new CRM opportunity.">
 Dim myControl As New BaseControl
 myControl.NewOpportunity()
    </code>
		<code lang="CS" title="NewOpportunity" description="Creates a new CRM opportunity.">
 BaseControl myControl = New BaseControl();
 myControl.NewOpportunity();
    </code>
	</example>
	<remarks>Overriden in the Main control of the form.</remarks>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.CurrentRow(DevExpress.XtraGrid.Views.Grid.GridView@)">
	<summary>
 Function that returns the instance of the row where the current row handle is
 at.
 </summary>
	<returns>The current row from which the rowIndex is located.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CurrentRow</em></strong> method.</para>
		<code lang="VB" title="CurrentRow" description="Get the row where the current row index is at.">
 Dim myControl As New BaseControl
 Dim gridview As GridView
 Dim drow As DataRow 
 drow = myControl.CurrentRow(gridview)
    </code>
		<code lang="CS" title="CurrentRow" description="Get the row where the current row index is at.">
 BaseControl myControl = new BaseControl();
 GridView gridview;
 DataRow drow;
 drow = myControl.CurrentRow(gridview);
    </code>
	</example>
	<param name="gridview">
		<para>A <strong>DevExpress.XtraGrid.VIews.Grid.GridView</strong> where the datarow
    shall be extracted.</para>
	</param>
</member><member name="M:Interprise.Presentation.Customer.Base.BaseControl.CurrentRowView(DevExpress.XtraGrid.Views.Grid.GridView@)">
	<summary>
 Function that returns the instance of the row view where the current row handle
 is at.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CurrentRowView</em></strong> method.</para>
		<code lang="VB" title="CurrentRowView" description="Get the row view where the current row index is at.">
 Dim myControl As New BaseControl
 Dim gridview As GridView
 Dim drowView As DataRowView
 drowView = myControl.CurrentRowView(gridview)
    </code>
		<code lang="VB" title="CurrentRowView" description="Get the row view where the current row index is at.">
 BaseControl myControl = New BaseControl();
 GridView gridview;
 DataRowView drowView;
 drowView = myControl.CurrentRowView(gridview);
    </code>
	</example>
	<returns>The current row view from which the rowIndex is located.</returns>
	<param name="gridview">
		<para>A <strong>DevExpress.XtraGrid.VIews.Grid.GridView</strong> where the datarow
    shall be extracted.</para>
	</param>
</member><member name="P:Interprise.Presentation.Customer.AppModule.IsDropShipTransactionSalesOrder(System.String,System.Int32)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.NewInvoice(System.Object[],System.Boolean)">
	<summary>
	</summary>
	<param name="param"></param>
	<param name="isSearch"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.NewCreditMemo(System.Object[],Interprise.Framework.Base.Shared.Structure.SearchParameters)">
	<summary>
	</summary>
	<param name="param"></param>
	<param name="searchParam"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.RecurResultsForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.MaintainCustomerType(System.Object[])">
	<summary>
	</summary>
	<param name="param"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.CloseProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.NewContact(System.Object[])">
	<summary>
	</summary>
	<param name="param"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.OpenContact(System.Object[])">
	<summary>
	</summary>
	<param name="param"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.NewPersonalContact(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.CRMShowSearchForm(System.String[],Interprise.Framework.Base.Shared.Enum.Entity,System.String,System.String[],System.Boolean,System.Boolean,System.String,System.String)">
	<summary>
	</summary>
	<param name="tableNames"></param>
	<param name="entityType"></param>
	<param name="additionalFilter"></param>
	<param name="groupColumns"></param>
	<param name="p_showFirstButton"></param>
	<param name="p_showSecondButton"></param>
	<param name="p_firstButtonText"></param>
	<param name="p_secondButtonText"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.InitializeParam(System.Object[])">
	<summary>
 Initialize param values.
 </summary>
	<param name="paramValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.CustomerUpdateDropShipReservation(System.Object[])">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.DropShipReservationConcurrencyOccurred(System.Object,Interprise.Framework.Base.Exceptions.ReservationConcurrencyException)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.OnAvailableOrFreeStockChanged(System.Object,Interprise.Framework.Base.EventArguments.ConcurrencyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="concurrency"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.CustomerUpdateInvoiceQuantityShipped(System.Object[])">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Customer.AppModule.CustomerUpdateDropShippingDate(System.Object[])">
	<summary>
	</summary>
	<param name="param"></param>
	<remarks></remarks>
</member>
</members>
</doc>