<?xml version="1.0"?>
<doc>
<assembly>
<name>
Interprise.Facade.Inventory
</name>
</assembly>
<members>
<member name="P:Interprise.Facade.Inventory.WarehouseFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the UpdateDataset procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.WarehouseFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.WarehouseFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.WarehouseFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.WarehouseFacade.CurrentReportType">
	<summary>Specifies the report type of transaction that is currently in used.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.ReportAction</para></value>
</member><member name="P:Interprise.Facade.Inventory.WarehouseFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction that is currently in used. </summary>
	<value>
		<para>Interprise.Framework.Base.Shared.Enum.TransactionType</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.WarehouseFacade.WarehouseCode">
	<summary>Gets the document code of the transaction.</summary>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway)">
	<summary>
 Create an instance of WarehouseFacade class.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub CreateFacade()
    Dim warehouseGateway As New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway
    Dim warehouseFacade As New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway)     
 End Sub
    </code>
		<code lang="CS">
 private void CreateFacade()
  {
  Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway warehouseGateway  = New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway();
  Interprise.Facade.Inventory.WarehouseFacade warehouseFacade  = New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway);  
  }
    </code>
	</example>
	<param name="warehouseDataset"> Shared dataaset between user interface and business facade.</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.AddWarehouse(System.String)">
	<summary>Adds new row to the InventoryWarehouse DataTable.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddNewWarehouse()
      Dim warehouseGateway As New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway
      Dim warehouseFacade As New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway)
      ' if the value of the warehouseCode is nothing, the code will be generated by the system.
      warehouseFacade.AddWarehouse(Nothing)
 End Sub
    </code>
		<code lang="CS">
 private void AddNewWarehouse()
   {
   Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway warehouseGateway  = New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway();
   Interprise.Facade.Inventory.WarehouseFacade warehouseFacade  = New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway);
   // If the value of the warehouseCode is nothing, the code will be system generated.
   warehouseFacade.AddWarehouse(null)
   }
    </code>
	</example>
	<param name="warehouseCode">The document code of a new warehouse that will be created.</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.AddWarehouse(System.String,System.String)">
	<summary>Adds new row to the InventoryWarehouse DataTable.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddNewWarehouse()
      Dim warehouseGateway As New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway
      Dim warehouseFacade As New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway)
      ' if the value of the warehouseCode is nothing, the code will be generated by the system.
      warehouseFacade.AddWarehouse(Nothing)
 End Sub
    </code>
		<code lang="CS">
 private void AddNewWarehouse()
   {
   Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway warehouseGateway  = New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway();
   Interprise.Facade.Inventory.WarehouseFacade warehouseFacade  = New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway);
   // If the value of the warehouseCode is nothing, the code will be system generated.
   warehouseFacade.AddWarehouse(null)
   }
    </code>
	</example>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.WarehouseFacade~AddWarehouse(ByVal%20String).html">
 AddWarehouse(String)</a>
	</overloads>
	<param name="warehouseCode">
		<para>The document code of a new warehouse that will be created.</para>
		<para>It can be system generated or user defined one.</para>
		<para>It value is not specified it is assume to be system generated.</para>
	</param>
	<param name="desciption">Description of the new warehouse</param>
	<returns>Returns the instance of the newly created DataRow.</returns>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.AssignLocation(System.Data.DataRowView)">
	<summary> Assign default values of new location </summary>
	<remarks>This method is obsolete.</remarks>
	<param name="locationRow">The DataRow containing the location that is to be modified.</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.AssignLocationItem(System.Data.DataRowView,System.Data.DataRow[],System.String,System.String)">
	<summary>
 Assign item to a specific location. 
 </summary>
	<remarks>This method is obsolete.</remarks>
	<param name="locationItemRowView">Gets item selected from grid control.</param>
	<param name="rowsSelected">Gets row selected from grid control</param>
	<param name="WarehouseCode">Use in assigning new value to new record in the data Table.</param>
	<param name="LocationCode">Use in assigning new value to new record in the data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.DeleteWarehouse">
	<summary>
		<para>Delete the currently loaded warehouse.</para>
		<para>The InventoryWarehouse DataTable must have record loaded in order to use this
    method.</para>
	</summary>
	<returns>If true, delete succeeds, otherwise it fails.</returns>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.DeleteWarehouse(System.String)">
	<summary>Delete the specified warehouse.</summary>
	<returns>If true, delete succeeds, otherwise it fails.</returns>
	<param name="warehousecode">The document code of an existing warehouse.</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.IsAllowDelete(System.String)">
	<summary>
 Checks if the warehouse can be deleted by validating whether there are
 transactions associated with it.
 </summary>
	<seealso cref="M:Interprise.Facade.Inventory.WarehouseFacade.HasTransaction(System.String)" cat="Additional Methods">HasTransaction</seealso>
	<param name="warehousecode">The document code of the warehouse.</param>
	<returns>It true deletion of warehouse is allowed otherwise not.</returns>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.HasTransaction(System.String)">
	<summary>Checks if an existing warehouse has associated transaction.</summary>
	<returns>
 If true, the warehouse has been used by the system, otherwise there is no
 associated transaction with the warehouse.
 </returns>
	<param name="warehousecode">The document code of the warehouse that will be validated.</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.CreateLocation(System.String,System.String,System.String)">
	<summary>
  Add new location on a specific warehouse.
 </summary>
	<param name="warehouseCode">The warehouse where location will be added.</param>
	<param name="locationCode">The location code that will be added</param>
	<param name="stockType">Type of location to be added.
 <para>Valid location types are as follows : Normal,Receiving,Dispatch,Defective,Repair,Scrap,In Transit,Drop Ship or Return To Supplier.</para></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.GenerateSupplier(System.String)">
	<summary>
 Generates entries for inventory supplier for newly created warehouses.
 </summary>
	<param name="warehouseCode">The warehouse where suppliers will be generated.</param>
	<returns>If true adding of suppliers in warehouse succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.LoadWarehouse(System.String)">
	<summary>
 Load record from InventoryWarehouse DataTable.
 </summary>
	<param name="warehouseCode">The document code of the warehouse.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.NewWarehouse(System.String)">
	<returns><para>Instance newly created DataRow in the InventoryWarehouse DataTable.</para></returns>
	<summary>Adds new row to the InventoryWarehouse DataTable.</summary>
	<example>
    The example below represent how to create new warehouse using this procedure. 
    <code lang="VB">
 Protected Overridable Sub AddNewWarehouse()
    Dim warehouseGateway As New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway
    Dim warehouseFacade As New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway)
    ' if the value of the warehouseCode is nothing, the code will be generated by the system.
    warehouseFacade.NewWarehouse(Nothing)
 End Sub
    </code>
		<code lang="CS">
 private void AddNewWarehouse() 
  { 
  Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway warehouseGateway  = New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway(); 
  Interprise.Facade.Inventory.WarehouseFacade warehouseFacade  = New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway); 
  // If the value of the warehouseCode is nothing, the code will be system generated. 
  warehouseFacade.NewWarehouse(null) 
  }
    </code>
	</example>
	<param name="documentCode">The transaction code of a new warehouse that will be created.</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.NewWarehouse(System.String,System.String)">
	<summary>Adds new row to the InventoryWarehouse DataTable.</summary>
	<returns><para>Instance newly created DataRow in the InventoryWarehouse DataTable.</para></returns>
	<example>
		<code lang="CS">
 Protected Overridable Sub AddNewWarehouse()
   Dim warehouseGateway As New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway
   Dim warehouseFacade As New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway)
   ' if the value of the warehouseCode is nothing, the code will be generated by the system.
   warehouseFacade.NewWarehouse(Nothing, "MyWarehouse")
 End Sub
    </code>
		<code lang="CS">
 private void AddNewWarehouse() 
  { 
  Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway warehouseGateway  = New Interprise.Framework.Inventory.DatasetGateway.WarehouseDatasetGateway(); 
  Interprise.Facade.Inventory.WarehouseFacade warehouseFacade  = New Interprise.Facade.Inventory.WarehouseFacade(warehouseGateway); 
  // If the value of the warehouseCode is nothing, the code will be system generated. 
  warehouseFacade.NewWarehouse(null, "MyWarehouse") 
  }
    </code>
	</example>
	<param name="documentCode">The document code of a new warehouse that will be created.</param>
	<param name="description">Description of the warehouse that will be created,</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<returns>If set to true, there were no errors found.</returns>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.AddDefaultZones">
	<summary>
 Add 9 Default Locations with 9 different StockTypes
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.AddStoreWorkingHours">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.AddStoreHolidayWorkingHours">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.CopyHoliday(System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="holidayCalendarCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.InitializeHolidayHours(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.ResetSelectedStoreWorkingHours(System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="selectedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.WarehouseFacade.InventoryWarehouse_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryWarehouse DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.WarehouseFacade">
	<summary>
 The class use when creating/modifying an Inventory Warehouse routine.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.UnitMeasureFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.UnitMeasureFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.UnitMeasureFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.UnitMeasureFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.UnitMeasureFacade.#ctor">
	<summary>
  Create an instance of UnitMeasureFacade class.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.UnitMeasureFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.UnitMeasureDatasetGateway)">
	<summary>
  Create an instance of UnitMeasureFacade class.
 </summary>
	<param name="unitMeasureDataset">Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.UnitMeasureFacade.AssignUnitMeasure(System.String,System.Data.DataRow,System.Data.DataRowView)">
	<summary> Method use to assign unit measure. </summary>
	<remarks>
	</remarks>
	<param name="itemCode "> The code of the item. </param>
	<param name="unitMeasureRow"> The row to be edited.</param>
	<param name="itemUnitMeasure">
	</param>
</member><member name="M:Interprise.Facade.Inventory.UnitMeasureFacade.IsUnitMeasureUsed(System.String,System.String)">
	<summary> Check if UnitMeasure is used. </summary>
	<remarks>
	</remarks>
	<param name="itemCode"> The itemcode of the item to check.</param>
	<param name="unitMeasureCode">The unit to check if used in transaction.</param>
</member><member name="T:Interprise.Facade.Inventory.UnitMeasureFacade">
	<summary>
 The class for manipulating item unit measure.
 <para>Reserved for future use.</para>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.UnitMeasureFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.UnitMeasureFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.UnitMeasureFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.UnitMeasureFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.UnitMeasureFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.UnitMeasureDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="unitMeasuredataset"> Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.UnitMeasureFacade.Validate(System.Data.DataRow,System.String)">
	<summary>Verifies that the records has correct values and datatypes.</summary>
	<param name="row">The record that will be check for correct values.</param>
	<param name="columnName">The field in the record that is currently verified.</param>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.UnitMeasureFacade.UnitMeasure_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Contains all changes made to a record. </summary>
	<param name="sender">The object thats excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.CategoryFacade.CategoryCode">
	<summary> Returns category code of this transaction. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.CategoryFacade.CommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.CategoryFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.CategoryFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.CategoryFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.CategoryFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.CategoryFacade.LanguageCode">
	<summary> Gets/set the language code selected by the user. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway)">
	<summary>
 Create an instance of this class.
 </summary>
	<param name="categorydataset">Shared dataset between UI and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.AddCategory(System.String)">
	<summary>
 Add a single row for the category table.
 </summary>
	<returns>
		<para><font color="#004080" size="2">The instance of the newly created row in the
    SystemCategory DataTable.</font></para>
	</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddNewCategory()
    Dim categoryGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
    Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway)
    categoryFacade.AddCategory("Guns")
 End Sub
    </code>
		<code lang="CS">
 private void AddNewCategory()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = new Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway);
    categoryFacade.AddCategory("Guns");
 }
    </code>
	</example>
	<param name="categoryCode">The document code of the new category.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.AddCategory(System.String,System.String)">
	<summary>
 Add a single row for the category table.
 </summary>
	<returns>
		<para><font color="#004080" size="2">The instance of the newly created row in the
    SystemCategory DataTable.</font></para>
	</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddNewCategory()
    Dim categoryGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
    Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway)
    categoryFacade.AddCategory("Guns")
 End Sub
    </code>
		<code lang="CS">
 private void AddNewCategory()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = new Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway);
    categoryFacade.AddCategory("Guns");
 }
    </code>
	</example>
	<param name="categoryCode">The document code of the new category.</param>
	<param name=" description">The descripition of the new category.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.AssignCategoryAccount(System.String)">
	<summary>
		<para>Assigns default accounts for every category created.</para>
		<para>The SystemCategoryDefaultAccount DataTable must have a record loaded in order
    to use this method.</para>
	</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignCategoryAccounts()
    Dim categoryGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
    Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway)
    categoryFacade.AssignCategoryAccount("DEFAULT-CATEGORY")
 End Sub
    </code>
		<code lang="CS">
 private void AssignCategoryAccounts()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryGateway = New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway);
    categoryFacade.AssignCategoryAccount("DEFAULT-CATEGORY");
 }
    </code>
	</example>
	<param name="classCode">The classcode of the GL class template from where account codes will be coming from.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.AssignDefaultParent">
	<summary>
 Assigns the default parent code if no parent is selected.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignParent()
   Dim categoryGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
   Dim categoryfacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway)
   categoryfacade.AssignDefaultParent()
 End Sub
    </code>
		<code lang="CS">
 private void AssignParent()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryfacade = new Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway);
    categoryfacade.AssignDefaultParent();
 }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
 Assign selected items to the current department.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItems()
            Dim dataSet1 As New DataSet
            'Presuming the dataset contains the InventoryItemView table
            Dim itemTable As DataTable = dataSet1.Tables("InventoryItemView")
            'Presuming the itemTable contains item rows
            Dim categoryDatasetGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
            Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryDatasetGateway)
            categoryFacade.AssignItem(Nothing, itemTable.Select)
 End Sub
    </code>
		<code lang="CS">
 Private void AssignItems()
 {
    DataSet dataSet1 = New DataSet();
    //Presuming the dataset contains the InventoryItemView table
    DataTable itemTable = dataSet1.Tables("InventoryItemView");
    //Presuming the itemTable contains item rows
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryDatasetGateway);
    categoryFacade.AssignItem(null, itemTable.Select);
 }
    </code>
	</example>
	<param name="itemRowView">The item row to be edited.</param>
	<param name="itemRows">Array of item rows to be assigned to the department.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[],System.String)">
	<summary>
 Assign selected items to the current department.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItems()
            Dim dataSet1 As New DataSet
            'Presuming the dataset contains the InventoryItemView table
            Dim itemTable As DataTable = dataSet1.Tables("InventoryItemView")
            'Presuming the itemTable contains item rows
            Dim categoryDatasetGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
            Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryDatasetGateway)
            categoryFacade.AssignItem(Nothing, itemTable.Select,categoryFacade.CategoryCode)
 End Sub
    </code>
		<code lang="CS">
 Private void AssignItems()
 {
    DataSet dataSet1 = New DataSet();
    //Presuming the dataset contains the InventoryItemView table
    DataTable itemTable = dataSet1.Tables("InventoryItemView");
    //Presuming the itemTable contains item rows
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryDatasetGateway);
    categoryFacade.AssignItem(null, itemTable.Select,categoryFacade.CategoryCode);
 }
    </code>
	</example>
	<param name="itemRowView">The item row to be edited.</param>
	<param name="itemRows">Array of item rows to be assigned to the department.</param>
	<param name="categoryCode">The category where the items will be assigned.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.CreateDescription(System.String,Interprise.Framework.Inventory.DatasetComponent.SystemManager.CategoryDataset.SystemCategoryDescriptionDataTable)">
	<summary>
 Create description entry for system category descripton table.
 </summary>
	<param name="categoryCode">The category from where description will be created.</param>
	<param name="categoryDescriptionTable">The DataTable that contains the category description.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.CreateDescription(System.String,System.String)">
	<summary>
 Create description entry for system category descripton table.
 </summary>
	<param name="categoryCode">The category from where description will be created.</param>
	<param name="description">The description for this category.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.FinalizeDescription">
	<summary>
 Handles cascading of description to other languages
 Used this method before saving changes in the new category.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.GetCategoryDescription(System.String)">
	<summary>
 Get the description of the selected category.
 </summary>
	<param name="categoryCode">The categorycode used to find description.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.HasMappedItem(System.String)">
	<summary>
 Determines if a category has associated items.
 </summary>
	<param name="categoryCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.LoadCategory(System.String)">
	<summary>
 Load the selected category.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub LoadSelectedCategory()
            Dim categoryGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
            Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway)
            categoryFacade.LoadCategory("Guns")
 End Sub
    </code>
		<code lang="CS">
 private void LoadSelectedCategory()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = new Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway);
    categoryFacade.LoadCategory("Guns");
 }
    </code>
	</example>
	<param name="categoryCode">The document code to be loaded.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.LoadDescription(System.String,System.String)">
	<summary>
 Load the description of the selected category.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub LoadCategoryDescription()
    Dim categoryGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
    Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway)
    categoryFacade.LoadDescription("Guns", "English - United Kingdom")
 End Sub
    </code>
		<code lang="CS">
 private void LoadCategoryDescription()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = new Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway);
    categoryFacade.LoadDescription("Guns", "English - United Kingdom");
 }
    </code>
	</example>
	<param name="categoryCode">The category to be loaded.</param>
	<param name="languageCode">The language of the category.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.LoadWebOptionDescription(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="languageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.NewCategory(System.String)">
	<summary>
 Add a single row for the category table.
 </summary>
	<returns>
		<para><font color="#004080" size="2">The instance of the newly created row in the
    SystemCategory DataTable.</font></para>
	</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewCategory()
    Dim categoryGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
    Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway)
    categoryFacade.AddCategory("Guns")
 End Sub
    </code>
		<code lang="CS">
 private void NewCategory()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = new Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway);
    categoryFacade.AddCategory("Guns");
 }
    </code>
	</example>
	<param name="documentCode">The document code of the new category.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.NewCategory(System.String,System.String)">
	<summary>
 Add a single row for the category table.
 </summary>
	<returns>
		<para><font color="#004080" size="2">The instance of the newly created row in the
    SystemCategory DataTable.</font></para>
	</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewCategory()
    Dim categoryGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway
    Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway)
    categoryFacade.AddCategory("Guns")
 End Sub
    </code>
		<code lang="CS">
 private void NewCategory()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway categoryGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.CategoryDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.CategoryFacade categoryFacade = new Interprise.Facade.Inventory.SystemManager.CategoryFacade(categoryGateway);
    categoryFacade.AddCategory("Guns");
 }
    </code>
	</example>
	<param name="documentCode">The document code of the new category.</param>
	<param name="description">The description of the new category.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.UpdateDataSetGeneric(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Generic udpate data set
 </summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.SystemCategory_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary> 
 Updates web option column everytime temporary column values is changed.
 </summary>
	<remarks>
	</remarks>
	<param name="sender">The object thats executes this method. </param>
	<param name="e">The event args that contains all column changes in a data Table. </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.CategoryFacade.SystemCategoryWebOptionView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.Base.BaseFacade.CurrentBusinessRule">
	<summary>
	</summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.Base.BaseFacade.CurrentBusinessRuleType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.Base.BaseFacade.CurrentDataset">
	<summary> Returns  CurrentDataset . </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.Base.BaseFacade.CurrentReportType">
	<summary>
	</summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.Base.BaseFacade.CurrentTransactionType">
	<summary>
	</summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.Base.BaseFacade.#ctor">
	<summary>
 Create an instance of the Interprise.Facade.Inventory.SystemManager.Base.BaseFacade class.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeFacade.AttributeCode">
	<summary>
 Gets the attribute code of this transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeFacade.CommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.ReportAction</para></value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway)">
	<summary>
  Create an Instance of this class.
 </summary>
	<param name="attributedataset"> Shared dataset between user interface and business facade</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.IsAllowDelete(System.String,System.String)">
	<summary>
		<para>Checks if an attribute value can be deleted .</para>
		<para>The InventoryAttribute DataTable must have a record loaded in order to use
    this method.</para>
	</summary>
	<returns>True if the the attribute can be deleted else false.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub DeleteAttribute()
            Dim attributeGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway
            Dim attibuteFacade As New Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway)
            attibuteFacade.IsAllowDelete("Color", "Blue")
 End Sub
    </code>
		<code lang="CS">
 private void DeleteAttribute()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway attributeGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.AttributeFacade attibuteFacade = new Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway);
    attibuteFacade.IsAllowDelete("Color", "Blue");
 }
    </code>
	</example>
	<param name="attributeCode">The attribute code to check.</param>
	<param name="attributeValueCode">The attribute value to check.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.IsAttributeValueCodeInUsed(System.String)">
	<summary>
		<para>Checks in the database if attribute value is existing.</para>
		<para>The InventoryAttribute DataTable must have a record loaded in order to use
    this method.</para>
	</summary>
	<returns>True if the AttributeValueCode is in used else false.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub IfAttributeValueCodeInUsed() 
    Dim attributeGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway
    Dim attributeFacade As New Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway)
    attributeFacade.IsAttributeValueCodeInUsed("Blue")
 End Sub
    </code>
		<code lang="CS">
 private void IfAttributeValueCodeInUsed()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway attributeGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.AttributeFacade attributeFacade = new Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway);
    attributeFacade.IsAttributeValueCodeInUsed("Blue");
 }
    </code>
	</example>
	<param name="attributeValueCode">The attribute value to check.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.IsAttributeValueExists(System.String)">
	<summary>
		<para>Checks in the dataset table if attribute value is existing.</para>
		<para>The SystemAttribute DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub IfAttributeValueExists()
            Dim attributeGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway
            Dim attributeFacade As New Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway)
            attributeFacade.IsAttributeValueExists("Green")
 End Sub
 
 </code>
		<code lang="CS">
 private void IfAttributeValueExists()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway attributeGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.AttributeFacade attributeFacade = new Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway);
    attributeFacade.IsAttributeValueExists("Green");
 }
    </code>
	</example>
	<returns>True if the AttributeValue is in used else false.</returns>
	<param name="attributeValueCode">The attribute value to check.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.NewAttribute(System.String)">
	<summary>Add new system attribute DataRow to SystemAttribute DataTable.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddAttribute()
          Dim attributeGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway
          Dim attributeFacade As New Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway)
          attributeFacade.NewAttribute("Color")
 End Sub
    </code>
		<code lang="CS">
 private void AddAttribute()
 {
  Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway attributeGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway();
  Interprise.Facade.Inventory.SystemManager.AttributeFacade attributeFacade = new Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway);
  attributeFacade.NewAttribute("Color");
 }
    </code>
	</example>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.AttributeFacade~NewAttribute(ByVal%20String,%20ByVal%20String()).html">
 NewAttribute(String,String)</a>
	</overloads>
	<returns>Instance of newly created datarow.</returns>
	<param name="documentCode">The attribute code to add.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.NewAttribute(System.String,System.String[],System.String[])">
	<summary>
 Add new system attribute and attribute values if not existing.
 </summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.AttributeFacade~NewAttribute(ByVal%20String).html">
 NewAttribute(String)</a>
	</overloads>
	<example>
		<code lang="VB">
 Protected Overridable Sub CreateAttribute()
            Dim attributeGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway
            Dim attributeFacade As New Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway)
            attributeFacade.NewAttribute("Color", New String() {"Green,Red,Blue,White"})
 End Sub
    </code>
		<code lang="CS">
 Private void CreateAttribute()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway attributeGateway = New Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.AttributeFacade attributeFacade = New Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway);
    attributeFacade.NewAttribute("Color", New String[] {"Green,Red,Blue,White"});
 }
    </code>
	</example>
	<param name="documentCode">The attribute code to add.</param>
	<param name="attributeValueCodes">Attribute values that will be added.</param>
	<param name=" attributeValueDescriptions">Description of the attribute value that will be added.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.NewAttribute(System.String,System.String[])">
	<summary>
 Add new system attribute and attribute values if not existing.
 </summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.AttributeFacade~NewAttribute(ByVal%20String).html">
 NewAttribute(String)</a>
	</overloads>
	<example>
		<code lang="VB">
 Protected Overridable Sub CreateAttribute()
            Dim attributeGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway
            Dim attributeFacade As New Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway)
            attributeFacade.NewAttribute("Color", New String() {"Green,Red,Blue,White"})
 End Sub
    </code>
		<code lang="CS">
 Private void CreateAttribute()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway attributeGateway = New Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.AttributeFacade attributeFacade = New Interprise.Facade.Inventory.SystemManager.AttributeFacade(attributeGateway);
    attributeFacade.NewAttribute("Color", New String[] {"Green,Red,Blue,White"});
 }
    </code>
	</example>
	<param name="documentCode">The attribute code to add.</param>
	<param name="attributeValueCodes">Attribute values that will be added.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.Attribute_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<remarks>
	</remarks>
	<param name="sender">The object thats executes this method. </param>
	<param name="e">The event that contains all column changes in a data Table. </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeFacade.AttributeValue_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<remarks>
	</remarks>
	<param name="sender">The object thats executes this method. </param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.SystemManager.AttributeFacade">
	<summary>
 The class use when creating/modifying attribute and attribute values that will be used in the creation of the matrix group item type.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.CommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>
		<para>
  Interprise.Extendable.Base.Business.IBaseInterface</para>
	</value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.ReportAction</para></value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value>
		<para>Interprise.Framework.Base.Shared.Enum.TransactionType</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.LanguageCode">
	<summary> Gets/set the language code selected by the user. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.ManufacturerCode">
	<summary> Returns ManufacturerCode. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway)">
	<summary>
  Create an Instance of this class.
 </summary>
	<param name="manufacturerdataset"> Shared dataaset between user interface and business facade</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.AddManufacturer(System.String)">
	<summary>
 Create new row for manufacturer Table.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub CreateManufacturer()
   Dim manufacturerGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway
   Dim manufacturerFacade As New Interprise.Facade.Inventory.SystemManager.ManufacturerFacade(manufacturerGateway)
   manufacturerFacade.AddManufacturer("Kingston")
 End Sub
    </code>
		<code lang="CS">
 private void CreateManufacturer()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway manufacturerGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ManufacturerFacade manufacturerFacade = new Interprise.Facade.Inventory.SystemManager.ManufacturerFacade(manufacturerGateway);
    manufacturerFacade.AddManufacturer("Kingston");
 }
    </code>
	</example>
	<param name="manufacturerCode">The transaction code of the System Manufactuer that will be created.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
		<para><font color="green" size="2">Assign the item for this
    manufacturer.</font></para>
	</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItemCode()
   Dim dataSet1 As New DataSet
   'Presuming the dataset contains the InventoryItem table
   Dim itemTable As DataTable = dataSet1.Tables("InventoryItem")
   'Presuming the itemTable contains item rows
   Dim manufacturerGateway As New Interprise.Framework.Inventory.DatasetGateway.ManufacturerDatasetGateway
   Dim manufacturerFacade As New Interprise.Facade.Inventory.ManufacturerFacade(manufacturerGateway)
   manufacturerFacade.AssignItem(Nothing, itemTable.Select)
 End Sub
    </code>
		<code lang="CS">
 private void AssignItemCode()
 {
    DataSet dataSet1 = new DataSet();
    //Presuming the dataset contains the InventoryItem table
    DataTable itemTable = dataSet1.Tables("InventoryItem");
    //Presuming the itemTable contains item rows
    Interprise.Framework.Inventory.DatasetGateway.ManufacturerDatasetGateway manufacturerGateway = new Interprise.Framework.Inventory.DatasetGateway.ManufacturerDatasetGateway();
    Interprise.Facade.Inventory.ManufacturerFacade manufacturerFacade = new Interprise.Facade.Inventory.ManufacturerFacade(manufacturerGateway);
    manufacturerFacade.AssignItem(null, itemTable.Select);
 }
    </code>
	</example>
	<param name="itemRowView">
		<div style="margin-left: 2em">
			<para><font color="#004080" size="2">The existing DataRow View of
        InventoryInternalStockTransferDetail DataTable from where values of the first
        record of the &lt;rowsSelected&gt; will be assigned.</font></para>
		</div>
	</param>
	<param name="rowsSelected">
		<div style="margin-left: 2em">
			<para><font color="#004080" size="2">Arrays or collection of item rows that
        will be included in the transaction.</font></para>
		</div>
	</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.CreateDescription(System.String)">
	<summary>
 Create Description for category.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.FinalizeDescription">
	<summary>
 Handles cascading of description to other languages
 Used this method before saving changes in the new manufacturer.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.LoadManufacturer(System.String)">
	<example>
		<code lang="VB">
 Protected Overridable Sub LoadSelectedManufacurer()
   Dim manufacturerGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway
   Dim manufacturerFacade As New Interprise.Facade.Inventory.SystemManager.ManufacturerFacade(manufacturerGateway)
   manufacturerFacade.LoadManufacturer("Kingston")
 End Sub
    </code>
		<code lang="CS">
 private void LoadSelectedManufacurer()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway manufacturerGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ManufacturerFacade manufacturerFacade = new Interprise.Facade.Inventory.SystemManager.ManufacturerFacade(manufacturerGateway);
    manufacturerFacade.LoadManufacturer("Kingston");
 }
    </code>
	</example>
	<param name="manufacturerCode">The manufacturer to be loaded.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.LoadDescription(System.String,System.String)">
	<example>
		<code lang="VB">
 Protected Overridable Sub LoadManufacturerDescription()
    Dim manufacturerGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway
    Dim manufacturerFacade As New Interprise.Facade.Inventory.SystemManager.ManufacturerFacade(manufacturerGateway)
    manufacturerFacade.LoadDescription("Kingston", "English - United Kingdom")
 End Sub
    </code>
		<code lang="CS">
 Private void LoadManufacturerDescription()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway manufacturerGateway = New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ManufacturerFacade manufacturerFacade = New Interprise.Facade.Inventory.SystemManager.ManufacturerFacade(manufacturerGateway);
    manufacturerFacade.LoadDescription("Kingston", "English - United Kingdom");
 }
    </code>
	</example>
	<param name="manufacturerCode">The manufacturer to be loaded.</param>
	<param name="languageCode">The language of the manufacturer.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.LoadWebOptionDescription(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="languageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.NewManufacturer(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.GetCommandSet">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.GetItems">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.AddLoadedItem(System.Data.DataTable,System.Data.DataRow)">
	<summary>
 Add records in the main thread.
 </summary>
	<param name="sourceTable"></param>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.DeleteItem">
	<summary>
		<para>Delete currently loaded manufacturer.</para>
		<para>This method can be use if the manufacturer you want to delete has no
    transaction.</para>
	</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub DeleteManufacturer()
            Dim manufacurerGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway
            Dim manufactuerFacade As New Interprise.Facade.Inventory.SystemManager.ManufacturerFacade(manufacturerGateway)
            manufactuerFacade.DeleteItem()
 End Sub
    </code>
		<code lang="CS">
 private void DeleteManufacturer()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway manufacurerGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ManufacturerDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ManufacturerFacade manufactuerFacade = new Interprise.Facade.Inventory.SystemManager.ManufacturerFacade(manufacturerGateway);
    manufactuerFacade.DeleteItem();
 }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.IsAllowDelete(System.String)">
	<summary>
 Check if the manufacturer can be deleted.
 </summary>
	<param name="manufacturercode">The manufacturer to be deleted.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.SystemManufacturer_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Contains all changes made to a record. </summary>
	<param name="sender">The object thats excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ManufacturerFacade.SystemManufacturerWebOptionView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingLanguageDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="sellingLanguageDataset"> Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.AssignSellingLanguage(System.Data.DataRowView,System.String)">
	<summary> Assigns the languagecode that the company used in their transaction. </summary>
	<remarks><para><font color="#004080" size="2">This method is obsolete.</font></para></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.AssignCurrencyCode(System.Data.DataRow,System.String)">
	<remarks><para><font color="#004080" size="2">This method is obsolete.</font></para></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.DoLoadDataset(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.GenerateDescription">
	<summary>
 Create multi-lingual description for all included languages.
 </summary>
	<returns>If true, creation succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.GenerateWebOptionDescription">
	<summary>
  Create multi-lingual description for all included languages.
 </summary>
	<returns>If true, creation succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingLanguageFacade.SellingLanguage_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Handles validation when excluding the company language from the Selling language list.
 </summary>
	<param name="sender">The caller of the subroutine.</param>
	<param name="e">The event args that contains information about the method.</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.CommandSet">
	<summary>
 Returns the tables and procedures used in updating this transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.DepartmentCode">
	<summary> Returns DepartmentCode. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.LanguageCode">
	<summary> Gets/set the language code selected by the user. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway)">
	<summary> 
 ' Create an Instance of this class.
 </summary>
	<param name="sellingdepartmentDataset"> Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.AddDepartment(System.String)">
	<summary>
 Create new row for selling deparment Table. 
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddNewDepartment()
    Dim sellingDepartmentGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway
    Dim sellingDepartmentFacade As New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway)
     sellingDepartmentFacade.AddDepartment("Hardware")
 End Sub
    </code>
		<code lang="CS">
 private void AddNewDepartment()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway sellingDepartmentGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway();
    Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade sellingDepartmentFacade = new Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway);
    sellingDepartmentFacade.AddDepartment("Hardware");
 }
    </code>
	</example>
	<param name="departmentCode">
 The transaction code of the Inventory Selling Department that will be
 created.
 </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.AddDepartment(System.String,System.String)">
	<summary>
 Adds a new row for InventorySellingDeparment DataTable. 
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddNewDepartment()
    Dim sellingDepartmentGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway
    Dim sellingDepartmentFacade As New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway)
     sellingDepartmentFacade.AddDepartment("Hardware","Hardware")
 End Sub
    </code>
		<code lang="CS">
 private void AddNewDepartment()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway sellingDepartmentGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway();
    Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade sellingDepartmentFacade = new Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway);
    sellingDepartmentFacade.AddDepartment("Hardware","Hardware");
 }
    </code>
	</example>
	<param name="departmentCode">
 The transaction code of the Inventory Selling Department that will be
 created.
 </param>
	<param name="description">Description of the new department.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.AssignDefaultParent">
	<summary>
 Assigns the default parent code if no parent is selected.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignParent()
  Dim departmentGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentGateway
  Dim departmentFacade As New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(departmentGateway)
  departmentFacade.AssignDefaultParent()
 End Sub
    </code>
		<code lang="CS">
 private void AssignParent()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentGateway departmentGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentGateway();
    Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade departmentFacade = new Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(departmentGateway);
    departmentFacade.AssignDefaultParent();
 }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
 Assign selected items to the current department.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItems()
            Dim dataSet1 As New DataSet
            'Presuming the dataset contains the InventoryItemView table
            Dim itemTable As DataTable = dataSet1.Tables("InventoryItemView")
            'Presuming the itemTable contains item rows
            Dim sellingDepartmentGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway
            Dim sellingDepartmentFacade As New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway)
            sellingDepartmentFacade.AssignItem(Nothing, itemTable.Select)
 End Sub
    </code>
		<code lang="CS">
 Private void AssignItems()
 {
    DataSet dataSet1 = New DataSet();
    //Presuming the dataset contains the InventoryItemView table
    DataTable itemTable = dataSet1.Tables("InventoryItemView");
    //Presuming the itemTable contains item rows
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway sellingDepartmentGateway = New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway();
    Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade sellingDepartmentFacade = New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway);
    sellingDepartmentFacade.AssignItem(null, itemTable.Select);
 }
    </code>
	</example>
	<param name="itemRowView">The item row to be edited.</param>
	<param name="rowsSelected">Array of item rows to be assigned to the department.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[],System.String)">
	<summary>
 Assign selected items to the current department.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItems()
            Dim dataSet1 As New DataSet
            'Presuming the dataset contains the InventoryItemView table
            Dim itemTable As DataTable = dataSet1.Tables("InventoryItemView")
            'Presuming the itemTable contains item rows
            Dim sellingDepartmentGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway
            Dim sellingDepartmentFacade As New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway)
            sellingDepartmentFacade.AssignItem(Nothing, itemTable.Select,sellingDepartmentFacade.DepartmentCode)
 End Sub
    </code>
		<code lang="CS">
 Private void AssignItems()
 {
    DataSet dataSet1 = New DataSet();
    //Presuming the dataset contains the InventoryItemView table
    DataTable itemTable = dataSet1.Tables("InventoryItemView");
    //Presuming the itemTable contains item rows
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway sellingDepartmentGateway = New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway();
    Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade sellingDepartmentFacade = New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway);
    sellingDepartmentFacade.AssignItem(null, itemTable.Select,sellingDepartmentFacade.DepartmentCode);
 }
    </code>
	</example>
	<param name="itemRowView">The item row to be edited.</param>
	<param name="itemRows">Array of item rows to be assigned to the department.</param>
	<param name="departmentCode">The department where the items will be assigned.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.CreateDescription(System.String,Interprise.Framework.Inventory.DatasetComponent.SystemManager.SellingDepartmentDataSet.InventorySellingDepartmentDescriptionDataTable)">
	<summary>
 Create Description for category.
 </summary>
	<param name="departmentCode"></param>
	<param name="departmentDescriptionTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.CreateParentDepartment(System.String)">
	<summary> Adds the parent department if does not exist in the department list. </summary>
	<remarks>
	</remarks>
	<param name="parentdepartmentCode "> The parent department to add. </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.DeleteItem">
	<summary>
 Delete currently loaded item.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.IsAllowDelete(System.String)">
	<summary>
	</summary>
	<param name="departmentcode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.HasTransaction(System.String)">
	<summary>
 Checks whether an item has transaction.
 </summary>
	<param name="departmentcode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.FinalizeDescription">
	<summary>
 Handles cascading of description to other languages
 Used this method before saving changes in the new department.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.GetDepartmentDescription(System.String)">
	<summary>
 Get the description of the selected department.
 </summary>
	<param name="departmentCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.GetCommandSet">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.AddLoadedItem(System.Data.DataTable,System.Data.DataRow)">
	<summary>
 Add records in the main thread.
 </summary>
	<param name="sourceTable"></param>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.LoadDepartment(System.String)">
	<summary>
 Load the selected department.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub LoadItemDepartment()
            Dim departmentGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway
            Dim deparmentFacade As New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(departmentGateway)
            deparmentFacade.LoadDepartment("Hardware")
 End Sub
    </code>
		<code lang="CS">
 private void LoadItemDepartment()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway departmentGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway();
    Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade deparmentFacade = new Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(departmentGateway);
    deparmentFacade.LoadDepartment("Hardware");
 }
    </code>
	</example>
	<param name="departmentCode">The document code to be loaded.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.LoadDescription(System.String,System.String)">
	<summary>
 Load the description of the selected department. 
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub LoadDepartmentDescription()
            Dim departmentGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway
            Dim departmentFacade As New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(departmentGateway)
            departmentFacade.LoadDescription("Hardware", "English - United Kingdom")
 End Sub
    </code>
		<code lang="CS">
 private void LoadDepartmentDescription()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway departmentGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway();
    Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade departmentFacade = new Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(departmentGateway);
    departmentFacade.LoadDescription("Hardware", "English - United Kingdom");
 }
    </code>
	</example>
	<param name="departmentCode">The document code to be loaded.</param>
	<param name="languageCode">The language of the department.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.LoadWebOptionDescription(System.String,System.String,System.String)">
	<summary>
 Loads the record of the selling department web option description.
 </summary>
	<param name="languageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.NewDepartment(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.UpdateDataset">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.ValidateDepartmentCode(System.String)">
	<summary> Checks if department code is already existing in the daTabase.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub IfDepartmentCodeExists()
            Dim sellingDepartmentGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway
            Dim sellingDepartmentFacade As New Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway)
            sellingDepartmentFacade.ValidateDepartmentCode("Hardware")
 End Sub
    </code>
		<code lang="CS">
 private void IfDepartmentCodeExists()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway sellingDepartmentGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingDepartmentDataSetGateway();
    Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade sellingDepartmentFacade = new Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade(sellingDepartmentGateway);
    sellingDepartmentFacade.ValidateDepartmentCode("Hardware");
 }
    </code>
	</example>
	<param name="departmentCode"><para>The document code to check if existing.</para></param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.InventoryItemDepartmentView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.InventorySellingDepartment_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Update other fields when paticular column is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingDepartmentFacade.InventorySellingDepartmentWebOptionView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingCurrencyDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="sellingCurrencyDataset"> Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade.GenerateInventoryCurrencyPricingDetail(System.String)">
	<summary>
 Generate Inventory Currency Pricing. 
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub GeneratePricingDetail()
    Dim sellingCurrencyGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingCurrencyDatasetGateway
    Dim sellingCurrencyFacade As New Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade(sellingCurrencyGateway)
    sellingCurrencyFacade.GenerateInventoryCurrencyPricingDetail("Admin")
 End Sub
    </code>
		<code lang="CS">
 private void GeneratePricingDetail()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingCurrencyDatasetGateway sellingCurrencyGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.SellingCurrencyDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade sellingCurrencyFacade = new Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade(sellingCurrencyGateway);
    sellingCurrencyFacade.GenerateInventoryCurrencyPricingDetail("Admin");
 }
    </code>
	</example>
	<param name="userCode">The user who login.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.SellingCurrencyFacade.InventorySellingCurrencyView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ReasonFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ReasonFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ReasonFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ReasonFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.ReasonDatasetGateway)">
	<summary>
 Create an instance of this class.
 </summary>
	<param name="Reasondataset"> Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.AssignAccountCode(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
 Assign account code to a particular reason.
 </summary>
	<param name="accountRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.AssignAccountCode(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assign account code to a particular reason.
 </summary>
	<param name="reasonRow"></param>
	<param name="accountRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.AssignAccountCode(System.Data.DataRowView,System.String,System.String)">
	<summary>
 Assign account code to a particular reason.
 </summary>
	<param name="accountCode"></param>
	<param name="accountDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.AssignAccountCode(System.Data.DataRow,System.String,System.String)">
	<summary>
 Assign account code to a particular reason.
 </summary>
	<param name="accountCode"></param>
	<param name="accountDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.IniNewtReasonRowView(System.Data.DataRowView)">
	<summary>
	</summary>
	<param name="reasonRowView"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.NewReason(System.String)">
	<summary>
	</summary>
	<param name="reasonCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.NewLineNum">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ReasonFacade.InventoryReasonView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Contains all changes made to a record. </summary>
	<param name="sender">The object thats excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.CommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value>
		<para>Interprise.Framework.Base.Shared.Enum.TransactionType</para></value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.CurrentDataset">
	<summary>The dataset that contains the Tables use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.OBPrefix">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway)">
	<summary>
 Create instance of this class
 </summary>
	<param name="openingBalanceDataset">Shared dataset between UI and facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.AssignItem(System.Data.DataRow,System.Decimal)">
	<summary><para>Assign items in the InventoryOpeningBalance DataTable.</para></summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItem()
   Dim dataSet1 As New DataSet
  'Presuming the dataset contains the InventoryAdjustmentView table
   Dim itemTable As DataTable = dataSet1.Tables("InventoryItemView")
  'Presuming the itemTable contains item rows
   Dim openingBalanceGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway
   Dim OpeningBalanceFacade As New Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway)
   OpeningBalanceFacade.AssignItem(itemTable.Rows(0))
 End Sub
    </code>
		<code lang="CS">
 private void AssignItem()
 {
    DataSet dataSet1 = new DataSet();
    //Presuming the dataset contains the InventoryAdjustmentView table
    DataTable itemTable = dataSet1.Tables("InventoryItemView");
    //Presuming the itemTable contains item rows
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway openingBalanceGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade OpeningBalanceFacade = new Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway);
    OpeningBalanceFacade.AssignItem(itemTable.Rows[0]);
 }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20String).html">
    AssignItem(String)</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20String()).html">
    AssignItem(String())</a></para>
	</overloads>
	<param name="itemRow">Item Row that will be added in opening balance.</param>
	<param name="quantity">Any valid number from 1 - 99,999,999.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
 Assign items in the inventory opening balance table.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItems()
   Dim dataSet1 As New DataSet
  'Presuming the dataset contains the InventoryAdjustmentView table
   Dim itemTable As DataTable = dataSet1.Tables("InventoryItemView")
  'Presuming the itemTable contains item rows
   Dim openingBalanceGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway
   Dim OpeningBalanceFacade As New Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway)
   OpeningBalanceFacade.AssignItem(Nothing, itemTable.Select)
 End Sub
    </code>
		<code lang="CS">
 private void AssignItems()
 {
    DataSet dataSet1 = new DataSet();
    //Presuming the dataset contains the InventoryAdjustmentView table
    DataTable itemTable = dataSet1.Tables("InventoryItemView");
    //Presuming the itemTable contains item rows
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway openingBalanceGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade OpeningBalanceFacade = new Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway);
    OpeningBalanceFacade.AssignItem(null, itemTable.Select);
 }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20String).html">
    AssignItem(String)</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20String()).html">
    AssignItem(String())</a></para>
	</overloads>
	<param name="openingBalanceRowView">Datarow view that will be edited.</param>
	<param name="rowsSelected">Array of rows that will be added in opening balance.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.AssignItem(System.String)">
	<summary>
		<para>Adds new item row on the InventoryOpeningBalance DataTable.</para>
		<para>It defaults the quantity to 1.</para>
	</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItem()
    Dim openingBalanceGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway
    Dim openingBalanceFacade As New Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway)
   'Presuming this item exists.
   openingBalanceFacade.AssignItem("ITEM-000001")
 End Sub
    </code>
		<code lang="CS">
 private void AssignItem()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway openingBalanceGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade openingBalanceFacade = new Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway);
    //Presuming this item exists.
    openingBalanceFacade.AssignItem("ITEM-000001");
 }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20System.Data.DataRowView,%20ByVal%20System.Data.DataRow()).html">
    AssignItem(Datarowview,Datarow())</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20String()).html">
    AssignItem(String())</a></para>
	</overloads>
	<param name="itemCode">The document code that will be included in the transaction.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.AssignItem(System.String[])">
	<summary>
		<para>Adds new item row on the InventoryOpeningBalance DataTable.</para>
		<para>It defaults the quantity to 1.</para>
	</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItems()
  Dim openingBalanceGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway
  Dim openingBalanceFacade As New Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway)
  'Presuming this item exists.
  openingBalanceFacade.AssignItem(New String() {"ITEM-000001", "ITEM-000002"})
 End Sub
    </code>
		<code lang="CS">
 private void AssignItems()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway openingBalanceGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade openingBalanceFacade = new Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway);
    //Presuming this item exists.
    openingBalanceFacade.AssignItem(new string[] {"ITEM-000001", "ITEM-000002"});
 }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20System.Data.DataRowView,%20ByVal%20System.Data.DataRow()).html">
    AssignItem(Datarowview,Datarow())</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20String).html">
    AssignItem(String)</a></para>
	</overloads>
	<param name="itemCodes">Items that will be included in the transaction.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.AssignItem(System.String,System.Decimal)">
	<summary>Adds new item row on the InventoryOpeningBalance table.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItem()
    Dim openingBalanceGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway
    Dim openingBalanceFacade As New Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway)
   'Presuming this item exists.
   openingBalanceFacade.AssignItem("ITEM-000001")
 End Sub
    </code>
		<code lang="CS">
 private void AssignItem()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway openingBalanceGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade openingBalanceFacade = new Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway);
    //Presuming this item exists.
    openingBalanceFacade.AssignItem("ITEM-000001");
 }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20System.Data.DataRowView,%20ByVal%20System.Data.DataRow()).html">
    AssignItem(Datarowview,Datarow())</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20String()).html">
    AssignItem(String())</a></para>
	</overloads>
	<param name="itemCode">Item that will be included in the transaction.</param>
	<param name="quantity">Any valid number from 1 - 99,999,999.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.AssignItem(System.String[],System.Decimal[])">
	<summary>Adds new item row on the InventoryOpeningBalance table.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItems()
  Dim openingBalanceGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway
  Dim openingBalanceFacade As New Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway)
  'Presuming this item exists.
  openingBalanceFacade.AssignItem(New String() {"ITEM-000001", "ITEM-000002"})
 End Sub
    </code>
		<code lang="CS">
 private void AssignItems()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway openingBalanceGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.OpeningBalanceDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade openingBalanceFacade = new Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade(openingBalanceGateway);
    //Presuming this item exists.
    openingBalanceFacade.AssignItem(new string[] {"ITEM-000001", "ITEM-000002"});
 }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20System.Data.DataRowView,%20ByVal%20System.Data.DataRow()).html">
    AssignItem(Datarowview,Datarow())</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade~AssignItem(ByVal%20String).html">
    AssignItem(String)</a></para>
	</overloads>
	<param name="itemCodes">Items that will be included in the transaction.</param>
	<param name="quantity">Any valid number from 1 - 99,999,999 in form of collection.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.IsValidOBCode(System.String)">
	<summary>
	</summary>
	<param name="openingBalanceCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary> Method use to set document code. </summary>
	<remarks>
	</remarks>
	<param name="transaction ">Determines what particular document code is to be generated. </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.Post">
	<summary> Method use to post current transaction. </summary>
	<return>String-Returns an error if there is, in posting this transaction. </return>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.OpeningBalanceFacade.InventoryOpeningBalance_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ItemUpdateFacadeFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the UpdateDataset procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ItemSpecificTypeFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ItemSpecificTypeFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ItemAttributeSourceFilterFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ItemAttributeSourceFilterFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ItemAttributeSourceFilterFacade.SystemItemAttributeSourceFilterCode_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary> 
 Updates web option column everytime temporary column values is changed.
 </summary>
	<remarks>
	</remarks>
	<param name="sender">The object thats executes this method. </param>
	<param name="e">The event args that contains all column changes in a data Table. </param>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ItemAttributeClassTemplateFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ItemAttributeClassTemplateFacade.FinalizeDescription">
	<summary>
 Handles cascading of description to other languages
 Used this method before saving changes in the new category.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ItemAttributeClassTemplateFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.ClassCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.GLClassTemplateDatasetGateway)">
	<summary> 
  Create an instance of this class.
 </summary>
	<param name="glClasstemplatedataset"> Shared dataaset between user interface and business facade</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.NewGLClassTemplate">
	<summary>
 Create new class template row.
 </summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade~NewGLClassTemplate(ByVal%20String).html">
 NewGLClassTemplate(String)</a>
	</overloads>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.NewGLClassTemplate(System.String)">
	<summary>
 Create new class template row.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddGClassTemplate()
            Dim glClassTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.GLClassTemplateDatasetGateway
            Dim glFacade As New Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade(glClassTemplateGateway)
            glFacade.NewGLClassTemplate("DEFAULT-STOCK")
 End Sub
    </code>
		<code lang="CS">
 private void AddGClassTemplate()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.GLClassTemplateDatasetGateway glClassTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.GLClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade glFacade = new Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade(glClassTemplateGateway);
    glFacade.NewGLClassTemplate("DEFAULT-STOCK");
 }
    </code>
	</example>
	<returns>
		<para><font color="#004080" size="2">The instance of the newly created row in the
    InventoryGLClassTemplate DataTable.</font></para>
	</returns>
	<param name="documentCode">The transaction code of the InventoryGLClassTemplate that will be created.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.InventoryGLClassTemplate_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.GLClassTemplateFacade.InventoryGLClassTemplateDetail_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.BandFacade.BandCode">
	<summary> Gets the band code of this transaction. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.BandFacade.CommandSet">
	<summary>
 Collections of tables and store procedures use by the UpdateDataset procedure.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.BandFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.BandFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.BandFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.BandFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.BandFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.BandDatasetGateway)">
	<summary>
 Create an instance of this class.
 </summary>
	<param name="bandDataset">Shared dataset between UI and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.BandFacade.AssignCategoryBandDetail(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
 Assign addtional values required to set up a category band.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignBandDetail()
            Dim dataSet1 As New DataSet
            'Presuming the dataset contains the SystemCategory table
            Dim categoryTable As DataTable = dataSet1.Tables("SystemCategory")
            'Presuming the categoryTable contains item rows
            Dim categoryBandGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.BandDatasetGateway
            Dim categoryBandFacade As New Interprise.Facade.Inventory.SystemManager.BandFacade(categoryBandGateway)
            categoryBandFacade.AssignCategoryBandDetail(Nothing, categoryTable.Select)
 End Sub
    </code>
		<code lang="CS">
 private void AssignBandDetail()
 {
    DataSet dataSet1 = new DataSet();
    //Presuming the dataset contains the SystemCategory table
    DataTable categoryTable = dataSet1.Tables("SystemCategory");
    //Presuming the categoryTable contains item rows
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.BandDatasetGateway categoryBandGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.BandDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.BandFacade categoryBandFacade = new Interprise.Facade.Inventory.SystemManager.BandFacade(categoryBandGateway);
    categoryBandFacade.AssignCategoryBandDetail(null, categoryTable.Select);
 }
    </code>
	</example>
	<param name="bandRowView">The row to be edited.</param>
	<param name="rowsSelected">Array of category rows that will be included in the current band code. </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.BandFacade.CopyDiscountBand(System.String)">
	<summary>
	</summary>
	<param name="bandCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.BandFacade.NewBand">
	<summary>Add new row in the SystemCategoryBand DataTable.</summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.SystemManager.BandFacade~NewBand(ByVal%20String).html">
 NewBand(String)</a>
	</overloads>
	<remarks>This method is aboslete use the NewBand method that has parameter.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.BandFacade.NewBand(System.String)">
	<summary>Add new row in the SystemCategoryBand DataTable.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddBand()
            Dim categoryBandGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.BandDatasetGateway
            Dim categoryFacade As New Interprise.Facade.Inventory.SystemManager.BandFacade(categoryBandGateway)
            categoryFacade.NewBand("Standard")
 End Sub
    </code>
		<code lang="CS">
 private void AddBand()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.BandDatasetGateway categoryBandGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.BandDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.BandFacade categoryFacade = new Interprise.Facade.Inventory.SystemManager.BandFacade(categoryBandGateway);
    categoryFacade.NewBand("Standard");
 }
    </code>
	</example>
	<returns>
		<para><font color="#004080" size="2">The instance of the newly created row in the
    SystemCategoryBand DataTable.</font></para>
	</returns>
	<param name="documentCode">The transaction code of the Category Band that will be created.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.BandFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.BandFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.BandFacade.SystemCategoryBand_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary> 
 Updates description column when band code is changed.
 </summary>
	<remarks>
	</remarks>
	<param name="sender">The object thats executes this method. </param>
	<param name="e">The event args that contains all column changes in a data Table. </param>
</member><member name="T:Interprise.Facade.Inventory.SystemManager.BandFacade">
	<summary>
 The class use when creating/modifying attribute and attribute values that will be used in the creation of the matrix group item type.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the
    <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.StockTakeFacade~UpdateDataSet.html">
    UpdateDataSet</a> procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.HasInputInStockTakeCountingSheet">
	<summary>
 Indicates if there are inputs in expected quantity of the
 InventoryStockTransferDetail DataTable
 </summary>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.AdjustmentCodes">
	<summary>
 Gets or sets the adjustment codes that was generated when the transaction is
 completed and posted.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.StockTakeCode">
	<summary>Gets the document code of the transaction.</summary>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.StockTakeKind">
	<summary>
		<para>Determines the type of the stock take transaction (i.e. Standard,All Location
    and Overdue)</para>
		<para>Standard - The default option when doing this transaction.</para>
		<para>All Location - All locations and items within the warehouse are automatically
    included as part of the transaction.</para>
		<para>Overdue - All items that are overdue(i.e DateCreation of the item +
    StockTakeDays) will be included in stock counting.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.StockTakeFacade.WarehouseCode">
	<summary>
 Returns the current warehouse code where stock take takes place
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.AssignWarehouse(System.String)">
	<summary>Assign the warehouse of where the Stock Take will take place.</summary>
	<remarks><para><font size="2">This method is obsolete.</font></para></remarks>
	<param name="WarehouseCode">The warehouse where stock take will take place.</param>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.StockTakeDatasetGateway)">
	<summary>
 Create an instance of StockTakeFacade class.
 </summary>
	<param name="stockTakeDataset">Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.CheckItems(System.String,System.Boolean)">
	<remarks>This method is obsolete.</remarks>
	<summary>This method is obsolete .</summary>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.GetLastStockTake(System.String)">
	<summary>
 Gets the Last Stock Date when a stock take was implemented on a specific
 warehouse.
 </summary>
	<param name="WarehouseCode">The warehouse where to get the last stock date.</param>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.GetInventoryReallocatableQuantity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.NewStockTake">
	<summary><para>Add new DataRow to the InventoryStockTake DataTable.</para></summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.StockTakeFacade~NewStockTake(ByVal%20Interprise.Framework.Inventory.Shared.Enum.StockTakeOption,%20ByVal%20String).html">
 NewStockTake(Interprise.Framework.Inventory.Shared.Enum.StockTakeOption,String)</a>
	</overloads>
	<example>
    The code below shows how to use the procedure.
    <code lang="VB">
Protected Overridable Sub NewStockTake()
    Dim stockTakeGateway As Interprise.Framework.Inventory.DatasetGateway.StockTakeDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.StockTakeDatasetGateway()
    Dim stockTakeFacade As Interprise.Facade.Inventory.StockTakeFacade = New Interprise.Facade.Inventory.StockTakeFacade(stockTakeGateway)
    stockTakeFacade.NewStockTake()
End Sub
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.NewStockTake(Interprise.Framework.Inventory.Shared.Enum.StockTakeOption,System.String)">
	<summary><para>Add new DataRow to the InventoryStockTake DataTable.</para></summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.StockTakeFacade~NewStockTake().html">
 NewStockTake()</a>
	</overloads>
	<example>
    The code below shows how to use the procedure.
    <code lang="VB">
Protected Overridable Sub NewStockTake()
    Dim stockTakeGateway As Interprise.Framework.Inventory.DatasetGateway.StockTakeDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.StockTakeDatasetGateway()
    Dim stockTakeFacade As Interprise.Facade.Inventory.StockTakeFacade = New Interprise.Facade.Inventory.StockTakeFacade(stockTakeGateway)
    stockTakeFacade.NewStockTake(StockTakeOption.Standard, "MAIN")
End Sub
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.PostStockTakeAdjustment">
	<summary>Post the stock take transaction when the status is Completed.</summary>
	<returns>If true, posting succeeds, otherwise it fails.</returns>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.ReloadStockTakeItems">
	<summary><para>Includes all items that are checked when the records are reloaded.</para></summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.StockTakeFacade~ReloadStockTakeItems(ByVal%20String).html">
 ReloadStockTakeItems(String)</a>
	</overloads>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.ReloadStockTakeItems(System.String)">
	<summary><para>Includes all items that are checked when the records are reloaded.</para></summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.StockTakeFacade~ReloadStockTakeItems().html">
 ReloadStockTakeItems()</a>
	</overloads>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.ReloadStockTakeTransactions">
	<summary> Method use to reload stock take transactions. </summary>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.TransferItem">
	<summary>
		<para>Insert all selected items to InventoryStockTransferDetail DataTable.</para>
		<para>All Items within the warehouse are temporarily stored in
    InventoryStockTakeLocationItemView DataTable then all the selected item in this
    table are transfered to the InventoryStockTransferDetail DataTable.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.UpdateLastStockTakeforLocationItem">
	<summary>
 Executes a query to the SQL Server updating the LastStockTakeDate of the
 InventoryLocationStockCount and InventoryStockTotal Table.
 </summary>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTakeFacade.InventoryStockTakeDetailColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryStockTakeDetailView DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.StockTakeFacade">
	<summary>
 The class use when creating/modifying a Stock Take routine.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.RecentTransactionFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.RecentTransactionFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="M:Interprise.Facade.Inventory.RecentTransactionFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.TransactionDatasetGateway)">
	<summary>
 Create an instance of RecentTransactionFacade class.
 </summary>
	<param name="recentTransactionDataset">Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.RecentTransactionFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Inventory.RecentTransactionFacade.ValidateRow(System.Data.DataRow)">
	<summary>Validate if there are duplicate Item Codes that are to be copied.</summary>
	<returns>If true validation succeeds,otherwise errors has been found.</returns>
	<param name="row">
 The DataRow of the InventoryCopyItemList DataTable that contains the item to
 verify.
 </param>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.RecentTransactionFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.RecentTransactionFacade.ItemCopyList_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryCopyItemList DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.RecentTransactionFacade">
	<summary>
 The class use for viewing item recent transaction and history.
 <para>This were also use in copying an item.</para>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.LocationStockCountFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.LocationStockCountFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.LocationStockCountFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.LocationStockCountDatasetGateway)">
	<summary>
 'Create an instance of LocationStockCountFacade class.
 </summary>
	<param name="locationStockCountDataset">Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.LocationStockCountFacade">
	<summary>The facade use when retrieving item stock count.</summary>
</member><member name="P:Interprise.Facade.Inventory.LocationFacade.CurrentBusinessRule">
	<summary> Returns CurrentBusinessRule. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.LocationFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.LocationFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.LocationFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.LocationFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.LocationDatasetGateway)">
	<summary>
   'Create an instance of LocationFacade class.
 </summary>
	<param name="locationdataset">Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.LocationFacade">
	<summary>
 The class use for location related transaction(i.e. retrieving location information, etc.).
 <para>Reserved for future use.</para>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemLedgerFacade.CurrentDataset">
	<summary> Returns  CurrentDataset . </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemLedgerFacade.CurrentBusinessRule">
	<summary> Returns CurrentBusinessRule. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemLedgerFacade.CurrentReportType">
	<summary>
	</summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemLedgerFacade.CurrentTransactionType">
	<summary>
	</summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemLedgerFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.ItemLedgerDatasetGateway)">
	<summary>
 Create an instance of ItemLedgerFacade class.
 </summary>
	<param name="itemLedgerDataset">Shared dataset instance between main control and section control.</param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.ItemLedgerFacade">
	<summary>
 The class use for item ledger.
 <para>It serves as a gateway for the connecting presentaion to the business layer.</para>
		<para>There were no additional or special methods that can be found here.</para>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ApplyDescriptionToAll">
	<summary>
 Indicates if item description will be applied to all selling languages of an
 item.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.IsAutoRecalculate">
	<summary>
 Indicates if item pricing of other selling currencies is automatically
 recalculated when changes to the home currency value takes place.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the UpdateDataset procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.CurrencyCode">
	<summary>Gets or sets the currencyCode that is use in this transaction.</summary>
	<returns>String</returns>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>
		<para>
  Interprise.Extendable.Base.Business.IBaseInterface</para>
	</value>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value>
		<para>Interprise.Framework.Base.Shared.Enum.TransactionType</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.ReportAction</para></value>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.CostingMethod">
	<summary>The costing use by an item.</summary>
	<returns>String - Costing Method</returns>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ClassTemplateTable">
	<summary>
 Gets/sets the instance of the class template table where the item class values where stored.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.DefaultPricingCurrencyCode">
	<summary>
		<para>Gets/sets the currency code use by default pricing transaction.</para>
		<para>This is use when the transation type is
    <font size="2">InventoryDefaultRetailPricing or</font>
			<font size="2">InventoryDefaultWholesalePricing</font></para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.DeleteItem">
	<summary>
		<para>Delete the currently loaded item.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.DeleteItem(System.String)">
	<summary>
 Deletes the item from the database.
 </summary>
	<param name="itemName">Display name of an existing item.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.IsItemTypeChangedToMatrixItem(System.String)">
	<returns><para>True- If item is changed to matrix item.</para><para> False- not a matrix item. </para></returns>
	<remarks>This method is obsolete.</remarks>
	<param name="itemType"> The new type of an item </param>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.IsMatrixGroupHasChanges">
	<summary>
		<para>Checks if Matrix Group has changes.</para>
		<para>Applies if the item type of the item that is loaded is a matrix group.</para>
	</summary>
	<value><para>If true, changes have been made to the matrix group.</para></value>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.IsAllowDelete(System.String)">
	<summary>
		<para>Checks if an item can be deleted.</para>
		<para>This method checks all DataTable that is associated with the item.</para>
	</summary>
	<param name="itemCode">The documentCode of the item that will be check.</param>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ApplyToMatrixItems">
	<summary>
 Indicates if changes made to a matrix group will be applied to its matrix
 items.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.IsItemCostReset">
	<summary>Indicates if the average or last cost of an item was changed.</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.HasTransaction(System.String,System.String)">
	<summary>
  Checks whether an item has transaction.
 </summary>
	<param name="itemCode">The itemcode to check.</param>
	<param name="unitMeasureCode">The unit measure to verify.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ItemCode">
	<summary><para>The document code of the item.</para></summary>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ItemName">
	<summary> Returns ItemCode. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ItemType">
	<summary> Type of item.</summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ItemDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ItemCodeToCopy">
	<summary> Returns the itemcode of the item to be copied. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.IsRecalculatePricingLevel">
	<summary> Returns or sets the value IsRecalculatePricingLevel. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.CurrentBusinessRuleType">
	<summary>
 Gets the business rule that is used in this transaction in Internet
 connection.
 </summary>
	<value><para>
 Interprise.Framework.Base.Shared.Enum.BusinessRuleType</para></value>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.HomeCurrencyCode">
	<summary>Gets the company's currency code.</summary>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.HomeExchangeRate">
	<summary>Gets home currency code exchange rate.</summary>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.KitLanguageCode">
	<summary> Returns or sets the value KitLanguageCode. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.KitCurrencyCode">
	<summary> Returns or sets the value KitCurrencyCode. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.OldGroupCode">
	<summary> Returns or sets the value of OldGroupCode. </summary>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.IsItemCopyFrom">
	<summary> Returns or sets the value of IsItemCopyFrom. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.PricingLevelFilterType">
	<summary>
 Determines the kind of filtering applied in the pricing level.
 </summary>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.LanguageCode">
	<summary>The selected language that will filter the item description.</summary>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.GeneratedMatrixSessionCode">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.DeleteGeneratedMatrixCriteria">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.ItemDetailDatasetGateway)">
	<summary>
 Create an instance of ItemDetailFacade class.
 </summary>
	<param name="itemDetailDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.ItemDetailDatasetGateway,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Create an Instance of ItemDetailFacade class.
 </summary>
	<param name="itemDetailDataset"></param>
	<param name="transactiontype"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.Initialize">
	<summary>
	</summary>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AddItem(System.String,System.String,System.String)">
	<summary>Add new row to the InventoryItem DataTable.</summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.ItemDetailFacade~AddItem(ByVal%20String,%20ByVal%20String,%20ByVal%20Interprise.Framework.Base.Shared.Enum.ItemType).html">
 AddItem(String,String,Framework.Base.Shared.Enum.ItemType)</a>
	</overloads>
	<param name="itemName"><para>The display name of the item that will be created.</para></param>
	<param name="classCode">The item class template that will be applied to the item.</param>
	<param name="itemType">
 Type of the item (i.e. Stock, Non-Stock, Service, Electronic Download, Assembly,
 Kit, Matrix Group).
 </param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AddItem(System.String,System.String@,Interprise.Framework.Base.Shared.Enum.ItemType)">
	<summary>Add new row to the InventoryItem DataTable.</summary>
	<seealso cref="M:Interprise.Facade.Inventory.ItemDetailFacade.AddItem(System.String,System.String,System.String)">AddItem(String,String,String)</seealso>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.ItemDetailFacade~AddItem(ByVal%20String,%20ByVal%20String,%20ByVal%20String).html">
 AddItem(String,String,String)</a>
	</overloads>
	<returns>Instance of the newly created datarow in the InventoryItem DataTable.</returns>
	<param name="itemName"><para>The display name of the item that will be created.</para></param>
	<param name="classCode">The item class template that will be applied to the item.</param>
	<param name="itemType">
 Type of the item (i.e. Stock, Non-Stock, Service, Electronic Download, Assembly,
 Kit, Matrix Group).
 </param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AddItem(System.String,Interprise.Framework.Base.Shared.Enum.ItemType)">
	<summary>
	</summary>
	<param name="itemName"></param>
	<param name="itemType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AddItem(System.String,System.String,Interprise.Framework.Base.Shared.Enum.ItemType,System.String)">
	<summary>Add new row to the InventoryItem DataTable.</summary>
	<seealso cref="M:Interprise.Facade.Inventory.ItemDetailFacade.AddItem(System.String,System.String,System.String)">AddItem(String,String,String)</seealso>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.ItemDetailFacade~AddItem(ByVal%20String,%20ByVal%20String,%20ByVal%20String).html">
 AddItem(String,String,String)</a>
	</overloads>
	<returns>Instance of the newly created datarow in the InventoryItem DataTable.</returns>
	<param name="itemName"><para>The display name of the item that will be created.</para></param>
 ''' <param name="itemDescription"></param>
	<param name="itemType">
 Type of the item (i.e. Stock, Non-Stock, Service, Electronic Download, Assembly,
 Kit, Matrix Group).
 </param>
	<param name="classCode">The item class template that will be applied to the item.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AddWebOption">
	<summary>
 Add web option rows
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ApplyItemClassTemplate(System.String)">
	<summary>Apply the item class template to the item.</summary>
	<param name="classCode">The item class template code in the InventoryItemClassTemplate.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ApplyClassTemplateWebOption(System.Data.DataRow,System.String,System.Object)">
	<summary>
 Apply clas template values for web option row
 </summary>
	<param name="classTemplateRow"></param>
	<param name="columnName"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ApplyItemClassTemplatePrice(System.String,System.Data.DataRow,Interprise.Framework.Inventory.DatasetComponent.SystemManager.ClassTemplateDataset.InventoryItemClassTemplateRow)">
	<summary>
	</summary>
	<param name="columnName"></param>
	<param name="itemRow"></param>
	<param name="classTemplateRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ApplyDescriptionToAllLanguage(System.String,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ApplyDescriptionToAllLanguage(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="columnName"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignCategory(System.Data.DataRowView,System.Data.DataRow)">
	<summary> Method use to assign category. </summary>
	<remarks>
	</remarks>
	<param name="categoryRowView ">
	</param>
	<param name="RowSelected ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignDepartment(System.Data.DataRowView,System.Data.DataRow)">
	<summary> Method use to assign department. </summary>
	<remarks>
	</remarks>
	<param name="departmentRowView ">
	</param>
	<param name="rowSelected "></param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignItemAccounts(System.Data.DataRowView,System.Data.DataRow)">
	<summary> Method use to assign item accounts. </summary>
	<remarks> use by item accounts control </remarks>
	<param name="CurrentItemAccountRow">
	</param>
	<param name="currentSelectedRow">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignItemAccounts(System.String,System.String)">
	<summary><para> Method use to assign item accounts. </para>
		<para>Use by basefacade when generating accounts for new warehouse.</para></summary>
	<remarks>
	</remarks>
	<param name="warehouseCode ">
	</param>
	<param name="itemcode ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignDefaultAccounts(System.String)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignItemAccount(System.String)">
	<summary>
	</summary>
	<param name="classCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAssemblyComponents(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
 Assgigns Items for assembly components.
 </summary>
	<param name="assemblyRowView"></param>
	<param name="rowsSelected"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAccessoryItems(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="accessoryRowView"></param>
	<param name="rowsSelected"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSubstituteItems(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
 Procedure to assign the selected substitute items. 
 </summary>
	<param name="substituteItemRowView"> The row view that is to be edited. </param>
	<param name="rowsSelected"> The rows of item selected. </param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSuppliers(System.Data.DataRowView,System.Data.DataRow[],System.Boolean,System.Boolean,System.Int32)">
	<summary>
 Method use to add new supplier.
 </summary>
	<param name="supplierRowview"></param>
	<param name="rowsSelected"></param>
	<param name="IsFromTemPlate"></param>
	<param name="leadTime"></param>
	<returns></returns>
	<remarks>This method is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSupplier(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="supplierRowview"></param>
	<param name="rowsSelected"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSupplierPricingLevel(System.Data.DataRow)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetItemUnitMeasureTable(System.Data.DataRow[],System.Boolean)">
	<summary>
	</summary>
	<param name="itemRows"></param>
	<param name="clearTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSupplier(System.Data.DataRow,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="supplierViewRow"></param>
	<param name="rowSelected"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAlternateSupplierDescription">
	<summary>
 Change Supplier item description if  item is copied from
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.DefaulUnitMeasure">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateShipFromAddress(System.Data.DataRow,System.Boolean)">
	<summary>
 Create's the ship from address from the supplier row.
 </summary>
	<param name="supplierRow"></param>
	<param name="isShipFromDetail">Use details from the Supplier ShipFrom.</param>
	<returns>ShipFrom Address</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSupplierShipFrom(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
 Assign shipfrom row in the InventorySupplier and InventorySupplierTemp DataTables.
 </summary>
	<param name="shipFromRow">ShipFrom Row</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSupplierPartCode(System.Data.DataRowView,System.Data.DataRow[],System.String)">
	<summary>
 Assign supplier row in the InventorySupplier DataTable.
 </summary>
	<param name="supplierRowView">The supplier row view to be edited.</param>
	<param name="supplierRows">Collection of Supplier rows.</param>
	<returns></returns>
	<remarks>SP3</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AddMatrixAttribute(System.String,System.String)">
	<summary>
	</summary>
	<param name="attributeCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAttributes(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Assign the selected attributes defaults. 
 </summary>
	<param name="systemAttributeRow"></param>
	<param name="itemAttributeRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAttributeValues(System.String,System.Data.DataRow,System.Data.DataRowView)">
	<summary>
  Assign the selected attribute values defaults.
 </summary>
	<param name="attributeCode"></param>
	<param name="systemAttributeValueRow"></param>
	<param name="itemAttributeValueRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAttribute(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="attributeRowView"></param>
	<param name="rowsSelected"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAttributeValue(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
 Method use to assign attribute value. 
 </summary>
	<param name="attributeValueRowView"></param>
	<param name="rowsSelected"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAttributeValue(System.String)">
	<summary>
 Assign attributes for matrix group.
 </summary>
	<param name="systemAttributeCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignAssemblyDetails(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Method use to assign assembly details. 
 </summary>
	<param name="assemblyrow"></param>
	<param name="assemblyviewrow"></param>
	<remarks>This method is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSalesTaxCode(System.String,System.String,System.String,System.String)">
	<summary>
 Assign sales tax code.
 </summary>
	<param name="salesTaxCode">Sales tax document code.</param>
	<param name="countryCode">Country where the sales tax is implemented.</param>
	<param name="taxType">Type of the tax. In Inventory it is usually pertains to AR type.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSalesTaxCode(System.Data.DataRow)">
	<summary>
 Assign sales tax code.
 </summary>
	<param name="salesTaxRow">The DataRow containing the sales tax values.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSalesTaxCode(System.Data.DataRowView,System.Data.DataRow[],System.Boolean)">
	<summary>
	</summary>
	<param name="salesTaxRowView"></param>
	<param name="sourceSalesTaxRows"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ModifyItemType(System.String)">
	<summary>
 Method use to modify item type. 
 </summary>
	<param name="NewItemType"></param>
	<remarks>This method is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignPricingLevel(System.Data.DataRowView,System.Data.DataRow,System.String,System.String)">
	<summary>
 Use this method when a user just types in the unit measure code and price level filter is specific.
 </summary>
	<param name="pricingLevelRowView">The newly added priing level row.</param>
	<param name="rowSelected">The unit measure row selected by the user.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignPricingLevelUnitMeasure(System.Data.DataRowView,System.Data.DataRow,System.String,System.String)">
	<summary>
 Assign unit measure for a specific price break.
 </summary>
	<param name="pricingLevelRowView"></param>
	<param name="rowSelected"></param>
	<param name="priceLevelCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignPhoto(System.String)">
	<summary>
 Assign photo to the currrent item.
 </summary>
	<param name="path">The file path where image will be taken.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignPhoto(System.Byte[])">
	<summary>
 Assign photo to the item.
 </summary>
	<param name="photo">The photo in byte array format.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSpecialCosting(System.String,System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Procedure to assign the selected items special costing defaults. 
 </summary>
	<param name="SupplierCode"></param>
	<param name="itemUnitMeasureRow"></param>
	<param name="specialCostingRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSpecialPricing(System.Data.DataRowView,System.Data.DataRow,System.String)">
	<summary>
 Assign new special pricing.
 </summary>
	<param name="specialPricingRowView"></param>
	<param name="rowSelected"> Row selected by the user.</param>
	<param name="currencyCode"> The currency to use.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignInventoryCategory(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
  Method use to assign inventory category. 
 </summary>
	<param name="CategoryView"></param>
	<param name="rowsSelected"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignUnitMeasure(System.Data.DataRowView,System.Data.DataRow,System.String)">
	<summary>
 Assign item unit measure. 
 </summary>
	<param name="unitMeasureRowView">Row view to be edited.</param>
	<param name="rowSelected">Array of system unit measure rows.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignUnitMeasureforProdIdentifier(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
 Assign item unit measure. 
 </summary>
	<param name="productIdentifierRowView">Row view to be edited.</param>
	<param name="rowSelected">Array of system unit measure rows.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignItemKit">
	<summary> Method use to assign item kit. </summary>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignWarehouse(System.Data.DataRowView,System.String)">
	<summary>
 Method use to assign warehouse.
 </summary>
	<param name="currentWarehouseRow"></param>
	<param name="warehouseCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AttachedItem(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="matrixItemRowView"></param>
	<param name="itemRows"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemDetailFacade.ValidItemCount">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.NewTempItemCode">
	<summary>
 Generate a 30 length field item code use temporarily by a transaction.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ClearMatrixTemporaryTables">
	<summary>
 Clear all temporary tables use by matrix group item.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateItemDescription">
	<summary> Method use to create the section control and attached them to the main control. </summary>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CopyItem(System.String,System.String)">
	<summary>
 Method use to copy item.
 </summary>
	<param name="itemCode"></param>
	<param name="newItemName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CopyItem(Interprise.Framework.Inventory.DatasetGateway.ItemDetailDatasetGateway,System.String[],System.String[])">
	<summary>
 'use to copy item multiple times
 </summary>
	<param name="sourceDataset"></param>
	<param name="newItemNames"></param>
	<param name="newItemDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateDefaultUnitMeasure">
	<summary>'Assign default unit measure from SystemUnitMeasure </summary>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateItemPricingDetail(System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
	<summary>  Create default PricingDetail </summary>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateInventoryItemFromMatrixItems">
	<summary>
  Creates an inventory item for the selected matrix item.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ConvertVolume(System.Double,Interprise.Framework.Base.Shared.Enum.ConversionType)">
	<summary>Converts volume to a different unit measure system.</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ConvertWeight(System.Double,Interprise.Framework.Base.Shared.Enum.ConversionType)">
	<summary>
 Convert a weight value to another Unit Measure System.
 </summary>
	<param name="unitWeight"></param>
	<param name="conversionType"></param>
	<returns></returns>
	<remarks>This method is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CopyMatrixGroup(System.String,System.String)">
	<summary> Method use to copy matrix group. </summary>
	<returns> Boolean </returns>
	<remarks>
	</remarks>
	<param name="ItemCode "> The new item code of this item.</param>
	<param name="ItemCodeToCopy "> The matrix group code to copy </param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CopyKitItems(System.String,System.String)">
	<summary> Method use to copy kit items. </summary>
	<returns> Boolean</returns>
	<remarks>
	</remarks>
	<param name="ItemKitCode ">
	</param>
	<param name="ItemKitCodeToCopy ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateMatrixItems">
	<summary> Method use to create the section control and attached them to the main control. </summary>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ComputeAssemblyCost">
	<summary>
 Computes total of item costs and appends it to item average cost,last cost and standard cost.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ComputeBundlePricing(System.String)">
	<summary>
 Computes total of item price of components and appends it to bundles retail, wholesale and suggested price.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ComputeBundleComponentsPercentage(System.Decimal)">
	<summary>
	</summary>
	<param name="bundleRetailPriceRate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.DeleteLineItem(System.Boolean,System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="IsCategory"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.FinalizeItemDescription">
	<summary>
 Handles cascading of description to other languages
 Used this method before saving changes in the new item.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GenerateInventoryMatrixItem(System.String@)">
	<summary>
 Method use to generate inventory matrix item.
 </summary>
	<param name="errorMessage"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ValidateGeneratedMatrixItemNameByBatch(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="forceValidate"></param>
	<param name="clear"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetAttributeValue(System.Collections.ArrayList,System.Int32)">
	<summary>
	</summary>
	<param name="value"></param>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetCommandSet">
	<remarks>This method is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GeneratePricingLevel">
	<summary>
 Generate pricing level on the database when new unit measure is added.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.HandleItemTypeChanged">
	<summary>
 Method use to handle item type change. 
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.IsAttributeValueCodeUsed(System.String,System.String)">
	<summary> Method use to check if the attribute value code was used. </summary>
	<remarks>
	</remarks>
	<param name="attributeCode ">
	</param>
	<param name="attributeValueCode ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.IsMatrixItemInInventoryItem(System.String[])">
	<summary>
  Call IsMatrixItemInInventoryItem from business rule. 
 </summary>
	<param name="param"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.IsAllowBundleComponentDeletion(System.String)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.MoveAttribute(System.Data.DataRowView,System.Boolean)">
	<summary>
  Method use to move attributes.
 </summary>
	<param name="attributeRowView"></param>
	<param name="isMoveUp"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.RecalculatePricingLevel(System.Data.DataRow)">
	<summary> Method use to recalculate pricing level. </summary>
	<remarks>
	</remarks>
	<param name="pricingLevelRow">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.RecalculatePricingDetaill(Interprise.Framework.Inventory.DatasetComponent.ItemDetailDataset.InventoryItemPricingDetailRow,System.String)">
	<summary> Method use to recalculate pricing detail. </summary>
	<remarks>
	</remarks>
	<param name="CurrentEditedRow"> Row to be edited.</param>
	<param name="ColumnToCompute"> Column to compute for pricing. </param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.RecomputePriceListOnUpdatePricingCost(System.String,System.Decimal)">
	<summary>
 Updates price of items price list when pricing cost is changed.
 </summary>
	<param name="itemCode">The item on which update will take effect.</param>
	<param name="pricingCost">The new price cost.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ReComputePricing(System.String,System.String,System.Boolean)">
	<summary>
 Recalculates pricing 
 </summary>
	<remarks>see ItemPricingDetail_ColumnChanged</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ReComputeDefaultPricing">
	<summary>
 Recalculates pricing 
 </summary>
	<remarks>see ItemPricingDetail_ColumnChanged</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.SelectMatrixItems(System.Boolean)">
	<summary> Method use to select matrix items. </summary>
	<remarks>
	</remarks>
	<param name="isSelectAll">Indicates if all items will be generated as new matrix item. </param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateMatrixTempTable">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateMatrixItemCode">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateAverageCost(System.Decimal)">
	<summary>
  Update item average cost.
 </summary>
	<param name="AverageCost"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateLastCost(System.Decimal)">
	<summary>
  Update item last purchase cost.
 </summary>
	<param name="lastCost"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateSupplierView(System.Data.DataRow,System.String,System.Object)">
	<summary>
	</summary>
	<param name="pricingLevelRow"></param>
	<param name="columnToUpdate"></param>
	<param name="proposedValue"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateStandardCost(System.Decimal)">
	<summary>
 Update item standard cost.
 </summary>
	<param name="standardCost"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AuditStandardCostHistory">
	<summary>
 Audit all changes made to standard cost.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateInventoryCostHistory">
	<summary>
 Updates Inventory Cost History table.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateInventoryItemTableDescription">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateInventoryItemFromMatrixItems">
	<summary> Propagate changes from matrix group to matrix items. </summary>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateStockTakeDays">
	<summary>Updates the stock take days of InventoryStockTotal</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateStockTotal">
	<summary>
 Update stock total values based on applied class template.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateInventoryItemFromMatrixItem">
	<summary>
 Creates an inventory item for the selected matrix item
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateMatrixTriggerRows(System.Boolean)">
	<summary>
	</summary>
	<param name="createDeleteTrigger"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ComputeCost(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary> Calculate cost fields of   InventorySupplierViewPricingLevel and InventorySpecialCosting Tables </summary>
	<remarks> When user changes UnitMeasure, calculate cost fields of   InventorySupplierViewPricingLevel and InventorySpecialCosting Tables. </remarks>
	<param name="sender">The object thats excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetPricingMethod(System.String,System.String)">
	<summary>
 Return's currency pricing method.
 </summary>
	<param name="itemCode"></param>
	<param name="currencyCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetPricingDetailRow(System.String)">
	<summary>
 Gets a DataRow from InventoryItemPricingDetail DataTable that match the specified
 currency code.
 </summary>
	<param name="currencyCode">The currrency code which pricing will be retrieved.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetPricingCostRate(System.String,System.String)">
	<summary>Retrieves an item pricing cost.</summary>
	<returns>The currency value of the pricing cost.</returns>
	<param name="itemCode">The item code from which pricing cost will be retrieved. </param>
	<param name="currencyCode">The currency code from which pricing cost will be retrieved.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetLastCost(System.String,System.String)">
	<summary>Retrieves an item last cost.</summary>
	<param name="itemCode">The item code from which pricing cost will be retrieved. </param>
	<param name="currencyCode">The currency code from which pricing cost will be retrieved.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetRetailPriceRate(System.String,System.String)">
	<summary>Retrieves an item retail price.</summary>
	<param name="itemCode">The item code from which pricing cost will be retrieved. </param>
	<param name="currencyCode">The currency code from which pricing cost will be retrieved.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetUnitMeasureRow(System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="unitMeasureCode"></param>
	<param name="isBase"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GenerateEcommerceOptionDetail">
	<summary>
		<para>Generate web option values for newly added items.</para>
		<para>This procedure will insert rows in the web option tables such as
    InventoryItemWebOption, InventoryItemWebOptionDescription,
    InventorySellingDepartment</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadInventoryItem(System.String)">
	<summary>
 Loads all  records of related table of an inventory item.
 </summary>
	<param name="itemCode">The document code of the item that will be loaded.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadItem(System.String)">
	<summary>Load the record of an item to the InventoryItem DataTable.</summary>
	<param name="itemCode">The document code of the item.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadItemDescription(System.String)">
	<summary>
		<para>Load the records of the item Description and stored in the
    InventoryItemDescription DataTable.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
	<param name="itemCode">
		<para>The document code of the item that will be loaded.</para>
		<para>The value cannot be null.</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadItemDescription(System.String,System.String)">
	<summary>
		<para>Load the records of the item Description and stored in the
    InventoryItemDescription DataTable.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
	<param name="itemCode">
		<para>The document code of the item that will be loaded.</para>
		<para>The value cannot be null.</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadUnitMeasure">
	<summary>
		<para>Load the records of the item unit measure if InventoryUnitMeasure DataTable
    count is zero.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadUnitMeasure(System.String)">
	<summary>
		<para>Load the records of the item unit measure if InventoryUnitMeasure DataTable
    regardless if there is row or none.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
	<param name="itemCode">
		<para>The document code of the item that will be loaded.</para>
		<para>The value cannot be null.</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadDepartment">
	<summary>
		<para>Load the records of the item selling department if InventorySellingDepartment
    DataTable count is zero.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadCategory">
	<summary>
		<para>Load the records of the item categories if InventoryCategory DataTable count
    is zero.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadAccounts">
	<summary>
		<para>Load item accounts values if table count is zero.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadDefaultAccounts(System.String)">
	<summary>
		<para>Load item accounts values if table count is zero.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadPricingDetail">
	<summary>
		<para>Load item item pricing rows.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadBundlePricingGroupDetail">
	<summary>
		<para>Load item item pricing rows.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadSupplierDetail">
	<summary>
		<para>Load item supplier rows.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.LoadItemWebOption">
	<summary>
 Load item web option records.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ValidatePriceBreak(System.Data.DataRow)">
	<summary>
 Loops all rows of InventoryPricingLevelVIew DataTable to check if price break
 intervals are valid.
 </summary>
	<param name="pricingRow">
		<para>The DataRow to which the values in the rows of the InventoryPricingLevelView
    DataTable will be compared.</para>
		<para>The value cannot be null.</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InsertPriceBreak(Interprise.Framework.Inventory.Shared.Structure.PriceListInformation,System.Data.DataRow)">
	<summary>
		<para>Insert price break below an existing price break.</para>
		<para>If just override any price break made below the min and max quantity of the
    selected price break row.</para>
		<para>The InventoryItem DataTable must have a record loaded in order to use this
    method.</para>
	</summary>
	<param name="priceBreakInfo">
		<para>Contains values that will be use to insert the price break rows.</para>
		<para>The value cannot be null.</para>
	</param>
	<param name="pricingLevelRow">
		<para>The DataRow in the InventoryPricingLevelView DataTable where the insertion of
    the price break will start.</para>
		<para>The value cannot be null.</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GeneratePriceBreak(Interprise.Framework.Inventory.Shared.Structure.PriceListInformation,System.Data.DataRow)">
	<summary>
		<para>Generate the price break rows for InventoryPricingLevel DataTable.</para>
		<para>The InventoryItem DataTable must have a record in order to use this
    method.</para>
	</summary>
	<param name="priceBreakInfo">Contains information that will be use to generate the price break rows.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ResetPriceBreak(Interprise.Framework.Inventory.Shared.Structure.PriceListInformation)">
	<summary>
		<para>Reset the price break interval in the InventoryPricingLevelView
    DataTable.</para>
		<para>The InventoryItem DataTable must have a record in order to use this
    method.</para>
	</summary>
	<param name="priceBreakInfo">
		<para>Contains information that will be use when resetting the price break.</para>
		<para>The value cannot be null</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ManageSupplierPriceBreak(System.Data.DataRowView,Interprise.Framework.Inventory.Shared.Enum.ManagePriceListType,Interprise.Framework.Inventory.Shared.Structure.PriceListInformation)">
	<summary>
	</summary>
	<param name="pricingLevelRowView"></param>
	<param name="manageType"></param>
	<param name="priceListInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.HasPriceBreak(System.Data.DataRowView)">
	<summary>
 Check if supplier has price breaks.
 </summary>
	<param name="supplierRowView"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.HasSupplierPriority">
	<summary>
		<para>Checks if there is a supplier that has marked as the priority one.</para>
		<para>If there is no DataRow in the InventorySupplierPricingLevelView, it just
    return True.</para>
	</summary>
	<returns>
		<para>If true, then there is a assigned default supplier or there is no supplier
    attached to the item.</para>
		<para>If false, no default supplier is selected</para>
	</returns>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ExecuteMatrixQuery(System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="matrixDataset"></param>
	<param name="transactionDescription"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.RecomputePricing(System.Decimal)">
	<summary><para>Recalculate the values in the InventoryItemPricingDetail DataTable.</para></summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GetContentType(System.String)">
	<summary>
	</summary>
	<param name="filePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ValidateItemSpecificType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.DestroyHandler">
	<summary>Remove the handler of Table.ColumnChanged to different Inventory tables.</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.CreateHandler">
	<summary>Add the handler of Table.ColumnChanged to different Inventory tables.</summary>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryItem_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryItem DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryItemDescription_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryItemDescription DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryItemWebOption_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryItemWebOptionView DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryPricingLevelView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryPricingLevelView DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryItemPricingDetail_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryItemPricingDetail DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryDefaultPricingDetail_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryItemPricingDetail DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventorySupplierPricingLevelView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventorySupplierPricingLevelView DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventorySpecialPricing_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventorySpecialPricing DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventorySupplierView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventorySupplierView DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryAssemblyDetailView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryAssemblyDetailView DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryUnitMeasure_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryUnitMeasure DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryItemDepartment_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryItemDepartment DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryCategory_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryCategory DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryAccount_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryAccount DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventorySupplierShipFromView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.InventoryItemSalesTax_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryItemSalesTax DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateWebOptionContent(Interprise.Framework.Inventory.DatasetComponent.ItemDetailDataset.InventoryItemDescriptionRow,System.String,System.String)">
	<summary> Method use to update web option content. </summary>
	<remarks> This method is obsolete.</remarks>
	<param name="row"> The row of the web photo to be edited. </param>\

</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.UpdateSupplierDescriptions(System.String)">
	<remarks>This method is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignUnitMeasure(Interprise.Framework.Inventory.Shared.Structure.SystemUnitMeasureFields,System.Data.DataRowView)">
	<summary> Method use to assign unit measure. </summary>
	<remarks> This method is obsolete.</remarks>
	<param name="sytemUnitMeasureFields "> The unit measure Field. </param>
	<param name="unitMeasureRowview ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignUnitMeasure(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
	</summary>
	<param name="systemUnitMeasureRow"></param>
	<param name="unitMeasureRow"></param>
	<remarks>This method is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.AssignSupplierUnitMeasure(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assign Supplier unit measure.
 </summary>
	<param name="supplierRow">The row to edit.</param>
	<param name="rowSelected">The row selected by the user.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.GenerateInventoryMatrixItem(System.String,System.String,System.String@)">
	<summary>
 Generates the matrix items of the specified item group. 
 </summary>
	<param name="itemCode"></param>
	<param name="user"></param>
	<param name="errorCode"></param>
	<returns>This method is obsolete.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemDetailFacade.ModifiedTempTableDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.ItemDetailFacade">
	<summary>
 The class use for inventory item related transaction.
 <para>It contains all subroutine / methods use for creating, modifying items.</para>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.ClassCode">
	<summary>
 Returns the class code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway)">
	<summary> 
  Create an Instance of this class.
 </summary>
	<param name="classtemplatedataset"> Shared dataaset between user interface and business facade</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignCategoryCode(System.String)">
	<summary> Changes the category code of an existing category code. </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignCategoryCode()
            Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
            Dim classTemplatefacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
            classTemplatefacade.AssignCategoryCode("Guns")
 End Sub
    </code>
		<code lang="CS">
 private void AssignCategoryCode()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplatefacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplatefacade.AssignCategoryCode("Guns");
 }
    </code>
	</example>
	<param name="categoryCode">The categorycode to be assigned in the classtemplate.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignCurrencyCode(System.String)">
	<summary> Assigns the currency that will be used by a particulay class template. </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignCurrencyCode()
           Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
           Dim classTemplatefacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
           classTemplatefacade.AssignCurrencyCode("USD")
 End Sub
    </code>
		<code lang="CS">
 private void AssignCurrencyCode()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplatefacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplatefacade.AssignCurrencyCode("USD");
 }
    </code>
	</example>
	<param name="currencyCode">The currencycode to be assigned in the classtemplate.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignUnitMeasureCode(System.String)">
	<summary>Assigs the unit measure of the class template. </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignUMCode()
           Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
           Dim classTemplatefacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
           classTemplatefacade.AssignUnitMeasureCode("Each")
 End Sub
    </code>
		<code lang="CS">
 private void AssignUMCode()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplatefacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplatefacade.AssignUnitMeasureCode("Each");
 }
    </code>
	</example>
	<param name="unitMeasureCode"> The unit measure to assign. </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignSupplierCode(System.String)">
	<summary> Assigns supplier of the item class template. </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignSupplierCode()
          Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
          Dim classTemplatefacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
          classTemplatefacade.AssignSupplierCode("SUP-000002")
 End Sub
    </code>
		<code lang="CS">
 private void AssignSupplierCode()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplatefacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplatefacade.AssignSupplierCode("SUP-000002");
 }
    </code>
	</example>
	<param name="supplierCode">Supplier code to assign. </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignGlClassCode(System.String)">
	<summary> Assigns the gl code for the item class template </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignGLClassCode()
         Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
         Dim classTemplatefacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
         classTemplatefacade.AssignGLClassCode("DEFAULT-STOCK")
 End Sub
    </code>
		<code lang="CS">
 private void AssignGLClassCode()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplatefacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplatefacade.AssignGLClassCode("DEFAULT-STOCK");
 }
    </code>
	</example>
	<param name="glClassCode">The GLClassCode to be assigned.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignItemType(System.String)">
	<summary>
 Assign the item type for this template.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignItemType()
         Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
         Dim classTemplatefacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
         classTemplatefacade.AssignItemType("STOCK")
 End Sub
    </code>
		<code lang="CS">
 private void AssignItemType()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplatefacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplatefacade.AssignItemType("STOCK");
 }
    </code>
	</example>
	<param name="itemType">The ItemType to be assigned.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignDefaultGLAccount(System.String)">
	<summary>
 Assign default gl account to a new class template made.
 </summary>
	<remarks>Account code depends in the item type.</remarks>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignDefaultGLAccount()
      Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
      Dim classTemplateFacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
      classTemplateFacade.AssignDefaultGLAccount("Matrix Item")
 End Sub
    </code>
		<code lang="CS">
 private void AssignDefaultGLAccount()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplateFacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplateFacade.AssignDefaultGLAccount("Matrix Item");
 }
    </code>
	</example>
	<param name="itemType">Determines the default gl class code that will be use that will be assigned by default on the class template. </param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignDepartmentCode(System.String)">
	<summary> Assigns department of the item class template. </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignDepartment()
     Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
     Dim classTemplateFacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
     classTemplateFacade.AssignDepartmentCode("Computer")
 End Sub
    </code>
		<code lang="CS">
 private void AssignDepartment()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplateFacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplateFacade.AssignDepartmentCode("Computer");
 }
    </code>
	</example>
	<param name="DepartmentCode">The departmentcode to be assign.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignManufacturerCode(System.String)">
	<summary> 
 Assigns manufacturer of the item class template. </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignManufacturer()
    Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
    Dim classTemplateFacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
    classTemplateFacade.AssignManufacturerCode("Kingston")
 End Sub
    </code>
		<code lang="CS">
 private void AssignManufacturer()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplateFacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplateFacade.AssignManufacturerCode("Kingston");
 }
    </code>
	</example>
	<param name="ManufacturerCode">The manufacturer code to assign.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.AssignSalesTaxCode(System.Data.DataRow)">
	<summary>
 Assign sales tax code.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AssignSalesTax()
   Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
   Dim classTemplateFacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
   Dim SalesTaxRow As datarow
   classTemplateFacade.AssignSalesTaxCode(SalesTaxRow)
 End Sub
    </code>
		<code lang="CS">
 private void AssignSalesTax()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplateFacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    datarow SalesTaxRow;
    classTemplateFacade.AssignSalesTaxCode(SalesTaxRow);
 }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.NewClassTemplate(System.String)">
	<summary>
 Add new item template row.
 </summary>
	<returns>Instance of newly created datarow.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub AddClassTemplate()
   Dim classTemplateGateway As New Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway
   Dim classTemplateFacade As New Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway)
    classTemplateFacade.NewClassTemplate("DEFAULT-NON-STOCK")
 End Sub
    </code>
		<code lang="CS">
 private void AddClassTemplate()
 {
    Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway classTemplateGateway = new Interprise.Framework.Inventory.DatasetGateway.SystemManager.ClassTemplateDatasetGateway();
    Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade classTemplateFacade = new Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade(classTemplateGateway);
    classTemplateFacade.NewClassTemplate("DEFAULT-NON-STOCK");
 }
    </code>
	</example>
	<param name="documentCode">The code of the new item class template.</param>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.ClassTemplateFacade.ItemClassTemplate_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Contains all changes made to a record. </summary>
	<param name="sender">The object thats excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeManagerFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeManagerFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeManagerFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.ReportAction</para></value>
</member><member name="P:Interprise.Facade.Inventory.SystemManager.AttributeManagerFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeManagerFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.SystemManager.AttributeManagerDatasetGateway)">
	<summary>
	</summary>
	<param name="attributeManagerDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.SystemManager.AttributeManagerFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="P:Interprise.Facade.Inventory.StockValuationFacade.Cancel">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.StockValuationFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
</member><member name="P:Interprise.Facade.Inventory.StockValuationFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Inventory.StockValuationFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.StockValuationFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Facade.Inventory.StockValuationFacade.IsRevaluation">
	<summary>
		<para>Gets or sets if the transaction is an Acconting Stock Revaluation or an
    Inventory Stock Valuation.</para>
		<para>If true then this is an Acconting Stock Revaluation, else Inventory Stock
    Valuation.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.StockValuationFacade.NewRevaluation">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.StockValuationFacade.IsCompleted">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockValuationFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.StockValuationDatasetGateway)">
	<summary>
 Create an instance of StockValuationFacade class.
 </summary>
	<param name="stockValuationDataset">Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockValuationFacade.LoadAccountingReValuationHistory(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
Load all records of stock revaluation valuation history.
 </summary>
	<param name="itemNameFrom"></param>
	<param name="itemNameTo"></param>
	<param name="categoryCodeFrom"></param>
	<param name="categoryCodeTo"></param>
	<param name="warehouseCodeFrom"></param>
	<param name="warehouseCodeTo"></param>
	<param name="locationCodeFrom"></param>
	<param name="locationCodeTo"></param>
	<param name="costingMethodFrom"></param>
	<param name="costingMethodTo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockValuationFacade.LoadStockValuation(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
Load all records of stock valuation.
 </summary>
	<param name="itemNameFrom"></param>
	<param name="itemNameTo"></param>
	<param name="categoryCodeFrom"></param>
	<param name="categoryCodeTo"></param>
	<param name="warehouseCodeFrom"></param>
	<param name="warehouseCodeTo"></param>
	<param name="locationCodeFrom"></param>
	<param name="locationCodeTo"></param>
	<param name="costingMethodFrom"></param>
	<param name="costingMethodTo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockValuationFacade.BeginLoadStockValuation(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
	<summary>
 Load records of stock valuation per batch.
 </summary>
	<param name="itemNameFrom"></param>
	<param name="itemNameTo"></param>
	<param name="categoryCodeFrom"></param>
	<param name="categoryCodeTo"></param>
	<param name="warehouseCodeFrom"></param>
	<param name="warehouseCodeTo"></param>
	<param name="locationCodeFrom"></param>
	<param name="locationCodeTo"></param>
	<param name="costingMethodFrom"></param>
	<param name="costingMethodTo"></param>
	<param name="recordCount"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockValuationFacade.LoadDetail(System.String,System.String)">
	<summary>
	</summary>
	<param name="itemNameFrom"></param>
	<param name="itemNameTo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockValuationFacade.GetCondition(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="itemNameFrom"></param>
	<param name="itemNameTo"></param>
	<param name="categoryCodeFrom"></param>
	<param name="categoryCodeTo"></param>
	<param name="warehouseCodeFrom"></param>
	<param name="warehouseCodeTo"></param>
	<param name="locationCodeFrom"></param>
	<param name="locationCodeTo"></param>
	<param name="costingMethodFrom"></param>
	<param name="costingMethodTo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockValuationFacade.Post">
	<summary>
		<para>Post transaction to the general journal.</para>
		<para>This method is use when doing Stock Revaluation.</para>
		<para>The transaction is StockRevaluation when the property
    <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.StockValuationFacade~IsRevaluation.html">
    IsRevaluation</a> is set to True.</para>
	</summary>
	<returns>If true, posting succeeds, otherwise it fails.</returns>
</member><member name="M:Interprise.Facade.Inventory.StockValuationFacade.MonitorProgress(System.Double)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.StockValuationFacade">
	<summary>
 The class use for inventory and accounting stock valuation.
 <para>It also handles auto posting of item's allocation in case there are discrepancies found in the ledger.</para>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTransferFacade.CommandSet">
	<summary>
 Returns set of tables and store procedures needed to save by update dataset method.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTransferFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTransferFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTransferFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.StockTransferFacade.SourceWarehouseCode">
	<summary>
		<para>The document code of the warehouse where the items that will be transfered
    will come from.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.StockTransferFacade.DestinationWarehouseCode">
	<summary>
		<para>The document code of the warehouse where the items that will be transfered
    will come from.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.StockTransferFacade.TransferCode">
	<summary>Gets the transfer code of the transaction.</summary>
</member><member name="P:Interprise.Facade.Inventory.StockTransferFacade.AdjustmentCodes">
	<summary>
 Gets or sets the adjustment codes that was generated when the transaction is
 completed and posted.
 </summary>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway)">
	<summary>
 Create an instance of StockTransferFacade class.
 </summary>
	<param name="stockTransferDataset"> Shared dataset between business facade and user interface.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.AssignItem(System.String)">
	<summary>
		<para>Adds new item row on the InventoryStockTransferDetail DataTable.</para>
		<para>The InventoryStockTransferDataTable must have a record in order to use this
    method.</para>
	</summary>
	<param name="itemCode">The document code of the item that will included in transction.</param>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.AssignItem(System.String[])">
	<summary>
		<para>Adds new item row on the InventoryStockTransferDetail DataTable.</para>
		<para>The InventoryStockTransferDataTable must have a record in order to use this
    method.</para>
	</summary>
	<param name="itemCodes">The document code of different items that will included in transction.</param>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.AssignLocation(System.Data.DataRowView,System.String,System.String)">
	<summary>
 Assign the location code of where transfer of item within a warehouse will take
 place.
 </summary>
	<param name="currentRowview">
 A specific dataRowView in the InventoryStockTransferDetail DataTable that will be
 modified.
 </param>
	<param name="locationColumn">The field to update.</param>
	<param name="locationCode">A value that will be assigned to the &lt;locationColumn&gt;.</param>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.AssignTransferDetail(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
		<para>Add new row on the InventoryStockTransferDetail DataTable.</para>
		<para>This row are the item row that will be transfer.</para>
		<para>The InventoryStockTransferDataTable must have a record in order to use this
    method.</para>
	</summary>
	<param name="stockTransferRowView">
 The existing dataRowView of InventoryStockTransferDetail DataTable from where
 values of the first record of the &lt;rowsSelected&gt; will be assigned.
 </param>
	<param name="rowsSelected">
 Arrays or collection of item rows that will be included in the
 transaction.
 </param>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.AssignUnitMeasureCode(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
 Assign the unit measure code that will serve be used when transfering
 item.
 </summary>
	<param name="stockTransferRowView">
 The DataRow from InventoryStockTransferDetail Data Table where the unit measure
 will be modified.
 </param>
	<param name="unitMeasureRow">The unit measure row to assign.</param>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.GetItemUnitsInStock(System.String,System.String,System.String,System.Int32)">
	<summary>Gets the available stock of an item.</summary>
	<returns>Returns the available stock of an item.</returns>
	<param name="itemCode">The document code of an existing item.</param>
	<param name="warehouseCode">The warehouse where the stock count will be retrieved.</param>
	<param name="locationCode">The location in the warehouse where the stock count will be retrieved.</param>
	<param name="unitMeasureQty">The quantity of the unit measure of the item specified.</param>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.GetInventoryReallocatableQuantity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.NewStockTransfer">
	<summary>Add new DataRow to the InventoryStockTransfer DataTable.</summary>
	<returns>
 Instance of the newly created DataRow in the InventoryStockTransfer
 DataTable.
 </returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewStockTransfer()
       Dim stockTransfergateway As Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway
       Dim stockTransferFacade As Interprise.Facade.Inventory.StockTransferFacade = New Interprise.Facade.Inventory.StockTransferFacade(stockTransfergateway)
       '
       'create new DataRow for stock transfer
       '
       stockTransferFacade.NewStockTransfer()
 End Sub
    </code>
		<code lang="CS">
 private void NewStockTransfer()
 {
    Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway stockTransfergateway = new Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway();
    Interprise.Facade.Inventory.StockTransferFacade stockTransferFacade = new Interprise.Facade.Inventory.StockTransferFacade(stockTransfergateway);
    //
    //create new DataRow for stock transfer
    stockTransferFacade.NewStockTransfer();
 }
    </code>
	</example>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.StockTransferFacade~NewStockTransfer(ByVal%20String,%20ByVal%20String).html">
 NewStockTransfer(String,String)</a>
	</overloads>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.NewStockTransfer(System.String,System.String)">
	<summary>Add new DataRow to the InventoryStockTransfer DataTable.</summary>
	<returns>
 Instance of the newly created DataRow in the InventoryStockTransfer
 DataTable.
 </returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewStockTransfer()
       Dim stockTransfergateway As Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway
       Dim stockTransferFacade As Interprise.Facade.Inventory.StockTransferFacade = New Interprise.Facade.Inventory.StockTransferFacade(stockTransfergateway)
       '
       'create new DataRow for stock transfer
       'Assuming warehouse MAIN and EXTENSION exists.
       stockTransferFacade.NewStockTransfer("MAIN", "EXTENSION")
 End Sub
    </code>
		<code lang="CS" title="[New Example]">
 private void NewStockTransfer()
 {
    Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway stockTransfergateway = new Interprise.Framework.Inventory.DatasetGateway.StockTransferDatasetGateway();
    Interprise.Facade.Inventory.StockTransferFacade stockTransferFacade = new Interprise.Facade.Inventory.StockTransferFacade(stockTransfergateway);
    //
    //create new DataRow for stock transfer
    //Assuming warehouse MAIN and EXTENSION exists.
    stockTransferFacade.NewStockTransfer("MAIN", "EXTENSION");
 }
    </code>
	</example>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.StockTransferFacade~NewStockTransfer().html">
 NewStockTransfer()</a>
	</overloads>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.Post">
	<summary>
 Post transaction to the general journal.
 </summary>
	<returns>If true posting succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.ShowMessage">
	<summary>Show the validation message when there not enough stock to transfer.</summary>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.UpdateDestinationWarehouse(Interprise.Framework.Inventory.Shared.Structure.WarehouseInformation)">
	<summary>
	</summary>
	<param name="info"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.StockTransfer_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryStockTransfer DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.StockTransferFacade.StockTransferDetail_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryStockTransferDetail DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.StockTransferFacade">
	<summary>
 The class use when creating/modifying a Stock Transfer routine.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.ProfitAnalysisFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.ProfitAnalysisFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ProfitAnalysisFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.ProfitAnalysisDatasetGateway)">
	<summary>
 Create an instance of ProfitAnalysisFacade class.
 </summary>
	<param name="profitAnalysisDataset">Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ProfitAnalysisFacade.LoadSProfitAnalysis(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Load profit analsis values.
 </summary>
	<param name="itemNameFrom"></param>
	<param name="itemNameTo"></param>
	<param name="categoryCodeFrom"></param>
	<param name="categoryCodeTo"></param>
	<param name="warehouseCodeFrom"></param>
	<param name="warehouseCodeTo"></param>
	<param name="locationCodeFrom"></param>
	<param name="locationCodeTo"></param>
	<param name="customerCodeFrom"></param>
	<param name="customerCodeTo"></param>
	<param name="invoiceDateFrom"></param>
	<param name="invoiceDateTo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.ProfitAnalysisFacade">
	<summary>
 The class use for profit analys of an item.
 <para>It serves as a gateway for the connecting presentation to the business layer.</para>
		<para>There were no additional or special methods that can be found here.</para>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.PricingFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the UpdateDataset procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.PricingFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
</member><member name="P:Interprise.Facade.Inventory.PricingFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>
		<para>
  Interprise.Extendable.Base.Business.IBaseInterface</para>
	</value>
</member><member name="P:Interprise.Facade.Inventory.PricingFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value>
		<para>Interprise.Framework.Base.Shared.Enum.TransactionType</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.PricingFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.ReportAction</para></value>
</member><member name="P:Interprise.Facade.Inventory.PricingFacade.CurrencyCode">
	<summary>
 Returns price level currency code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.PricingFacade.PriceLevelCode">
	<summary>
 Returns price level PriceLevel code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.PricingFacade.Cancel">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.AddPriceList(System.String)">
	<summary>Adds new DataRow to the InventoryPriceLevel DataTable.</summary>
	<param name="priceLevelCode">
		<para>The document code of the new row that will be created.</para>
		<para>This value cannot be null.</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.AddDefaultPriceBreak(System.String,System.String,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="unitMeasureCode"></param>
	<param name="minQuantity"></param>
	<param name="maxQuantity"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.AddUnitMeasureAndPricingLevel(System.String,System.String,System.Data.DataRow)">
	<summary>
 Adds unit measure and default prie break of an item.
 </summary>
	<param name="itemCode">The item document code.</param>
	<param name="itemName">The item name use in transaction.</param>
	<param name="priceListRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.AddItemUnitMeasure(System.String,System.Data.DataRow)">
	<summary>
 Adds unit measure and default prie break of an item.
 </summary>
	<param name="itemCode"></param>
	<param name="priceListRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.CheckItemWithError">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>
 Assign pricing values to items selected.
 </summary>
	<param name="priceListRowView">The datarowview to be edited.</param>
	<param name="rowsSelected">Array of item rows containing the value to be assigned.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.AssignPriceListInitialValues(System.Data.DataRow,Interprise.Framework.Inventory.Shared.Structure.PriceListInformation)">
	<summary>
 Assign values for newly created quantity break of an item.
 </summary>
	<param name="priceListRow"></param>
	<param name="priceListInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.PricingDatasetGateway)">
	<summary>
 Create  instance of PricingFacade class.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.CopyPriceList(System.String,System.String)">
	<summary>
 Copy Price List.
 </summary>
	<param name="priceLevelCodeToCopy"></param>
	<param name="priceLevelcurrencyCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.CreateExcellTemplate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.CreateExcellTemplate(System.String)">
	<summary>
 Create template and save to a specific file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.CreateTemplateTable">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.Dispose">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.Export">
	<summary>
		<para>Export Price List to Excel</para>
		<para>The InventoryPricingLevel DataTable must have record(s) in order to use this
    method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetItemUnitMeasureTable(System.Data.DataRow[],System.Boolean)">
	<summary>
	</summary>
	<param name="itemRows"></param>
	<param name="clearTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetItemFields(System.String@,System.String,System.String@)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetImportedPriceListItemUnitMeasureTable(System.Data.DataRow[],System.Boolean)">
	<summary>
 Get all unit measure of items specified.
 </summary>
	<param name="itemRows"> Arrays of row containing the item from which unit measures will be retrieved.</param>
	<param name="clearTable">Indicates if table will be cleared first before retrieving data.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetAddValue(System.String)">
	<summary>
 Returns the decimal part of the currency base on 1.
 </summary>
	<param name="currencyCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.LoadPriceList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.Import(Interprise.Framework.Inventory.Shared.Enum.ImportType,System.String)">
	<summary>
 Imports price list from an excel file.
 </summary>
	<param name="importType">Type of import whether excel, xml or csv. Currently support excel file</param>
	<param name="filePath">The path where file will be save.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.FinalizeImport">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetLastCost(System.String,System.String)">
	<summary>
 Get item last cost.
 </summary>
	<param name="itemCode"></param>
	<param name="currencyCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetPriceBreakCount(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="rowPricing"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetPriceBreakCount(System.Data.DataRowView)">
	<summary>
 Gets the total price break of a particular item.
 </summary>
	<param name="priceListRowView"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.HasPriceBreak(System.String)">
	<summary>
 Check whether item has price breaks.
 </summary>
	<param name="itemCode">The value to check.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetItemUnitMeasureCode(System.String)">
	<summary>
 Return all unit measure code of an item not included in the price list unit measure codes.
 </summary>
	<param name="itemCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetPricingCostRate(System.String,System.String)">
	<summary>
 Get Item Pricing Cost.
 </summary>
	<param name="itemCode"></param>
	<param name="currencyCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GetRetailPriceRate(System.String,System.String)">
	<summary>
 Get item Retail Price.
 </summary>
	<param name="itemCode"></param>
	<param name="currencyCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.GeneratePriceBreak(Interprise.Framework.Inventory.Shared.Structure.PriceListInformation)">
	<summary>
		<para>Generate the price break rows for InventoryPricingLevel DataTable.</para>
		<para>The InventoryPriceLevel DataTable must have a record loaded in order to use
    this method.</para>
	</summary>
	<param name="priceBreakInfo">Contains all information regarding such as item Code and item Cost.</param>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.InsertPriceBreak(Interprise.Framework.Inventory.Shared.Structure.PriceListInformation)">
	<summary>
		<para>Insert price break below an existing price break.</para>
		<para>If just override any price break made below the min and max quantity of the
    selected price break row.</para>
		<para>The InventoryPriceLevel DataTable must have a record loaded in order to use
    this method.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.NewPriceList(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.ResetPriceBreak(System.String,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.RefreshItemUnitMeasure">
	<summary>
 Add price break to each item unit measure are not the list.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.UpdateInventoryPriceListView(System.Data.DataRow,System.String,System.Object)">
	<summary>
	</summary>
	<param name="currentPriceListRow"></param>
	<param name="columName"></param>
	<param name="proposedValue"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.UpdateImportedPriceListTable(System.Data.DataTable,System.Data.DataTable)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.IsDocumentCodeExists">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.ValidatePriceBreak(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="pricingRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.InventoryPriceListView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryPriceListView DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.InventoryPricingLevel_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryPricingLevel DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.PricingFacade.InventoryPriceLevel_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryPriceLevel DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.PricingFacade">
	<summary>
 The class use for item special pricing. 
 <para>Use for adding, modifying price list.</para>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemPricingFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemHistoryFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>
		<para>
  Interprise.Extendable.Base.Business.IBaseInterface</para>
	</value>
</member><member name="P:Interprise.Facade.Inventory.ItemHistoryFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.ItemHistoryFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction that is currently in used. </summary>
	<value>
		<para>Interprise.Framework.Base.Shared.Enum.TransactionType</para></value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemHistoryFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.ItemHistoryDataSetGateway)">
	<summary>
 Create an instance of ItemHistoryFacade class.
 </summary>
	<param name="itemHistoryDataset">Shared dataset between user interface and business facade&gt;</param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.ItemHistoryFacade">
	<summary>The facade use when retrieving items' history.</summary>
</member><member name="P:Interprise.Facade.Inventory.ItemMatrixFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemMatrixFacade.CurrentBusinessRuleType">
	<summary>
 Gets the business rule that is used in this transaction in Internet
 connection.
 </summary>
	<value>Interprise.Framework.Base.Shared.Enum.BusinessRuleType</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemMatrixFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemMatrixFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemMatrixFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="T:Interprise.Facade.Inventory.ItemMatrixFacade">
	<summary>
 The class that deals with matrix group item type.
 <para>Reserved for future references.</para>
	</summary>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Inventory.ItemKitFacade.GroupTypeChanged">
	<summary>
 Triggers when a kit group is changed.
 </summary>
	<param name="sender">Instance of the itemKitFacade class.</param>
	<param name="e">Instance of kitGroupTypeChangedEventArgs class.</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the UpdateDataset procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.CurrencyCode">
	<summary> Returns or sets the value of CurrencyCode. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.AutoRecalculate">
	<summary> Returns or sets the value of AutoRecalculate. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.LanguageCode">
	<summary> Returns or sets the value of LanguageCode. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.IsCurrencyChanged">
	<summary> Returns or sets the value of IsCurrencyChanged. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.IsLanguageChanged1">
	<summary> Returns or sets the value of IsLanguageChanged. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.ItemKitFacade.ItemKitCode">
	<summary> Returns ItemKitCode. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AddOptionGroup(System.String,Interprise.Framework.Inventory.Shared.Enum.KitGroupType)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AssignItem(System.String,System.String,System.Decimal)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<param name="itemCode"></param>
	<param name="quantity"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AssignItem(System.String,System.String[],System.Decimal[])">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<param name="itemCodes"></param>
	<param name="quantity"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AddNewKitDetailRow(System.String,System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<param name="itemRow"></param>
	<param name="isDefault"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AssignKitDetails(System.Data.DataRow[],System.String,System.String,System.Data.DataRowView)">
	<summary>
		<para>Add new DataRow to InventoryKitDetail DataTable.</para>
		<para>Assign and existing item to specific group in a Kit.</para>
	</summary>
	<param name="groupCode">The group document code where the item will be added.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AssignKitDetails(System.Data.DataRow[],System.String,System.String,System.Data.DataRowView,System.Decimal[])">
	<summary>
	</summary>
	<param name="rowsSelected"></param>
	<param name="groupCode"></param>
	<param name="currencyCode"></param>
	<param name="kitdetailView"></param>
	<param name="quantity"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AssignKitDetails(System.Data.DataRow,Interprise.Framework.Inventory.DatasetComponent.ItemKitDataset.InventoryKitDetailRow,System.String)">
	<summary>
		<para>Add new DataRow to InventoryKitDetail DataTable.</para>
		<para>Assign and existing item to specific group in a Kit.</para>
	</summary>
	<param name="rowselected">
 Arrays or collection of item rows that will be included in the
 transaction.
 </param>
	<param name="GroupCode">The group document code where the item will be added.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AssignItemQuantity(System.Data.DataRow,System.Decimal[])">
	<summary>
	</summary>
	<param name="kitDetailRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AssignItemQuantity(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="kitDetailRow"></param>
	<param name="quantity"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.AssignDefaultItem(System.String,System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<param name="itemCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.ItemKitDatasetGateway)">
	<summary>
 Create an instance of ItemKitFacade class.
 </summary>
	<param name="itemKitDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.CreateKitOptionGroupDescription(System.String,System.String)">
	<summary> Method use to create the section control and attached them to the main control. </summary>
	<remarks>
	</remarks>
	<param name="groupCode ">
	</param>
	<param name="description ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.CreateKitPricingDetail(System.String,System.String,Interprise.Framework.Inventory.DatasetComponent.ItemKitDataset.InventoryKitDetailRow)">
	<summary>
 Create Kit Pricing Detail.
 </summary>
	<param name="groupCode"></param>
	<param name="ItemCode"></param>
	<param name="kitDetailRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.ComputeNewKitPercent(System.Boolean)">
	<summary> Method use to compute new kit percent. </summary>
	<remarks>
	</remarks>
	<param name="Isdefault">No use for this method.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.ComputeKitPercentage">
	<summary>
 Compute for kit percentage.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.CascadePricingDetail(System.Data.DataRow)">
	<summary> Method use to cascade pricing detail. </summary>
	<remarks>
	</remarks>
	<param name="pricingrow ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.CascadePricingDetail(System.Data.DataColumnChangeEventArgs)">
	<summary> Method use to cascade pricing detail. </summary>
	<remarks>
	</remarks>
	<param name="e ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.CreateKitDetailDescription(System.String,System.String,System.String)">
	<summary> Method use to create the section control and attached them to the main control. </summary>
	<remarks>
	</remarks>
	<param name="groupCode ">
	</param>
	<param name="itemCode ">
	</param>
	<param name="itemDescription ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.CascadeKitDetailDescription(System.String,System.Data.DataRow)">
	<summary>
 Method use to cascade kit detail description.
 </summary>
	<param name="columnName"></param>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.ChangeCurrency(System.String)">
	<summary> Method use to change currency. </summary>
	<remarks>
	</remarks>
	<param name="currencyCode ">
	</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.ClearDefaults(System.String)">
	<summary>
 Clear default components of an option group.
 </summary>
	<param name="groupCode">The group code from where items will be selected.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.LoadKitItem(System.String)">
	<summary>
	</summary>
	<param name="itemName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.ValidateKitDefaults">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.ReCreateComponentKitPricingDetail(System.String,System.String,Interprise.Framework.Inventory.DatasetComponent.ItemKitDataset.InventoryKitDetailRow)">
	<summary>
 Create Kit Pricing Detail For other Active Currency .
 </summary>
	<param name="groupCode"></param>
	<param name="ItemCode"></param>
	<param name="kitDetailRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.InventoryKitDetail_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryKitDetail DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.InventoryKitOptionGroup_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryKitOptionGroup DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.ItemKitFacade.InventoryKitOptionGroupDescription_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row manipulation when changes is made to the InventoryKitOptionGroupDescription DataTable.</summary>
	<param name="sender">The object that executes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.ItemKitFacade">
	<summary>
 The class use for an item of type Kit.
 <para>It contains all subroutine / methods use for adding/deleting kit groups or modifying the structure of a kit item.</para>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.InternalMovementFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.InternalMovementFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.InternalMovementFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.InternalMovementFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the UpdateDataset procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.InternalMovementFacade.TransferCode">
	<summary>Gets the document code of transaction.</summary>
</member><member name="P:Interprise.Facade.Inventory.InternalMovementFacade.TransferType">
	<summary>
Gets the transfer type of this transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.InternalMovementFacade.WarehouseCode">
	<summary>
 Gets the warehouse code from where internal transfer will be performed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway)">
	<summary>
 Create an instance of InternalMovementFacade class.
 </summary>
	<param name="stockTransferDataset">Shared dataaset between UI and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignItems(System.Data.DataRowView,System.Data.DataRow[])">
	<summary>Adds new item row on the InventoryInternalStockTransferDetail DataTable.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub MoveItem()
 Dim dataSet1 As New DataSet
 'Presuming the dataset contains the InventoryAdjustmentView table and itemTable contains item rows
 Dim itemTable As DataTable = dataSet1.Tables("InventoryItemAdjustmentView")
 'Create an instance of the gateway and the facade.
 Dim internalGateway As Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway()
 Dim internalFacade As Interprise.Facade.Inventory.InternalMovementFacade = New Interprise.Facade.Inventory.InternalMovementFacade(internalGateway)
 'setting the first parameter to nothing means where just adding all the items
 'and not modifying an existing row inv the InternalStockTrasnferDetail DataTable.
 internalFacade.AssignItems(Nothing, itemTable.Select)
 End Sub
    </code>
		<code lang="CS">
 private void MoveItem()
        {
         DataSet dataSet1 = new DataSet();
         //Presuming the dataset contains the InventoryAdjustmentView table and itemTable contains item rows
         DataTable itemTable = dataSet1.Tables["InventoryItemAdjustmentView"];
         //Create an instance of the gateway and the facade.
         Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway internalGateway = new Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway();
         Interprise.Facade.Inventory.InternalMovementFacade internalFacade = new Interprise.Facade.Inventory.InternalMovementFacade(internalGateway);
         //setting the first parameter to nothing means where just adding all the items
         //and not modifying an existing row inv the InternalStockTrasnferDetail DataTable.           
         internalFacade.AssignItems(null, itemTable.Select());
        }
    </code>
	</example>
	<returns>If true adding of new row succeeds, otherwise it fails.</returns>
	<param name="internalRowView">
 The existing DataRow View of InventoryInternalStockTransferDetail DataTable from
 where values of the first record of the &lt;rowsSelected&gt; will be assigned.
 </param>
	<param name="rowsSelected">
 Arrays or collection of item rows that will be included in the
 transaction.
 </param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignItem(System.String)">
	<summary>Adds new item row on the InventoryInternalStockTransferDetail DataTable.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub MoveItem()
 'Create an instance of the gateway and the facade.
 Dim internalGateway As Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway()
 Dim internalFacade As Interprise.Facade.Inventory.InternalMovementFacade = New Interprise.Facade.Inventory.InternalMovementFacade(internalGateway)
 'Presuming this item exist
 internalFacade.AssignItem("ITEM-000001")
 End Sub
    </code>
		<code lang="CS">
 private void MoveItem()
       {
        //Create an instance of the gateway and the facade.
        Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway internalGateway = new Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway();
        Interprise.Facade.Inventory.InternalMovementFacade internalFacade = new Interprise.Facade.Inventory.InternalMovementFacade(internalGateway);
        //Presuming this item exist
        internalFacade.AssignItem("ITEM-000001");
       }
    </code>
	</example>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.InternalMovementFacade~AssignItem(ByVal%20String()).html">
 AssignItem(String())</a>
	</overloads>
	<param name="itemCode"><para>The document code of an item to transfer.</para></param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignItem(System.String,System.String,System.String,System.Decimal)">
	<summary>Adds new item row on the InventoryInternalStockTransferDetail DataTable.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub MoveItem()
 'Create an instance of the gateway and the facade.
 Dim internalGateway As Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway()
 Dim internalFacade As Interprise.Facade.Inventory.InternalMovementFacade = New Interprise.Facade.Inventory.InternalMovementFacade(internalGateway)
 Assuming this warehouse exist and we want to transfer an item in this warehouse.
 internalFacade.NewInternalMovement("Extension")
 Assuming this item exist and we want to transfer from Location1 to Location2 of the Extension warehouse.
 internalFacade.AssignItem("ITEM-000001")
 End Sub
    </code>
		<code lang="CS">
 private void MoveItem()
       {
        //Create an instance of the gateway and the facade.
        Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway internalGateway = new Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway();
        Interprise.Facade.Inventory.InternalMovementFacade internalFacade = new Interprise.Facade.Inventory.InternalMovementFacade(internalGateway);
        //Assuming this warehouse exist and we want to transfer an item in this warehouse.
        internalFacade.NewInternalMovement("Extension");
        //Assuming this item exist and we want to transfer from Location1 to Location2 of the Extension warehouse.
        internalFacade.AssignItem("ITEM-000001","Location1","Location2");
       }
    </code>
	</example>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.InternalMovementFacade~AssignItem(ByVal%20String()).html">
 AssignItem(String())</a>
	</overloads>
	<param name="itemCode"><para>The document code of an item to transfer.</para></param>
	<param name="locationFrom">The source location where the item will be moved.</param>
	<param name="locationTo">The destination of the item to be transfered.</param>
	<param name="quantity">Any value from 1 - 99,999,999.</param>
	<returns>If true adding of new row succeeds, otherwise it fails.</returns>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignItem(System.String[])">
	<summary>Adds new item row on the InventoryInternalStockTransferDetail DataTable.</summary>
	<overloads>
		<overloads>
			<para>
				<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.InternalMovementFacade~AssignItem(ByVal%20String).html">
        AssignItem(String)</a></para>
		</overloads>
	</overloads>
	<example>
    The sample below demonstrate how the procedure can be use in s specified context.
    <code lang="VB">
 Protected Overridable Sub MoveItem()
 'Create an instance of the gateway and the facade.
 Dim internalGateway As Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway()
 Dim internalFacade As Interprise.Facade.Inventory.InternalMovementFacade = New Interprise.Facade.Inventory.InternalMovementFacade(internalGateway)
 'Presuming this items exist
 internalFacade.AssignItem(New String() {"ITEM-000001","ITEM-000002"})
 End Sub
    </code>
		<code lang="CS">
 private void MoveItem()
      {
       //Create an instance of the gateway and the facade.
       Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway internalGateway = new Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway();
       Interprise.Facade.Inventory.InternalMovementFacade internalFacade = new Interprise.Facade.Inventory.InternalMovementFacade(internalGateway);
       //Presuming this item exist
       internalFacade.AssignItem(new string(){"ITEM-000001","ITEM-000002"});
      }
    </code>
	</example>
	<param name="itemCodes">Array or collection of itemCodes from InventoryItem DataTable that will undergo stock transfer process.</param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignItemCode(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
 This procedure is obsolete
 </summary>
	<param name="transferRowView">An existing DataRow from InventoryStockTransferDetail DataTable that will be modified.</param>
	<param name="rowSelected">Arrays or collection of datarow from InventoryItem DataTable that will be include in the transfer process.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignDefaultWarehouseCode">
	<remarks>This procedure is obsolete.</remarks>
	<summary>This procedure is obsolete.</summary>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignAccountCode(System.Boolean,System.Data.DataRowView,System.Data.DataRow)">
	<summary>
 This procedure is obsolete.
 </summary>
	<param name="isFromInventoryAccount">Gets or sets if FromInventoryAccount field will be updated, else ToinventoryAccountCode.</param>
	<param name="transferRow">DataRow from InventoryInternalStockTransferDetailView where account code will be assigned.</param>
	<param name="rowSelected">Array or collection of DataRow from AccountingCOA  DataTable of the main database.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignLocation(System.Boolean,System.Data.DataRowView,System.Data.DataRow)">
	<summary>
		<para>Assign the source or destination location where stock transfer will take
    place.</para>
	</summary>
	<param name="IsLocationTo">
		<para>Indicates if destination/source field will be assigned.</para>
		<para>If true the destination field will be use,otherwise the source one.</para>
	</param>
	<param name="transferRow">A DataRow from InventoryStockTransferDetail Data Table.</param>
	<param name="rowSelected">A record InventoryLocation Table in the form of DataRow.</param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.AssignWarehouse(System.Data.DataRow)">
	<summary>Assign the warehouse where movement of the item will take place.</summary>
	<param name="warehouserow">The record of the warehouse in DataRow format.</param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.HasStockFromLocation(System.String)">
	<summary>
 Checks if there are items that has stock in the specified location.
 </summary>
	<param name="locationCode">The location code to check for stocks.</param>
	<returns>If true location has stocks, otherwise none.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.GetNormalLocation(System.String)">
	<summary>Get the first normal location within a warehouse.</summary>
	<returns>The first normal location in a warehouse.</returns>
	<param name="warehouseCode">The warehouse code where to find the normal location.</param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.GetItemUnitsInStock(System.String,System.String,System.String,System.Int32)">
	<summary>Gets the available stock of an item.</summary>
	<returns>Returns the available stock of an item.</returns>
	<param name="itemCode">The item Code of the existing item.</param>
	<param name="warehouseCode">The warehouse where the stock count will be retrieved.</param>
	<param name="locationCode">The location in the warehouse where the stock count will be retrieved.</param>
	<param name="unitMeasureQty">The quantity of the unit measure of the item specified.</param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.FinalizePosting">
	<summary>Commit any other routine after the posting of transaction takes place.</summary>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.LoadLocationItems(System.String,System.String)">
	<summary>
		<para>Retrieves all items that are in found in specific locations. Used when the
    transfer type of transfer is by location.</para>
	</summary>
	<param name="locationCodeFrom">The location within a warehouse from where items will be retrieved.</param>
	<param name="locationCodeTo">The location within a warehouse from where items will be transfered.</param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.NewInternalMovement">
	<summary>
 Adds new row to InventoryInternalStockTransfer DataTable.
 </summary>
	<returns>Instance of the newly created dataRow.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewInternalMovement()
        'Create an instance of the gateway and the facade.
        Dim internalGateway As Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway()
        Dim internalFacade As Interprise.Facade.Inventory.InternalMovementFacade = New Interprise.Facade.Inventory.InternalMovementFacade(internalGateway)
        internalFacade.NewInternalMovement()
 End Sub
    </code>
		<code lang="CS">
 private void NewBuildAssembly()
        {
        //Create an instance of the gateway and the facade.
        Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway internalGateway = new Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway();
        Interprise.Facade.Inventory.InternalMovementFacade internalFacade = new Interprise.Facade.Inventory.InternalMovementFacade(internalGateway);
        internalFacade.NewInternalMovement();            
        }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.NewInternalMovement(System.String)">
	<summary>
 Adds new row to InventoryInternalStockTransfer DataTable.
 </summary>
	<returns>Instance of the newly created dataRow.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewMovement()
        'Create an instance of the gateway and the facade.
        Dim internalGateway As Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway()
        Dim internalFacade As Interprise.Facade.Inventory.InternalMovementFacade = New Interprise.Facade.Inventory.InternalMovementFacade(internalGateway)
        internalFacade.NewInternalMovement("MAIN")
 End Sub
    </code>
		<code lang="CS">
 private void NewInternalMovement()
        {
        //Create an instance of the gateway and the facade.
        Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway internalGateway = new Interprise.Framework.Inventory.DatasetGateway.InternalStockTransferDatasetGateway();
        Interprise.Facade.Inventory.InternalMovementFacade internalFacade = new Interprise.Facade.Inventory.InternalMovementFacade(internalGateway);
        internalFacade.NewInternalMovement("MAIN");            
        }
    </code>
	</example>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.InternalMovementFacade~NewInternalMovement().html">
 NewInternalMovement</a>
	</overloads>
	<param name="warehouseCode">
		<para>The warehouse where the transfer will take place.</para>
		<para>The value cannot be null.</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.Post">
	<summary>
 Post transaction to the general journal.
 </summary>
	<returns>If true posting succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.ShowMessage">
	<summary>Show the validation message when there not enough stock to transfer.</summary>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.InternalMovementFacade.InventoryInternalStockTransferDetailView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Handles column and row manipulation when changes is made to the InventoryInternalStockTransferDetailView DataTable.
 <para>Calls the validation routing wheneever a changes is made to the InventoryInternalStockTransferDetailView DataTable.</para></summary>
	<param name="sender">The caller of the subroutine.</param>
	<param name="e">The event args that contains information about the procedure.</param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.InternalMovementFacade">
	<summary>The class that deals with Internal movement transaction.</summary>
</member><member name="P:Interprise.Facade.Inventory.BusinessIntelligenceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.BusinessIntelligenceFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.BusinessIntelligenceFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.BusinessIntelligenceFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.BusinessIntelligenceDatasetGateway)">
	<summary>
 Create an instance of the BusinessIntelligenceFacade class.
 </summary>
	<param name="businessIntelligenceDataset">Shared dataset between UI and business facade.</param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.BusinessIntelligenceFacade">
	<summary>The facade use by business Intelligence dashboards.</summary>
</member><member name="P:Interprise.Facade.Inventory.BinLocationFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.BinLocationFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.BinLocationFacade.AssignItemToBin(System.Data.DataRowView,System.Data.DataRow[],System.String,System.Boolean)">
	<summary>
		<para>Add new row on the InventoryItemBinLocation DataTable.</para>
		<para>This row are the item row that will be included in bin location.</para>
	</summary>
	<param name="inventoryItemRowView">
 The existing dataRowView of InventoryStockTransferDetail DataTable from where
 values of the first record of the &lt;rowsSelected&gt; will be assigned.
 </param>
	<param name="rowsSelected">
 Arrays or collection of item rows that will be included in the
 transaction.
 </param>
</member><member name="T:Interprise.Facade.Inventory.BinLocationFacade">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.AdjustmentFacade.AdjustmentCode">
	<summary>Gets the document code of the transaction.</summary>
</member><member name="P:Interprise.Facade.Inventory.AdjustmentFacade.AdjustmentType">
	<summary>
 Gets the type of adjustment for this transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.AdjustmentFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the UpdateDataset procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.AdjustmentFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.AdjustmentFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.AdjustmentFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.AdjustmentFacade.PostCommandTimeOut">
	<summary>
 Gets or sets the wait time before terminating the attempt to execute a command and generating an error.  The value should be in seconds.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[])">
	<summary><para>Adds new item row on the InventoryAdjustmentDetail table.</para></summary>
	<example>
    The following example uses an item that will be added on the transaction. 
    <code lang="VB">
 Protected Overridable Sub AdjustItem()
  Dim dataSet1 As New DataSet
  'Presuming the dataset contains the InventoryAdjustmentView table
  Dim itemTable As DataTable = dataSet1.Tables("InventoryItemAdjustmentView")
  'Presuming the itemTable contains item rows
  Dim adjustmentGateway As New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
  Dim adjustmentFacade As New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
  adjustmentFacade.AssignItem(Nothing, itemTable.Select)
 End Sub
    </code>
		<code lang="CS">
 private void AdjustItem
 {
 DataSet dataset1 = New Dataset();
 //Presuming the dataset contains the InventoryItemAdjustmentView table
 DataTable itemTable = dataSet1.Tables("InventoryItemAdjustmentView");
 //Presuming the itemTable contains item rows
 Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway();
 Interprise.Facade.Inventory.AdjustmentFacade adjustmentFacade = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway);
 adjustmentFacade.AssignItem(null, itemTable.Select());
 }
    </code>
	</example>
	<returns>
 If true, the adding of new item rows succeeds, if false, it fails(i.e. the row is
 already in the list).
 </returns>
	<param name="adjustmentRowView">
		<para>If this value is nothing or null . the method assumes that the collection of
    rows defined by the rowsSelected</para>
		<para>parameter will be added in the InventoryAdjustmentDetail table.</para>
		<para>Otherwise, this parameter will just be assigned by the values in the
    rowsSelected parameter.</para>
	</param>
	<param name="rowsSelected">
 Arrays or collection of item rows that will be included in the
 transaction.
 </param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignItem(System.String)">
	<summary>Adds new item row on the InventoryAdjustmentDetail table.</summary>
	<example>
    The following example uses an item that will be added on the transaction. 
    <code lang="VB">
 Protected Overridable Sub AdjustItem()
  Dim adjustmentGateway As New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
  Dim adjustmentFacade As New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
  'Presuming this item exists.
  adjustmentFacade.AssignItem("ITEM-000001")
 End Sub
    </code>
		<code lang="CS">
 private void AdjustItem()
 {
 Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway  = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway();
 Interprise.Facade.Inventory.AdjustmentFacade adjustmentFacade  = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway);
 //Presuming this item exists.
 adjustmentFacade.AssignItem("ITEM-000001");
 }
    </code>
	</example>
	<param name="itemCode">The document code of the item that will be included in transction.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignItem(System.String[])">
	<summary>Adds new item row on the InventoryAdjustmentDetail table.</summary>
	<example>
    The following example uses an item that will be added on the transaction. 
    <code lang="VB">
 Protected Overridable Sub AdjustItem()
 Dim adjustmentGateway As New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
 Dim adjustmentFacade As New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
 'Presuming this item exists.
 adjustmentFacade.AssignItem(New String(){"ITEM-000001", "ITEM-000002"})
 End Sub
    </code>
		<code lang="CS">
 private void AdjustItem() 
 { 
 Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway  = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway(); 
 Interprise.Facade.Inventory.AdjustmentFacade adjustmentFacade  = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway); 
 //Presuming this item exists. 
 adjustmentFacade.AssignItem(new string[] {"ITEM-000001","ITEM-000002"}); 
 }
    </code>
	</example>
	<param name="itemCodes">The document code of different items that will be included in transction.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignItem(System.String,System.Decimal)">
	<summary>Adds new item row on the InventoryAdjustmentDetail table.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AdjustItem()
 Dim adjustmentGateway As New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
 Dim adjustmentFacade As New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
 'Presuming this item exists.
 adjustmentFacade.AssignItem("ITEM-000001", 5)
 End Sub
    </code>
		<code lang="CS">
 private void AdjustItem() 
 { 
 Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway  = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway(); 
 Interprise.Facade.Inventory.AdjustmentFacade adjustmentFacade  = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway); 
 //Presuming this item exists. 
 adjustmentFacade.AssignItem("ITEM-000001",5); 
 }
    </code>
	</example>
	<param name="itemCode">The document code of the item that will be included in transction.</param>
	<param name="quantity">The number of items to be adjusted.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignItem(System.String[],System.Decimal[])">
	<summary>Adds new item row on the InventoryAdjustmentDetail table.</summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub AdjustItem()
 Dim adjustmentGateway As New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
 Dim adjustmentFacade As New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
 'Presuming this item exists.
 adjustmentFacade.AssignItem(New String() {"ITEM-000001","ITEM-000002"}, New Decimal() {5,10})
 End Sub
    </code>
		<code lang="CS">
 private void AdjustItem() 
 { 
 Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway  = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway(); 
 Interprise.Facade.Inventory.AdjustmentFacade adjustmentFacade  = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway); 
 //Presuming this item exists. 
 adjustmentFacade.AssignItem(new string[] {"ITEM-000001","ITEM-000002"}, new decimal[] {5,10}); 
 }
    </code>
	</example>
	<param name="itemCodes">The document code of different items that will be included in transction.</param>
	<param name="quantity">The number of items to be adjusted.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignItem(System.Data.DataRow,System.Decimal)">
	<summary>Adds new item row on the InventoryAdjustmentDetail table.</summary>
	<returns>
 The instance of the newly added row in the InventoryAdjustmentDetail
 DataTable.
 </returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub AdjustItem()
 Dim dataSet1 As New DataSet
 
 'Presuming the dataset contains the InventoryAdjustmentView table
 Dim itemTable As DataTable = dataSet1.Tables("InventoryAdjustmentView")
 'Presuming the itemTable contains item rows
 Dim adjustmentGateway As New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
 Dim adjustmentFacade As New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
 'Presuming this item exists.
 adjustmentFacade.AssignItem(itemTable.Rows(0), 5)
 End Sub
    </code>
		<code lang="CS">
 private void AdjustItem
 {
 DataSet dataset1 = New Dataset();
 //Presuming the dataset contains the InventoryAdjustmentView table
 DataTable itemTable = dataSet1.Tables("InventoryAdjustmentView");
 //Presuming the itemTable contains item rows
 Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway();
 Interprise.Facade.Inventory.AdjustmentFacade adjustmentFacade = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway);
 adjustmentFacade.AssignItem(itemTable.Rows[0], 5);
 }
    </code>
	</example>
	<param name="itemRow">The item row of an existing item that will included in transction.</param>
	<param name="quantity">The number of items to be adjusted.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignCOGSAccount">
	<summary>
 Assign COGS account and inventory account if no reason code is specified.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignCOGSAccount(System.String)">
	<summary>
 Assign default COGS account and inventory account if no reason code is specified.
 </summary>
	<param name="accountCode">The account code that will be assigned. 
 <para>If this value is null the account code from AccountingDefaultAccounts is used.</para>
	</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignReasonCode(System.String)">
	<summary>
 Assign the reason code that will define the accounts that will be use to post the adjustment.
 </summary>
	<param name="reasonCode">The document code of the reason pertaining to the reason ocde field of InventoryReason Table in the database.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.AssignReasonCode(System.String,System.String)">
	<summary>
 Assign the reason code that will define the accounts that will be use to post the adjustment.
 </summary>
	<param name="reasonCode">The document code of the reason pertaining to the reason code field of InventoryReason Table in the database.</param>
	<param name="accountCode">The account code related to the reason code.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway)">
	<summary>
 Create an intance of AdjustmentFacade class.
 </summary>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewFacade()
  Dim adjustmentGateway As New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
  Dim adjustmentFacade As New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
 End Sub
    </code>
		<code lang="CS">
 private void NewFacade() 
  { 
  Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway(); 
  Interprise.Facade.Inventory.AdjustmentFacade adjustmentFacade = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway); 
  }
    </code>
	</example>
	<param name="adjustmentDataset">The gateway associated with the class.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.ComputeQuantityAfter(System.Data.DataRow)">
	<summary>
 Computes for quantity after of an item.
 </summary>
	<param name="adjustmentRow">A DataRow from InventoryAdjustmentDetail DataTable.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.GetCost(System.String,System.String,System.Decimal)">
	<summary>Get the cost of the item.</summary>
	<returns>Return the cost of the item.</returns>
	<param name="itemCode">The code of the item to retrieve.</param>
	<param name="costingMethod">The costing mehod of the item.</param>
	<param name="unitMeasureQuantity">The default unit measure quantity of the item.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.NewAdjustment">
	<summary>Adds new row to the InventoryAdjustment DataTable.</summary>
	<returns>Instance of the newly created row in the InventoryAdjustment DataTable.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewAjustment()
        'Create an instance of the gateway and the facade.
        Dim adjustmentGateway As Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
        Dim internalFacade As Interprise.Facade.Inventory.AdjustmentFacade = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
        internalFacade.NewAdjustment()
 End Sub
    </code>
		<code lang="CS">
 private void NewAjustment()
 {
        'Create an instance of the gateway and the facade.
        Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway  = new Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway();
        Interprise.Facade.Inventory.AdjustmentFacade internalFacade = new Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway);
        internalFacade.NewAdjustment();
 }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.NewAdjustment(Interprise.Framework.Inventory.Shared.Enum.AdjustmentType)">
	<summary>Adds new row to the InventoryAdjustment DataTable.</summary>
	<param name="adjusmentType">Type of adjustment to create.
 <para>In - when stocks will be added.</para>
		<para>Out - when stocks will be deducted.</para></param>
	<returns>Instance of the newly created row in the InventoryAdjustment DataTable.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewAjustment()
        'Create an instance of the gateway and the facade.
        Dim adjustmentGateway As Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway
        Dim internalFacade As Interprise.Facade.Inventory.AdjustmentFacade = New Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway)
        internalFacade.NewAdjustment()
 End Sub
    </code>
		<code lang="CS">
 private void NewAjustment()
 {
        'Create an instance of the gateway and the facade.
        Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway adjustmentGateway  = new Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AdjustmentDatasetGateway();
        Interprise.Facade.Inventory.AdjustmentFacade internalFacade = new Interprise.Facade.Inventory.AdjustmentFacade(adjustmentGateway);
        internalFacade.NewAdjustment();
 }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.FinalizePosting(Interprise.Framework.Inventory.DatasetComponent.AdjustmentDataSet.InventoryAdjustmentRow)">
	<summary>Commit other neccessary routine after the transaction is posted.</summary>
	<param name="adjustmentRow">The DataRow of the InventoryAdjustment DataTable that will be posted.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.Post">
	<summary>
 Post transaction to the general journal.
 </summary>
	<returns>If true posting succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.Post(System.Int32)">
	<summary>
	</summary>
	<param name="commandTimeOut">Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
 The value should be in seconds.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.PostStockTransferAdjustment">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.PostStockTransferAdjustment(System.Int32)">
	<summary>
	</summary>
	<param name="commandTimeOut">Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
 The value should be in seconds.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.GetInventoryReallocatableQuantity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.RecalculateQuantityDifference(Interprise.Framework.Inventory.Shared.Enum.AdjustmentType)">
	<summary>
 This is a method that is used to recalculate all the values of the adjustment details should the Adjustment Type value change
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.InventoryAdjustmentColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row changes made to the InventoryAdjustment DataTable.</summary>
	<remarks> Computation for quantity after is handled here. </remarks>
	<param name="sender">The object that excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="M:Interprise.Facade.Inventory.AdjustmentFacade.InventoryAdjustmentDetailColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Handles column and row changes made to the InventoryAdjustmentDetail
 DataTable.
 </summary>
	<param name="sender">The object thats excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.AdjustmentFacade">
	<summary>
 The class use for Stock Adjustment transaction.
 <para>It contains all subroutine / methods use for creating an adjustment routine</para>
	</summary>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Inventory.Base.BaseFacade.Validated">
	<summary>Event raised to UI to inform the user for any validation messages.</summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.CommandSet">
	<summary>
    The set of tables and store procedures needed when saving the transaction. 
    <para>Use by the UpdateDataset procedure.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.Config">
	<summary>
 Gets settings such as user language, company name, and other important information for the application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>
		<para>
  Interprise.Extendable.Base.Business.IBaseInterface</para>
	</value>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value>
		<para>Interprise.Framework.Base.Shared.Enum.TransactionType</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.ReportAction</para></value>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.DefaultNormalLocation">
	<summary>
		<para>Gets a warehouse default normal location.</para>
		<para>For standard edition it usually returns the "Zone1".</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.InventoryPreference">
	<summary>Gets the settings set for Iinventory transactions.</summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.UserPreference">
	<summary>
 Gets settings set for the current user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.ImageServerURL">
	<summary>
		<para>The URL that will be used when uploading and downloading images from web
    server.</para>
	</summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.SharedInstance">
	<summary>A shared instance of Inventory Base Facade.</summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.EnableColumnChanged">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.DisableImageResizeOnUpload">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.AddWebOption(System.String,System.Data.DataTable,System.Data.DataTable)">
	<summary>
 Adds new rows to the web option table.
 </summary>
	<param name="documentCode"></param>
	<param name="webOptionTable"></param>
	<param name="webOptionDescriptionTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.AddWebOptionDescription(System.String,System.String,System.String,System.Data.DataTable,System.String[])">
	<summary>
 Adds new description for web option description table.
 </summary>
	<param name="documentCode">The unique code that identifies the current transaction.</param>
	<param name="documentCodeFieldName"></param>
	<param name="webSiteCode">The web site code to add.</param>
	<param name="webOptionDescriptionTable">The table on which new rows will be added.</param>
	<param name="languages"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.#ctor">
	<summary>
 Create an instance of this class.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.ConvertCurrency(System.String,System.Decimal,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Converts a currency amount to base currency and vice versa.
 </summary>
	<param name="currencyCode">The currency code of the amount used. </param>
	<param name="amount">Amount to be converted.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.ConvertCurrency(System.Decimal,System.Decimal,System.Boolean,System.String,Interprise.Framework.Base.Shared.Enum.CurrencyFormat,System.Boolean,System.Boolean)">
	<summary>
 Converts a currency amount to base currency and vice versa.
 </summary>
	<param name="exchangeRate">The exchange rate to be used.</param>
	<param name="amount">The amount to convert.</param>
	<param name="isForeignToBase">Determines if the conversion is to base currency.</param>
	<param name="foreignCurrencyCode">The currency code.</param>
	<param name="currencyFormat">Formatting of decimal digits, if Total - decimal digits will be based on currency's CurrencyDecimalDigit, if CostPrice -  decimal digits will be based on currency's CurrencyCostDecimalDigits</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.RoundCurrency(System.Decimal,System.String)">
	<summary>
 Round Currency number to the nearest decimal specified.
 </summary>
	<param name="value">The value to be rounded.</param>
	<param name="currencyCode">The currency code to be used for rounding.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.RoundCurrency(System.Decimal,System.String,Interprise.Framework.Base.Shared.Enum.CurrencyFormat)">
	<summary>
	</summary>
	<param name="value">The value to be rounded.</param>
	<param name="currencyCode">The currency code to be used for rounding.</param>
	<param name="currencyFormat"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.Dispose">
	<summary>Dispose any objects created to free up memory.</summary>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.IsUnitMeasureExists(System.String,System.String,System.Decimal@)">
	<summary>
 Checks if a unit measure belongs to an item.
 </summary>
	<param name="itemCode"></param>
	<param name="unitMeasureCode"></param>
	<param name="unitMeasureQty"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetAccountCode">
	<summary>Gets the account codes used for inventory transactions.</summary>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemRow(System.String)">
	<summary>
 Gets a DataRow of an item from InventoryItem DataTable.
 </summary>
	<param name="itemCode">The document code of an item to retrieve.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemViewRow(System.String)">
	<summary>
 Gets a DataRow of an item from InventoryItemView DataTable.
 </summary>
	<param name="itemCode">The document code of an item to retrieve.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetInventoryItemAdjustmentViewRow(System.String)">
	<summary>
 Gets a row from InventoryAdjustmentView where warehousecode is the default warehouse and location is the default normal location(i.e. Location1).
 </summary>
	<param name="itemCode">The item code to filter the view.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetInventoryItemAdjustmentViewRow(System.String,System.String,System.String)">
	<summary>
 Gets a row from InventoryAdjustmentView
 </summary>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~GetInventoryItemAdjustmentViewRow(ByVal%20String).html">
 GetInventoryItemAdjustmentViewRow(String)</a>
	</overloads>
	<param name="itemCode">The item code to filter the view.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetInventoryItemKitPricingDetailView(System.String,System.String)">
	<summary>
 Gets a DataRow from the InventoryItemKitPricingDetailView.
 </summary>
	<param name="itemCode">The item code of DataRow to retrieve.</param>
	<param name="currencyCode">The currency that will filter that item price.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetCategoryCode(System.Data.DataRow[])">
	<summary>This procedure is obsolete.</summary>
	<remarks>This procedure is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetCategoryCode(System.String)">
	<summary>This procedure is obsolete.</summary>
	<remarks>This procedure is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.FormulateQuery(System.Data.DataRow[],System.String)">
	<summary>
 Formulates a query in a particular column.
 </summary>
	<param name="queryRows"></param>
	<param name="columName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetAccountCode(System.Data.DataTable,System.String,System.String)">
	<summary>
 Gets account codes used for inventory transactions.
 </summary>
	<param name="accountTable"></param>
	<param name="warehouseCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetAccountCodeTable(System.Data.DataRow[],System.Data.DataTable@)">
	<summary>
 Gets account codes used for inventory transactions.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemFreeStock(System.String,System.String,System.String)">
	<summary>
 Gets item free stock.
 </summary>
	<param name="itemCode">The item code from where the free stocks will be retrieved.</param>
	<param name="warehouseCode">The warehouse code from where the free stocks  will be retrieved.</param>
	<param name="locationCode">The location code from where the free stocks   will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.IsIgnoreStockLevel">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemUnitsInStock(System.String,System.String,System.String)">
	<summary>
 Gets item units in stock.
 </summary>
	<param name="itemCode">The item code from where the units in stocks will be retrieved.</param>
	<param name="warehouseCode">The warehouse code from where the units in stocks  will be retrieved.</param>
	<param name="locationCode">The location code from where the units in stocks  will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetUnitMeasureQuantity(System.String)">
	<summary>
 Gets unit measure quantity of particular unit measure code from System Unit Measure table.
 </summary>
	<param name="systemUnitMeasureCode">The unit measure code from where the unit measure quantity will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetUnitMeasureQuantity(System.String,System.String)">
	<summary>
 Gets unit measure quantity of particular unit measure code from System Unit Measure table.
 </summary>
	<param name="unitMeasureCode">The item code from where the unit measure quantity will be retrieved.</param>
 ''' <param name="itemCode">The unit measure code from where the unit measure quantity will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemCode(System.String)">
	<summary>
 Retrieve the item code of an item.
 </summary>
	<param name="itemName">The display name of an item.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemName(System.String)">
	<summary>
 Retrieve the item name of an item.
 </summary>
	<param name="itemCode">The document code of an item.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemCategory(System.String)">
	<summary>
 Gets item primary category.
 </summary>
	<param name="ItemCode">The item code from where category will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemPricingDetail(System.String,System.String)">
	<summary>
 Gets item pricing/prices (i.e.  retail price, wholesale price ,etc.).
 </summary>
	<param name="itemCode">The item code from where prices will be retrieved.</param>
	<param name="currencyCode">The currency code from where prices will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetItemDescription(System.String)">
	<summary>
 Returns item description.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetLanguageCode">
	<summary>
 Gets user language code.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetCompanyLanguage">
	<summary>
 Gets company default language.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetCompanyAddress">
	<summary>
 Gets company address.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetCompanyInformation">
	<summary>
 Retrieves values from System Company Information Table.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetLanguages">
	<summary>
 Gets company selling languages.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetLocations(System.String)">
	<summary>
 Returns all locations contained by a particular warehouse.
 </summary>
	<param name="warehouseCode">The warehouse code from where locations will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetLocationInformation(System.String,System.String)">
	<summary>Gets the detail of a particular location.</summary>
	<param name="warehouseCode">
		<para>The warehouse code where the location is found.</para>
		<para>The value cannot be null.</para>
	</param>
	<param name="locationCode">
    The location code from where data will be retrieved. 
    <para>The value cannot be null.</para>
	</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetLocationDescription(System.String)">
	<summary>
 Returns the location description.
 </summary>
	<param name="locationCode">The location code from where description will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetSellingCurrency">
	<summary>
 Returns selling currencies use by the company.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetUserLanguage">
	<summary>
 Returns user language.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetWarehouse">
	<summary>
 Returns warehouses used by the company.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetWarehouseDescription(System.String)">
	<summary>
 Returns warehouse description.
 </summary>
	<param name="warehouseCode">The warehouse code from where description will be retrived.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetWarehouseInformation(System.String)">
	<summary>
 Retrieve details of a warehouse.
 </summary>
	<param name="warehouseCode">The document code of an existing warehouse.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetWarehouseAddress(System.String)">
	<summary>
 Returns warehouse address.
 </summary>
	<param name="WarehouseCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetCurrentPeriodStartingDate">
	<summary>
 Get the starting date of the current period.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetHomeCurrencyRow">
	<summary>
 Returns the home currency row from the system selling currency table.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetHomeExchangeRate">
	<summary>
 Returns  home currency exchange rate.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetHomeCurrency">
	<summary>
 Returns the home currency of the company.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetInventorySellingCurrencyRow(System.String)">
	<summary>
 Returns a row for a specific currency code.
 </summary>
	<param name="currencyCode">The currency code from where selling currency row will be selected.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.RefreshCurrencyTable(System.String)">
	<summary>
 Add a specific currency to the currency table if not existing on the list.
 The main reason dot this is not there is because this currency is not mark as a selling currency.
 </summary>
	<param name="currencyCode"> The currency code to add.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetInventorySellingCurrencyTable">
	<summary>
 Returns Inventory Selling Currency table including its values.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetExchangeRate(System.String)">
	<summary>
 Returns exchange rate a particular currency.
 </summary>
	<param name="currencyCode">The currency code from where exchange rate will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GenerateInventoryStockTotal(System.String)">
	<summary>Generate inventory stock total for each item/warehouse created.</summary>
	<param name="user">The user who created the transaction</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GenerateInventoryStockTotal(System.String,System.String)">
	<summary>
 Generate stock total per warehouse.
 </summary>
	<param name="userCode"></param>
	<param name="warehouseCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GenerateAccount(System.String)">
	<summary>
 Generates account codes for new warehouse created.
 </summary>
	<param name="warehouseCode">The warehouse from where account codes will be generated.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GenerateAccount">
	<summary>
 Generates account codes for all warehouses.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.HasStock(System.String)">
	<summary>
 Check's whether an item is used in a transaction by means of its units in
 stock.
 </summary>
	<param name="itemCode">The item code where stock count will be retrieved.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.HasStock(System.String,System.String)">
	<summary>
 Check's whether an item is used in a transaction by means of its units in
 stock.
 </summary>
	<param name="itemCode">The item code where stock count will be retrieved.</param>
	<param name="itemType"></param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.IsRequiredField(System.String,System.String)">
	<summary>Gets whether a particular column of a DataTable is a required field.</summary>
	<param name="tableName">The name a DataTable from the database.</param>
	<param name="columnName">The field of a DataTable.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.IsDocumentCodeExists(System.String,System.String,System.String)">
	<summary>
 Method to check if particular document code is existing.
 </summary>
	<param name="value"></param>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.ParseSingleQuote(System.String)">
	<summary>
	</summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.PostAutoAllocation">
	<summary>Checks and auto allocate stock if discrepancies is detected.</summary>
	<returns>If true allocation succeeds, otherwise it fails.</returns>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.PostAutoAllocation(System.String)">
	<summary>
 Checks and auto allocate stock if discrepancies is detected
 </summary>
	<param name="itemCode"></param>
	<returns>If true allocation succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.RecalculatePricingDetail(System.String)">
	<summary>
 Recalculate pricing when last cost is changed.
 Update is made directly to the database.
 </summary>
	<param name="itemCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.SetDefaultDepartment">
	<summary>
 Check if there are default department specified for each item.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.BeginSetDefaultDepartment">
	<summary>
 Check if there are default department specified for each item asynchronously.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.SetDefaultCategory">
	<summary>
 Check if there are default category specified for each item.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.BeginSetDefaultCategory">
	<summary>
 Check if there are default category specified for each item asynchronously.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.UpdateDataset">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.ValidateItemCode(System.String,System.Boolean)">
	<summary>Checks if an item code is existing in the database.</summary>
	<returns>If true, the item exists.</returns>
	<param name="itemCode">The item code to validate.</param>
	<param name="checkMatrixItemTable">Indicates if matrix item table will be check for this item code.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.InValidate(System.String,Interprise.Framework.Base.Shared.Enum.MessageWindowIcon)">
	<summary>Forward any validation errors to UI.</summary>
	<param name="message">Any messages to be forwarded to the UI.</param>
	<param name="messageStyle">Type of message icon that will be displayed.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.HasWebServerURL">
	<summary>Gets or sets if there is a URL defined for the web server.</summary>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetStoreFrontService">
	<summary>Gets the instance of ASPDOTNET StoreFront web service.</summary>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.HasStoreFrontService">
	<summary>
 Checks if the URL defined by
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
 ImageServerURL</a> is valid.
 </summary>
	<returns>If true, URL defined is valid, otherwise an invalid URL is detected.</returns>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetStoreFrontService(System.String)">
	<summary>Gets the instance of ASPDOTNET StoreFront web service.</summary>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetStoreFrontServiceAsync(System.AsyncCallback)">
	<summary>Gets the instance of ASPDOTNET StoreFront web service asynchronously.</summary>
	<param name="callback">The call back when the procedure is completed.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.InitStoreFrontConnection">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetXMLPackages(Interprise.Framework.Inventory.Shared.Enum.XMLPackageType)">
	<summary>Get available xml packages of an entity.</summary>
	<returns>Array or collection of xml package string value.</returns>
	<param name="xmlPackageKind">Type of an entity whether item, category, department or manufacturer.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetMobileXMLPackages(Interprise.Framework.Inventory.Shared.Enum.XMLPackageType)">
	<summary>Get available xml packages of an entity.</summary>
	<returns>Array or collection of xml package string value.</returns>
	<param name="xmlPackageKind">Type of an entity whether item, category, department or manufacturer.</param>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.MediumImageStore">
	<summary>
 Collection of medium images that are downloaded/uploaded to the web server
 defined by
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
 ImageServerURL</a>.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.LargeImageStore">
	<summary>
 Collection of large images that are downloaded/uploaded to the web server defined
 by
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
 ImageServerURL</a>.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.MobileImageStore">
	<summary>
 Collection of Mobile images that are downloaded/uploaded to the web server defined
 by
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
 ImageServerURL</a>.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.MinicartImageStore">
	<summary>
 Collection of minicart images that are downloaded/uploaded to the web server defined
 by
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
 ImageServerURL</a>.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.ThumbnailImageStore">
	<summary>
 Collection of small or icon images that are downloaded/uploaded to the web server
 defined by
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
 ImageServerURL</a>.
 </summary>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.SwatchImageStore">
	<summary>
		<para>Collection of matrix swatch images that are downloaded/uploaded to the web
    server defined by
    <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
    ImageServerURL</a>.</para>
		<para>This is use specifically for matrix item type.</para>
	</summary>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.SetWebImageStore(Interprise.Framework.Inventory.Shared.Enum.ImageKind,Interprise.Facade.Inventory.Base.ImageStore)">
	<summary>
	</summary>
	<param name="kind"></param>
	<param name="imageStore"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.HasImageStore">
	<summary>
		<para>Indicates if there are images that are donwloaded from the web server.</para>
		<para>It also determine if the connection to the
    <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
    ImageServerURL</a> is a valid web service URL.</para>
	</summary>
	<value>
 If true, the URL defined by
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ImageServerURL.html">
 ImageServerURL</a> is valid and a collection of images has already been
 retrived.
 </value>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.HasImageStoreChanges">
	<summary>
 Indicates if images from
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ThumbnailImageStore.html">
 ThumbnailImageStore</a>,
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~MediumImageStore.html">
 MediumImageStore</a>,
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~LargeImageStore.html">
 LargeImageStore</a> or
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~SwatchImageStore.html">
 SwatchImageStore</a> has been modified.
 </summary>
	<value>If true, changes has been made to the store images.</value>
</member><member name="P:Interprise.Facade.Inventory.Base.BaseFacade.GetImageStore(Interprise.Framework.Inventory.Shared.Enum.ImageKind)">
	<summary>Gets the image collection from the server.</summary>
	<param name="imageKind">The type of image to retrieve from the web server.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.CreateProductImages(System.Int32)">
	<summary>Create instance of an entity image class.</summary>
	<param name="size">The length of the images.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.WebSiteTable">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.ResetEntityCache">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.BeginResetWebCache">
	<summary>
 An asynchronous call when resetting web cache.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.BeginResetEntityCache">
	<summary>
 An asynchronous call when resetting entity cache.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.ResetWebCache">
	<summary>Reset the settings when involve in caching data from the web site.</summary>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.EndResetWebCache(System.IAsyncResult)">
	<summary>The callback of an asynchronous reset of cache of images.</summary>
	<param name="result">The result of asyncronous reset of cache.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.EndResetEntityCache(System.IAsyncResult)">
	<summary>The callback of an asynchronous reset cache for entity transaction.</summary>
	<param name="result">The result of asyncronous reset cache for entity transaction.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.NoImageToUpload">
	<summary>
 Indicates if there is image to upload.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.UploadImages">
	<summary>
 Upload images to the web server.
 </summary>
	<returns>If true, upload succeeds otherwise it fails.</returns>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.SetImagesToUpload(Interprise.Facade.Inventory.Base.ImageStore@,Interprise.Facade.Base.ISEService.EntityImageData@,Interprise.Framework.Inventory.Shared.Enum.ImageKind)">
	<summary>
	</summary>
	<param name="imageStoreCollection"></param>
	<param name="productImageData"></param>
	<param name="imageKind"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.DetermineImageState(Interprise.Facade.Base.ISEService.EntityImage@,Interprise.Facade.Inventory.Base.ImageStore@)">
	<summary>
	</summary>
	<param name="productimage"></param>
	<param name="imageStoreCollection"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.SyncMatrixItemImageUpload(System.Int32)">
	<summary>
 Upload images to the web server. ItemName should be parallel to matrixItemName
 </summary>
	<returns>If true, upload succeeds otherwise it fails.</returns>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetImages(Interprise.Facade.Base.ISEService.EntityImageData@,Interprise.Facade.Inventory.Base.ImageStore@,Interprise.Framework.Inventory.Shared.Enum.ImageKind)">
	<summary>Download images of an item from the web server.</summary>
	<param name="itemImageData">A storage for an item images downloaded from the web server.</param>
	<param name="imageStore">The image store collection of an item.</param>
	<param name="imageKind">The type of images to retrieve.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetWebImages(System.Int32,System.String@)">
	<summary>Download images of an item from the web server.</summary>
	<param name="entityCounter">The counter of an entity table row.</param>
	<param name="errorMessage">A message returned by the procedure when error occurs.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.RetrievedImages(System.Int32,Interprise.Framework.Inventory.Shared.Enum.ImageKind)">
	<summary>Download images of an item from the web server.</summary>
	<param name="entityCounter">The counter of an entity table row.</param>
	<param name="imageKind">The type of images to retrieve.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.RetrievedImages(System.Int32)">
	<summary>Download images of an item from the web server.</summary>
	<param name="entityCounter">The counter of an entity table row.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.RetrievedImages(System.Int32,System.String@)">
	<summary>Download images of an item from the web server.</summary>
	<param name="entityCounter">The counter of an entity table row.</param>
	<param name="errorMessage">A message returned by the procedure when error occurs.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.ResetImageStore">
	<summary>
 Set the
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~ThumbnailImageStore.html">
 ThumbnailImageStore</a>,
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~MediumImageStore.html">
 MediumImageStore</a>,
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~LargeImageStore.html">
 lMediumImageStore</a> and
 <a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.Base.BaseFacade~SwatchImageStore.html">
 SwatchImageStore</a> to nothing.
 </summary>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetDefaultImages(Interprise.Facade.Base.ISEService.EntityImageData@,Interprise.Facade.Inventory.Base.ImageStore@,Interprise.Framework.Inventory.Shared.Enum.ImageKind)">
	<summary>Download images of an item from the web server.</summary>
	<param name="itemImageData">A storage for an item images downloaded from the web server.</param>
	<param name="imageStore">The image store collection of an item.</param>
	<param name="imageKind">The type of images to retrieve.</param>
</member><member name="M:Interprise.Facade.Inventory.Base.BaseFacade.GetDefaultWebImages(System.Int32,System.String@)">
	<summary>Download images of an item from the web server.</summary>
	<param name="entityCounter">The counter of an entity table row.</param>
	<param name="errorMessage">A message returned by the procedure when error occurs.</param>
</member><member name="T:Interprise.Facade.Inventory.Base.BaseFacade">
	<summary>
 The base class of all inventory business facade layer.
 <para>It contains all common and shared subroutine/methods between the parent and the derive class.</para>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.ImageStore.AcceptChanges">
	<summary>
 Accept changes made to the images and set it state to unchaged.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.ImageStore.HasChanges">
	<summary>
 Checks if there was changes made to the images.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.Base.ImageStore.Contains(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.Count">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.Keys">
	<summary>Collection os image keys or unique values that identifies each images.</summary>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.Collector(System.Object,Interprise.Framework.Inventory.Shared.Enum.ImageState,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="key"></param>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.GetImage(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.GetImageState(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.GetContentType(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.GetHasMicroImage(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.HasMobileImage(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.HasMinicartImage(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.Collector(System.Object,System.String)">
	<summary>
	</summary>
	<param name="key"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.DisplayImage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.DisplayImageContentType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.DisplayImageByte">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.DisplayImageState">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.ImageServiceURL">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.Kind">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.HasMicroImage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.Base.ImageStore.ImageType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.Base.ImageStore">
	<summary>
 The class for storing images that are downloaded from the server or images that
 will be uploaded.
 </summary>
	<defaultconstructorsummary>safasdfasdfasdfsdaf</defaultconstructorsummary>
</member><member name="M:Interprise.Facade.Inventory.Base.StoreFrontClass.#ctor">
	<summary>
 Create an instance of this class.
 </summary>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Inventory.Base.StoreFrontClass">
	<summary>Reserve for future reference.</summary>
</member><member name="P:Interprise.Facade.Inventory.AssemblyFacade.AssemblyCode">
	<summary>The document code of the transaction.</summary>
</member><member name="P:Interprise.Facade.Inventory.AssemblyFacade.CommandSet">
	<summary>
 The set of tables and store procedures needed when saving the transaction.
 <para> Use by the UpdateDataset procedure.</para>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.AssemblyFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Inventory.AssemblyFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<code lang="VB">
 Dim m_CurrentDataset As Interprise.Framework.Base.DatasetComponent.BaseDatset
 
 Public Overridable Readonly Property CurrentDataset() As Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 Get
   Return m_CurrentDataset
 End Get
 EndProperty
    </code>
		<code lang="CS">
 Interprise.Framework.Base.DatasetComponent.BaseDatset m_CurrentDataset = null;
 
 public Interprise.Framework.Base.DatasetComponent.BaseDatasetImplementsInterprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset CurrentDataset() 
 Get
 {
  return m_CurrentDataset;
 }
 End Get
 </code>
	</example>
</member><member name="P:Interprise.Facade.Inventory.AssemblyFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.AssemblyFacade.WarehouseCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Inventory.AssemblyFacade.IsUpdating">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.ComputeForDetailQuantities(System.Decimal)">
	<summary>
 Computes for total, short quantities of the items included in the assembly.
 </summary>
	<param name="quantity">The build qty of the assembly item.</param>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.#ctor(Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway)">
	<summary>
 Create an instance of the AssemblyFacade class.
 </summary>
	<param name="assemblyDataset">Shared dataaset between UI and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.LoadAssemblyComponents">
	<summary>
 Loads all components of selected assembly item.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.NewAssembly(System.String)">
	<summary>Adds new row to InventoryBuildAssembly DataTable.</summary>
	<returns>Instance of the newly created build assembly row.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewAssembly()
        'Create an instance of the gateway and the facade.
        Dim asemblyGateway As Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway()
        Dim assemblyFacade As Interprise.Facade.Inventory.AssemblyFacade = New Interprise.Facade.Inventory.AssemblyFacade(asemblyGateway)
        'Presuming this item exist
        assemblyFacade.NewAssembly("ITEM-000001")
 End Sub
    </code>
		<code>
 private void NewBuildAssembly()
        {
            //Create an instance of the gateway and the facade.
            Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway asemblyGateway = new Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway();
            Interprise.Facade.Inventory.AssemblyFacade assemblyFacade = new Interprise.Facade.Inventory.AssemblyFacade(asemblyGateway);
            //Presuming this item exist
            assemblyFacade.NewAssembly("ITEM-000001");
        }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.AssemblyFacade~NewAssembly(ByVal%20String,%20ByVal%20String,%20ByVal%20String).html">
    NewAssembly(String,String)</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.AssemblyFacade~NewAssembly(ByVal%20System.Data.DataRow).html">
    NewAssembly(DataRow)</a></para>
	</overloads>
	<param name="assemblyCode">The itemCode of an existing assembly item.</param>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.NewAssembly(System.String,System.String,System.String)">
	<summary>Adds new row to InventoryBuildAssembly DataTable.</summary>
	<returns>Instance of the newly created build assembly row.</returns>
	<overloads>
		<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.AssemblyFacade~NewAssembly(ByVal%20String).html">
    NewAssembly(String)</a>
		<para>
			<para>
				<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.AssemblyFacade~NewAssembly(ByVal%20System.Data.DataRow).html">
        NewAssembly(DataRow)</a></para>
		</para>
	</overloads>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewAssembly()
      'Create an instance of the gateway and the facade.
      Dim asemblyGateway As Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway()
      Dim assemblyFacade As Interprise.Facade.Inventory.AssemblyFacade = New Interprise.Facade.Inventory.AssemblyFacade(asemblyGateway)
      'Presuming this item exist
      assemblyFacade.NewAssembly("ITEM-000001","Toys","Kid Toys")
 End Sub
    </code>
		<code lang="CS">
 private void NewBuildAssembly()
       {
           //Create an instance of the gateway and the facade.
           Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway asemblyGateway = new Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway();
           Interprise.Facade.Inventory.AssemblyFacade assemblyFacade = new Interprise.Facade.Inventory.AssemblyFacade(asemblyGateway);
           //Presuming this item exist
           assemblyFacade.NewAssembly("ITEM-000001","Toys","Kid Toys");
       }
    </code>
	</example>
	<param name="assemblyCode">The item Code of an existing assembly item.</param>
	<param name="assemblyName">The item Name of an existing assembly item related to the assemblyCode.</param>
	<param name="assemblyDescription">
 The item Description of an existing assembly item related to the
 assemblyCode.
 </param>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.NewAssembly(System.Data.DataRow)">
	<summary>Adds new row to InventoryBuildAssembly DataTable.</summary>
	<returns>Instance of the newly created build assembly row.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewAssembly()
    'Create an instance of the gateway and the facade.
    Dim asemblyGateway As Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway()
    Dim assemblyFacade As Interprise.Facade.Inventory.AssemblyFacade = New Interprise.Facade.Inventory.AssemblyFacade(asemblyGateway)
    'Assuming this row is the item Row
    Dim itemRow As DataRow 
    assemblyFacade.NewAssembly(itemRow)
 End Sub
    </code>
		<code lang="CS">
 private void NewBuildAssembly()
      {
          //Create an instance of the gateway and the facade.
          Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway asemblyGateway = new Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway();
          Interprise.Facade.Inventory.AssemblyFacade assemblyFacade = new Interprise.Facade.Inventory.AssemblyFacade(asemblyGateway);
          //Assuming this row is the item Row
          DataRow itemRow;
          assemblyFacade.NewAssembly(itemRow);
      }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.AssemblyFacade~NewAssembly(ByVal%20String).html">
    NewAssembly(String)</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.AssemblyFacade~NewAssembly(ByVal%20String,%20ByVal%20String,%20ByVal%20String).html">
    NewAssembly(String,String)</a></para>
	</overloads>
	<param name="assemblyRow">The item row of an existing assembly item.</param>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.NewAssembly(System.String,System.String,System.Decimal)">
	<summary>Adds new row to InventoryBuildAssembly DataTable.</summary>
	<returns>Instance of the newly created build assembly row.</returns>
	<example>
		<code lang="VB">
 Protected Overridable Sub NewAssembly()
        'Create an instance of the gateway and the facade.
        Dim asemblyGateway As Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway = New Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway()
        Dim assemblyFacade As Interprise.Facade.Inventory.AssemblyFacade = New Interprise.Facade.Inventory.AssemblyFacade(asemblyGateway)
        'Assuming this item exist and is an assembly item
        assemblyFacade.NewAssembly("ITEM-000001","MAIN",5)
 End Sub
    </code>
		<code>
 private void NewBuildAssembly()
        {
            //Create an instance of the gateway and the facade.
            Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway asemblyGateway = new Interprise.Framework.Inventory.DatasetGateway.AssemblyDatasetGateway();
            Interprise.Facade.Inventory.AssemblyFacade assemblyFacade = new Interprise.Facade.Inventory.AssemblyFacade(asemblyGateway);
            //Assuming this item exist and is an assembly item
            assemblyFacade.NewAssembly("ITEM-000001","MAIN",5);
        }
    </code>
	</example>
	<overloads>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.AssemblyFacade~NewAssembly(ByVal%20String,%20ByVal%20String,%20ByVal%20String).html">
    NewAssembly(String,String)</a></para>
		<para>
			<a href="Interprise.Facade.Inventory~Interprise.Facade.Inventory.AssemblyFacade~NewAssembly(ByVal%20System.Data.DataRow).html">
    NewAssembly(DataRow)</a></para>
	</overloads>
	<param name="assemblyCode">The itemCode of an existing assembly item.</param>
	<param name="warehouseCode">The warehouse where the assembly will be build.</param>
	<param name="quantity">Number of items to build.</param>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.Post">
	<summary>
 Post transaction to the general journal.
 </summary>
	<returns>If true posting succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.FinalizePosting">
	<summary>
 Commit other neccessary routine after the transaction is posted
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.LoadAssemblyStockCount">
	<summary>
 Loads stock count of assembly item.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.RecomputeDetail(System.Decimal)">
	<summary>
 Computes for total, short quantities of the items included in the assembly.
 </summary>
	<param name="quantity">The build qty of the assembly item.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.UpdateInventoryItem">
	<summary>
 ''' <summary>
 Updates the average,standard and last cost of the assembly once the build process is complete.
 <para>Updates takes place directly to the main database.</para>
		</summary>
	</summary>
	<returns>If true update succeeds, otherwise it fails.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.GetInventoryReallocatableQuantity">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Inventory.AssemblyFacade.InventoryBuildAssemblyColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Handles column and row changes made to the InventoryWarehouse DataTable.</summary>
	<param name="sender">The object thats excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
</member><member name="T:Interprise.Facade.Inventory.AssemblyFacade">
	<summary>
 The class use for Assembly / Works Order (Build Assembly) transaction.
 <para>It contains all subroutine / methods use for creating an a works order routine</para>
	</summary>
	<remarks></remarks>
</member>
</members>
</doc>