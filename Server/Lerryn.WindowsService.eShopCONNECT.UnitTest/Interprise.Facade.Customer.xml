<?xml version="1.0"?>
<doc>
<assembly>
<name>
Interprise.Facade.Customer
</name>
</assembly>
<members>
<member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.AllocateDebit(Interprise.Facade.Customer.ReceiptFacade,System.Decimal)">
	<summary>
	</summary>
	<param name="receiptAllocationFacade"></param>
	<param name="allocatedRate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.AllocateCredit(Interprise.Facade.Customer.ReceiptFacade,System.Decimal)">
	<summary>
	</summary>
	<param name="receiptAllocationFacade"></param>
	<param name="allocatedRate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreateInvoiceAllocation(Interprise.Extendable.Customer.Facade.IInvoiceInterface,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="invoiceFacade"></param>
	<param name="creditMemoGateway"></param>
	<param name="customerRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreatePaymentAllocation(System.String,System.String,System.Boolean)">
	<summary>
 Returns all failed voided receivables
 </summary>
	<param name="invoiceCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreateReceiptAllocation(Interprise.Extendable.Customer.Facade.IReceiptInterface,System.String,System.String)">
	<summary>
	</summary>
	<param name="refundFacade"></param>
	<param name="receivableCode"></param>
	<param name="customerCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreateNewAuthorization(System.String,System.Decimal)">
	<summary>
	</summary>
	<param name="sourceCardPaymentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreateNewRefundTransaction(Interprise.Facade.Customer.ReceiptFacade,Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway)">
	<summary>
	</summary>
	<param name="refundFacade"></param>
	<param name="refundGateway"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.ConvertInvoiceToCreditMemo(System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.ConvertInvoiceToCreditMemo(System.String)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.ConvertInvoiceToCreditMemo(Interprise.Facade.Customer.InvoiceFacade,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway@,System.String)">
	<summary>
	</summary>
	<param name="invoiceFacade"></param>
	<param name="creditMemoGateway"></param>
	<param name="invoiceCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CopyFreightCharges(Interprise.Facade.Customer.InvoiceFacade,Interprise.Facade.Customer.InvoiceFacade)">
	<summary>
	</summary>
	<param name="invoiceFacade"></param>
	<param name="creditMemoFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreateInvoiceFacade(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreateReceiptFacade(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreateSalesOrderFacade(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.CreateTransactionReceiptFacade">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.DeallocateAndReservedPayment(System.String,System.String,System.String,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="receivableCode"></param>
	<param name="customerCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.DeallocateAndReservedCredit(System.String,System.String,System.String,System.Decimal,System.Decimal,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="allocationCode"></param>
	<param name="receivableCode"></param>
	<param name="customerCode"></param>
	<param name="originalAppliedAmount"></param>
	<param name="originalAppliedAmountRate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.DeallocatePayment(System.String)">
	<summary>
	</summary>
	<param name="allocationCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.RemoveReservedPoints(System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.GetWarehouseCodes(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway)">
	<summary>
	</summary>
	<param name="invoiceGateway"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.LoadBackOrder(System.String)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.LoadBackOrderPayments(System.String)">
	<summary>
	</summary>
	<param name="backOrderCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.LoadInvoiceAllocation(System.String)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.ManageEventHandlers(System.Boolean,Interprise.Framework.Customer.Shared.Delegate.ConversionCompleted,Interprise.Framework.Customer.Shared.Delegate.ConversionFailed,Interprise.Framework.Customer.Shared.Delegate.CreditCardAuthorizationFailed,Interprise.Framework.Customer.Shared.Delegate.PostingFailed,Interprise.Framework.Customer.Shared.Delegate.ProcessingPaymentCompleted,Interprise.Framework.Customer.Shared.Delegate.ProcessingPaymentCompleted)">
	<summary>
	</summary>
	<param name="attachEvent"></param>
	<param name="conversionCompleted"></param>
	<param name="conversionFailed"></param>
	<param name="postingFailed"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.ProcessCardPayment(Interprise.Facade.Customer.ReceiptFacade,System.Boolean,Interprise.Framework.Base.Shared.Enum.CreditCardTransaction)">
	<summary>
	</summary>
	<param name="receiptFacade"></param>
	<param name="isVoid"></param>
	<param name="creditCardTransactionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.ReceiptAllocationFacade_OnPostingRefund(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.RefundReceipt(System.String,System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.RemoveSerialNumbersInCreditMemo(Interprise.Facade.Customer.InvoiceFacade)">
	<summary>
	</summary>
	<param name="creditMemoFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.UpdateCreditReservedAmount(System.String,System.String,System.Decimal,System.Decimal,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.String)">
	<summary>
	</summary>
	<param name="receivableCode"></param>
	<param name="customerCode"></param>
	<param name="originalAppliedAmount"></param>
	<param name="originalAppliedAmountRate"></param>
	<param name="transactionType"></param>
	<param name="invoiceCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.RemoveReservedAmount(System.String,System.String)">
	<summary>
	</summary>
	<param name="receivableCode"></param>
	<param name="customerCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.UpdatePaymentReservedAmount(System.String,System.String,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="receivableCode"></param>
	<param name="customerCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.UpdateTransactionReceipt(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="salesOrderCode"></param>
	<param name="sourceCardPaymentCode"></param>
	<param name="cardPaymentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.VoidBackOrder(System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.VoidInvoiceFacade.VoidReceipt(System.String,System.String)">
	<summary>
 Returns the failed voided receivable code.
 </summary>
	<param name="receivableCode"></param>
	<param name="customerCode"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Customer.TransactionReceiptFacade.AttachEvent">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.CustomerReceiptAllocation">
	<summary>
 Returns CustomerReceiptAllocation Dataset
 </summary>
	<value>ReceiptDatasetGateway</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.CustomerReceiptFacade">
	<summary>
 Returns CustomerReceiptFacade
 </summary>
	<value>ReceiptFacade</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.TotalAuthorizedAmountRate(System.String)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.TotalAvailableAuthorizedAmountRate(System.String,System.Boolean)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.PaymentOnProcess">
	<summary>
 Property to indicate the current credit card payment being processed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.CurrentReceiptDataset">
	<summary>
 Property to indicate the dataset of the receipt being processed currently on the payment tab of SO/Invoice form.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.ReceiptsLoaded">
	<summary>Informs this facade to skip loading payment DataTables when SetReceiptReservedAmount is called.</summary>
	<value>True to skip loading payment DataTables.</value>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.IsSaveReceipts">
	<summary>Informs this facade to avoid saving the changes in the payment records when SetReceiptReservedAmount is called.</summary>
	<value>True to skip saving.</value>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.OverrideDifference">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.HasUnathorizedPayments">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionReceiptFacade.VoidResult">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.TransactionReceiptDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="customerTransactionReceiptDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreateReceiptAllocation(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal,System.String)">
	<summary>
 Creates header, credits and debits allocation.
 </summary>
	<param name="gatewayReceipt">A <strong>Dataset</strong> that represensts the ReceiptDataset</param>
	<param name="gatewayInvoice">A <strong>Dataset</strong> that represensts the InvoiceDataset</param>
	<param name="totalDue">A <strong>Decimal</strong> value that represents the Gross Total due for the transaction in home currency</param>
	<param name="totalDueRate">A <strong>Decimal</strong> value that represents the Gross Total due for the transaction in customer currency</param>
	<param name="type">A <strong>String</strong> that represents the type of the document being processed</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.FinalizeReceiptAllocation(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="gatewayInvoice"></param>
	<param name="amountPaidRate"></param>
	<param name="amountPaid"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.ProcessReceiptAllocation(Interprise.Extendable.Customer.Facade.IAllocationInterface,Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal,Interprise.Framework.Customer.DatasetComponent.TransactionReceiptDataset.CustomerTransactionReceiptViewRow)">
	<summary>
 '
 </summary>
	<param name="newReceiptGateway"></param>
	<param name="transactionReceiptRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.ProcessCreditAllocation(Interprise.Extendable.Customer.Facade.IAllocationInterface,Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal,Interprise.Framework.Customer.DatasetComponent.TransactionReceiptDataset.CustomerTransactionReceiptViewRow)">
	<summary>
	</summary>
	<param name="newInvoiceGateway"></param>
	<param name="transactionReceiptRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreatePaymentAllocation(Interprise.Extendable.Customer.Facade.IAllocationInterface,Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="newReceiptGateway"></param>
	<param name="newInvoiceGateway"></param>
	<param name="totalDue"></param>
	<param name="totalDueRate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreateReceiptFacade">
	<summary>
 Creates a new instance of the ReceiptDataset
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.AssignTransactionReceipt(System.String,Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,System.Int32@)">
	<summary>
 Assigns a Receipt to a receivable transaction
 </summary>
	<param name="documentCode">A <strong>String</strong> that represents the receipt to be assigned</param>
	<param name="datasetReceipt">A <strong>Dataset</strong> that represents the ReceiptDataset</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.AssignTransactionReceipt(System.String,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Int32@)">
	<summary>
 Assigns a Receipt to a receivable transaction
 </summary>
	<param name="documentCode">A <strong>String</strong> that represents the receipt to be assigned</param>
	<param name=" facadeReceipt">A facade class that implements Interprise.Extendable.Customer.Facade.IReceiptInterface interface.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.AssignTransactionReceipt(System.String,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Int32@,System.Boolean)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<param name="facadeReceipt"></param>
	<param name="dataSourceRowIndex"></param>
	<param name="allowPreGeneratedReceiptCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.UpdateCardPaymentStatus(System.String,Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.String,System.String,System.String)">
	<summary>
 Update the authorize,force and capture status flag of card payment. If voided or credited, the customer payment/receipt is removed from the transaction and voided.
 </summary>
	<param name="documentCode">A <strong>String</strong> that represents the receipt to be assigned</param>
	<param name="datasetReceipt">A <strong>Dataset</strong> that represents the ReceiptDataset</param>
	<param name="facadeReceipt">An instance of the class that implemented Interprise.Extendable.Customer.Facade.IReceiptInterface interface.</param>
	<param name="type">A <strong>String</strong> that represents the parent transaction</param>
	<param name="receiptCode">A <strong>String</strong> that indicates document code of the receipt to be updated.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.UpdatePaymentStatus(System.Data.DataRow,Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway)">
	<summary>
 Removes a payment with payment type other than credit card in the TransactionReceipt table
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.ReserveAndAllocateReceipt(Interprise.Framework.Base.DatasetComponent.BaseDataset,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.String)">
	<summary>
 Reserves and allocates Receipt
 </summary>
	<param name="dataset">A <strong>Dataset</strong> that represents the Dataset of the current transaction</param>
	<param name="type">A <strong>String</strong> that represents the document type of the row being processed</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.SetReceiptReservedAmount(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.String)">
	<summary>
 Sets Receipt Reserved Amount
 </summary>
	<param name="gatewayTempReceipt">A <strong>Dataset</strong> that represents the ReceiptDataset</param>
	<param name="facadeTempReceipt">A <strong>Facade</strong> that represents the ReceiptFacade</param>
	<param name="totalDue">A <strong>Decimal</strong> value that represents the Gross Total due for the transaction in home currency</param>
	<param name="totalDueRate">A <strong>Decimal</strong> value that represents the Gross Total due for the transaction in customer currency</param>
	<param name="isPost">A <strong>Boolean</strong> value that indicates that receipts should be posted</param>
	<param name="isVoid">A <strong>Boolean</strong> value that indicates that receipts are being voided</param>
	<param name="type">A <strong>String</strong> value that indicates the type of parent transaction</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.SetReceiptReservedAmount(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)">
	<summary>
 Sets Receipt Reserved Amount
 </summary>
	<param name="gatewayTempReceipt">A <strong>Dataset</strong> that represents the ReceiptDataset</param>
	<param name="facadeTempReceipt">A <strong>Facade</strong> that represents the ReceiptFacade</param>
	<param name="totalDue">A <strong>Decimal</strong> value that represents the Gross Total due for the transaction in home currency</param>
	<param name="totalDueRate">A <strong>Decimal</strong> value that represents the Gross Total due for the transaction in customer currency</param>
	<param name="isPost">A <strong>Boolean</strong> value that indicates that receipts should be posted</param>
	<param name="isVoid">A <strong>Boolean</strong> value that indicates that receipts are being voided</param>
	<param name="type">A <strong>String</strong> value that indicates the type of parent transaction</param>
	<param name="receiptCode">A <strong>String</strong> value that indicates the document code of the receipt that's already loaded in the ReceiptDatasetGateway object</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.PostSurplassAmount(System.Boolean,Interprise.Facade.Customer.ReceiptFacade,System.Boolean)">
	<summary>
	</summary>
	<param name="hasExcessPayment"></param>
	<param name="receiptFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.Void(System.String,Interprise.Framework.Base.DatasetComponent.BaseDataset)">
	<summary>Clears the amount reserved for voided sales order or invoice.</summary>
	<param name="type">The type of transaction which is either Sales Order or Invoice.</param>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.AllowToAdjustPayment(System.Data.DataRow)">
	<summary>
 Check if the current selected payment is allowed to update or to adjust. Payment will be updated only if the total captured amount plus selected 
 payment is greater than the invoice amount
 </summary>
	<param name="selectedRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.LoadPayment(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.String)">
	<summary>
	</summary>
	<param name="receiptGateway"></param>
	<param name="receiptFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.LoadSelectedReceipt(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.String)">
	<summary>
	</summary>
	<param name="receiptCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.ApplyCredit(Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Decimal,System.Decimal,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Int32@,System.Decimal@)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<param name="creditCode"></param>
	<param name="amount"></param>
	<param name="balance"></param>
	<param name="receiptFacade"></param>
	<param name="dataSourceRowIndex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.ApplyCredit(Interprise.Framework.Base.Shared.Enum.TransactionType,System.String[],System.Decimal,System.Decimal,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Int32@)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<param name="creditCode"></param>
	<param name="amount"></param>
	<param name="balance"></param>
	<param name="receiptFacade"></param>
	<param name="dataSourceRowIndex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreateCreditCardAuthorizationFacade">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.AssignCurrentCardPayment(Interprise.Extendable.Customer.Facade.ICreditCardAuthorizationInterface,Interprise.Extendable.Customer.Facade.IReceiptInterface)">
	<summary>
	</summary>
	<param name="creditCardAuthorizationFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.AuthorizeCreditCardPayments(System.Boolean,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Decimal,System.Boolean,System.String@)">
	<summary>
	</summary>
	<param name="onVoidingTransaction"></param>
	<param name="receiptFacade"></param>
	<param name="totalDueRate"></param>
	<param name="isVoid"></param>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.AuthorizeCreditCardPayments(System.Decimal,System.Boolean,System.String@)">
	<summary>
	</summary>
	<param name="totalDueRate"></param>
	<param name="isVoid"></param>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.AuthorizeCreditCardPayments(System.Decimal,System.String@)">
	<summary>
	</summary>
	<param name="totalDueRate"></param>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.UpdateCreditCardIVAndSalt(Interprise.Extendable.Customer.Facade.IReceiptInterface)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.ManageCreditCardAuthorizationFacadeCustomEvents(Interprise.Facade.Customer.CreditCardAuthorizationFacade,Interprise.Facade.Customer.TransactionReceiptFacade.AttachEvent)">
	<summary>
	</summary>
	<param name="creditCardAuthorizationFacade"></param>
	<param name="attachEvent"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.UpdateTransactionReceipt(Interprise.Extendable.Customer.Facade.IReceiptInterface,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="receiptFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.Void(System.String,System.String@)">
	<summary>
	</summary>
	<param name="type"></param>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.Void(Interprise.Extendable.Customer.Facade.IReceiptInterface,System.String,System.String@)">
	<summary>
	</summary>
	<param name="result"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreateReceiptAllocation(System.String)">
	<summary>
	</summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.OnOverrideAdjustCardPayment(Interprise.Framework.Customer.EventArguments.OverrideAdjustCardPaymentEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.UpdateTransactionReceiptReservedAmount(System.Decimal,System.Decimal,Interprise.Framework.Customer.DatasetComponent.TransactionReceiptDataset.CustomerTransactionReceiptViewRow)">
	<summary>
	</summary>
	<param name="totalDue"></param>
	<param name="totalDueRate"></param>
	<param name="transactionReceiptRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.UpdateCustomerLoyaltyReservedPoints(System.Int32,System.Int32)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreditCardAuthorizationFacade_AuthorizationFinish(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreditCardAuthorizationFacade_AuthorizationStart(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreditCardAuthorizationFacade_VoidingManuallyStart(System.Object,Interprise.Framework.Base.EventArguments.AttemptOutcomeNotificationEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CreditCardAuthorizationFacade_CapturingManuallyStart(System.Object,Interprise.Framework.Base.EventArguments.AttemptOutcomeNotificationEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.TransactionReceiptFacade.CustomerTransactionReceiptView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.Financials.Customer.TransactionListFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.Financials.Customer.TransactionListFacade.#ctor(Interprise.Framework.Base.DatasetComponent.TransactionDataset)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_transactionListDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.TransactionAuditTrailFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.TransactionAuditTrailFacade.#ctor(Interprise.Framework.Base.DatasetGateway.AuditTrailDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="auditTrailDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SystemManager.PromotionFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.PromotionDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="promotionDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SwipeCardFacade.ExpDate">
	<summary>
 Gets the expiration date in this format: YYMM
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SwipeCardFacade.#ctor">
	<summary>
 Create an Instance of this class
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.StockAllocationFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Customer.StockAllocationFacade.ReservationDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.StockAllocationFacade.ReservationFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.StockAllocationFacade.UpdateCommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.StockAllocationFacade.AutoAllocationInvoker">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.Allocate(System.Data.DataRow,System.String@)">
	<summary>
 Procedure to allocate stock.
 </summary>
	<param name="soToAllocateRow">A <strong>DataRow</strong> that contains the row to be processed</param>
	<param name="errMsg">A <strong>String</strong> that will contain any error messages</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.DeallocateStock(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway,System.Boolean)">
	<summary>
	</summary>
	<param name="stockAutoAllocationDataset"></param>
	<param name="autoReservedOnDeallocation"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AllocateDeallocateStock(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway,System.Boolean,System.Boolean,System.Boolean,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="stockAutoAllocationDataset"></param>
	<param name="allocate"></param>
	<param name="autoReservedOnDeallocation"></param>
	<param name="reprocessRow"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Customer.StockAllocationFacade.AllocateDeallocateStockDelegate">
	<summary>
	</summary>
	<param name="soStockAllocation"></param>
	<param name="currentRow"></param>
	<param name="auto"></param>
	<param name="allocate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.SaveAllocationAndReservation(Interprise.Facade.Customer.StockAllocationFacade)">
	<summary>
	</summary>
	<param name="allocationFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.UpdateCurrentRow(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway,System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="saveAllocateGateway"></param>
	<param name="updatedRow"></param>
	<param name="acceptChanges"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AllocateStock(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway)">
	<summary>
	</summary>
	<param name="stockAutoAllocationDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AllocateStock(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway,System.Boolean,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="stockAutoAllocationDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AllocateStock(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="stockAutoAllocationDataset"></param>
	<param name="reprocessRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.Allocate(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway,System.String@,System.Boolean,System.Boolean)">
	<summary>
 Procedure to allocate stock
 </summary>
	<returns>
		<strong>true</strong> if stock allocation is successful; otherwise
 <strong>false</strong>.
 </returns>
	<param name="stockAutoAllocationDataset">A <strong>Dataset</strong> that represents the CustomerStockAllocationDatasetGateway</param>
	<param name="errMsg">Optional. A <strong>String</strong> that will contain any error messages</param>
	<param name="isManual">Optional. A <strong>Boolean</strong> flag that indicates if the allocation is to be done automatically or manually</param>
	<param name="isIncludeOldAllocation">Optional. A <strong>Boolean</strong> flag that indicates if old allocation should be included in the process</param>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.Deallocate">
	<summary>
 Procedure to deallocate items from a sales order
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.Allocate(Interprise.Facade.Base.StockAllocationFacade,System.String,System.DateTime,System.String,System.Int32,System.String,System.String,System.Int32,System.Decimal,System.String,System.Decimal,System.Decimal,System.Boolean,System.Decimal,System.Decimal,System.String,System.String,System.Boolean)">
	<summary>
 Procedure to allocate stock.
 </summary>
	<param name="facadeStockAllocation">A <strong>Facade</strong> that represents the StockAllocationFacade</param>
	<param name="salesOrderCode">A <strong>String</strong> that represents the current sales order code</param>
	<param name="salesOrderDate">A <strong>Date</strong> that represents the date of the sales order transaction</param>
	<param name="customerCode">A <strong>String</strong> that represents the customer of the order transaction</param>
	<param name="lineNum">An <strong>Integer</strong> that represents the current item line being processed</param>
	<param name="itemCode">A <strong>String</strong> that represents the code of the item to be processed</param>
	<param name="warehouseCode">A <strong>String</strong> that represents the warehouse of the item</param>
	<param name="kitDetailLineNum">An <strong>Integer</strong> that represents the current kit item line being processed</param>
	<param name="quantityOrdered">A <strong>Decimal</strong> that represents the quantity ordered</param>
	<param name="umCode">A <strong>String</strong> that represents the unit of measurement of the current item</param>
	<param name="umQty">A <strong>Decimal</strong> that indicates the number of items in a unit measure</param>
	<param name="salesPrice">A <strong>Decimal</strong> value that represents the item's selling price in home currency</param>
	<param name="isManual">A <strong>Boolean</strong> flag that indicates if the allocation is to be done automatically or manually</param>
	<param name="quantityToAllocate">A <strong>Decimal</strong> value that represents the quantity to be allocated</param>
	<param name="defaultCost">A <strong>Decimal</strong> value that represensts the item's default cost</param>
	<param name="defaultNormalLocation">A <strong>String</strong> that represents the default normal location in the warehouse</param>
	<param name="defaultDropShipLocation">A <strong>String</strong> that represents the drop ship location in the warehouse</param>
	<param name="isDropShip">A <strong>Boolean</strong> flag that indicates if the item is to be drop shipped</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AutoAllocateWhosWaitingFor(System.String@)">
	<summary>
 Procedure to auto allocate items to pending sales orders
 </summary>
	<param name="errMsg">By Reference. A <strong>String</strong> that will contain any error messages</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AutoAllocate(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway,System.Boolean)">
	<summary>
 Procedure to auto allocate items to sales orders
 </summary>
	<param name="stockAutoAllocationDataset">A <strong>Dataset</strong> that represents the StockAllocationDataset</param>
	<param name="isIncludeOldAllocation">Optional. A <strong>Boolean</strong> flag that indicates if old allocation should be included in the process</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AutoReserveSO(System.Data.DataRow,Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway)">
	<summary>
 Procedure to auto reserved sales order
 </summary>
	<param name="tobeReservedRow">Row to reserve</param>
	<remarks>This will be called when Auto Allocate is executed</remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.Deallocate(System.Data.DataView,Interprise.Framework.Base.DatasetGateway.StockAllocationDatasetGateway,Interprise.Facade.Base.StockAllocationFacade,System.Boolean)">
	<summary>
 Procedure to deallocate items from a sales order
 </summary>
	<param name="soToAllocateView">A <strong>DataView</strong> that represents the sales order to be processed</param>
	<param name="datasetStockAllocation">A <strong>Dataset</strong> taht represents the StockAllocationDataset</param>
	<param name="facadeStockAllocation">A <strong>Facade</strong> that represents the StockAllocationFacade</param>
	<param name="isIncludeOldAllocation">Optional. A <strong>Boolean</strong> flag that indicates if old allocation should be included in the process</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.Deallocate(Interprise.Facade.Base.StockAllocationFacade,System.String,System.DateTime,System.String,System.Int32,System.String,System.Int32,System.Decimal,System.String,System.Decimal)">
	<summary>
 Procedure to deallocate items from a sales order
 </summary>
	<param name="facadeStockAllocation">A <strong>Facade</strong> that represents the StockAllocationFacade</param>
	<param name="salesOrderCode">A <strong>String</strong> that represents the current sales order code</param>
	<param name="salesOrderDate">A <strong>Date</strong> that represents the date of the sales order transaction</param>
	<param name="customerCode">A <strong>String</strong> that represents the customer of the order transaction</param>
	<param name="lineNum">An <strong>Integer</strong> that represents the current item line being processed</param>
	<param name="itemCode">A <strong>String</strong> that represents the code of the item to be processed</param>
	<param name="kitDetailLineNum">An <strong>Integer</strong> that represents the current kit item line being processed</param>
	<param name="allocated">A <strong>Decimal</strong> that represents the value to be deallocated</param>
	<param name="umCode">A <strong>String</strong> that represents the unit of measurement of the current item</param>
	<param name="umQty">A <strong>Decimal</strong> that indicates the number of items in a unit measure</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.FormulateCommaSeperatedValueList">
	<summary>
 Generates a list of sales order list to be processed
 </summary>
	<returns>String Array</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.FormulateCommaSeperatedValueListPickingTicket">
	<summary>
 Generates a list of sales order list to be processed
 </summary>
	<returns>String Array</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.FormulateCommaSeperatedWarehouseValueList">
	<summary>
 Generates a list of warehouse to be processed
 </summary>
	<returns>String Array</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.FormulateCommaSeparatedItemValueList">
	<summary>
 Generates a list of items to be processed
 </summary>
	<returns>String Array</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.GetFreeStock(System.String,System.String)">
	<summary>
 Procedure to get the itemcode/warehouse free stock
 </summary>
	<param name="itemCode">A <strong>String</strong> that represents the item code to be processed</param>
	<param name="warehouseCode">A <strong>String</strong> that represents the warehouse code to be processed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.InitializeAllocation(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway,System.Data.DataView@,Interprise.Framework.Base.DatasetGateway.StockAllocationDatasetGateway@,Interprise.Facade.Base.StockAllocationFacade@)">
	<summary>
 Initializes allocation of stocks
 </summary>
	<param name="stockAutoAllocationDataset">A <strong>Dataset</strong> that represents the CustomerStockAllocationDataset</param>
	<param name="soToAllocateView">A <strong>DataView</strong> that conatins the sales order row to be processed</param>
	<param name="datasetStockAllocation">A <strong>Dataset</strong> that represents the StockAllocationDatasetGateway</param>
	<param name="facadeStockAllocation">A <strong>Facade</strong> that represenst the StockAllocationFacade</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="stockAutoAllocationDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.UpdateQuantityAllocated(System.Data.DataRowView,System.Decimal,System.Boolean)">
	<summary>
 Updates the allocated values of previously allocated sales orders
 </summary>
	<param name="rowAllocation">A <strong>DataRowView</strong> that represenst the sales order row to be processed</param>
	<param name="quantityAllocated">A <strong>Decimal</strong> value that represents the new allocation quantity</param>
	<param name="isManual">A <strong>Boolean</strong> flag that indicates if the allocation is to be done automatically or manually</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.ReserveStock(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.ReserveStock(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.Validate(System.String[])">
	<summary>
 Validates user data input
 </summary>
	<param name="tableNames">A jagged array of string containing the list of the tablenames to be validated</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AddKitComponentAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.CustomerStockAllocationDataset.CustomerSalesOrderKitToAllocateDataTable,System.Int32)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="componentChanges"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AddOrderDetailAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.CustomerStockAllocationDataset.CustomerSalesOrderToAllocateDataTable)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="detailChanges"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AddStockAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.CustomerStockAllocationDataset.CustomerSalesOrderToAllocateRow)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="detailRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.AddStockAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.CustomerStockAllocationDataset.CustomerSalesOrderKitToAllocateRow)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="componentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.PopulateStockAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.UpdateOrderDetailProcessID(System.String)">
	<summary>
	</summary>
	<param name="processID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.StockAllocationFacade.SetAutoAllocationInvoker(System.Windows.Forms.Form)">
	<summary>
	</summary>
	<param name="AutoAllocationInvoker"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SOStockAllocationFacade.CurrentTransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SOStockAllocationFacade.CustomerInvoiceDetail">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SOStockAllocationFacade.CustomerInvoiceItemKitDetail">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Interprise.Facade.Customer.SOStockAllocationFacade.m_customerSalesOrderDetail">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:Interprise.Facade.Customer.SOStockAllocationFacade.m_customerItemKitDetail">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.Allocate">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.Allocate(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.Allocate(System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<param name="focusedColumn"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.FindComponentFreeStock(System.Data.DataRow,Interprise.Framework.Customer.Shared.Structure.KitComponentStockInfo[])">
	<summary>
	</summary>
	<param name="component"></param>
	<param name="componentsFreeStocks"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.FindComponentFreeStock(System.Data.DataRow,Interprise.Framework.Customer.Shared.Structure.ComponentFreeStock[])">
	<summary>
	</summary>
	<param name="component"></param>
	<param name="componentsFreeStocks"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetFreeStock(System.String,System.String)">
	<summary>
 Returns the free stock coming from the normal location.
 </summary>
	<param name="itemCode"></param>
	<param name="warehouseCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetFreeStock(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="warehouseCode"></param>
	<param name="stockType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetFreeStock(System.String,System.String,Interprise.Framework.Base.Shared.Enum.ZoneType)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="warehouseCode"></param>
	<param name="stockType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetProposeQuantityToAllocate(System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="propose"></param>
	<param name="unitMeasureQty"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetProposeQuantityToAllocate(System.Data.DataRow[],System.Decimal@,System.Decimal,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="components"></param>
	<param name="kitQuantityToAllocateBaseUM"></param>
	<param name="warehouseCode"></param>
	<param name="allocateFromQuantityOrder"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetProposeQuantityToAllocate(System.String,System.String,System.Int32,System.Boolean,System.String,System.Decimal,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="lineNum"></param>
	<param name="warehouseCode"></param>
	<param name="quantityOrdered"></param>
	<param name="allocateFromQuantityOrder"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetKitQuantityOrderedBaseUM(System.Decimal,System.String,Interprise.Framework.Customer.Shared.Structure.ComponentFreeStock[],System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="kitQuantityToAllocateBaseUM"></param>
	<param name="componentsFreeStocks"></param>
	<param name="components"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetLowestComponentStock(System.Decimal,System.String,Interprise.Framework.Customer.Shared.Structure.ComponentFreeStock[],System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="kitQuantityToAllocateBaseUM"></param>
	<param name="warehouseCode"></param>
	<param name="componentsFreeStocks"></param>
	<param name="components"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetProposeQuantityToAllocate(System.String,System.String,System.Int32,System.Boolean,System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="lineNum"></param>
	<param name="warehouseCode"></param>
	<param name="unitMeasureQuantity"></param>
	<param name="quantityToAllocateBaseUM"></param>
	<param name="allocateFromQuantityOrder"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetTotalAllocatedSameItem(System.String,System.String,System.String,System.Int32)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="lineNum"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetTotalOriginalAllocatedSameItem(System.String,System.String,System.String,System.Int32)">
	<summary>
	</summary>
	<param name="itemCode"></param>
	<param name="lineNum"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.GetTotalOriginalAllocated(System.Int32)">
	<summary>
	</summary>
	<param name="lineNum"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.UpdateKitComponentQuantityAllocated(System.Data.DataRow[],System.Decimal,System.Decimal,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="components"></param>
	<param name="kitQuantityToAllocateBaseUM"></param>
	<param name="warehouseCode"></param>
	<param name="allocateFromQuantityOrder"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.UpdateKitQuantityAllocated(System.Data.DataRow,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<param name="kitQuantityToAllocateBaseUM"></param>
	<param name="allocateFromQuantityOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.UpdateNoneStockItemQuantityAllocated(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.UpdateStockQuantityAllocated(System.Data.DataRow,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<param name="quantityToAllocateBaseUM"></param>
	<param name="allocateFromQuantityOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SOStockAllocationFacade.ValidateKitComponentEnoughStock(System.Decimal,System.String,Interprise.Framework.Customer.Shared.Structure.ComponentFreeStock[],System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="kitQuantityToAllocateBaseUM"></param>
	<param name="componentsFreeStocks"></param>
	<param name="components"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ShipToFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
	<value>
 The instance of Interprise.Framework.Customer.DatasetGateway.ShipToDatasetGateway
 class.
 </value>
</member><member name="M:Interprise.Facade.Customer.ShipToFacade.AssignGLAccount(System.Data.DataRow,System.Data.DataRowView)">
	<summary>Procedure to assign General Ledger account to shipto detail</summary>
	<example>
    The following codes shows how to implement AssignGLAccount method
    <code lang="VB" title="Assigning GLAccount in a shiptocustomer" description="This code shows how to assign a GLAccount in a shiptocustomer">
 AssignGLAccount(rowAccountCode, rowClassTemplate)
    </code>
		<code lang="CS" title="Assigning GLAccount in a shiptocustomer" description="This code shows how to assign a GLAccount in a shiptocustomer">
 void[,] AssignGLAccount = new void[rowAccountCode + 1, rowClassTemplate + 1];
    </code>
	</example>
	<param name="rowAccountCode">A <strong>DataRow</strong> that contains the Account row</param>
	<param name="rowClassTemplate">A <strong>DataRowView</strong> that will contain the values from rowAccountCode</param>
</member><member name="M:Interprise.Facade.Customer.ShipToFacade.AssignGLClassTemplate(System.String)">
	<summary>
 Method that assigns GL Class Template to the ShipTo record
 </summary>
	<example>
    The following codes shows how to implement AssignGLClassTemplate method
    <code lang="VB" title="Assigning GLClassTemplate in a shiptocustomer" description="This code shows how to assign a GLClassTemplate in a shiptocustomer">
 AssignGLClassTemplate("My Class Code")
    </code>
		<code lang="CS" title="Assigning GLClassTemplate in a shiptocustomer" description="This code shows how to assign a GLClassTemplate in a shiptocustomer">
 void[] AssignGLClassTemplate = new void["My Class Code" + 1];
    </code>
	</example>
	<param name="classCode">A <strong>String</strong> that represents the code of the GL class template to be assigned</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ShipToFacade.AssignPostalCode(System.Data.DataRow)">
	<summary>Method that assigns postal code to a ship to record</summary>
	<example>
    The following codes shows how to implement AssignPostalCode method
    <code lang="VB" title="Assigning PostalCode to a shiptoCustomer" description="This code shows how to assign a Postal Code in a shiptoCustomer">
 AssignPostalCode(sourceRow)
    </code>
		<code lang="CS" title="Assigning postal code to a shiptocustomer" description="This code shows how to assign a Postal Code in a shiptoCustomer">
 void[] AssignPostalCode = new void[sourceRow + 1];
    </code>
	</example>
	<param name="sourceRow">A <strong>DataRow</strong> that contains the row to be assigned to the sales rep</param>
</member><member name="M:Interprise.Facade.Customer.ShipToFacade.AssignShipToCountry(System.Data.DataRow)">
	<summary>Method that assigns country to a ship to record</summary>
	<example>
    The following codes shows how to implement AssignShipToCountry method
    <code lang="VB" title="Assigning country in a shiptocustomer" description="This code shows how to assign a country in a shiptocustomer">
 AssignShipToCountry(countryRow)
    </code>
		<code lang="CS" title="Assigning country in a shiptoCustomer" description="This code shows how to assign a country in a shiptocustomer">
 void[] AssignShipToCountry = New void[countryRow + 1];
    </code>
	</example>
	<param name="countryRow">A <strong>DataRow</strong> that contains the row to be assigned to the sales rep</param>
</member><member name="M:Interprise.Facade.Customer.ShipToFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.ShipToDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="p_shipToDataset">ShipTo Dataset</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ShipToFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn in a row.
 </summary>
	<param name="row">A <strong>System.Data.DataRow</strong> that contains the row to be validated</param>
	<param name="columnName">A <strong>String</strong> description of the DataColumn to be validated.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="P:Interprise.Facade.Customer.Shared.ImportBase.ExemptedColumns">
	<summary>
 Define columns that wont be validated nor included in the import template
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.Shared.ImportBase.GatewayBudgetForecastDataset">
	<summary>
 Main dataset of the import process. Contains all the tables that are used including source, target, errors, references, and temp tables.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesSummaryFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesSummaryFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.SalesSummaryDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="salesSummaryDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesSummaryFacade.CreateDataSource">
	<summary>
 Creates table and assigns values to be used as a datasource
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesRepFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
	<value>
 The instance of
 Interprise.Famework.Customer.DatasetGateway.SalesRepDatasetGateway class.
 </value>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.SalesRepDatasetGateway)">
	<summary>
 Create an instance of this class
 </summary>
	<param name="p_salesRepDataset">Sales Rep Dataset</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.AddSalesRep(System.String,System.String)">
	<summary>
 Method that adds sales rep data to the dataset
 </summary>
	<remarks>
 Adds a new sales rep record and assigning default values based on the sales rep
 class template
 </remarks>
	<example>
		<div style="MARGIN-LEFT: 2em">
			<para><font size="2"><font size="2">The following codes shows how to implement
        the <font size="2">AddSalesRep</font> method</font></font></para>
		</div>
		<code lang="CS" inline="False">
		</code>
		<code lang="VB" title="Create a Sales Rep Record" description="This method shows you an example on how to create Sales Rep record">
 Dim instance As SalesRepFacade
 Dim salesRepName As String
 Dim classCode As String
 
 instance.AddSalesRep("Sales Pros", "DEFAULT")
    </code>
		<code lang="CS" title="Create a Sales Rep Record" description="This method shows you an example on how to create Sales Rep record">
 SalesRepFacade instance;
 string salesRepName;
 string classCode;
 
 instance.AddSalesRep("Sales Pros", "DEFAULT");
    </code>
	</example>
	<param name="salesRepName">A <strong>String</strong> that rerpresents the sales rep name</param>
	<param name="classCode">A <strong>String</strong> that contains the code of the class template to be applied to the sales rep</param>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.AssignCategory(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Assign category items for the sales rep
 </summary>
	<example>
    The following codes shows how to implement AssignCategory method
    <code lang="VB" title="Assigning Category to a Sales Rep" description="This code shows how to assign a Category commision based in percent in a Sales Rep">
 AssignCategory(rowCategory, rowCategoryCommission)
    </code>
		<code lang="CS" title="Assigning postal code to a Sales Rep" description="This code shows how to assign a Category commision based in percent in a Sales Rep">
 void[] AssignCategory = new void[rowCategory + 1, rowCategoryCommission + 1];
    </code>
	</example>
	<param name="rowCategory">A <strong>DataRow</strong> that contains the row to be added as sales rep category items</param>
	<param name="rowCategoryCommission">A <strong>DataRowView</strong> that will contain the rowCategory values</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.AssignSalesRepCountry(System.Data.DataRow)">
	<summary>Procedure to assign a country to a sales rep entity</summary>
	<example>
    The following codes shows how to implement AssignSalesRepCountry method 
    <code lang="VB" title="Assigning country in a customer" description="This code shows how to assign a country in a Sales Rep">
 Dim m_salesRepFacade As SalesRepFacade
 Dim countryRow As DataRow
 
 m_salesRepFacade.AssignSalesRepCountry(countryRow)
    </code>
		<code lang="CS" title="Assigning country in a Sales Rep" description="This code shows how to assign a country in a customer">
 SalesRepFacade m_salesRepFacade;
 DataRow countryRow;
 
 m_salesRepFacade.AssignSalesRepCountry(countryRow);
    </code>
	</example>
	<param name="countryRow">A <strong>DataRow</strong> that contains the row to be assigned to the sales rep</param>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.AssignPostalCode(System.Data.DataRow)">
	<summary>Method that assigns a postal code to a sales rep entity</summary>
	<example>
    The following codes shows how to implement AssignPostalCode method
    <code lang="VB" title="Assigning PostalCode to a Sales Rep" description="This code shows how to assign a Postal Code in a Sales Rep">
 AssignPostalCode(postalRow)
    </code>
		<code lang="CS" title="Assigning postal code to a Sales Rep" description="This code shows how to assign a Postal Code in a Sales Rep">
 void[] AssignPostalCode = new void[postalRow + 1];
    </code>
	</example>
	<param name="postalRow">A <strong>DataRow</strong> that contains the row to be assigned to the sales rep</param>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field
 </summary>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Customer, ShipTo, SalesRep</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn in a row.
 </summary>
	<param name="row">A <strong>System.Data.DataRow</strong> that contains the row to be validated</param>
	<param name="columnName">A <strong>String</strong> description of the DataColumn to be validated.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.CreateBatchCommission(System.Data.DataRow)">
	<summary>
 Method that creates batch commission
 </summary>
	<param name="salesRepInvoices">A <strong>DataRow</strong> that contains sales rep commission on invoices</param>
	<remarks>Assigns the commission values on invoices to the SalesRepCommissionInvoices datatable</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.CreateSalesRepSupplier">
	<summary>Creates the corresponding supplier for the sales rep.</summary>
	<remarks>
 Supplier can be optionally created for the sales rep if the company decides to
 create a bill in order to make payment.
 </remarks>
</member><member name="M:Interprise.Facade.Customer.SalesRepFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<returns>
		<strong>true</strong> if saving succeeded; otherwise
 <strong>false</strong>.
 </returns>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderSorterFacade.SortOrders(System.Data.DataRow[])">
	<summary>
 Sorts orders depending sales order transaction
 </summary>
	<param name="rowSO">A <strong>DataRow Array</strong> that contains the rows to be sorted</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Customer.SalesOrderFacade.ReceiptChanged">
	<summary>
 Occurs when the total amount of payments/receipts on sales order or invoice
 transaction is changed.
 </summary>
</member><member name="E:Interprise.Facade.Customer.SalesOrderFacade.POCodeInOtherSOFound">
	<summary>
 Occurs when another sales order for the same customer has the same PO
 code.
 </summary>
</member><member name="E:Interprise.Facade.Customer.SalesOrderFacade.CouponDiscountChanged">
	<summary>
 Occurs when the coupon discount type is changed (Percent/Amount).
 </summary>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.TotalDue">
	<summary>
 Returns a <strong>Decimal</strong> containing total amount less settlement discount.
 </summary>
	<value>Decimal</value>
	<returns></returns>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.CurrencyCode">
	<summary>
 Returns the currency code of the transaction.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value>Interprise.Framework.Base.Shared.Enum.BusinessRuleType</value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.CurrentTransactionType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.DefaultShipToWarehouse">
	<summary>
 Returns a <strong>String</strong> containing the default warehouse where the items will be picked.
 It gets the warehouse specified in the header of the transaction. If none was specified there, 
 it gets the warehouse specified in the customer ship to record.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.DiscountPercent">
	<summary>
 Returns a <strong>Decimal</strong> containing the discount percent of the payment term assigned to the transaction.
 </summary>
	<value>Decimal</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.DiscountType">
	<summary>
 Returns a <strong>String</strong> containing the discount type of the payment term assigned to the transaction.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks>
 This returns any of the following string values:
 <strong>Percent</strong> - The discount is calculated according to percent discount.
 <strong>Amount</strong> - The discount is the specified amount.
 </remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.ExchangeRate">
	<summary>
 Returns a <strong>Decimal</strong> containing the exchange rate when the transaction was made.
 </summary>
	<value>Decimal</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.HeaderRow">
	<summary>
 Returns a <strong>Datarow</strong> containing the header of the transaction.
 </summary>
	<value>System.Data.DataRow</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsAllowAction(Interprise.Framework.Customer.Shared.Enum.SOPAction,System.String)">
	<summary>
 Returns a <strong>Boolean</strong> indicating whether an SOPAction specified is allowed or not in the current stage of sales order processing.
 </summary>
	<param name="action">One of the SOPAction values.</param>
	<param name="warehouseCode">The warehouse code in the workflow.</param>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsCouponIncludesFreeShipping">
	<summary>
 Indicates that the coupon applied to sales order or invoice includes free
 delivery charge.
 </summary>
	<value>
		<strong>true</strong> if coupon includes free delivery charge; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.OnHold">
	<summary>
 Gets or sets a <strong>Boolean</strong> value indicating whether the sales order is on hold is not.
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.Receipt">
	<summary>
 Gets or sets the amount deducted against the total amount due on sales order or
 invoice.
 </summary>
	<value>
 The amount deducted against the total amount due on sales order or
 invoice.
 </value>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.RelatedTables(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Returns a <strong>String</strong> array containing the names of the tables used by the current transaction in reading and saving data.
 </summary>
	<param name="transactionType">Possible values are Interprise.Framework.Base.Shared.Enum.TransactionType.Quote, Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder, Interprise.Framework.Base.Shared.Enum.TransactionType.BackOrder and Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</param>
	<value>String array</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.Balance">
	<summary>
 Returns a <Strong>Decimal</Strong> containing the base outstanding balance of the transaction.
 </summary>
	<value>Decimal</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.OriginalTotalRate">
	<summary>
 The original total before the amounts has been changed.
 </summary>
	<value>Decimal</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.TotalRate">
	<summary>
 Returns a <Strong>Decimal</Strong> containing the total base amount of the transaction.
 </summary>
	<value>Decimal</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.SourceDocumentCode">
	<summary>
 Returns a <strong>String</strong> containing the source document of the transaction.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks>A transaction has source document if it is created by converting one transaction to another. 
 For example, if sales quote is converted to order the source document of the order is sales quote.</remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.SourceDocumentType">
	<summary>
 Returns a <strong>String</strong> containing the type of the source document.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.PaymentTermCode">
	<summary>Gets the payment term code of sales order or invoice transaction.</summary>
	<value>The payment term code of sales order or invoice transaction.</value>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsFreightOverwrite">
	<summary>Indicates that freight charge is overwritten.</summary>
	<value>
		<strong>true</strong> if freight charge is overwritten; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsCreateDropShipOrder">
	<summary>Indicates that a drop ship order can be created for the sales order.</summary>
	<value>
		<strong>true</strong> if the sales order has drop ship item; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsCreatePurchaseOrder">
	<summary>Indicates that a purchase order can be created for the sales order.</summary>
	<value>
		<strong>true</strong> if at least one line item is not drop ship item; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.ContactCode">
	<summary>
 Returns a <strong>String</strong> containing the contact code of the transaction.
 It gets the contactcode specified in the header of the transaction. 
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsHasErrorOnValidate">
	<summary>
 Flag to mark, that the validate do have problem with the columns required.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks> added by pete.a 06/08/2009

</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsHazardousItem">
	<summary>
 Flag to mark, that the validate do have problem with the columns required.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks> added by pete.a 06/08/2009

</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.TxtMessageErrorOnValidate">
	<summary>
 To hold the string messages of the error on validate method.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>added by pete.a 06/08/2009

</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.ApplyCoupon">
	<summary>
  Returns True if the transaction has a coupon discount applied.
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.CouponItems">
	<summary>
 Store back order items with applied coupon.
 </summary>
	<value>String()()</value>
	<returns>items with applied coupon</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsPickUp">
	<summary>
 IsPickUp
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Will Call change &gt; IsPickupProperty</remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.IsAutoCreateDropShipPOForWoohaaItems">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderFacade.TotalSalesPriceRate">
	<summary>
 Total Sales Price of Kit
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway)">
	<summary>
 Initializes a new instance of the <strong>SalesOrderFacade</strong> class.
 </summary>
	<param name="salesOrderDataset">The dataset gateway of type <strong>SalesOrderDatasetGateway</strong></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AddSalesOrder(Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow,System.String,System.String,Interprise.Framework.Base.Shared.Delegates.ShowMessage,System.String@,System.String,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Creates a new transaction header. The type of transaction created is based on the transaction type specified.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddSalesOrder</em></strong> method.</para>
		<code lang="VB" title="AddSalesOrder" description="Creates a new sales order transaction.">
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 Dim shipToRow As DataRow
 Dim contactCode As String = "CCTC-000001"
 Dim contactFullName As String = "Henry McDawd"
 Dim showCreditHoldWarning As ShowMessage
 Dim msg As String 'By-Reference variable
 'Optional variables
 Dim opportunityCode As String
 Dim opportunityName As String
 Dim waveCode As String
 Dim waveName As String
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AddSalesOrder(transactionType, shipToRow, contactCode, contactFullName, showCreditHoldWarning, msg, opportunityCode, opportunityName, waveCode, waveName)
    </code>
		<code lang="CS" title="AddSalesOrder" description="Creates a new sales order transaction.">
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 DataRow shipToRow;
 string contactCode = "CCTC-000001";
 string contactFullName = "Henry McDawd";
 ShowMessage showCreditHoldWarning;
 string msg; //By-Reference variable
 //
 //Optional variables
 string opportunityCode;
 string opportunityName;
 string waveCode;
 string waveName;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AddSalesOrder(transactionType, shipToRow, contactCode, contactFullName, showCreditHoldWarning, msg, opportunityCode, opportunityName, waveCode, waveName);
    </code>
	</example>
	<param name="transactionType">Possible values are Interprise.Framework.Base.Shared.Enum.TransactionType.Quote, Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder and Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</param>
	<param name="shipToRow">An instance of <strong>System.Data.DataRow</strong> containing the customer ship to information.</param>
	<param name="contactCode">A <strong>String</strong> containing the default contact of the customer.</param>
	<param name="contactFullName">A <strong>String</strong> containing the default contact full name.</param>
	<param name="showCreditHoldWarning">A <strong>Interprise.Framework.Base.Shared.Delegates.ShowMessage</strong> delegate containing the address of a function that displays the credit hold warning message.</param>
	<param name="msg">A <strong>String</strong> containing the error message.</param>
	<param name="opportunityCode">Optional. A <strong>String</strong> containing the opportunity code linked to the sales quote transaction.</param>
	<param name="opportunityName">Optional. A <strong>String</strong> containing the opportunity name.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AddWorkflowItem(System.String,System.String)">
	<summary>
 Creates a new workflow item for the specified warehouse.
 </summary>
	<param name="warehouseCode">A <strong>String</strong> containing the warehouse code.</param>
	<param name="warehouseDescription">A <strong>String</strong> containing the warehouse description.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AllocateStock(System.String,Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesOrderDetailViewDataTable,System.Boolean)">
	<summary>
 Allocates stock for the ordered items of the sales order transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AllocateStock</em></strong> method.</para>
		<code lang="VB" title="AllocateStock" description="Allocates all the line items included in the order transaction from the inventory.">
 Dim salesOrderCode As String = "SO-000001"
 Dim modifiedLineItems As CustomerSalesOrderDetailViewDataTable
 Dim isRefresh As Boolean = True
 
 Dim salesOrderFacade As Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AllocateStock(salesOrderCode, modifiedLineItems, isRefresh)
    </code>
		<code lang="CS" title="AllocateStock" description="Allocates all the line items included in the order transaction from the inventory.">
 string salesOrderCode = "SO-000001";
 CustomerSalesOrderDetailViewDataTable modifiedLineItems;
 bool isRefresh = true;
 Interprise.Facade.Customer.SalesOrderFacade[] salesOrderFacade;
 new SalesOrderDatasetGateway();
 UnknownsalesOrderFacade.AllocateStock(salesOrderCode, modifiedLineItems, isRefresh);
    </code>
	</example>
	<param name="salesOrderCode">A <strong>String</strong> containing document code of the sales order.</param>
	<param name="modifiedLineItems">A <strong>Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway.CustomerSalesOrderDetailViewDataTable</strong> containing the ordered items. 
 This data table contains the items that were recently added or modified.</param>
	<param name="isRefresh">Optional. A <strong>Boolean</strong> indicating to read the item lines to get the server side changes.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.DeallocateStock">
	<summary>
 Procedure for deallocating stock from deleted item lines and voided sales order.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>DeallocateStock</em></strong> method.</para>
		<code lang="VB" title="DeallocateStock" description="Deallocate stock quantities from the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.DeallocateStock()
    </code>
		<code lang="CS" title="DeallocateStock" description="Deallocate stock quantities from the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.DeallocateStock();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ApplyCreditMemo(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway@)">
	<summary>
 Update CustomerInvoiceView ProcessCreditMemo to "Apply"
 </summary>
	<param name="tempInvoiceDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignAmountPaid(System.Decimal,System.Decimal)">
	<summary>
 Assigns the total amount paid if the payment is made in the  sales order form.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignAmountPaid</em></strong> method.
    <code lang="VB" title="AssignAmountPaid" description="Assigns the amount of the receipt to be applied/reserved to the transaction.">
 Dim m_salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDataset)
 m_salesOrderFacade.AssignAmountPaid(100, 100)
    </code>
		<code lang="CS" title="AssignAmountPaid" description="Assigns the amount of the receipt to be applied/reserved to the transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade m_salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDataset());
 m_salesOrderFacade.AssignAmountPaid(100, 100);
    </code>
	</example>
	<param name="totalPaid">A <strong>Decimal</strong> containing the total amount paid in home currency.</param>
	<param name="totalPaidRate">A <strong>Decimal</strong> containing the total amount paid in customer's currency.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignBillTo(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assigns the billing information of the transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignBillTo</em></strong> method.</para>
		<code lang="VB" title="AssignBillTo" description="Assigns the customer row to the sales order transation.">
 Dim customerRow As DataRow
 Dim salesOrder As DataRow
 
 Dim salesOrderFacade As New Interprise.facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway) 
 salesOrderFacade.AssignBillTo(customerRow, salesOrder)
    </code>
		<code lang="CS" title="AssignBillTo" description="Assigns the customer row to the sales order transation.">
 DataRow customerRow;
 DataRow salesOrder;
 Interprise.facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignBillTo(customerRow, salesOrder);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>customerRow</em> can't be nothing</para>
		<para>Parameter <em>rowSalesOrder</em> can't be nothing</para>
	</requirements>
	<param name="customerRow">A <strong>DataRow</strong> containing the billing information of the customer.</param>
	<param name="salesOrder">A <strong>DataRow</strong> containing the sales order header in which the billing information is being assigned.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignCoupon(System.Boolean)">
	<summary>
 Assigns the coupon the customer wishes to apply to the sales order transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignCoupon</em></strong> method.</para>
		<code lang="VB" title="AssignCoupon" description="Applies the values of the coupon row to the sales order transaction">
 Dim computeTotal As Boolean
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway) 
 salesOrderFacade.AssignCoupon(rowCoupon, rowSalesOrder, computeTotal)
    </code>
		<code lang="CS" title="AssignCoupon" description="Applies the values of the coupon row to the sales order transaction">
 Bool computeTotal;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignCoupon(computeTotal);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>computeTotal</em> can't be nothing</para>
	</requirements>
	<param name="computeTotal">A <strong>preference</strong> whether or not to compute the totals.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignCoupon(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assigns the coupon the customer wishes to apply to the sales order transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignCoupon</em></strong> method.</para>
		<code lang="VB" title="AssignCoupon" description="Applies the values of the coupon row to the sales order transaction">
 Dim rowCoupon As DataRow
 Dim rowSalesOrder As DataRow
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway) 
 salesOrderFacade.AssignCoupon(rowCoupon, rowSalesOrder)
    </code>
		<code lang="CS" title="AssignCoupon" description="Applies the values of the coupon row to the sales order transaction">
 DataRow rowCoupon;
 DataRow rowSalesOrder;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignCoupon(rowCoupon, rowSalesOrder);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>rowCoupon</em> can't be nothing</para>
		<para>Parameter <em>rowSalesOrder</em> can't be nothing</para>
	</requirements>
	<param name="rowCoupon">A <strong>DataRow</strong> containing the coupon information.</param>
	<param name="rowSalesOrder">A <strong>DataRow</strong> containing the sales order header in which the coupon information is assigned.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.IsAllowedItem(System.String)">
	<summary>
	</summary>
	<param name="itemType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetCouponInfo">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetItemsCouponProRateInfo">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetCouponSubTotal">
	<summary>
 Get's the sub total rate of the order
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeTransactionDetailCouponDiscount(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="rowSalesOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeTransactionDetailCouponDiscount(System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="rowSalesOrder"></param>
	<param name="isBackOrderOrRMA"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CalculateCouponSODetailExtPrice(System.String,System.Decimal,System.Decimal,Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesOrderDetailViewRow)">
	<summary>
	</summary>
	<param name="netPriceRate"></param>
	<param name="netPrice"></param>
	<param name="rowSalesOrderDetail"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.SetAllCouponValuesToDBNullValue">
	<summary>
 Sets all coupon values to DBNull value.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignCurrency(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the customer currency and exchange rate on the day the transaction was created. It recalculates all the base amounts base on the new exchange rate.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignCurrency</em></strong> method.
    <code lang="VB" title="AssignCurrency" description="Recalculates all the sales order transaction values by assigning the currency information from the row passed.">
 Dim rowCurrency As DataRow
 Dim transaction As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway) 
 salesOrderFacade.AssignCurrency(rowCurrency, transaction)
    </code>
		<code lang="CS" title="AssignCurrency" description="Recalculates all the sales order transaction values by assigning the currency information from the row passed.">
 DataRow rowCurrency;
 TransactionType transaction = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignCurrency(rowCurrency, transaction);
    </code>
	</example>
	<requirements>Parameter <em>rowCurrency</em> can't be nothing</requirements>
	<remarks>
 The value for the rowCurrency can be obtained by getting the Customer's
 currencyCode then retreiving that specific code's row information from the
 SystemCurrency table.
 </remarks>
	<param name="rowCurrency">A <strong>DataRow</strong> containing the currency information.</param>
	<param name="transaction">Possible values are Interprise.Framework.Base.Shared.Enum.TransactionType.Quote, Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder, Interprise.Framework.Base.Shared.Enum.TransactionType.BackOrder and Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignInventoryItem(System.Data.DataRow,System.Data.DataRowView@,System.String@)">
	<summary>
 Procedure to assign the item information defaults.
 </summary>
	<requirements>
		<para>FieldNames of CustomerInvoices and CustomerInvoice tables must be the same,
    because this function is shared in Order and Invoice module</para>
		<para>Parameter <em>itemRow</em> (source row) can't be nothing.</para>
		<para>Paramater <em>lineItemRow</em> (destination row) can't be nothing</para>
	</requirements>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignInventoryItem</em></strong> method.</para>
		<code lang="VB" title="AssignInventoryItem" description="Assigns the item's information to the order transaction line item.">
 Dim itemRow As DataRow
 Dim lineItemRow As DataRowView
 Dim errMsg As String
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignInventoryItem(itemRow, lineItemRow, errMsg)
    </code>
		<code lang="CS" title="AssignInventoryItem" description="Assigns the item's information to the order transaction line item.">
 DataRow itemRow;
 DataRowView lineItemRow;
 string errMsg;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignInventoryItem(itemRow, lineItemRow, errMsg);
    </code>
	</example>
	<param name="itemRow">A <strong>DataRow</strong> containing the item information to be added</param>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line in which the item is going to be assigned.</param>
	<param name="errMsg">A <strong>String</strong> containing the error message.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignBundle(System.Data.DataRowView,System.Data.DataRow,System.Decimal,System.String,System.String,System.String,System.Int32@,System.Decimal,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="salesOrderLineItemRow"></param>
	<param name="kitItemRow"></param>
	<param name="quantity"></param>
	<param name="warehouseCode"></param>
	<param name="kitPriceType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignItemKit(System.Data.DataRow,Interprise.Framework.Base.DatasetComponent.ItemKitDataset.KitConfiguratorRow[],System.Data.DataRowView,System.String,System.Decimal,System.Decimal,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@,System.String)">
	<summary>
 Procedure to assign the selected Item Kit
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignItemKit</em></strong> method.</para>
		<code lang="VB" title="AssignItemKit" description="Adds the selected kit along with its components to the transaction item lines.">
 Dim itemKitRow As DataRow
 Dim kitItemRows() As Framework.Base.DatasetGateway.ItemKitDatasetGateway.KitConfiguratorRow
 Dim lineItemRow As DataRowView
 Dim pricingType As String = "Item Price"
 Dim quantity As Decimal = 10
 Dim salesPriceRate As Decimal = 100
 Dim transactionType As Framework.Base.Shared.Enum.TransactionType = Framework.Base.Shared.TransactionType.SalesOrder
 Dim errMsg As String
 Dim warehouseCode As String = "MAIN"
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignItemKit(itemKitRow, kitItemRows, lineItemRow, pricingType, quantity, salesPriceRate, transactionType, transactionType, errMsg, warehouseCode)
    </code>
		<code lang="CS" title="AssignItemKit" description="Adds the selected kit along with its components to the transaction item lines.">
 DataRow itemKitRow;
 Framework.Base.DatasetGateway.ItemKitDatasetGateway.KitConfiguratorRow[] kitItemRows;
 DataRowView lineItemRow;
 string pricingType = "Item Price";
 Decimal quantity = 10;
 Decimal salesPriceRate = 100;
 Framework.Base.Shared.Enum.TransactionType transactionType = Framework.Base.Shared.TransactionType.SalesOrder;
 string errMsg;
 string warehouseCode = "MAIN";
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignItemKit(itemKitRow, kitItemRows, lineItemRow, pricingType, quantity, salesPriceRate, transactionType, transactionType, errMsg, warehouseCode);
    </code>
	</example>
	<param name="itemKitRow">The item row to be added</param>
	<param name="kitItemRows">The item rows to be added</param>
	<param name="lineItemRow">The invoice row to be processed</param>
	<param name="pricingType">The type of pricing for this transaction</param>
	<param name="quantity">The quantity of the item to be processed</param>
	<param name="salesPriceRate">The sales price of the item to be processed in customer currency</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="errMsg">Error Message</param>
	<param name="warehouseCode">The code of the warehouse used in this transaction</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignSourceType(System.String)">
	<summary>
 Sets the source of the sales order whether from a Wave, an Opportunity, or
 neither.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignSourceType</em></strong> method.
    <code lang="VB" title="AssignSourceType" description="Sets the source of the sales order whether from a Wave, an Opportunity, or neither.">
 Dim sourceType As String = "Opportunity"
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignSourceType(sourceType)
    </code>
		<code lang="CS" title="AssignSourceType" description="Sets the source of the sales order whether from a Wave, an Opportunity, or neither.">
 string sourceType = "Opportunity";
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignSourceType(sourceType);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignItemMatrix(System.Data.DataRow[],System.Int32,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>
 Assigns matrix items
 </summary>
	<remarks>This property must be overriden or implemented for it will be used in processing matrix items</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignItemMatrix</em></strong> method.</para>
		<code lang="VB" title="AssignItemMatrix" description="Adds the selected matrix items to the transaction item lines.">
 Dim itemRows() As DataRow
 Dim matrixBatch As Integer = 1
 Dim transactionType As Framework.Base.Shared.Enum.TransactionType = Framework.Base.Shared.TransactionType.SalesOrder
 Dim errMsg As String
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignItemMatrix(itemRows, matrixBatch, transactionType, errMsg)
    </code>
		<code lang="CS" title="AssignItemMatrix" description="Adds the selected matrix items to the transaction item lines.">
 DataRow[] itemRows;
 int matrixBatch = 1;
 Framework.Base.Shared.Enum.TransactionType transactionType = Framework.Base.Shared.TransactionType.SalesOrder;
 string errMsg;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignItemMatrix(itemRows, matrixBatch, transactionType, errMsg);
    </code>
	</example>
	<param name="itemRows">Defines the item rows which needs to be processed</param>
	<param name="transactionType">The type of transaction the current form is creating</param>
	<param name="errMsg">Error message reference</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignLineItemNumber(System.Data.DataRowView)">
	<summary>
 Assigns line number to an item line of the transaction. 
 </summary>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line to which the new line number is assigned to.</param>
	<remarks>Line number identifies a particular item line in the transaction. 
 It allows order entry of same item code in one transaction but each is assigned with different line number.
 It is unique inside the transaction only. </remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignItemKitDetailLineItemNumber(System.Data.DataRow)">
	<summary>
 Assigns line number to an item line of the transaction. 
 </summary>
	<param name="rowKitDetail">A <strong>DataRow</strong> containing the item line to which the new line number is assigned to.</param>
	<remarks>Line number identifies a particular item line in the transaction. 
 It allows order entry of same item code in one transaction but each is assigned with different line number.
 It is unique inside the transaction only. </remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignLineItemWarehouse(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
 Assigns the default warehouse from which the item is going to be picked.
 </summary>
	<requirements>
		<para>Parameter <em>lineItemRow</em> can't be nothing</para>
		<para>Parameter <em>rowWarehouse</em> can't be nothing</para>
	</requirements>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignLineItemWarehouse</em></strong> method.</para>
		<code lang="VB" title="AssignLineItemWarehouse" description="Assigns the warehouse information to lie item row in the sales order transaction.">
 Dim lineItemRow As DataRowView
 Dim rowWarehouse As DataRow
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway) 
 salesOrderFacade.AssignLineItemWarehouse(lineItemRow, rowWarehouse)
    </code>
		<code lang="CS" title="AssignLineItemWarehouse" description="Assigns the warehouse information to lie item row in the sales order transaction.">
 DataRowView lineItemRow;
 DataRow rowWarehouse;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.AssignLineItemWarehouse(lineItemRow, rowWarehouse);
    </code>
	</example>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line to which the warehouse is to be assigned to.</param>
	<param name="rowWarehouse">A <strong>DataRow</strong> containing the warehouse information.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignMiscItem(System.String,System.Decimal,System.String,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>
 Adds the miscellaneous item to the transaction detail.
 </summary>
	<remarks>Adds miscellaneous item to the transaction detail which includes accessory, substitute and cross/up sell items.
 Returns True if adding is successfull.</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignMiscItem</em></strong> method.</para>
		<code lang="VB" title="AssignMiscItem" description="Adds miscellaneous item to the transaction detail which includes accessory, substitute and cross/up sell items.">
 Dim itemCode As String = "ITEM-1A"
 Dim quantity As Decimal = 10
 Dim umCode As String = "EACH"
 Dim warehouseCode As String = "MAIN"
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 Dim errMsg As String
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignMiscItem(itemCode, quantity, umCode, warehouseCode, transactionType, errMsg)
    </code>
		<code lang="CS" title="AssignMiscItem" description="Adds miscellaneous item to the transaction detail which includes accessory, substitute and cross/up sell items.">
 string itemCode = "ITEM-1A";
 Decimal quantity = 10;
 string umCode = "EACH";
 string warehouseCode = "MAIN";
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 string errMsg;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignMiscItem(itemCode, quantity, umCode, warehouseCode, transactionType, errMsg);
    </code>
	</example>
	<param name="itemCode">A <strong>String</strong> containing the item code of selected miscellaneous item.</param>
	<param name="quantity">A <strong>Decimal</strong> containing the quantity of miscellaneous item.</param>
	<param name="umCode">A <strong>String</strong> containing the default unit of measure.</param>
	<param name="warehouseCode">A <strong>String</strong> containing default the warehouse.</param>
	<param name="transactionType">One of the <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are Interprise.Framework.Base.Shared.Enum.TransactionType.Quote, Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder, Interprise.Framework.Base.Shared.Enum.TransactionType.BackOrder and Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</param>
	<param name="errMsg">A <strong>String</strong> containing the error message.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignNoteItem(System.Data.DataRowView)">
	<summary>Procedure to assign the selected Note Item</summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignNoteItem</em></strong> method.
    <code lang="VB" title="AssignNoteItem" description="Assigns the ItemType property of the line item added to be a NoteItem. (An empty line in the order transaction)">
 Dim noteLineItemRow As DataRowView
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignNoteItem(noteLineItemRow)
    </code>
		<code lang="CS" title="AssignNoteItem" description="Assigns the ItemType property of the line item added to be a NoteItem. (An empty line in the order transaction)">
 DataRowView noteLineItemRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignNoteItem(noteLineItemRow);
    </code>
	</example>
	<param name="noteLineItemRow">A <strong>DataRowView</strong> containing item line.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignNonStockItem(System.Data.DataRowView)">
	<summary>Assigns the default nonstock item to the transaction detail.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignNonStockItem</em></strong> method.</para>
		<code lang="VB" title="AssignNonStockItem" description="Adds the default Non-Stock item to the sales order transaction.">
 Dim nonstockLineItemRow As DataRowView
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignNonStockItem(nonstockLineItemRow)
    </code>
		<code lang="CS" title="AssignNonStockItem" description="Adds the default Non-Stock item to the sales order transaction.">
 DataRowView nonstockLineItemRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignNonStockItem(nonstockLineItemRow);
    </code>
	</example>
	<param name="nonstockLineItemRow">A <strong>DataRowView</strong> containing the item line to which the default nonstock item is to be assigned.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignQuantityOrdered(System.Data.DataRowView,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Determines the sales price base on the quantity ordered. It also sets the quantity ordered of components if the item line is Kit.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignQuantityOrdered</em></strong> method.</para>
		<code lang="VB" title="AssignQuantityOrdered" description="Determines the sales price base on the quantity ordered. It also sets the quantity ordered of components if the item line is Kit.">
 Dim lineItemRow As DataRowView
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 Dim salesOrderFacade As New Interpise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignQuantityOrdered(lineItemRow, transactionType)
    </code>
		<code lang="CS" title="AssignQuantityOrdered" description="Determines the sales price base on the quantity ordered. It also sets the quantity ordered of components if the item line is Kit.">
 DataRowView lineItemRow;
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 Interpise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interpise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignQuantityOrdered(lineItemRow, transactionType);
    </code>
	</example>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line to which the quantity is assigned.</param>
	<param name="transactionType">One of the <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are Interprise.Framework.Base.Shared.Enum.TransactionType.Quote, Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder, Interprise.Framework.Base.Shared.Enum.TransactionType.BackOrder and Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignPaymentTerm(System.Data.DataRow)">
	<summary>
 Assigns the payment term information to the transaction header.
 </summary>
	<requirements>Parameter <em>paymentTermRow</em> can't be nothing.</requirements>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignPaymentTerm</em></strong> method.
    <code lang="VB" title="AssignPaymentTerm" description="Assigns the payment term information to the transaction header.">
 Dim paymentTermRow As DataRow
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignPaymentTerm(paymentTermRow)
    </code>
		<code lang="CS" title="AssignPaymentTerm" description="Assigns the payment term information to the transaction header.">
 DataRow paymentTermRow;
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Inteprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignPaymentTerm(paymentTermRow);
    </code>
	</example>
	<param name="paymentTermRow">A <Strong>DataRow</Strong> containing the payment term information.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignPaymentTerm(Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesOrderViewRow,System.Boolean)">
	<summary>
 Refreshes the payment term information stored in the transaction header.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignPaymentTerm</em></strong> method.
    <code lang="VB" title="AssignPaymentTerm" description="Applies the payment term to the sales order transaction.">
 Dim salesOrderRow As CustomerSalesOrderViewRow
 Dim isRead As Boolean
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignPaymentTerm(salesOrderRow, isRead)
    </code>
		<code lang="CS" title="AssignpaymentTerm" description="Applies the payment term to the sales order transaction.">
 CustomerSalesOrderViewRow salesOrderRow;
 bool isRead;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignPaymentTerm(salesOrderRow, isRead);
    </code>
	</example>
	<requirements>Parameter <em>salesOrderRow</em> can't be nothing.</requirements>
	<param name="salesOrderRow">A <strong>SalesOrderDatasetGateway.CustomerSalesOrderViewRow</strong> containing the transaction header.</param>
	<param name="isRead">Optional. A <strong>Boolean</strong> indicating whether to read the payment term information or not from the database.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignSalesRepCommission(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Assigns the specified sales rep group to the transaction and calculates the commission aftewards.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignSalesRepCommission</em></strong> method.
    <code lang="VB" title="AssignSalesRepCommission" description="Computes the commission for the sales rep supplied.">
 Dim salesRepRow As DataRow
 Dim salesRepCommissionRow As DataRowView
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignSalesRepCommission(salesRepRow, salesRepCommissionRow)
    </code>
		<code lang="CS" title="AssignSalesRepCommission" description="Computes the commission for the sales rep supplied.">
 DataRow salesRepRow;
 DataRowView salesRepCommissionRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignSalesRepCommission(salesRepRow, salesRepCommissionRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>salesRepRow</em> can't be nothing</para>
		<para>Parameter <em>salesRepCommissionRow</em> can't be nothing</para>
	</requirements>
	<param name="salesRepRow">A <strong>DataRow</strong> containing the sales rep information.</param>
	<param name="salesRepCommissionRow">A <strong>DataRowView</strong> containing the row to which the sales rep information is to be assigned.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignSalesRepGroupContact(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Assigns a particular contact to the specified sales rep group commission.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignSalesRepGroupContact</em></strong> method.
    <code lang="VB" title="AssignSalesRepGroupContact" description="Assigns the information on the salesRepGroupContactRow to the salesRepCommissionRow.">
 Dim salesRepGroupContactRow As DataRow
 Dim salesRepCommissionRow As DataRowView
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignSalesRepGroupContact(salesRepGroupContactRow, salesRepCommissionRow)
    </code>
		<code lang="CS" title="AssignSalesRepGroupContact" description="Assigns the information on the salesRepGroupContactRow to the salesRepCommissionRow.">
 DataRow salesRepGroupContactRow;
 DataRowView salesRepCommissionRow;
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Inteprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignSalesRepGroupContact(salesRepGroupContactRow, salesRepCommissionRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>salesRepGroupContactRow</em> can't be nothing</para>
		<para>Parameter <em>salesRepCommissionRow</em> can't be nothing</para>
	</requirements>
	<param name="salesRepGroupContactRow">A <strong>DataRow</strong> containing the sales rep group contact information.</param>
	<param name="salesRepCommissionRow">A <strong>DataRowView</strong> containing the row to which the sales rep group contact information is to be assigned.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignShipTo(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assigns the Ship To information to the transaction header.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignShipTo</em></strong> method.</para>
		<code lang="VB" title="AssignShipTo" description="Assigns the shipto row to the sales order transation.">
 Dim shipToRow As DataRow
 Dim salesOrder As DataRow
 
 Dim salesOrderFacade As New Interprise.facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway) 
 salesOrderFacade.AssignShipTo(shipToRow, salesOrder)
    </code>
		<code lang="CS" title="AssignShipTo" description="Assigns the shipto row to the sales order transation.">
 DataRow shipToRow;
 DataRow salesOrder;
 Interprise.facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignShipTo(shipToRow, salesOrder);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>shipToRow</em> can't be nothing</para>
		<para>Parameter <em>rowSalesOrder</em> can't be nothing</para>
	</requirements>
	<remarks>Ship To information by default is coming from the customer Ship To except for RMA transaction.
 If RMA, the ship to information is coming from the warehouse to which the items should be returned.</remarks>
	<param name="shipToRow">A <strong>DataRow</strong> containing the Ship To information.</param>
	<param name="salesOrder">A <strong>DataRow</strong> containing the transaction header.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignSSDAnalysisDefaults(System.Data.DataRowView,System.String[][])">
	<summary>
 Assigns the default NOTC and terms of delivery to the specified item line for SSD Analysis.
 </summary>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignUnitMeasure(System.Data.DataRow,System.Data.DataRowView@)">
	<summary>
 Assigns the unit of measure for the specified item line.
 </summary>
	<remarks>Unit of measure affects the selling price so it refreshes the value and recalculates the amounts of the transaction.</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignUnitMeasure</em></strong> method.</para>
		<code lang="VB" title="AssignUnitMeasure" description="Assigns the unit measure's settings such as unit qty and weight to the sales order transaction.">
 Dim unitMeasureRow As DataRow
 Dim lineItemRow As DataRowView
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignUnitMeasure(unitMeasureRow, lineItemRow)
    </code>
		<code lang="CS" title="AssignUnitMeasure" description="Assigns the unit measure's settings such as unit qty and weight to the sales order transaction.">
 DataRow unitMeasureRow;
 DataRowView lineItemRow;
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.AssignUnitMeasure(unitMeasureRow, lineItemRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>unitMeasureRow</em> can't be nothing.</para>
		<para>Parameter <em>lineItemRow</em> can't be nothing.</para>
	</requirements>
	<param name="unitMeasureRow">A <strong>DataRow</strong> containing the unit of measure information.</param>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignWarehouse(System.Data.DataRow)">
	<summary>Assigns the warehouse of the sales order transaction.</summary>
	<example>
    The following codes shows how to implement the
    <em><strong>AssignWarehouse</strong></em> method.
    <code lang="VB" title="AssignWarehouse" description="Assigns the warehouse values based on the WarehouseCode of the sales order transaction header.">
 Dim salesOrderRow As DataRow
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignWarehouse(salesOrderRow)
    </code>
		<code lang="CS" title="AssignWarehouse" description="Assigns the warehouse values based on the WarehouseCode of the sales order transaction header.">
 DataRow salesOrderRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignWarehouse(salesOrderRow);
    </code>
	</example>
	<requirements>Parameter <em>salesOrderRow</em> can't be nothing</requirements>
	<param name="salesOrderRow">A <strong>DataRow</strong> containing the transaction header.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignWarehouse(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assigns the warehouse address to which the items are going to be returned.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignWarehouse</em></strong> method. 
    <code lang="VB" title="AssignWarehouse" description="Assigns the rowWarehouse values to the sales order transaction.">
 Dim rowWarehouse As DataRow
 Dim salesOrderRow As DataRow
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.AssignWarehouse(rowWarehouse, salesOrderRow)
    </code>
		<code lang="CS" title="AssignWarehouse" description="Assigns the rowWarehouse values to the sales order transaction.">
 DataRow rowWarehouse;
 DataRow salesOrderRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignWarehouse(rowWarehouse, salesOrderRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>rowWarehouse</em> can't be nothing</para>
		<para>Parameter <em>salesOrderRow</em> can't be nothing</para>
	</requirements>
	<param name="rowWarehouse">A <strong>DataRow</strong> containing the warehouse information.</param>
	<param name="salesOrderRow">A <strong>DataRow</strong> containing the transaction header.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignWarehouse(System.Data.DataRow,System.Data.DataRow,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Assigns the warehouse address to which the items are going to be returned.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignWarehouse</em></strong> method.
    <code lang="VB" title="AssignWarehouse" description="Assigns the parameter values to the sales order transaction.">
 Dim salesOrderRow As DataRow
 Dim warehouseCode As String = "MAIN"
 Dim warehouseDescription As String = "Main Warehouse"
 Dim address As String = "1234 Langley Lane"
 Dim city As String = "Beverly Hills"
 Dim state As String = "CA"
 Dim postalCode As String = "90210"
 Dim county As String = "Los Angeles"
 Dim country As String = "United States of America"
 Dim phone As String = "+1 (215)444-1234"
 Dim phoneExt As String = "214"
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetgateway)
 salesOrderFacade.AssignWarehouse(salesOrderRow, warehouseCode, warehouseDescription, address, city, state, postalCode, county, country, phone, phoneExt)
    </code>
		<code lang="CS" title="AssignWarehouse" description="Assigns the parameter values to the sales order transaction.">
 DataRow salesOrderRow;
 string warehouseCode = "MAIN";
 string warehouseDescription = "Main Warehouse";
 string address = "1234 Langley Lane";
 string city = "Beverly Hills";
 string state = "CA";
 string postalCode = "90210";
 string county = "Los Angeles";
 string country = "United States of America";
 string phone = "+1 (215)444-1234";
 string phoneExt = "214";
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetgateway());
 salesOrderFacade.AssignWarehouse(salesOrderRow, warehouseCode, warehouseDescription, address, city, state, postalCode, county, country, phone, phoneExt);
    </code>
	</example>
	<requirements>Parameter <em>salesOrderRow</em> can't be nothing</requirements>
	<param name="salesOrderRow">A <strong>DataRow</strong> containing the transaction header.</param>
	<param name="warehouseCode">A <strong>String</strong> containing the warehouse code.</param>
	<param name="warehouseDescription">A <strong>String</strong> containing the warehouse description.</param>
	<param name="address">A <strong>String</strong> containing the address.</param>
	<param name="city">A <strong>String</strong> containing the city.</param>
	<param name="state">A <strong>String</strong> containing the state.</param>
	<param name="postalCode">A <strong>String</strong> containing the postal code.</param>
	<param name="county">A <strong>String</strong> containing the county.</param>
	<param name="country">A <strong>String</strong> containing the country.</param>
	<param name="phone">A <strong>String</strong> containing the telephone number.</param>
	<param name="phoneExt">A <strong>String</strong> containing the telephone extension.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AssignWorkflowStage(System.String,System.Boolean)">
	<summary>
 Assigns the specified stage to workflow items.
 </summary>
	<remarks>Valid workflow stages are Approve Credit,Print Pick Note, Ready To Invoice and Completed.</remarks>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignWorkflowStage</em></strong> method.
    <code lang="VB" title="AssignWorkflowStage" description="Assigns the value of the stage parameter to the sales order workflow stage.">
 Dim stage As String = "Print Pick Note"
 Dim isApplyAll As Boolean = True
 Dim salesOrderFacade As SalesOrderFacade 
 salesOrderFacade.AssignWorkflowStage(stage, isApplyAll)
    </code>
		<code lang="CS" title="AssignWorkflowStage" description="Assigns the value of the stage parameter to the sales order workflow stage.">
 string stage = "Print Pick Note";
 bool isApplyAll = true;
 SalesOrderFacade salesOrderFacade;
 salesOrderFacade.AssignWorkflowStage(stage, isApplyAll);
    </code>
	</example>
	<param name="stage">A <strong>String</strong> containing the workflow stage.</param>
	<param name="isApplyAll">A <strong>Boolean</strong> indicating whether to apply the stage or not to all workflow items.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CheckItemCodeChanged(System.Int32)">
	<summary>
 Returns a <strong>Boolean</strong> indicating that the item code of specified line item number has been changed.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>CheckItemCodeChanged</em></strong> method.
    <code lang="VB" title="CheckItemCodeChanged" description="Function call to check if the line item on the nth row has changed.">
 Dim lineNum As Integer = 2
 Dim salesOrderFacade As SalesOrderFacade 
 salesOrderFacade.CheckItemCodeChanged(lineNum)
    </code>
		<code lang="CS" title="CheckItemCodeChanged" description="Function call to check if the line item on the nth row has changed.">
 int lineNum = 2;
 SalesOrderFacade salesOrderFacade;
 salesOrderFacade.CheckItemCodeChanged(lineNum);
    </code>
	</example>
	<param name="lineNum">An <strong>Integer</strong> containing the line number of item line to check.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.RecalculateBaseCurrencyFields">
	<summary>
 Recalculates the base amounts base on the currency exchange rate of the transaction.
 </summary>
	<remarks>This method is being invoked when the exchange rate is manually changed.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeFreightTax">
	<summary>
 Computes the Freight Tax
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeFreightTax</em></strong> method.</para>
		<code lang="VB" title="ComputeFreightTax" description="Computes and assigns the freight tax amount for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeFreightTax()
    </code>
		<code lang="CS" title="ComputeFreightTax" description="Computes and assigns the freight tax amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeFreightTax();
    </code>
	</example>
	<remarks>The calculation of tax is affected by the CustomerPreference table. 
 If IsComputeTaxAfterPotentialDiscountIsDeducted is True the tax is calculated upon the total amount exclusive of potential discount.
 Otherwise, the tax is calculated upon the total amount.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeItemTransactionTax(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Calculates the tax of the specified item.
 </summary>
	<remarks>The calculation of tax is affected by the CustomerPreference table. 
 If IsComputeTaxAfterPotentialDiscountIsDeducted is True the tax is calculated upon the total amount exclusive of potential discount.
 Otherwise, the tax is calculated upon the total amount.</remarks>
	<example>
    The following codes shows how to implement the
    <strong><em>ComputeItemTransactionTax</em></strong> method.
    <code lang="VB" title="ComputeItemTransactionTax" description="Calculates and assigns the item's tax values based on the taxRow.">
 Dim taxRow As DataRow
 Dim lineItemRow As DataRowView
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeItemTransactionTax(taxRow, lineItemRow)
    </code>
		<code lang="CS" title="ComputeItemTransactionTax" description="Calculates and assigns the item's tax values based on the taxRow.">
 DataRow taxRow;
 DataRowView lineItemRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ComputeItemTransactionTax(taxRow, lineItemRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>taxRow</em> can't be nothing.</para>
		<para>Parameter <em>lineItemRow</em> can't be nothing.</para>
	</requirements>
	<param name="taxRow">A <strong>DataRow</strong> containing the tax scheme.</param>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeOtherTax">
	<summary>
 Computes Other Taxes
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeOtherTax</em></strong> method.</para>
		<code lang="VB" title="ComputeOtherTax" description="Computes and assigns the other tax amount for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeOtherTax()
    </code>
		<code lang="CS" title="ComputeOtherTax" description="Computes and assigns the other tax amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeOtherTax();
    </code>
	</example>
	<remarks>The calculation of tax is affected by the CustomerPreference table. 
 If IsComputeTaxAfterPotentialDiscountIsDeducted is True the tax is calculated upon the total amount exclusive of potential discount.
 Otherwise, the tax is calculated upon the total amount.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CheckCreditStatus(Interprise.Framework.Base.Shared.Delegates.ShowMessage)">
	<summary>
 Returns a <strong>Boolean</strong> indicating the credit standing of the customer. 
 It invokes a delegate that points to a method that displays a message regarding the credit standing.
 </summary>
	<param name="showCreditHoldWarning">A <strong>Interprise.Framework.Base.Shared.Delegates.ShowMessage</strong> delegate pointing to the method that displays a message.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ClearCoupon(System.Data.DataRow)">
	<summary>
 Removes the assigned coupon from the sales order transaction.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ClearCoupon</em></strong> method.
    <code lang="VB" title="ClearCoupon" description="Removes the coupon values from the sales order transaction.">
 Dim rowSalesOrder As DataRow
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ClearCoupon(rowSalesOrder)
    </code>
		<code lang="CS" title="ClearCoupon" description="Removes the coupon values from the sales order transaction.">
 DataRow rowSalesOrder;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ClearCoupon(rowSalesOrder);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.Compute(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Calculates the extended sales price, tax amounts, total amounts and commission.
 </summary>
	<example>
    The following codes shows how to implement the <strong><em>Compute</em></strong>
    method.
    <code lang="VB" title="Compute" description="Calculates the extended sales price, tax amounts, total amounts and commission.">
 Dim lineItem As DataRow
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.Compute(lineItem, transactionType)
    </code>
		<code lang="CS" title="Compute" description="Calculates the extended sales price, tax amounts, total amounts and commission.">
 DataRow lineItem;
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.Compute(lineItem, transactionType);
    </code>
	</example>
	<requirements>Parameter <em>lineItem</em> can't be nothing.</requirements>
	<remarks>Computes all of the transactions totals, balances, tax, etc</remarks>
	<param name="lineItem">A <strong>DataRow</strong> containing the line item.</param>
	<param name="transactionType">One of the <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are Interprise.Framework.Base.Shared.Enum.TransactionType.Quote, Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder, Interprise.Framework.Base.Shared.Enum.TransactionType.BackOrder and Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeCommission(System.Data.DataRow,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Calcuates the commission in each item line.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ComputeCommission</em></strong> method. 
    <code lang="VB" title="ComputeCommission" description="Calculates the sales rep commission per line item of the sales order transaction base on parameter values.">
 Dim lineItemRow As DataRow
 Dim isAuto As Boolean = True
 Dim isSourceManual As Boolean = True
 Dim isCommissionable As Boolean = True
 Dim isComputeSalesRepCommission As Boolean = True
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeCommission(lineItemRow, isAuto, isSourceManual, isCommissionable, isComputeSalesRepCommission)
    </code>
		<code lang="CS" title="ComputeCommission" description="Calculates the sales rep commission per line item of the sales order transaction base on parameter values.">
 DataRow lineItemRow;
 bool isAuto = true;
 bool isSourceManual = true;
 bool isCommissionable = true;
 bool isComputeSalesRepCommission = true;
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Inteprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ComputeCommission(lineItemRow, isAuto, isSourceManual, isCommissionable, isComputeSalesRepCommission);
    </code>
	</example>
	<requirements>Parameter <em>lineItemRow</em> can't be nothing</requirements>
	<param name="lineItemRow">A <strong>DataRow</strong> containing the item line.</param>
	<param name="isAuto">A <strong>Boolean</strong> indicating whether to use the commissionable setting of the item or value of isCommission parameter.</param>
	<param name="isSourceManual">A <strong>Boolean</strong> indicating whether the commission percent is manually supplied.</param>
	<param name="isCommissionable">A <strong>Boolean</strong> indicating whether the item is commissionable or not. If isAuto is False, the value of this argument is used.</param>
	<param name="isComputeSalesRepCommission">A <strong>Boolean</strong> indicating whether to calculate each sales rep's commission or not.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeCouponDiscount(Interprise.Framework.Customer.Shared.Structure.CouponInfo,Interprise.Facade.Customer.BaseSalesOrderFacade.IncludedItemInCouponInfo[],System.Decimal,System.Decimal@,System.Decimal@)">
	<summary>
 Calculates the discount that can be acquired from the coupon.
 </summary>
	<param name="coupon">A <strong>BaseSalesOrderFacade.CouponInfo</strong> containing the coupon information.</param>
	<param name="includedItemInCoupon">A <strong>BaseSalesOrderFacade.IncludedItemInCouponInfo</strong> structure containing discountable items included in the coupon.</param>
	<param name="totalDue">A <strong>Decimal</strong> containing the transaction total value.</param>
	<param name="couponDiscount">A <strong>Decimal</strong> containing the discount amount in base value.</param>
	<param name="couponDiscountRate">A <strong>Decimal</strong> containing the discount amount in transaction currency.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeDiscount">
	<summary>
 Computes discounts
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeDiscount</em></strong> method.</para>
		<code lang="VB" title="ComputeDiscount" description="Computes and assigns the discount amount for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeDiscount()
    </code>
		<code lang="CS" title="ComputeDiscount" description="Computes and assigns the discount amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ComputeDiscount();
    </code>
	</example>
	<remarks>Computes the potential discount for the transaction</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeKitItemsSalesPrice(System.Data.DataRow)">
	<summary>
 Calculates the sales price of kit components of specified kit item line.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ComputeKitItemsSalesPrice</em></strong> method.
    <code lang="VB" title="ComputeKitItemSalesPrice" description="Calculates the sales price for a specific kit item.">
 Dim rowlineItem As DataRow
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeKitItemsSalesPrice(rowlineItem)
    </code>
		<code lang="CS" title="ComputeKitItemsSalesPrice" description="Calculates the sales price for a specific kit item.">
 DataRow rowlineItem;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeKitItemsSalesPrice(rowlineItem);
    </code>
	</example>
	<requirements>Parameter <em>rowlineItem</em> can't be nothing</requirements>
	<param name="rowlineItem">A <strong>DataRow</strong> containing the kit item line.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeKitItemsSalesPrice(System.Data.DataRow,System.String,System.Decimal,System.Decimal,System.String)">
	<summary>
 Calculates the sales price of kit components of specified kit item line.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ComputeKitItemsSalesPrice</em></strong> method.
    <code lang="VB" title="ComputeKitItemSalesPrice" description="Calculates the sales price for a specific kit item.">
 Dim rowlineItem As DataRow
 Dim couponType As String 
 Dim amount As Decimal 
 Dim percent As Decimal
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeKitItemsSalesPrice(rowlineItem, couponType, amount, percent)
    </code>
		<code lang="CS" title="ComputeKitItemsSalesPrice" description="Calculates the sales price for a specific kit item.">
 DataRow rowlineItem;
 String couponType;
 Decimal amount;
 Decimal percent;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeKitItemsSalesPrice(rowlineItem, couponType, amount, percent);
    </code>
	</example>
	<requirements>Parameter <em>rowlineItem</em> can't be nothing</requirements>
	<param name="rowlineItem">A <strong>DataRow</strong> containing the kit item line.</param>
	<param name="couponType">A <strong>String</strong> containing the coupon type.</param>
	<param name="amount">A <strong>Decimal</strong> containing the coupon amount.</param>
	<param name="percent">A <strong>Decimal</strong> containing the coupon percent.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeSalesRepCommission(Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesRepCommissionViewRow)">
	<summary>
 Computes the commission of the specified sales rep group assigned to the transaction.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ComputeSalesRepCommission</em></strong> method.
    <code lang="VB" title="ComputeSalesRepCommission" description="Computes the actual commission for the sales rep per line item of the sales order transaction.">
 Dim salesRepCommissionRow As CustomerSalesRepCommissionViewRow
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeSalesRepCommission(salesRepCommissionRow)
    </code>
		<code lang="CS" title="ComputeSalesRepCommission" description="Computes the actual commission for the sales rep per line item of the sales order transaction.">
 CustomerSalesRepCommissionViewRow salesRepCommissionRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ComputeSalesRepCommission(salesRepCommissionRow);
    </code>
	</example>
	<param name="salesRepCommissionRow">A <strong>SalesOrderDatasetGateway.CustomerSalesRepCommissionViewRow</strong> containing the sales rep group commission.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeSalesRepCommissions">
	<summary>
 Calculates the commission of all the sales rep group in the transaction.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeKitWeight(System.String,System.Decimal)">
	<summary>
  This method will compute the total weight of the kit item based on the selected component
 </summary>
	<param name="p_itemCode"></param>
	<param name="p_quantity"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeQuantityShipped(System.Data.DataRowView)">
	<summary>
 Compute Outstanding values of the RMA Transaction
 </summary>
	<param name="rowItemLine">Line item to be processed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeTransactionDetails">
	<summary>
 Procedure to loop through all the item lines to calculate the extended sales price and tax.
 </summary>
	<remarks>Commission is being recalculated if the type of transaction is Sales Order.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeTotals(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Compute the total amount due
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeTotals</em></strong> method.</para>
		<code lang="VB" title="ComputeTotals" description="Calculates the total amounts of the transaction including the freight, total tax, total due and balance.">
 Dim isClearDiscount As Boolean = True
 Dim isCheckCreditLimit As Boolean = True
 Dim isRecalculateFreight As Boolean = True
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeTotals(isClearDiscount, isCheckCreditLimit, isRecalculateFreight)
    </code>
		<code lang="CS" title="ComputeTotals" description="Calculates the total amounts of the transaction including the freight, total tax, total due and balance.">
 bool isClearDiscount = True;
 bool isCheckCreditLimit = True;
 bool isRecalculateFreight = True;
 
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeTotals(isClearDiscount, isCheckCreditLimit, isRecalculateFreight);
    </code>
	</example>
	<param name="isClearDiscount">Flag that defines if the discount values should be cleared</param>
	<param name="isCheckCreditLimit">Flag that defines if the customer's credit limit should be taken into account</param>
	<param name="isRecalculateFreight">Flag that defines if the Freight amounts should be recalculated</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ConvertQuoteToSalesOrder(Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway@,System.Boolean)">
	<summary>
 Procedure to convert sales quote to order.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ConvertQuoteToSalesOrder</em></strong> method.</para>
		<code lang="VB" title="ConvertQuoteToSalesOrder" description="Creates a new sales order transaction from an existing quote.">
 Dim tempSalesOrderDataset As SalesOrderDatasetGateway 'By-Reference variable
 Dim save As Boolean = True
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ConvertQuoteToSalesOrder(tempSalesOrderDataset, save)
    </code>
		<code lang="CS" title="ConvertQuoteToSalesOrder" description="Creates a new sales order transaction from an existing quote.">
 SalesOrderDatasetGateway tempSalesOrderDataset; //By-Reference variable
 bool save = true;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ConvertQuoteToSalesOrder(tempSalesOrderDataset, save);
    </code>
	</example>
	<param name="tempSalesOrderDataset">A <strong>SalesOrderDatasetGateway</strong> containing the order created out of the sales quote.</param>
	<param name="save">A <strong>Boolean</strong> indicating to save the new transaction.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CheckLineItemsTaxTranslationQuoteToSO(System.DateTime,Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway,System.Boolean)">
	<summary>
 Added by rachel.g &gt;checks the Line Item/s when OrderDate changed.
 </summary>
	<param name="orderDate"></param>
	<param name="Recurr"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeLineItemTaxOverrideQuoteToSo(Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway)">
	<summary>
 Added by rachel.g &gt; Calls the LoadGetTax to Get all TaxCodes once when order date changed. (For Tax Translation)
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ConvertSalesOrderToInvoice(Interprise.Framework.Base.Shared.Enum.TransactionType,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway@,System.Boolean,System.Boolean,System.String@)">
	<summary>
 Procedure to convert a sales order to invoice or RMA to credit memo depending on the transaction type specified.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ConvertSalesOrderToInvoice</em></strong> method.
    <code lang="VB" title="ConvertSalesOrderToInvoice" description="Create a new invoice transaction from an existing sales order.">
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 Dim tempInvoiceDataset As InvoiceDatasetGateway 'By-Reference variable
 Dim isSave As Boolean = True
 Dim isPost As Boolean = False
 Dim errMsg As String
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ConvertSalesOrderToInvoice(transactionType, tempInvoiceDataset, isSave, isPost, errMsg)
    </code>
		<code lang="CS" title="ConvertSalesOrderToInvoice" description="Create a new invoice transaction from an existing sales order.">
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 InvoiceDatasetGateway tempInvoiceDataset; //By-Reference variable
 bool isSave = True;
 bool isPost = False;
 String errMsg;
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ConvertSalesOrderToInvoice(transactionType, tempInvoiceDataset, isSave, isPost, errMsg);
    </code>
	</example>
	<param name="transactionType">Either Interprise.Framework.Base.Shared.Enum.TransactionType.Invoice or Interprise.Framework.Base.Shared.Enum.TransactionType.CreditMemo.</param>
	<param name="tempInvoiceDataset">A <strong>InvoiceDatasetGateway</strong> containing the created transaction.</param>
	<param name="isSave">A <strong>Boolean</strong> indicating to save the transaction.</param>
	<param name="isPost">A <strong>Boolean</strong> indicating to post the transaction.</param>
	<param name="errMsg">A <strong>String</strong> containing the error message.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ConvertTransactionReceipt(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,Interprise.Facade.Customer.InvoiceFacade,System.Boolean,System.Boolean)">
	<summary>
 Copies receipts created in sales order transaction to invoice transaction during conversion process of sales order to invoice.
 </summary>
	<param name="tempInvoiceDataset">A <strong>InvoiceDatasetGateway</strong> containing the invoice transaction.</param>
	<param name="tempInvoiceFacade">A <strong>InvoiceFacade</strong> containing the invoice facade instance.</param>
	<param name="isSave">A <strong>Boolean</strong> indicating to save the transaction receipts.</param>
	<param name="isPost">A <strong>Boolean</strong> indicating to post the transaction receipts.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ImportTransactionReceiptRow(System.Int32,System.String,Interprise.Framework.Customer.DatasetGateway.TransactionReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.TransactionReceiptDatasetGateway)">
	<summary>
	</summary>
	<param name="index"></param>
	<param name="invoiceCode"></param>
	<param name="source"></param>
	<param name="destination"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CreateParameterSet(System.String[])">
	<summary>
 Returns a jagged <strong>String</strong> array containing the parameters for updating the transaction.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>CreateParameterSet</em></strong> method.
    <code lang="VB" title="CreateParameterSet" description="Returns a jagged string array containing the table names and stored procedure names (Create, Update, and Delete commands), that will be used for saving changes from the dataset to the datasource.">
 Dim relatedTables As String() = New String() {"CustomerSalesOrder", "CustomerSalesOrderDetail"}
 Dim paramSet As String()()
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 paramSet = salesOrderFacade.CreateParameterSet(relatedTables)
    </code>
		<code lang="CS" title="CreateParameterSet" description="Returns a jagged string array containing the table names and stored procedure names (Create, Update, and Delete commands), that will be used for saving changes from the dataset to the datasource.">
 string[] relatedTables = new sring[] {"CustomerSalesOrder", "CustomerSalesOrderDetail"};
 string[] paramSet;
 (Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 paramSet = salesOrderFacade.CreateParameterSet(relatedTables);
    </code>
	</example>
	<param name="relatedTables">A jagged <strong>String</strong> array containing the table names and stored procedure names.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CreateRMAFromInvoice(System.Data.DataRow)">
	<summary>
 Procedure for creating RMA out of invoice. It copies the item lines of the invoice to the RMA. 
 Returns True if the process is successfull.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>CreateRMAFromInvoice</em></strong> method.
    <code lang="VB" title="CreateRMAFromInvoice" description="Creates a new RMA transaction from the invoiceRow parameter.">
 Dim invoiceRow As DataRow
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.CreateRMAFromInvoice(invoiceRow)
    </code>
		<code lang="CS" title="CreateRMAFromInvoice" description="Creates a new RMA transaction from the invoiceRow parameter.">
 DataRow invoiceRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.CreateRMAFromInvoice(invoiceRow);
    </code>
	</example>
	<param name="invoiceRow">A <strong>DataRow</strong> containing the invoice header.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CreateSalesOrderFromQuote(System.Data.DataRow[],Interprise.Framework.Base.Shared.Delegates.ShowMessage,Interprise.Framework.Base.Shared.Delegates.ShowMessage,System.String@)">
	<summary>
 Procedure for creating sales order out of quote. Returns True if the process is successfull.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>CreateSalesOrderFromQuote</em></strong> method.
    <code lang="VB" title="CreateSalesOrderFromQuote" description="Creates a new sales order transaction from the quoteRows parameter.">
 Dim quoteRows As DataRow
 Dim showCreditHoldWarning As ShowMessage
 Dim showCreditLimitWarning As ShowMessage
 Dim msg As String
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.CreateSalesOrderFromQuote(quoteRows, showCreditHoldWarning, showCreditLimitWarning, msg)
    </code>
		<code lang="CS" title="CreateSalesOrderFromQuote" description="Creates a new sales order transaction from the quoteRows parameter.">
 DataRow quoteRows;
 ShowMessage showCreditHoldWarning;
 ShowMessage showCreditLimitWarning;
 String msg;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.CreateSalesOrderFromQuote(quoteRows, showCreditHoldWarning, showCreditLimitWarning, msg);
    </code>
	</example>
	<param name="quoteRows">An array of <strong>DataRow</strong> containing sales quotes to be added to the sales order.</param>
	<param name="showCreditHoldWarning">A <strong>Interprise.Framework.Base.Shared.Delegates.ShowMessage</strong> delegate containing the address of a function that displays the credit hold warning message.</param>
	<param name="showCreditLimitWarning">A <strong>Interprise.Framework.Base.Shared.Delegates.ShowMessage</strong> delegate containing the address of a function that displays the credit limit warning message.</param>
	<param name="msg">A <strong>String</strong> containing the error message.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CreateProcessCustomerReturnTrigger">
	<summary>
 Procedure for checking if there are changes necessary for processing the RMA transaction. 
 If there is, it creates a record that would trigger the processing.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateProcessCustomerReturnTrigger</em></strong> method.</para>
		<code lang="VB" title="CheckProcessCustomerReturnTrigger" description="Checks if there are changes necessary for processing the RMA transaction.">
 Dim salesOrderFacade As SalesOrderFacade 
 salesOrderFacade.CreateProcessCustomerReturnTrigger()
    </code>
		<code lang="CS" title="CreateProcessCustomerReturnTrigger" description="Checks if there are changes necessary for processing the RMA transaction.">
 SalesOrderFacade salesOrderFacade;
 salesOrderFacade.CreateProcessCustomerReturnTrigger();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CreateProcessCustomerReturnTrigger(System.String,System.String)">
	<summary>
 Procedure for creating record that would trigger processing of RMA.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>CreateProcessCustomerReturnTrigger</em></strong> method.
    <code lang="VB" title="CreateProcessCustomerReturnTrigger" description="Creates a record that would trigger processing of RMA.">
 Dim documentCode As String = "SO-000001"
 Dim Type As String = "RMA"
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.CreateProcessCustomerReturnTrigger(documentCode, Type)
    </code>
		<code lang="CS" title="CreateProcessCustomerReturnTrigger" description="Creates a record that would trigger processing of RMA.">
 String documentCode = "SO-000001";
 String Type = "RMA";
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.CreateProcessCustomerReturnTrigger(documentCode, Type);
    </code>
	</example>
	<param name="documentCode">A <strong>String</strong> containing the RMA document code.</param>
	<param name="type">A <strong>String</strong> containing the type of transaction. The value should be "RMA".</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.DeallocateCredit(System.Data.DataRowView)">
	<exclude/>
	<excludetoc/>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.DeallocateCredit">
	<exclude/>
	<excludetoc/>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.DeleteKitDetail(System.Data.DataRowView)">
	<summary>Method for deleting the components of the kit.</summary>
	<param name="lineItem">A <strong>DataRowView</strong> containing the kit item line.</param>
	<remarks>This method loops through the kit detail table to look for the components of the kit. When found the component is deleted.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.DeleteWorkflowItem">
	<summary>
 Procedure for deleting workflow item.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.DuplicateSalesOrder(System.Boolean,System.Data.DataRow)">
	<summary>
 Procedure for duplicating the current sales order. The duplicate order is assigned with new sales order number.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>DuplicateSalesOrder</em></strong> method.
    <code lang="VB" title="DuplicateSalesOrder" description="Duplicates the current sales order transaction.">
 Dim isSameCustomer As Boolean = True
 Dim rowShipTo As DataRow
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.DuplicateSalesOrder(isSameCustomer, rowShipTo)
    </code>
		<code lang="CS" title="DuplicateSalesOrder" description="Duplicates the current sales order transaction.">
 bool isSameCustomer = true;
 DataRow rowShipTo;
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Inteprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.DuplicateSalesOrder(isSameCustomer, rowShipTo);
    </code>
	</example>
	<requirements>Parameter <em>rowShipTo</em> can't be nothing</requirements>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetLineItemsToAllocate">
	<summary>
 Returns <strong>Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesOrderDetailViewDataTable</strong> containing item lines that needs to be allocated for stock.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>GetLineItemsToAllocate</em></strong> method.
    <code lang="VB" title="GetLineItemsToAllocate" description="Gets all the item lines in the sales order transaction that needs to be allocated to stock.">
 Dim customerSalesOrderDetail As CustomerSalesOrderDetailViewDataTable
 Dim instance As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 customerSalesOrderDetail = salesOrderFacade.GetLineItemsToAllocate()
    </code>
		<code lang="CS" title="GetLineItemsToAllocate" description="Gets all the item lines in the sales order transaction that needs to be allocated to stock.">
 CustomerSalesOrderDetailViewDataTable customerSalesOrderDetail;
 Interprise.Facade.Customer.SalesOrderFacade instance = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 customerSalesOrderDetail = salesOrderFacade.GetLineItemsToAllocate();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetOrderLineItemDefaults(System.String,System.String,System.String[][]@)">
	<summary>
 Procedure to get the item default values to be assigned to the newly added order
 item line.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>GetOrderLineItemDefaults</em></strong> method.
    <code lang="VB" title="GetOrderLineItemDefaults" description="Retrives the default values for the item line and puts it on the defaults parameter.">
 Dim itemCode As String = "ITEM-1A"
 Dim umCode As String = "EACH"
 Dim defaults As String()() 'By-Reference variable
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.GetOrderLineItemDefaults(itemCode, umCode, defaults)
    </code>
		<code lang="CS" title="GetOrderLineItemDefaults" description="Retrives the default values for the item line and puts it on the defaults parameter.">
 string itemCode = "ITEM-1A";
 string umCode = "EACH";
 string[] defaults; //By-Reference variable
 (Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.GetOrderLineItemDefaults(itemCode, umCode, defaults);
    </code>
	</example>
	<param name="itemCode">A <strong>String</strong> containing the item code.</param>
	<param name="umCode">A <strong>String</strong> containing the unit of measure.</param>
	<param name="defaults">A jagged <Strong>String</Strong> array containig the default values.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetOrderLineItemDefaults(System.String[][],System.String[][])">
	<summary>
 Procedure to get the item default values to be assigned to the newly added order
 </summary>
	<param name="params"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetOrderLineItemDefaultValues(System.String,System.String,System.String,System.String,System.String,System.String,System.String[][]@)">
	<summary>
 Procedure to get the default values to be assigned to newly added item line.
 </summary>
	<param name="itemCode">A <strong>String</strong> containing the item code.</param>
	<param name="umCode">A <strong>String</strong> containing the unit of measure.</param>
	<param name="defaults">A jagged <Strong>String</Strong> array containig the default values.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetShippingMethodCarrierDetails(System.String)">
	<summary>
 To load the carrier details of the shipping method
 </summary>
	<param name="p_shippingMethodCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetOrderType(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Returns a <strong>String</strong> containing the equivalent of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> enumeration value.
 </summary>
	<param name="transactionType">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are Interprise.Framework.Base.Shared.Enum.TransactionType.Quote, Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder and Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetQuantityAllocatedFreightRateConfig">
	<summary>
 Get the Shipping Configuration value for Default.UseQuantityAllocatedForOrderFreightQuote for the current warehouse
 </summary>
	<returns></returns>
	<remarks>Value is True or False</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetReportTypeToPrint">
	<summary>
 Returns a <strong>String</strong> array containing the types of reports that can be printed base on the current workflow stage.
 </summary>
	<returns><para>1 Dimensional String Array</para></returns>
	<example>
    The following codes shows how to implement the
    <strong><em>GetReportTypeToPrint</em></strong> method.
    <code lang="VB" title="GetReportTypeToPrint" description="Returns a 1 dimensional string array containing the list of report type that can be printed.">
 Dim reportTypeToPrint As String()
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 reportTypeToPrint = salesOrderFacade.GetReportTypeToPrint()
    </code>
		<code lang="CS" title="getReportTypeToPrint" description="Returns a 1 dimensional string array containing the list of report type that can be printed.">
 string[] reportTypeToPrint;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 reportTypeToPrint = salesOrderFacade.GetReportTypeToPrint();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.InitializeStockAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesOrderDetailViewDataTable,Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway@,Interprise.Facade.Customer.StockAllocationFacade@)">
	<summary>
 Procedure to load the items for stock allocation.
 </summary>
	<param name="salesOrderCode">A <strong>String</strong> containing the sales order code.</param>
	<param name="modifiedLineItems">A <strong>Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway.CustomerSalesOrderDetailViewDataTable</strong> datatable containing the items to be allocated.</param>
	<param name="datasetStockAllocation">A <strong>Interprise.Framework.Customer.DatasetGateway.CustomerStockAllocationDatasetGateway</strong> datatable containing the allocated inventory items.</param>
	<param name="facadeStockAllocation">A <strong>StockAllocationFacade</strong> containing the object responsible in stock allocation.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CheckLineItemsTaxTranslation(System.DateTime,System.Boolean)">
	<summary>
 Added by rachel.g &gt;checks the Line Item/s when OrderDate changed.
 </summary>
	<param name="orderDate"></param>
	<param name="Recurr"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeLineItemTaxOverride">
	<summary>
 Added by rachel.g &gt; Calls the LoadGetTax to Get all TaxCodes once when order date changed. (For Tax Translation)
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.InitializeCreditAllocation">
	<exclude/>
	<excludetoc/>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.InitializeConvertion">
	<summary>
 Returns a <strong>DataTable</strong> used in the conversion sales order to invoice.
 </summary>
	<remarks>The <strong>DataTable</strong> object contains the warehouses from which the items will be picked. 
 It is presented in the UI to allow the user to partially ship an order by selecting the warehouse.</remarks>
	<example>
    The following codes shows how to implement the
    <strong><em>InitializeConvertion</em></strong> method.
    <code lang="VB" title="InitializeConvertion" description="Returns a DataTable object that contains the warehouses from which the items from the invoice transaction will be picked.">
 Dim warehouseTable As DataTable
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 warehouseTable = salesOrderFacade.InitializeConvertion()
    </code>
		<code lang="VB" title="InitializeConvertion" description="Returns a DataTable object that contains the warehouses from which the items from the invoice transaction will be picked.">
 DataTable warehouseTable;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 warehouseTable = salesOrderFacade.InitializeConvertion();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.InitializeLineItem(System.Data.DataRowView)">
	<summary>
 Procedure to set the document code and line number of an item line.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>InitializeLineItem</em></strong> method.
    <code lang="VB" title="InitializeLineItem" description="Sets the default value for a new line item row.">
 Dim lineItemRow As DataRowView
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.InitializeLineItem(lineItemRow)
    </code>
		<code lang="CS" title="InitializeLineItem" description="Sets the default value for a new line item row.">
 DataRowView lineItemRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.InitializeLineItem(lineItemRow);
    </code>
	</example>
	<param name="lineItemRow">A <strong>DataRow</strong> containing the item line.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.InsertLineItem(System.Int32)">
	<summary>
 Procedure to Insert the specified line items to the order transaction
 details.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>InsertLineItem</em></strong> method.
    <code lang="VB" title="InsertLineItem" description="Inserts a new line item row on the sales order transaction details.">
 Dim lineNo As Integer
 Dim insertRow As DataRowView
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 insertRow = salesOrderFacade.InsertLineItem(lineNo)
    </code>
		<code lang="CS" title="InsertLineItem" description="Inserts a new line item row on the sales order transaction details.">
 int lineNo;
 DataRowView insertRow;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 insertRow = salesOrderFacade.InsertLineItem(lineNo);
    </code>
	</example>
	<param name="sortOrder">An <strong>Integer</strong> containing the line number of the original item line on the selected row.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.InsertQuoteToSalesOrder(System.Data.DataRow[],System.String@)">
	<summary>
 Procedure to add the order information of the quote in the sales order.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>InsertQuoteToSalesOrder</em></strong> method.
    <code lang="VB" title="InsertQuoteToSalesOrder" description="Add quote values to a sales order transaction.">
 Dim selectedRows As DataRow
 Dim errMsg As String
 Dim isInserted As Boolean
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 isInserted = salesOrderFacade.InsertQuoteToSalesOrder(selectedRows, errMsg)
    </code>
		<code lang="CS" title="InsertQuoteToSalesOrder" description="Add quote values to a sales order transaction.">
 DataRow selectedRows;
 String errMsg;
 bool isInserted;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 isInserted = salesOrderFacade.InsertQuoteToSalesOrder(selectedRows, errMsg);
    </code>
	</example>
	<requirements>Parameter <em>selectedRows</em> can't be nothing</requirements>
	<param name="selectedRows">A <strong>DataRow</strong> array containing the quotes.</param>
	<param name="errMsg">A <strong>String</strong> containing the error message.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ManageWorkflow(System.Data.DataRowView)">
	<summary>
 Procedure responsible in adding and deleting workflow items.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ManageWorkflow</em></strong> method.
    <code lang="VB" title="ManageWorkflow" description="Procedure responsible in adding and deleting workflow items.">
 Dim lineItemRow As DataRowView
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ManageWorkflow(lineItemRow)
    </code>
		<code lang="CS" title="ManageWorkflow" description="Procedure responsible in adding and deleting workflow items.">
 DataRowView lineItemRow;
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Inteprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ManageWorkflow(lineItemRow);
    </code>
	</example>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line newly added or picking warehouse is modified.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.MergeReceiptToSalesOrder">
	<summary>
 Procedure to merge receipt table and their records to the current dataset. 
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.OnComputeFreight(System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@)">
	<summary>
 Procedure to supply data required in freight calculation.
 </summary>
	<param name="shippingMethodCode">A <strong>String</strong> containing the shipping method code.</param>
	<param name="subtotal">A <strong>Decimal</strong> containing the subtotal amount of the transaction.</param>
	<param name="totalWeight">A <strong>Decimal</strong> containing the total weight of goods.</param>
	<param name="isCouponIncludesFreeShipping">A <strong>Boolean</strong> indicating not to calculate the freight.</param>
	<param name="isCharge">A <strong>Boolean</strong> indicating that the order has no items that can be charged for freight.</param>
	<remarks>If there's a coupon attached to the sales order, it checks if the coupon provides free shipping.
 If so, it doesn't calculate the freight.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.OnCreateSalesOrderRule">
	<summary>
 Procedure to create the sales order business rule object.
 </summary>
	<returns></returns>
	<remarks>Override this method if you want to implement a custom sales order business rule.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.OnReceiptChanged(System.EventArgs)">
	<summary>
 Procedure to invoke ReceiptChanged event.
 </summary>
	<param name="e">An <strong>EventArgs</strong> containing the event argument.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.OnCouponDiscountChanged(Interprise.Framework.Base.Shared.Enum.EnmFormatType)">
	<summary>
 Procedure to invoke CouponDiscountChanged event.
 </summary>
	<param name="formatType">text format</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ProcessCustomerReturn(System.String)">
	<summary>Procedure to validate and process RMA transaction.</summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ProcessCustomerReturn</em></strong> method. 
    <code lang="VB" title="ProcessCustomerReturn" description="Procedure to process RMA transaction.">
 Dim transactionDescription As String = "RMA"
 Dim isNotSucess As Boolean
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 isNotSucess = salesOrderFacade .ProcessCustomerReturn(transactionDescription)
    </code>
		<code lang="CS" title="ProcessCustomerReturn" description="Procedure to process RMA transaction.">
 string transactionDescription = "RMA";
 bool isNotSucess;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 isNotSucess = salesOrderFacade.ProcessCustomerReturn(transactionDescription);
    </code>
	</example>
	<param name="transactionDescription">A <strong>String</strong> containing description about actions taken on the transaction which is important in audit trail.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.RecalculateTax">
	<summary>
 Procedure to recalculate item lines, freight and other tax.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>RecalculateTax</em></strong> method.
    <code lang="VB" title="RecalculateTax" description="Recompute item, freight, and other tax amounts.">
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.RecalculateTax()
    </code>
		<code lang="CS" title="RecalculateTax" description="Recompute item, freight, and other tax amounts.">
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Inteprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.RecalculateTax();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.RecomputeSalesOrderValues(System.Data.DataRow)">
	<summary>
 Method is used to refresh all sales order values (header and detail) with the current ship to information.
 </summary>
	<remarks>Method is called when the current SO ship to is changed.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.RecomputeSalesRepCommissions(System.Data.DataRow)">
	<summary>
 Recalculates the sales rep's commission if a line item was to be deleted.
 </summary>
	<param name="lineItemRow">A <strong>Data.Datarow</strong> that contains the information on the data to be deleted.</param>
	<remarks>Method is only called when a line item is deleted in the transaction.</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.RecurSalesOrder(System.String,System.DateTime,System.Boolean)">
	<summary>
 Procedure to create sales orders for the recurring sales order.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>RecurSalesOrder</em></strong> method.
    <code lang="VB" title="RecurSalesOrder" description="Procedure that allows the creation of new orders through recurring transaction.">
 Dim documentCode As String = "SO-000001"
 Dim documentDate As Date = "1/1/2007"
 Dim recurInfo As String()
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 recurInfo = salesOrderFacade.RecurSalesOrder(documentCode, documentDate)
    </code>
		<code lang="CS" title="RecurSalesOrder" description="Procedure that allows the creation of new orders through recurring transaction.">
 string documentCode = "SO-000001";
 DateTime documentDate = "1/1/2007";
 string[] recurInfo;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 recurInfo = salesOrderFacade.RecurSalesOrder(documentCode, documentDate);
    </code>
	</example>
	<param name="documentCode">A <strong>String</strong> containing the document code of recurring sales order.</param>
	<param name="documentDate">A <strong>Date</strong> containing the date of the sales order to be created.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CreateDropShipOrderForWoohaaItems">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>Procedure to send the changes made to data source.</summary>
	<remarks>Returns True if update is successful.</remarks>
	<example>
    The following codes shows how to implement the
    <strong><em>UpdateDataSet</em></strong> method.
    <code lang="VB" title="UpdateDataset" description="Send the changes from the dataset to the datasource.">
 Dim commandSet As String()() = New String()() {New String() {"CustomerSalesOrder", "UpdateCustomerSalesOrder", "CreateCustomerSalesOrder", "DeleteCustomerSalesOrder"}}
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 Dim transactionDescription As String = "New Sales Order"
 Dim isUseCache As Boolean = False
 Dim isUpdateSuccess As Boolean
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 isUpdateSuccess = salesOrderFacade.UpdateDataSet(commandSet, transactionType, transactionDescription, isUseCache)
    </code>
		<code lang="CS" title="UpdateDataset" description="Send the changes from the dataset to the datasource.">
 string[,] commandSet = new string[,] {
        {"CustomerSalesOrder",
        "UpdateCustomerSalesOrder",
        "CreateCustomerSalesOrder",
        "DeleteCustomerSalesOrder"}};
 Framework.Base.Shared.Enum.TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 string transactionDescription = "New Sales Order";
 bool isUseCache = false;
 bool isUpdateSuccess;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 isUpdateSuccess = salesOrderFacade.UpdateDataSet(commandSet, transactionType, transactionDescription, isUseCache);
 </code>
	</example>
	<param name="commandSet">A jagged <strong>String</strong> array containing the tablenames and stored procedure names.</param>
	<param name="transactionType">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are Quote, SalesOrder, BackOrder and RMA.</param>
	<param name="transactionDescription">A <strong>String</strong> containing description about actions taken on the transaction which is important in audit trail.</param>
	<param name="isUseCache">A <strong>Boolean</strong> indicating to save data to the cache database.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.UpdateDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.SelectAllItemsToInvoice(System.Data.DataTable,System.Boolean)">
	<summary>
 Procedure to select all or select none the warehouses in the conversion of sales order to invoice.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>SelectAllItemsToInvoice</em></strong> method. 
    <code lang="VB" title="SelectAllItemsToInvoice" description="Processes the warehouseTable rows for invoicing.">
 Dim warehouseTable As DataTable
 Dim isConvert As Boolean = True
 Dim salesOrderFacade As New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.SelectAllItemsToInvoice(warehouseTable, isConvert)
    </code>
		<code lang="CS" title="SelectAllItemsToInvoice" description="Processes the warehouseTable rows for invoicing.">
 DataTable warehouseTable;
 bool isConvert = True;
 Inteprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Inteprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.SelectAllItemsToInvoice(warehouseTable, isConvert);
    </code>
	</example>
	<requirements>Parameter <em>warehouseTable</em> can't be nothing</requirements>
	<param name="warehouseTable">A <strong>DataTable</strong> containing a list of warehouses in the sales order.</param>
	<param name="isConvert">A <strong>Boolean</strong> indicating to select or unselect.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.SelectItemsToInvoice(System.Data.DataRow,System.Boolean)">
	<summary>
 Procedure to select all the items to be invoiced in the specified warehouse.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>SelectItemsToInvoice</em></strong> method.</para>
		<code lang="VB" title="SelectItemsToInvoice" description="Process which invoice item lines are to be processed based on the warehouseRow.">
 Dim warehouseRow As DataRow
 Dim isConvert As Boolean = True
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.SelectItemsToInvoice(warehouseRow, isConvert)
    </code>
		<code lang="CS" title="SelectItemsToInvoice" description="Process which invoice item lines are to be processed based on the warehouseRow.">
 DataRow warehouseRow;
 bool isConvert = true;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.SelectItemsToInvoice(warehouseRow, isConvert);
    </code>
	</example>
	<param name="warehouseRow">A <strong>DataRow</strong> containing the selected warehouse.</param>
	<param name="isConvert">A <strong>Boolean</strong> indicating to select or unselect.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to assign the document code to the transaction
 </summary>
	<param name="transactionType">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are Quote, SalesOrder, BackOrder and RMA.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.SetSalesPrice(System.Data.DataRowView,System.Boolean@)">
	<summary>
 Procedure that supplies the data necessary in determining the sales price of an item line.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>SetSalesPrice</em></strong> method.</para>
		<code lang="VB" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 Dim dvyuItem As DataRowView
 Dim byTotalQty As Boolean 'By-Referece variable
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.SetSalesPrice(dvyuItem, byTotalQty)
    </code>
		<code lang="CS" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 DataRowView dvyuItem;
 bool byTotalQty; //By-Reference variable
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.SetSalesPrice(dvyuItem, byTotalQty);
    </code>
	</example>
	<param name="dvyuItem">A <strong>DataRowView</strong> containing the item line.</param>
	<param name="byTotalQty">A <strong>Boolean</strong> value indicating whether to compute sales price base on the total quantity of the matrix item</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.SetSalesPrice(System.Data.DataRowView,System.Boolean,System.Boolean@)">
	<summary>
 Procedure that supplies the data necessary in determining the sales price of an item line.
 </summary>
	<remarks>
		<para>FieldNames of CustomerSalesOrders and CustomerInvoice tables must be the
    same, because this function is shared on Orders and Invoices module.</para>
		<para>Method is overloaded on Interprise.Facade.Customer.SalesOrderFacade and
    Interprise.Facade.Customer.InvoiceFacade</para>
	</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>SetSalesPrice</em></strong> method.</para>
		<code lang="VB" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 Dim lineItemRow As DataRowView
 Dim isAutoSelectLastPrice As Boolean
 Dim byTotalQty As Boolean 'By-Referece variable
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.SetSalesPrice(lineItemRow, isAutoSelectLastPrice, byTotalQty)
    </code>
		<code lang="CS" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 DataRowView lineItemRow;
 bool isAutoSelectLastPrice;
 bool byTotalQty; //By-Reference variable
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.SetSalesPrice(lineItemRow, isAutoSelectLastPrice, byTotalQty);
    </code>
	</example>
	<param name="lineItemRow">Item row to be processed</param>
	<param name="isAutoSelectLastPrice">A <strong>Boolean</strong> indicating to autoselect the last sales price if the customer pricing method is Last Price.</param>
	<param name="byTotalQty">A <strong>Boolean</strong> value indicating whether to compute sales price base on the total quantity of the matrix item</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.SyncAmount(Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesOrderViewDataTable,System.Data.DataTable,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to recalculate the base amounts of the transaction when the exchange rate has been changed.
 </summary>
	<param name="dtblHeader">A <strong>SalesOrderDatasetGateway.CustomerSalesOrderViewDataTable</strong> containing the transaction header.</param>
	<param name="dtblDetail">A <strong>DataTable</strong> containing the transaction item lines.</param>
	<param name="transaction">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are Quote, SalesOrder, BackOrder and RMA.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.VoidOrder">
	<summary>
 Procedure to void the sales order.
 </summary>
	<remarks>Voiding sales order also deallocates the stocks previously allocated to it. 
 Returns True if voiding is successfull.</remarks>
	<example>
    The following codes shows how to implement the <strong><em>VoidOrder</em></strong>
    method.
    <code lang="VB" title="VoidOrder" description="Cancels the order being processed and deallocates commited items from the inventory stock.">
 Dim isVoided As Boolean
 Dim salesOrderFacade As New Invterprise.Facade.Customer.SalesOrderFacade 
 isVoided = salesOrderFacade.VoidOrder()
    </code>
		<code lang="CS" title="VoidOrder" description="Cancels the order being processed and deallocates commited items from the inventory stock.">
 bool isVoided;
 Invterprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Invterprise.Facade.Customer.SalesOrderFacade();
 isVoided = salesOrderFacade.VoidOrder();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetKitConfiguration(System.Data.DataRow)">
	<example>
    The following codes shows how to implement the
    <strong><em>GetKitConfiguration</em></strong> method. 
    <code lang="VB" title="GetKitConfiguration" description="Gets the kit item's settings.">
 Dim rowItemLine As DataRow
 Dim kitConfig As KitConfiguration
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 kitConfig = salesOrderFacade.GetKitConfiguration(rowItemLine)
    </code>
		<code lang="VB" title="GetKitConfiguration" description="Gets the kit item's settings.">
 DataRow rowItemLine;
 KitConfiguration kitConfig;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 kitConfig = salesOrderFacade.GetKitConfiguration(rowItemLine);
    </code>
	</example>
	<summary>
 Retrieves the kit item's setup values such as KitType, ComponentCode, GroupCode,
 and SalesPrice.
 </summary>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.DisableFreightCalculation">
	<example>
    The following codes shows how to implement the
    <strong><em>DisableFreightCalculation</em></strong> method.
    <code lang="VB" title="DisableFreightCalculation" description="Disallows computation of freight charge and tax for the sales order transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.DisableFreightCalculation()
    </code>
		<code lang="CS" title="DisableFreightCalculation" description="Disallows computation of freight charge and tax for the sales order transaction.">
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.DisableFreightCalculation();
    </code>
	</example>
	<summary>
 Disables computation of freight charges and tax for the sales order
 transaction.
 </summary>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ClearCommission">
	<summary>Resets the commission values of the sales rep to 0.</summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ClearCommission</em></strong> method.
    <code lang="VB" title="ClearCommission" description="Resets the commission values of the sales rep to 0.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ClearCommission()
    </code>
		<code lang="CS" title="ClearCommission" description="Resets the commission values of the sales rep to 0.">
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ClearCommission();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.HasUnauthorizedCreditCardPayment">
	<summary>
 Procedure to check for sales order credit card payments that are not yet processed.
 </summary>
	<returns>Boolean</returns>
	<example>
    The following codes shows how to implement the
    <strong><em>HasUnauthorizedCreditCardPayment</em></strong> method.
    <code lang="VB" title="HasUnauthorizedCreditCardPayment" description="Checks if the sales order has available unprocessed credit card payments.">
 Dim hasUnauthorizedCCPayment As Boolean
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 hasUnauthorizedCCPayment = salesOrderFacade.HasUnauthorizedCreditCardPayment()
    </code>
		<code lang="CS" title="HasUnauthorizedCreditCardPayment" description="Checks if the sales order has available unprocessed credit card payments.">
 bool hasUnauthorizedCCPayment;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 hasUnauthorizedCCPayment = salesOrderFacade.HasUnauthorizedCreditCardPayment();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CheckQuantityAvailableFromQuote">
	<summary>
 Check each items for available stocks and disallow conversion of Quote to SO when ignore stock level is off
 </summary>
	<returns></returns>
	<remarks>Added By: Blyth L. Kitane   12/7/2009</remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AddColumnChangingHandler">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.RemoveColumnChangingHandler">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.LoadDataset(System.String)">
	<summary>
	</summary>
	<param name="salesOrderCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Procedure to validate the values contained in the column of a row.
 </summary>
	<remarks>If set to true, there were no errors found.</remarks>
	<example>
    The following codes shows how to implement the <strong><em>Validate</em></strong>
    method.
    <code lang="VB" title="Validate" description="Checks the value of the column from the row for errors.">
 Dim row As DataRow
 Dim columnName As String = "SalesOrderCode"
 Dim colHasNoError As Boolean
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 colHasNoError = salesOrderFacade.Validate(row, columnName)
    </code>
		<code lang="CS" title="Validate" description="Checks the value of the column from the row for errors.">
 DataRow row;
 string columnName = "SalesOrderCode";
 bool colHasNoError;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 colHasNoError = salesOrderFacade.Validate(row, columnName);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>row</em> can't be nothing.</para>
		<para>Parameter <em>columnName</em> can't be empty.</para>
	</requirements>
	<param name="row">A <strong>DataRow</strong> containing the row to validate.</param>
	<param name="columnName">A <strong>String</strong> containing the name of the column to validate.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.Validate(System.String[])">
	<summary>
 Validates the tables from the dataset specified in the array containing the table
 names.
 </summary>
	<remarks>If set to true, there were no errors found.</remarks>
	<example>
    The following codes shows how to implement the <strong><em>Validate</em></strong>
    method.
    <code lang="VB" title="Validate" description="Checks tables specified in the tablenames parameter for errors.">
 Dim tableNames As String() = New String() {"CustomerSalesOrder", "CustomerSalesOrderDetail"}
 Dim tableHasNoErrors As Boolean
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 tableHasNoErrors = salesOrderFacade.Validate(tableNames)
    </code>
		<code lang="CS" title="Validate" description="Checks tables specified in the tablenames parameter for errors.">
 String[] tableNames = New String[] {
       "CustomerSalesOrder",
       "CustomerSalesOrderDetail"};
 bool tableHasNoErrors;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 tableHasNoErrors = salesOrderFacade.Validate(tableNames);
    </code>
	</example>
	<param name="tableNames">The tables to be validated.</param>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AddKitComponentAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerItemKitDetailViewDataTable,System.Int32)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="componentChanges"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AddOrderDetailAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesOrderDetailViewDataTable)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="detailChanges"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AddStockAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerSalesOrderDetailViewRow)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="detailRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.AddStockAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.SalesOrderDataset.CustomerItemKitDetailViewRow)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="componentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.PopulateStockAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.UpdateOrderDetailProcessID(System.String)">
	<summary>
	</summary>
	<param name="processID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.UpdateDropShipResevation(System.String,System.String,System.String,System.Int32,System.Decimal)">
	<summary>
	</summary>
	<param name="transactionCode"></param>
	<param name="itemCode"></param>
	<param name="lineNum"></param>
	<param name="proposeQuantityOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.UpdateDropShippingDate(System.String,System.String,System.Int32,System.DateTime)">
	<summary>
	</summary>
	<param name="transactionCode"></param>
	<param name="itemCode"></param>
	<param name="lineNum"></param>
	<param name="shippingDate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.LoadOrder(System.String)">
	<summary>
	</summary>
	<param name="saleOrderCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.GetPromoSalesPrice(System.Data.DataRowView)">
	<summary>
 Addded by Jb Mago 9/23/2015
 Gets the sales price of the promo item
 </summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.ApplyDiscountOnConvertedItems(System.Data.DataTable,System.String,System.String)">
	<summary> 
 Added by Jb Mago 9/29/2015
 Re-insert promo details into promo tables as invoice when converted
 </summary>
	<param name="transactionCode"></param>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.EvaluatePromo(System.Data.DataTable,System.String,System.String)">
	<summary>
 Addded by Jb Mago 12/29/2015
 Associated to ApplyDiscountOnConvertedItems Method
 Checks the promo if it has multiple free items
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SalesOrderFacade.CheckPromoExistence(System.Data.DataRowView)">
	<summary>
 Addded by Jb Mago 12/09/2015
 Checks the item if it has existing promo in the sales order
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SalesOrderCreditApprovalFacade.CurrentDataset">
	<summary>
 Gets the instance of Interprise.Framework.Base.DatasetComponent.BaseDataset class
 which contains the sales orders to be credit approved.
 </summary>
	<value>
 The instance of Interprise.Framework.Base.DatasetComponent.BaseDataset
 class.
 </value>
</member><member name="M:Interprise.Facade.Customer.SalesOrderCreditApprovalFacade.ApproveCredit(System.Data.DataSet)">
	<summary>Credit approves the sales orders loaded in the dataset.</summary>
	<param name="datasetForCreditApproval">
 The instance of dataset that contains the sales orders that needs credit
 approval.
 </param>
</member><member name="P:Interprise.Facade.Customer.RecurringTransactionFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.RecurringTransactionFacade.#ctor(Interprise.Framework.Base.DatasetGateway.RecurredTransactionDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="recurringTransactionDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.CreditAvailabilityFacade">
	<summary>
 Returns a <strong>CreditAvailabilityFacade</strong> object. 
 </summary>
	<value>CreditAvailabilityFacade</value>
	<returns></returns>
	<remarks>The object is used in applying customer credits.</remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.InvoiceFacade">
	<summary>
 Returns a <strong>IInvoiceInterface</strong> object.
 </summary>
	<value>IInvoiceInterface</value>
	<returns></returns>
	<remarks>The object is used in reading outstanding invoices and credit memos/notes of the customer.</remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.m_customerFacade">
	<summary>
 Returns a <strong>CustomerDetailFacade</strong> object.
 </summary>
	<value>CustomerDetailFacade</value>
	<returns></returns>
	<remarks>The object is used in reading customer information.</remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.CustomerInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.ReceiptsToPost">
	<summary>
 Returns a <strong>ReceiptDatasetGateway</strong> containing the receipts to be posted.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.RelatedTables(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Returns a <strong>String</strong> array containing the name of the tables to be saved.
 </summary>
	<param name="transactionType">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are CustomerReceipt, CustomerRefund, CustomerVoidReceipt and CustomerReceiptAllocation.</param>
	<value>String array</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.TransactionType">
	<summary>
 Gets or sets the transaction type. 
 </summary>
	<value>Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.AllocationDifference">
	<summary>
 Gets or sets the difference between total allocated debits and credits.
 </summary>
	<value>Decimal</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.IsDeallocateAllocation">
	<summary>
 Gets or sets a value indicating to deallocate credits and debits. 
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.VoidReceiptDataset">
	<summary>
 Gets the dataset of void receipt.
 </summary>
	<value>Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.VoidReceiptFacade">
	<summary>
 Gets the facade of void receipt.
 </summary>
	<value>Interprise.Extendable.Customer.Facade.IReceiptInterface</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.CryptoService">
	<summary>
 Gets the <strong>Interprise.Licensing.Base.Services.CryptoServiceProvider</strong> object used in encryption/decryption.
 </summary>
	<value>Interprise.Licensing.Base.Services.CryptoServiceProvider</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.HasReservedToInvoice(System.String)">
	<summary>
 Property that checks if the payment has already been reserved to an Invoice transaction.
 </summary>
	<param name="param"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.IsDebitFullyAllocated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.DebitBalance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.RefundFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.IsAllocationPosted">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.IsCreditFullyAllocated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.IsFromMenuItemVoidReceipt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.CustomerCreditCardCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.AutoWriteOffBalance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.WriteOffEqualOrBelowThisAmount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.IsCustomerInvoiceViewLoaded">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.CustomerRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.FromTransactionReceipt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ReceiptFacade.UseOldAllocationMode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddReceipt(System.Data.DataRow[],Interprise.Framework.Base.Shared.Enum.TransactionType,System.Boolean,System.Decimal,System.String,System.String,System.String)">
	<summary>
 Creates a new Receipt or Refund record
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddReceipt</em></strong> method.</para>
		<code lang="VB" title="AddReceipt" description="Creates a new receipt transaction from the parameter information.">
 Dim customerRow As DataRow
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Receipt
 Dim isSOReceipt As Boolean = False
 Dim defaultAmountPaid As Decimal = 100
 Dim paymentTermCode As String = "Term30Days"
 Dim parentTransactionCode As String
 Dim contactCode As String = "CCTC-000001"
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AddReceipt(customerRow, transactionType, isSOReceipt, defaultAmountPaid, paymentTermCode, parentTransactionCode, contactCode)
    </code>
		<code lang="CS" title="AddReceipt" description="Creates a new receipt transaction from the parameter information.">
 DataRow customerRow;
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.Receipt;
 bool isSOReceipt = False;
 Decimal defaultAmountPaid = 100;
 String paymentTermCode = "Term30Days";
 String parentTransactionCode;
 String contactCode = "CCTC-000001";
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.AddReceipt(customerRow, transactionType, isSOReceipt, defaultAmountPaid, paymentTermCode, parentTransactionCode, contactCode);
    </code>
	</example>
	<param name="customerRow">A <strong>System.Data.DataRow</strong> that contains the customer information</param>
	<param name="transactionType">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are CustomerReceipt or CustomerRefund</param>
	<param name="isSOReceipt">A <strong>Boolean</strong> variable that indicates if the receipt to be created is reserved for a Sales Order or an Invoice</param>
	<param name="defaultAmountPaid">A <strong>Decimal</strong> value that represents the amount to be paid/refunded</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddReceipt(System.Data.DataRow,System.String,System.String,System.Decimal@,System.Decimal@)">
	<summary>
 Creates a new Receipt or Refund record
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddReceipt</em></strong> method.</para>
		<code lang="VB" title="AddReceipt" description="Creates a new receipt transaction from the supplier parameter information.">
 Dim drowCust As DataRow
 Dim strReceiptMethod As String
 Dim strTableName As String
 Dim decTotalCredit As Decimal = 100
 Dim decTotalPrepayment As Decimal
 Dim receiptTable As DataTable
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptTable = receiptFacade.AddReceipt(drowCust, strReceiptMethod, strTableName, decTotalCredit, decTotalPrepayment)
    </code>
		<code lang="CS" title="AddReceipt" description="Creates a new receipt transaction from the supplier parameter information.">
 DataRow drowCust;
 string strReceiptMethod;
 string strTableName;
 Decimal decTotalCredit = 100;
 Decimal decTotalPrepayment;
 DataTable receiptTable;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptTable = receiptFacade.AddReceipt(drowCust, strReceiptMethod, strTableName, decTotalCredit, decTotalPrepayment);
    </code>
	</example>
	<param name="drowCust">A <strong>System.Data.DataRow</strong> that contains the customer information</param>
	<param name="strReceiptMethod">A <strong>String</strong> value that represents the payment method for this transaction</param>
	<param name="strTableName">A <strong>String</strong> that contains a Tablename value</param>
	<param name="decTotalCredit">A <strong>Decimal</strong> ByRef variable that will contain the customer's TotalCredits</param>
	<param name="decTotalPrepayment">A <strong>Decimal</strong> ByRef variable that will contain the customer's TotalPrepayments</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddReceiptDetail(System.Data.DataRow[])">
	<summary>
 Creates a new Receipt Detail or Refund Detail record
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddReceiptDetail</em></strong> method.</para>
		<code lang="VB" title="AddReceiptDetail" description="Procedure that creates payment detail records for the receipt that contains which debit transactions the receipt were allocated to.">
 Dim drowInvoice As DataRow
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AddReceiptDetail(drowInvoice)
    </code>
		<code lang="CS" title="AddReceiptDetail" description="Procedure that creates payment detail records for the receipt that contains which debit transactions the receipt were allocated to.">
 DataRow drowInvoice;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.AddReceiptDetail(drowInvoice);
    </code>
	</example>
	<requirements>Parameter <em>drowInvoice</em> can't be nothing.</requirements>
	<param name="drowInvoice">A <strong>System.Data.DataRow</strong> that contains the invoice information for this payment</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddReceiptDetailTemp(System.Data.DataRow)">
	<summary>
 Creates a new temporary receipt detail table 
 </summary>
	<returns>CustomerPaymentDetailTemp table</returns>
	<example>
    The following codes shows how to implement the
    <strong><em>AddReceiptDetailTemp</em></strong> method.
    <code lang="VB" title="AddReceiptDetailTemp" description="Creates a copy of the payment detail table for more processing.">
 Dim drowInvoice As DataRow
 Dim reciptDetailTableTmp As DataTable
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 reciptDetailTableTmp = receiptFacade.AddReceiptDetailTemp(drowInvoice)
    </code>
		<code lang="CS" title="AddReceiptDetailTemp" description="Creates a copy of the payment detail table for more processing.">
 DataRow drowInvoice;
 DataTable reciptDetailTableTmp;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 reciptDetailTableTmp = receiptFacade.AddReceiptDetailTemp(drowInvoice);
    </code>
	</example>
	<param name="drowInvoice">A <strong>System.Data.DataRow</strong> that contains the invoice information for this payment</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ApplyAmountPaid(System.Data.DataRowView)">
	<summary>
 Apply the amount paid to the payment detail row of this payment
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ApplyAmountPaid</em></strong> method.</para>
		<code lang="VB" title="ApplyAmountPaid" description="Procedure that saves the receipt and automatically allocate the amount to selected unpaid debit transactions.">
 Dim paymentDetailRow As DataRowView 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ApplyAmountPaid(paymentDetailRow)
    </code>
		<code lang="CS" title="ApplyAmountPaid" description="Procedure that saves the receipt and automatically allocate the amount to selected unpaid debit transactions.">
 DataRowView paymentDetailRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ApplyAmountPaid(paymentDetailRow);
    </code>
	</example>
	<param name="paymentDetailRow">A <strong>System.Data.DataRowView</strong> that contains the payment row</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ApplyAmountToBePaid(System.Data.DataRowView)">
	<summary>
 Set amount to be paid equal to amount due
 </summary>
	<example>
		<code lang="VB" title="ApplyAmountToBePaid" description="Procedure that sets the amount of the receipt to the total amount of unpid debit transactions.">
 Dim drvyuReceivable As DataRowView
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ApplyAmountToBePaid(drvyuReceivable)
    </code>
		<code lang="VB" title="ApplyAmountToBePaid" description="Procedure that sets the amount of the receipt to the total amount of unpid debit transactions.">
 DataRowView drvyuReceivable;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.ApplyAmountToBePaid(drvyuReceivable);
    </code>
	</example>
	<requirements>Parameter <em>drvyuReceivable</em> can't be nothing.</requirements>
	<param name="drvyuReceivable">A <strong>System.Data.DataRowView</strong> that contains the payment row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignAllCheckbook(System.String)">
	<summary>
 Assigns the BankAccount for all the receipts included in this transaction
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignAllCheckbook</em></strong> method.</para>
		<code lang="VB" title="AssignAllCheckbook" description="Assigns the back code for the current receipt transaction.">
 Dim strCheckbook As String = "BNK-000001" 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AssignAllCheckbook(strCheckbook)
    </code>
		<code lang="CS" title="AssignAllCheckbook" description="Assigns the back code for the current receipt transaction.">
 string strCheckbook = "BNK-000001";
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AssignAllCheckbook(strCheckbook);
    </code>
	</example>
	<param name="strCheckbook">A <strong>String</strong> value that contains the BankAccountCode to be assigned</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignBankAccount(System.Data.DataRow)">
	<summary>
 Assigns the BankAccount details to the current receipt
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignBankAccount</em></strong> method.</para>
		<code lang="VB" title="AssignBankAccount" description="Assigns the bank account code for the current receipt transaction.">
 Dim rowBankAccount As DataRow
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AssignBankAccount(rowBankAccount)
    </code>
		<code lang="CS" title="AssignBankAccount" description="Assigns the bank account code for the current receipt transaction.">
 DataRow rowBankAccount;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AssignBankAccount(rowBankAccount);
    </code>
	</example>
	<requirements>Parameter <em>rowBankAccount</em> can't be nothing.</requirements>
	<param name="rowBankAccount">A <strong>DataRow</strong> that contains the BankAccount information to be assigned</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignBankAccountInfo(System.Data.DataRow)">
	<summary>
  Assigns the BankAccount details to the current receipt
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignBankAccountInfo</em></strong> method.</para>
		<code lang="VB" title="AssignBankAccountInfo" description="Assign bank account information to the current receipt transaction.">
 Dim rowBankAccount As DataRow
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AssignBankAccountInfo(rowBankAccount)
    </code>
		<code lang="CS" title="AssignBankAccountInfo" description="Assign bank account information to the current receipt transaction.">
 DataRow rowBankAccount;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.AssignBankAccountInfo(rowBankAccount);
    </code>
	</example>
	<requirements>Parameter rowBankAccount can't be nothing.</requirements>
	<param name="rowBankAccount">A <strong>DataRow</strong> that contains the BankAccount information to be assigned</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignCreditCard(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assignes the credit card values to the payment method row
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignCreditCard</em></strong> method.</para>
		<code lang="VB" title="AssignCreditCard" description="Assigns the credit card information in the receipt payment method.">
 Dim rowCreditCard As DataRow
 Dim rowPaymentMethod As DataRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AssignCreditCard(rowCreditCard, rowPaymentMethod)
    </code>
		<code lang="CS" title="AssignCreditCard" description="Assigns the credit card information in the receipt payment method.">
 DataRow rowCreditCard;
 DataRow rowPaymentMethod;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.AssignCreditCard(rowCreditCard, rowPaymentMethod);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>rowCreditCard</em> can't be nothing.</para>
		<para>Parameter <em>rowPaymentMethod</em> can't be nothing.</para>
	</requirements>
	<param name="rowCreditCard">A <strong>System.Data.DataRow</strong> that conatins the CreditCard row to be assigned</param>
	<param name="rowPaymentMethod">A <strong>System.Data.DataRow</strong> that contains the PyamentMthod row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignPaymentMethod(Interprise.Framework.Customer.DatasetComponent.ReceiptDataset.PaymentMethodViewRow)">
	<summary>
 Assign defaults value for the Payment Method row
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignPaymentMethod</em></strong> method.</para>
		<code lang="VB" title="AssignPaymentMethod" description="Assigns the customer's payment method information in the receipt transaction.">
 Dim paymentMethod As PaymentMethodViewRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AssignPaymentMethod(paymentMethod)
    </code>
		<code lang="CS" title="AssignPaymentMethod" description="Assigns the customer's payment method information in the receipt transaction.">
 PaymentMethodViewRow paymentMethod;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.AssignPaymentMethod(paymentMethod);
    </code>
	</example>
	<requirements>Parameter <em>paymentMethod</em> can't be nothing.</requirements>
	<param name="paymentMethod">A <strong>Framework.Customer.DatasetComponent.ReceiptDataset.PaymentMethodViewRow</strong> that contains the row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignPaymentMethodDefaults(System.Data.DataRow,System.String)">
	<summary>
 Assign defaults depending on the selected payment method
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignPaymentMethodDefaults</em></strong> method.</para>
		<code lang="VB" title="AssignPaymentMethodDefaults" description="Assigns the payment method defaults values to the receipt transaction.">
 Dim rowPaymentMethod As DataRow
 Dim paymentTermCode As String = "NET30"
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AssignPaymentMethodDefaults(rowPaymentMethod, paymentTermCode)
    </code>
		<code lang="CS" title="AssignPaymentMethodDefaults" description="Assigns the payment method defaults values to the receipt transaction.">
 DataRow rowPaymentMethod;
 string paymentTermCode = "NET30";
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AssignPaymentMethodDefaults(rowPaymentMethod, paymentTermCode);
    </code>
	</example>
	<requirements>
		<para>Parameter rowPaymentMethod can't be nothing.</para>
		<para>Parameter paymentTermCode can't be empty.</para>
	</requirements>
	<param name="rowPaymentMethod">A <strong>System.Data.DataRow</strong> that contains the PaymentMthod row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddTradingInfoRowDetails(System.String,System.Decimal)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AutoApplyAmountPaid">
	<summary>
 Automatically allocate the amount paid of the current receipt to the current debit row
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AutoApplyAmountPaid</em></strong> method.</para>
		<code lang="VB" title="AutoApplyAmountPaid" description="Procedure that saves the receipt and automatically allocate the amount to unpaid debit transactions.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AutoApplyAmountPaid()
    </code>
		<code lang="CS" title="AutoApplyAmountPaid" description="Procedure that saves the receipt and automatically allocate the amount to unpaid debit transactions.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AutoApplyAmountPaid();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CancelAmountPaid(System.Data.DataRowView)">
	<summary>
 Aborts payment allocation made for the supplied payment detail row
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>CancelAmountPaid</em></strong> method.
    <code lang="VB" title="CancelAmountPaid" description="Cancels out the payment made in the allocation transaction.">
 Dim drvyuReceiptDetail As DataRowView 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CancelAmountPaid(drvyuReceiptDetail)
    </code>
		<code lang="CS" title="CancelAmountPaid" description="Cancels out the payment made in the allocation transaction.">
 DataRowView drvyuReceiptDetail;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.CancelAmountPaid(drvyuReceiptDetail);
    </code>
	</example>
	<requirements>Parameter <em>drvyuReceiptDetail</em> can't be nothing.</requirements>
	<param name="drvyuReceiptDetail">A <strong>System.Data.DataRowView</strong> that contains the payment detail row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ComputeReceiptDetail(System.Data.DataRow)">
	<summary>
 Computes the amount due and balance columns for the payment detail row supplied
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeReceiptDetail</em></strong> method.</para>
		<code lang="VB" title="ComputeReceiptDetail" description="Computes for the amountDue and Balance of the receipt transaction.">
 Dim paymentDetailRow As DataRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ComputeReceiptDetail(paymentDetailRow)
    </code>
		<code lang="CS" title="ComputeReceiptDetail" description="Computes for the amountDue and Balance of the receipt transaction.">
 DataRow paymentDetailRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ComputeReceiptDetail(paymentDetailRow);
    </code>
	</example>
	<requirements>Parameter <em>paymentDetailRow</em> can't be nothing.</requirements>
	<param name="paymentDetailRow">A <strong>DataRow</strong> that contains the payment detail row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.DecryptCardNumber(System.String,System.Data.DataRow)">
	<summary>
 Procedure to decrypt the card number.
 </summary>
	<param name="encryptedCardNumber">An encrypted card number to decrypt.</param>
	<param name="rowPaymentMethod">A <strong>DataRow</strong> of <strong>PaymentMethodView</strong> datatable.</param>
	<returns>Decrypted card number.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.DecryptCardNumber">
	<summary>
 Procedure to decrypt the card number.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.EncryptCardNumber">
	<summary>
 Procedure to encrypt the card number.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>EncryptCardNumber</em></strong> method.</para>
		<code lang="VB" title="EncryptCardNumber" description="Decodes the value of the Credit Card number for validation.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.EncryptCardNumber()
    </code>
		<code lang="CS" title="EncryptCardNumber" description="Decodes the value of the Credit Card number for validation.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.EncryptCardNumber();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.EncryptCardNumber(System.String,System.Data.DataRow)">
	<summary>
 Procedure to encrypt the card number.
 </summary>
	<param name="unencryptedCardNumber">A card number to encrypt.</param>
	<param name="rowPaymentMethod">A <strong>DataRow</strong> of <strong>PaymentMethodView</strong> datatable.</param>
	<returns>Encrypted card number.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.GetCreditCardResponse">
	<summary>
 Gets Credit Card Response Information
 </summary>
	<returns>CC Response Information</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>GetCreditCardResponse</em></strong> method.</para>
		<code lang="VB" title="GetCreditCardResponse" description="Gets information from the receipt merchant about the credit card transaction.">
 Dim response As String
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 response = receiptFacade.GetCreditCardResponse()
    </code>
		<code lang="CS" title="GetCreditCardResponse" description="Gets information from the receipt merchant about the credit card transaction.">
 String response;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 response = receiptFacade.GetCreditCardResponse();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.GetAvailableReceipts(System.String,System.String,System.String,System.DateTime,System.Decimal,System.Decimal,Interprise.Framework.Base.DatasetComponent.BaseDataset)">
	<summary>
 Retrieves all of the available receipts of the customer specified
 </summary>
	<param name="customerCode">A <strong>String</strong> value that represents the customer's code</param>
	<param name="documentCode">A <strong>String</strong> value that represents the document's code to be retrieved</param>
	<param name="invoiceCode">A <strong>String</strong> value that represents the invoice code the receipt is allocated to</param>
	<param name="invoiceDate">A <strong>Date</strong> value that represents the date of the invoice</param>
	<param name="currentBalance">A <strong>Decimal</strong> value that indicates the balance of the receipt in home currency</param>
	<param name="currentBalanceRate">A <strong>Decimal</strong> value that indicates the balance of the receipt in customer currency</param>
	<param name="dataset">A <strong>Framework.Base.DatasetComponent.BaseDataset</strong> that will contain the processed credit row</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.KeepCreditCardOnFile">
	<summary>
 Creates a new credit card record on the database.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>KeepCreditCardOnFile</em></strong> method.</para>
		<code lang="VB" title="KeepCreditCardOnFile" description="Option to save the new credit card information in the data source.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.KeepCreditCardOnFile()
    </code>
		<code lang="CS" title="KeepCreditCardOnFile" description="Option to save the new credit card information in the data source.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.KeepCreditCardOnFile();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ReComputeReceipt">
	<summary>
 Assigns the new amount paid both in home and customer currency to the corresponding payment method record
 </summary>
	<example>
		<code lang="VB" title="ReComputeReceipt" description="Method that recomputes the receipt's amount paid rate (amout paid * exchange rate).">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ReComputeReceipt()
    </code>
		<code lang="CS" title="ReComputeReceipt" description="Method that recomputes the receipt's amount paid rate (amout paid * exchange rate).">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ReComputeReceipt();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.VoidReceipt(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway@)">
	<summary>
 Procedure to void a receipt
 </summary>
	<returns>Returns true if voiding of the receipt was successful</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>VoidReceipt</em></strong> method.</para>
		<code lang="VB" title="VoidReceipt" description="Procedure that voids the customer receipt by making a new debit transaction in the form of a VR (Void Receipt) that has the same amount as the original receipt being voided.">
 Dim isVoided As Boolean
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 isVoided = receiptFacade.VoidReceipt()
    </code>
		<code lang="CS" title="VoidReceipt" description="Procedure that voids the customer receipt by making a new debit transaction in the form of a VR (Void Receipt) that has the same amount as the original receipt being voided.">
 bool isVoided;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 isVoided = receiptFacade.VoidReceipt();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddAllocationHeader(System.Data.DataRow)">
	<summary>
 Creates an Allocation Header for the allocation transaction
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddAllocationHeader</em></strong> method.</para>
		<code lang="VB" title="AddAllocationHeader" description="Creates a new header record for the receipt allocation.">
 Dim customerRow As DataRow
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AddAllocationHeader(customerRow)
    </code>
		<code lang="CS" title="AddAllocationHeader" description="Creates a new header record for the receipt allocation.">
 DataRow customerRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AddAllocationHeader(customerRow);
    </code>
	</example>
	<requirements>Parameter <em>customerRow</em> can't be nothing.</requirements>
	<param name="customerRow">A <strong>DataRow</strong> that contains the customer row from which to create the allocation transaction</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateCustomerAllocationDebitViewFromInvoice(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="sourceRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateCustomerAllocationDebitViewFromRefund(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="sourceRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddDebitRows(System.Data.DataRow)">
	<summary>
 Retrieves all the debit rows from the database
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddDebitRows</em></strong> method.</para>
		<code lang="VB" title="AddDebitRows" description="Loads all debit transactions for the supplied customer information for allocation. Debit rows include Invoices, Opening Invoices, Void Receipts, and Refunds.">
 Dim customerRow As DataRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AddDebitRows(customerRow)
    </code>
		<code lang="CS" title="AddDebitRows" description="Loads all debit transactions for the supplied customer information for allocation. Debit rows include Invoices, Opening Invoices, Void Receipts, and Refunds.">
 DataRow customerRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AddDebitRows(customerRow);
    </code>
	</example>
	<requirements>Parameter <em>customerRow</em> can't be nothing.</requirements>
	<param name="customerRow">A <strong>DataRow</strong> that contains the customer row from which to create the allocation transaction</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddDebitRows(Interprise.Framework.Customer.DatasetComponent.CustomerDetailDataset.CustomerViewDataTable)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddDebitRows</em></strong> method.</para>
		<code lang="VB" title="AddDebitRows" description="Loads all debit transactions for all the customer information stored in the customerTable for allocation. Debit rows include Invoices, Opening Invoices, Void Receipts, and Refunds.">
 Dim customerTable As CustomerViewDataTable
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AddDebitRows(customerTable)
    </code>
		<code lang="CS" title="AddDebitRows" description="Loads all debit transactions for all the customer information stored in the customerTable for allocation. Debit rows include Invoices, Opening Invoices, Void Receipts, and Refunds.">
 CustomerViewDataTable customerTable;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.AddDebitRows(customerTable);
    </code>
	</example>
	<requirements>Parameter <em>customerTable</em> can't be nothing.</requirements>
	<excludetoc/>
	<exclude/>
	<summary>
 Loads all debit transactions for all the customer information stored in the
 customerTable for allocation. Debit rows include Invoices, Opening Invoices, Void
 Receipts, and Refunds.
 </summary>
	<param name="customerTable">
 Contains all the customer information to be included in the group receipt
 allocation.
 </param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ApplyPotentialDiscount(System.Boolean,System.Int32)">
	<summary>
 Procedure that set/resets the discount to be applied for the allocation
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ApplyPotentialDiscount</em></strong> method.</para>
		<code lang="VB" title="ApplyPotentialDiscount" description="Applies the potential discount on the selected debit transaction row.">
 Dim isApply As Boolean = True
 Dim row As Integer 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ApplyPotentialDiscount(isApply, row)
    </code>
		<code lang="CS" title="ApplyPotentialDiscount" description="Applies the potential discount on the selected debit transaction row.">
 bool isApply = True;
 int row;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.ApplyPotentialDiscount(isApply, row);
    </code>
	</example>
	<param name="isApply">A <strong>Boolean</strong> flag that indicates if discount should be applied or not</param>
	<param name="row">A <strong>Integer</strong> value that represents the row index of the row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CheckAllocationAmtConcurrency">
	<summary>
 This Method will check the amount allocation to invoice and receipt payment to avoid duplicate payment in a single invoice or duplicate usage of the receipt payment.
 </summary>
	<returns></returns>
	<remarks></remarks>Added by Pete.a 1/8/2010

</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CheckAllocationConcurrency">
	<summary>
 Procedure that checks if the allocation to be saved was not yet processed.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CheckAllocationConcurrency</em></strong> method.</para>
		<code lang="VB" title="CheckAllocationConcurrency" description="A function that checks if the allocation transaction was already been created.">
 Dim isNoConcurrency As Boolean 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 isNoConcurrency = receiptFacade.CheckAllocationConcurrency()
    </code>
		<code lang="CS" title="CheckAllocationConcurrency" description="A function that checks if the allocation transaction was already been created.">
 bool isNoConcurrency;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 isNoConcurrency = receiptFacade.CheckAllocationConcurrency();
    </code>
	</example>
	<remarks>Returns True if no concurrency violation has been found.</remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreatePaymentDetailRow(System.Data.DataRow,System.Data.DataRow,System.Decimal,System.Decimal)">
	<summary>
 Creates a Payment Detail row for the allocation and computes receipt details
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreatePaymentDetailRow</em></strong> method.</para>
		<code lang="VB" title="CreatePaymentDetailRow" description="Procedure that creates payment detail rows for receipt related transactions such as Receipts, Refunds, and Void Receipts.">
 Dim CustomerAllocationDebitViewRow As DataRow
 Dim CustomerAllocationCreditViewRow As DataRow
 Dim appliedAmountRate As Decimal = 100
 Dim appliedReservedAmountRate As Decimal = 100
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CreatePaymentDetailRow(CustomerAllocationDebitViewRow, CustomerAllocationCreditViewRow, appliedAmountRate, appliedReservedAmountRate)
    </code>
		<code lang="CS" title="CreatePaymentDetailRow" description="Procedure that creates payment detail rows for receipt related transactions such as Receipts, Refunds, and Void Receipts.">
 DataRow CustomerAllocationDebitViewRow;
 DataRow CustomerAllocationCreditViewRow;
 Decimal appliedAmountRate = 100;
 Decimal appliedReservedAmountRate = 100;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.CreatePaymentDetailRow(CustomerAllocationDebitViewRow, CustomerAllocationCreditViewRow, appliedAmountRate, appliedReservedAmountRate);
    </code>
	</example>
	<param name="CustomerAllocationDebitViewRow">A <strong>System.Data.DataRow</strong> that contains the AllocationDebit row to be processed</param>
	<param name="CustomerAllocationCreditViewRow">A <strong>System.Data.DataRow</strong> that contains the AllocationCredit row to be processed</param>
	<param name="appliedAmountRate">A <strong>Decimal</strong> value that represents the reserved amount of the receipt in home currency to be processed</param>
	<param name="appliedReservedAmountRate">A <strong>Decimal</strong> value that represents the reserved amount of the receipt in customer currency to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateCreditAllocationRow(System.Data.DataRow,System.Data.DataRow,System.Decimal)">
	<summary>
 Creates a Credit Allocation (Credit Memo Detail) row for the allocation and computes credit memo details
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateCreditAllocationRow</em></strong> method.</para>
		<code lang="VB" title="CreateCreditAllocationRow" description="Procedure that creates credit allocation rows of credit documents such as Credit Memo/Note and Opening Credits.">
 Dim CustomerAllocationDebitViewRow As DataRow
 Dim CustomerAllocationCreditViewRow As DataRow
 Dim amountAppliedRate As Decimal 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CreateCreditAllocationRow(CustomerAllocationDebitViewRow, CustomerAllocationCreditViewRow, amountAppliedRate)
    </code>
		<code lang="CS" title="CreateCreditAllocationRow" description="Procedure that creates credit allocation rows of credit documents such as Credit Memo/Note and Opening Credits.">
 DataRow CustomerAllocationDebitViewRow;
 DataRow CustomerAllocationCreditViewRow;
 Decimal amountAppliedRate;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.CreateCreditAllocationRow(CustomerAllocationDebitViewRow, CustomerAllocationCreditViewRow, amountAppliedRate);
    </code>
	</example>
	<param name="CustomerAllocationDebitViewRow">A <strong>System.Data.DataRow</strong> that contains the AllocationDebit row to be processed</param>
	<param name="CustomerAllocationCreditViewRow">A <strong>System.Data.DataRow</strong> that contains the AllocationCredit row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateCustomerAllocationCreditFromCredit(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Data.DataRow)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateCustomerAllocationCreditFromReceipt(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateCustomerAllocationCreditFromCardPayment(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateCustomerAllocationCreditFromInvoiceWriteOff(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddCreditRow(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="creditRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddCreditRows(System.Data.DataRow)">
	<summary>
  Retrieves all the credit rows from the database
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddCreditRows</em></strong> method.</para>
		<code lang="VB" title="AddCreditRows" description="Add credit documents such as Receipts, Credit Note/Memo, and Opening Credits from the customerRow for allocation.">
 Dim customerRow As DataRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AddCreditRows(customerRow)
    </code>
		<code lang="CS" title="AddCreditRows" description="Add credit documents such as Receipts, Credit Note/Memo, and Opening Credits from the customerRow for allocation.">
 DataRow customerRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AddCreditRows(customerRow);
    </code>
	</example>
	<requirements>Paramter <em>customerRow</em> can't be nothing.</requirements>
	<param name="customerRow">A <strong>DataRow</strong> that contains the customer row from which to create the allocation transaction</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddAllocatedCreditRows(System.Data.DataRow)">
	<summary>
  Retrieves all the allocated credit rows from the database 
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddAllocatedCreditRows</em></strong> method.</para>
		<code lang="VB" title="AddCreditRows" description="Add allocated credit documents such as Receipts, Credit Note/Memo, and Opening Credits from the customerRow even if the invoice is posted for reference.">
 Dim customerRow As DataRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AddAllocatedCreditRows(customerRow)
    </code>
		<code lang="CS" title="AddCreditRows" description="Add allocated credit documents such as Receipts, Credit Note/Memo, and Opening Credits from the customerRow even if the invoice is posted for reference.">
 DataRow customerRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AddAllocatedCreditRows(customerRow);
    </code>
	</example>
	<requirements>Paramter <em>customerRow</em> can't be nothing.</requirements>
	<param name="customerRow">A <strong>DataRow</strong> that contains the customer row from which to show the allocated and available credits.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateAutoAllocation">
	<summary>
 Auto updates current debits and credits allocation amounts
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateAutoAllocation</em></strong> method.</para>
		<code lang="VB" title="CreateAutoAllocation" description="Procedure that automatically allocate all outstanding credits to the unpaid debit transactions.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CreateAutoAllocation()
    </code>
		<code lang="CS" title="CreateAutoAllocation" description="Procedure that automatically allocate all outstanding credits to the unpaid debit transactions.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.CreateAutoAllocation();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.FillCustomerUnpaidDebits(System.String)">
	<summary>
 Reads the debit rows from the table depending on the type
 </summary>
	<param name="type">A <strong>String</strong> value that indicates whar type of documents to read. Possible values are CustomerInvoice or CustomerRefund</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.SetAppliedCredits(Interprise.Framework.Customer.DatasetComponent.ReceiptDataset.CustomerAllocationDebitViewRow,Interprise.Framework.Customer.DatasetComponent.ReceiptDataset.CustomerAllocationCreditViewRow)">
	<summary>
 Sets the value DocumentAllocatedFromCode field
 </summary>
	<param name="debitRow">A <strong>ReceiptDatasetGateway.CustomerAllocationDebitViewRow</strong> that contains the debit row to be processed</param>
	<param name="creditRow">A <strong>ReceiptDatasetGateway.CustomerAllocationCreditViewRow</strong> that contains the credit row to be assigned</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CalculateDiscount(System.Int32,System.Boolean)">
	<summary>
 Computes the discount amount for the debit row
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CalculateDiscount</em></strong> method.</para>
		<code lang="VB" title="CalculateDiscount" description="Procedure that computes the potential discount that can be applied to the debit row specified.">
 Dim row As Integer = 1
 Dim IsForceApplyDiscount As Boolean = False
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CalculateDiscount(row, IsForceApplyDiscount)
    </code>
		<code lang="CS" title="CalculateDiscount" description="Procedure that computes the potential discount that can be applied to the debit row specified.">
 int row = 1;
 bool IsForceApplyDiscount = false;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.CalculateDiscount(row, IsForceApplyDiscount);
    </code>
	</example>
	<param name="row">An <strong>Integer</strong> value that represents the row index of the debit row to be processed</param>
	<param name="IsForceApplyDiscount">A <strong>Boolean</strong> flag that indicates if the process should apply the discount regardless of the payment terms</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AllocateCredit(System.Data.DataRowView,System.Data.DataRowView,System.Boolean)">
	<summary>
 Allocates the credit and debit rows
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AllocateCredit</em></strong> method.</para>
		<code lang="VB" title="AllocateCredit" description="Assigns the information of the paymentDetailRow to the allocationRow then updates the applied amount of the paymentDetailRow.">
 Dim paymentDetailRow As DataRowView
 Dim allocationRow As DataRowView
 Dim isAutoAllocate As Boolean
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AllocateCredit(paymentDetailRow, allocationRow, isAutoAllocate)
    </code>
		<code lang="CS" title="AllocateCredit" description="Assigns the information of the paymentDetailRow to the allocationRow then updates the applied amount of the paymentDetailRow.">
 DataRowView paymentDetailRow;
 DataRowView allocationRow;
 bool isAutoAllocate;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AllocateCredit(paymentDetailRow, allocationRow, isAutoAllocate);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>paymentDetailRow</em> can't be nothing.</para>
		<para>Parameter <em>allocationRow</em> can't be nothing.</para>
	</requirements>
	<param name="paymentDetailRow">A <strong>System.Data.DataRowView</strong> that contains the payment detail row to be processed</param>
	<param name="allocationRow">A <strong>System.Data.DataRowView</strong> that contains the allocation row information</param>
	<param name="isAutoAllocate">A <strong>Boolean</strong> flag that indicates if an auto allocation procedure should be executed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AllocateCredit(System.Boolean,System.Boolean)">
	<summary>
 Allocates the credit and debit rows
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AllocateCredit</em></strong> method.</para>
		<code lang="VB" title="AllocateCredit" description="Allocates the credit transactions to the debit transactions and record which debit documents the credit documents are allocated to.">
 Dim isAutoAllocate As Boolean
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AllocateCredit(isAutoAllocate)
    </code>
		<code lang="CS" title="AllocateCredit" description="Allocates the credit transactions to the debit transactions and record which debit documents the credit documents are allocated to.">
 bool isAutoAllocate;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.AllocateCredit(isAutoAllocate);
    </code>
	</example>
	<param name="isAutoAllocate">A <strong>Boolean</strong> flag that indicates if an auto allocation procedure should be executed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CalculateDebitAllocation(System.Decimal,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="proposedValueToAllocate"></param>
	<param name="allocatedAmount"></param>
	<param name="selected"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CalculateCreditAllocation(System.Decimal,System.Decimal,System.Boolean,System.Data.DataRow,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="proposedValueToAllocate"></param>
	<param name="allocatedAmount"></param>
	<param name="selected"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AllocateDebit(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="debit"></param>
	<param name="allocated"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AllocateCredit(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="credit"></param>
	<param name="allocated"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.GetAllowedProposedValueToAllocateInDebit(System.Decimal,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="proposedValueToAllocate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.GetAllowedProposedValueToAllocateInCredit(System.Decimal,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="proposedValueToAllocate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.DeallocateCredit">
	<summary>
 Deallocates all credit and debit rows
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>DeallocateCredit</em></strong> method.</para>
		<code lang="VB" title="DeallocateCredit" description="Resets all the values of the allocation transaction to 0 including applied amount and potential discounts.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.DeallocateCredit()
    </code>
		<code lang="CS" title="DeallocateCredit" description="Resets all the values of the allocation transaction to 0 including applied amount and potential discounts.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.DeallocateCredit();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.DeallocateCredit(System.Data.DataRowView,System.Data.DataRowView)">
	<summary>
 Deallocates all credit and debit rows
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>DeallocateCredit</em></strong> method.</para>
		<code lang="VB" title="DeallocateCredit" description="Resets the allocationRow values of the allocation transaction that matches the information on the paymentDetailRow to 0 including applied amount and potential discounts.">
 Dim paymentDetailRow As DataRowView
 Dim allocationRow As DataRowView 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.DeallocateCredit(paymentDetailRow, allocationRow)
    </code>
		<code lang="CS" title="DeallocateCredit" description="Resets the allocationRow values of the allocation transaction that matches the information on the paymentDetailRow to 0 including applied amount and potential discounts.">
 DataRowView paymentDetailRow;
 DataRowView allocationRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.DeallocateCredit(paymentDetailRow, allocationRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>paymentDetailRow</em> can't be nothing.</para>
		<para>Parameter <em>allocationRow</em> can't be nothing.</para>
	</requirements>
	<param name="paymentDetailRow">A <strong>System.Data.DataRowView</strong> that contains the payment detail row to be processed</param>
	<param name="allocationRow">A <strong>System.Data.DataRowView</strong> that contains the allocation row information</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.DeallocateCredit(System.Data.DataRowView)">
	<summary>
 Deallocates all credit and debit rows
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>DeallocateCredit</em></strong> method.</para>
		<code lang="VB" title="a" description="Resets the allocationRow values of the allocation transaction that matches the information on the paymentDetailRow to 0 including applied amount and potential discounts.">
 Dim paymentDetailRow As DataRowView 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.DeallocateCredit(paymentDetailRow)
    </code>
		<code lang="CS" title="DeallocateCredit" description="Resets the allocationRow values of the allocation transaction that matches the information on the paymentDetailRow to 0 including applied amount and potential discounts.">
 DataRowView paymentDetailRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.DeallocateCredit(paymentDetailRow);
    </code>
	</example>
	<requirements>Parameter <em>paymentDetailRow</em> can't be nothing.</requirements>
	<param name="paymentDetailRow">A <strong>System.Data.DataRowView</strong> that contains the payment detail row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ComputeAllocationSummary(System.Data.DataRow,System.Int32,System.Boolean)">
	<summary>
 Computes Allocation Summary
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeAllocationSummary</em></strong> method.</para>
		<code lang="VB" title="ComputeAllocationSummary" description="Computes the total values on both debit and credit sides included in the allocation transaction and also checks for the difference.">
 Dim rowAllocation As DataRow
 Dim currentRow As Integer
 Dim IsDebit As Boolean = True
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ComputeAllocationSummary(rowAllocation, currentRow, IsDebit)
    </code>
		<code lang="CS" title="ComputeAllocationSummary" description="Computes the total values on both debit and credit sides included in the allocation transaction and also checks for the difference.">
 DataRow rowAllocation;
 int currentRow;
 bool IsDebit = true;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ComputeAllocationSummary(rowAllocation, currentRow, IsDebit);
    </code>
	</example>
	<requirements>Parameter <em>rowAllocation</em> can't be nothing.</requirements>
	<param name="rowAllocation">Optional. A <strong>DataRow</strong> that will contain either the AllocationDebit or AllocationCredit row</param>
	<param name="currentRow">Optional. An <strong>Integer</strong> value that represents the row index of the current row</param>
	<param name="IsDebit">Optional. A <strong>Boolean</strong> flag that indicates if the row passed is a debit row</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.GetCreditAllocatedAmount(System.Data.DataRow,System.Decimal@,System.Decimal@)">
	<summary>
 Gets Credit Allocated Amount
 </summary>
	<param name="creditRow">A <strong>DataRow</strong> that contains the credit row to be processed</param>
	<param name="allocatedCreditRate">A <strong>Decimal</strong> Byref value that will contain the allocated amount of the credit row supplied</param>
	<param name="reservedAmountRate">A <strong>Decimal</strong> Byref value that will contain the reserved amount of the credit row supplied&gt;</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateFromSelectedInvoice(System.Data.DataRow[],System.Data.DataRow@)">
	<summary>
 Populates the Invoice table with unpaid invoices
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateFromSelectedInvoice</em></strong> method.</para>
		<code lang="VB" title="CreateFromSelectedInvoice" description="Creates a new receipt transaction and sets the amount paid value based on the invoiceRow information.">
 Dim invoiceRow As DataRow
 Dim customerRow As DataRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CreateFromSelectedInvoice(invoiceRow, customerRow)
    </code>
		<code lang="CS" title="CreateFromSelectedInvoice" description="Creates a new receipt transaction and sets the amount paid value based on the invoiceRow information.">
 DataRow invoiceRow;
 DataRow customerRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.CreateFromSelectedInvoice(invoiceRow, customerRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>invoiceRow</em> can't be nothing.</para>
		<para>Parameter <em>customerRow</em> can't be nothing.</para>
	</requirements>
	<param name="invoiceRow">A <strong>DataRow Array</strong> that contains the invoice rows to be assigned</param>
	<param name="customerRow">A <strong>DataRow</strong> that contains the customer row</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ApplyAllocatedCredit(System.String)">
	<summary>
 Applies the selcted credits to the invoice selected.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ApplyAllocatedCredit</em></strong> method.</para>
		<code lang="VB" title="ApplyAllocatedCredit" description="Allocates the current credit document/s to the debit row for an allocation transaction then updates the total credits remaining for the customer.">
 Dim invoiceCode As String = "INV-000001"
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ApplyAllocatedCredit(invoiceCode)
    </code>
		<code lang="CS" title="ApplyAllocatedCredit" description="Allocates the current credit document/s to the debit row for an allocation transaction then updates the total credits remaining for the customer.">
 String invoiceCode = "INV-000001";
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.ApplyAllocatedCredit(invoiceCode);
    </code>
	</example>
	<requirements>Parameter invoiceCode can't be empty.</requirements>
	<param name="invoiceCode">A <strong>String</strong> that represents the invoice code of the credit row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddAllocationDetailFromReference(System.String,System.Int32,System.Decimal,System.Decimal)">
	<summary>
 Adds credit rows from CustomerAllocationCreditViewTemp table to the CustomerAllocationCreditViewDetailsTemp table to be used as the allocation's credit source.
 </summary>
	<param name="invoiceCode">A <strong>String</strong> that represents the invoice code of the credit row to be processed</param>
	<param name="i">An <strong>Integer</strong> that represents the row index of the CustomerAllocationCreditViewTemp row to be processed</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateAllocationCreditRows">
	<summary>
 Creates the allocation's credit rows from the selected credits.
 Also creates the PaymentDetails and CreditAllocation row entries.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateAllocationCreditRows</em></strong> method.</para>
		<code lang="VB" title="CreateAllocationCreditRows" description="Procedure that creates the allocation's credit rows from the selected credits. Also creates the PaymentDetails and CreditAllocation row entries.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CreateAllocationCreditRows()
    </code>
		<code lang="CS" title="CreateAllocationCreditRows" description="Procedure that creates the allocation's credit rows from the selected credits. Also creates the PaymentDetails and CreditAllocation row entries.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.CreateAllocationCreditRows();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateAllocationCreditTableTemp">
	<summary>
 Creates temporary tables to be used in US Type Receipt Allocation
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateAllocationCreditTableTemp</em></strong> method.</para>
		<code lang="VB" title="CreateAllocationCreditTableTemp" description="Creates temporary tables to be used in US Type Receipt Allocation">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CreateAllocationCreditTableTemp()
    </code>
		<code lang="CS" title="CreateAllocationCreditTableTemp" description="Creates temporary tables to be used in US Type Receipt Allocation">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.CreateAllocationCreditTableTemp();
    </code>
	</example>
	<remarks>This method is only used for US receipt allocation.</remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateAllocationDetailRows(System.String,System.Decimal,System.Decimal)">
	<summary>
 Creates allocation detail rows for the selected invoice.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateAllocationDetailRows</em></strong> method.</para>
		<code lang="VB" title="CreateAllocationDetailRows" description="Creates an allocation detail record for the selected debit row.">
 Dim invoiceCode As String = "INV-000001"
 Dim allocated As Decimal = 100
 Dim allocatedRate As Decimal = 100 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.CreateAllocationDetailRows(invoiceCode, allocated, allocatedRate)
    </code>
		<code lang="CS" title="CreateAllocationDetailRows" description="Creates an allocation detail record for the selected debit row.">
 String invoiceCode = "INV-000001";
 Decimal allocated = 100;
 Decimal allocatedRate = 100;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.CreateAllocationDetailRows(invoiceCode, allocated, allocatedRate);
    </code>
	</example>
	<param name="invoiceCode">A <strong>String</strong> that represents the invoice code of the credit row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadTemporaryCredits(System.Data.DataRow,System.String)">
	<summary>
 Creates a temporary table to hold all available credits of the customer.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadTemporaryCredits</em></strong> method.</para>
		<code lang="VB" title="LoadTemporaryCredits" description="Creates and store all credit documents for the supplied customerRow that will be used in allocation.">
 Dim customerRow As DataRow
 Dim allocationCode As String = "CALLOC-000001" 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.LoadTemporaryCredits(customerRow, allocationCode)
    </code>
		<code lang="CS" title="LoadTemporaryCredits" description="Creates and store all credit documents for the supplied customerRow that will be used in allocation.">
 DataRow customerRow;
 string allocationCode = "CALLOC-000001";
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.LoadTemporaryCredits(customerRow, allocationCode);
    </code>
	</example>
	<remarks>This method is only used for US receipt allocation.</remarks>
	<requirements>Parameter <em>customerRow</em> can't be nothing.</requirements>
	<param name="customerRow">A <strong>System.Data.DataRow</strong> that contains the customer row</param>
	<param name="allocationCode">A <strong>String</strong> that represents the allocation code of the allocation row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.UpdateAvailableCredits(System.Data.DataRow)">
	<summary>
 Updates the credit amount available for allocation.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>UpdateAvailableCredits</em></strong> method.</para>
		<code lang="VB" title="UpdateAvailableCredits" description="Procudure that updates the credit values of the creditRow such as unapplied and applied amounts.">
 Dim creditRow As DataRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.UpdateAvailableCredits(creditRow)
    </code>
		<code lang="CS" title="UpdateAvailableCredits" description="Procudure that updates the credit values of the creditRow such as unapplied and applied amounts.">
 DataRow creditRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.UpdateAvailableCredits(creditRow);
    </code>
	</example>
	<requirements>Parameter <em>creditRow</em> can't be nothing.</requirements>
	<param name="creditRow">A <strong>System.Data.DataRow</strong> that contains the credit row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_paymentDataset">The dataset gateway of type <strong>ReceiptDatasetGateway</strong></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateParameterSet(System.String[])">
	<summary>
 Returns a jagged <strong>String</strong> array containing the parameters for updating the transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateParameterSet</em></strong> method.</para>
		<code lang="VB" title="CreateParameterSet" description="Returns a jagged string array containing the table names and stored procedure names (Create, Update, and Delete commands), that will be used for saving changes from the dataset to the datasource.">
 Dim relatedTables As String = New String() {"CustomerInvoice", "CustomerInvoiceDetail"}
 Dim paramterSet As String()()
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 paramterSet = invoiceFacade.CreateParameterSet(relatedTables)
    </code>
		<code lang="CS" title="CreateParameterSet" description="Returns a jagged string array containing the table names and stored procedure names (Create, Update, and Delete commands), that will be used for saving changes from the dataset to the datasource.">
 string relatedTables = new string[] {
       "CustomerPayment",
       "CustomerPaymentDetail"};
 string[][] paramterSet;
 (Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 paramterSet = invoiceFacade.CreateParameterSet(relatedTables);
    </code>
	</example>
	<param name="relatedTables">A jagged <strong>String</strong> array containing the table names and stored procedure names.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.OnAllocationDifferenceChanged(System.EventArgs)">
	<summary>
 Raises the OnAllocationDifferenceChanged event
 </summary>
	<param name="e">An <strong>EventArgs</strong> variable</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.InitializeCreditAllocation(System.Data.DataRowView)">
	<summary>
 Sets for the available credits defaults
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>InitializeCreditAllocation</em></strong> method.</para>
		<code lang="VB" title="InitializeCreditAllocation" description="Loads the credit information from the paymentDetailRow to the allocation credit row.">
 Dim paymentDetailRow As DataRowView 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.InitializeCreditAllocation(paymentDetailRow)
    </code>
		<code lang="CS" title="InitializeCreditAllocation" description="Loads the credit information from the paymentDetailRow to the allocation credit row.">
 DataRowView paymentDetailRow;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.InitializeCreditAllocation(paymentDetailRow);
    </code>
	</example>
	<param name="paymentDetailRow">A <strong>System.Data.DataRowView</strong> that contains the row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Reads a table in the database using a specified command set. The credit card number is decrypted afterwards.
 </summary>
	<remarks>
 This overloaded method is recommended if the tables that are
 to be read have different parameters or there is only one table to be read.
 </remarks>
	<returns>Used to determine if the reading was successful or not.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadDataSet</em></strong> method.</para>
		<code lang="VB" title="LoadDataSet" description="Retrieves data from the data source based on the supplied parameters.">
 Dim commandSet As String() = New String() {"CustomerPayment", "ReadCustomerPayment"}
 Dim clearTableType As ClearType = ClearType.Specific
 Dim connStringType As ConnectionStringType = "LAN"
 Dim isLoaded As Boolean
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 isLoaded = receiptFacade.LoadDataSet(commandSet, clearTableType, connStringType)
    </code>
		<code lang="CS" title="LoadDataSet" description="Retrieves data from the data source based on the supplied parameters.">
 String[] commandSet = New String[] {
        "CustomerPayment",
        "ReadCustomerPayment"};
 ClearType clearTableType = ClearType.Specific;
 ConnectionStringType connStringType = "LAN";
 bool isLoaded;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 isLoaded = receiptFacade.LoadDataSet(commandSet, clearTableType, connStringType);
    </code>
	</example>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     Table1ReadStoredProcedureParameter1, Table1ReadStoredProcedureValue1, Table1ReadStoredProcedureParameter2, Table1ReadStoredProcedureValue2, ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2ReadStoredProcedureParameter1, Table2ReadStoredProcedureValue1,
     Table2ReadStoredProcedureParameter2, Table2ReadStoredProcedureValue2, ...etc.}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Reads a table in the database using a specified command set and
 parameter set.
 </summary>
	<remarks>
 This overloaded method is recommended if the tables that are
 to be read have same parameters.
 </remarks>
	<returns>Used to determine if the reading was successful or not.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>LoadDataSet</em></strong> method.</para>
		<code lang="VB" title="LoadDataSet" description="Retrieves data from the data source based on the supplied parameters.">
 Dim commandSet As String() = New String() {"CustomerPayment", "ReadCustomerPayment"}
 Dim parameters As String()() = New String()() {New String() {"ReceivableCode", "RCV-000001"}}
 Dim clearTableType As ClearType = ClearType.Specific
 Dim connStringType As ConnectionStringType
 Dim isLoaded As Boolean
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 isLoaded = receiptFacade.LoadDataSet(commandSet, parameters, clearTableType, connStringType)
    </code>
		<code lang="CS" title="LoadDataSet" description="Retrieves data from the data source based on the supplied parameters.">
 string[] commandSet = new string[] {
        "CustomerPayment",
        "ReadCustomerPayment"};
 string[][] parameters = new string[][] {
        new string[] {
        "ReceivableCode",
        "RCV-000001"}};
 ClearType clearTableType = ClearType.Specific;
 ConnectionStringType connStringType;
 bool isLoaded;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 isLoaded = receiptFacade.LoadDataSet(commandSet, parameters, clearTableType, connStringType);
    </code>
	</example>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, ...etc.}, 
 ...etc}</para>
	</param>
	<param name="parameters">
		<para>Format of the <strong>parameterSet</strong> parameter:</para>
		<para>New String()() {New String() {Parameter1, Value1},</para>
		<para>New String() {Parameter2, Value2}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.Post(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Post the Receipt, Refund, Void Receipt document to the journal
 </summary>
	<remarks>Posts the transaction created and creates an allocation transaction, if any should be made then posts it also</remarks>
	<example>
		<para>The following codes shows how to implement the <strong><em>Post</em></strong>
    method.</para>
		<code lang="VB" title="Post" description="Method that calls the post procedure that creates a journal for the Accounting module.">
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.Receipt
 Dim postMsg As String
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway) 
 postMsg = receiptFacade.Post(transactionType)
    </code>
		<code lang="CS" title="Post" description="Method that calls the post procedure that creates a journal for the Accounting module.">
 TransactionType transactionType = Framework.Base.Shared.Enum.Receipt;
 string postMsg;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 postMsg = receiptFacade.Post(transactionType);
    </code>
	</example>
	<param name="transactionType">Possible values are Interprise.Framework.Base.Shared.TransactionType.CustomerReceipt, Interprise.Framework.Base.Shared.TransactionType.CustomerRefund, Interprise.Framework.Base.Shared.TransactionType.CustomerVoidReceipt, and Interprise.Framework.Base.Shared.TransactionType.CustomerReceiptAllocation.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to update the data to the database.
 </summary>
	<remarks>Returns True if update is successful.</remarks>
	<example>
		<code lang="VB" title="UpdateDataSet" description="Send the changes from the dataset to the datasource.">
 Dim commandSet As String()() = New String()() {New String() {"CustomerPayment", "UpdateCustomerPayment", "CreateCustomerPayment", "DeleteCustomerPayment"}}
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Receipt
 Dim transactionDescription As String = "New Receipt"
 Dim isUseCache As Boolean = False
 Dim isUpdateSuccess As Boolean
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 isUpdateSuccess = receiptFacade.UpdateDataSet(commandSet, transactionType, transactionDescription, isUseCache)
    </code>
		<code lang="CS" title="UpdateDataSet" description="Send the changes from the dataset to the datasource.">
 string[][] commandSet = new string[][] {
        new string[] {
        "CustomerPayment",
        "UpdateCustomerPayment",
        "CreateCustomerPayment",
        "DeleteCustomerPayment"}};
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.Receipt;
 string transactionDescription = "New Receipt";
 bool isUseCache = false;
 bool isUpdateSuccess;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 isUpdateSuccess = receiptFacade.UpdateDataSet(commandSet, transactionType, transactionDescription, isUseCache);
    </code>
	</example>
	<param name="commandSet">A jagged <strong>String</strong> array containing the tablenames and stored procedure names.</param>
	<param name="transactionType">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are CustomerReceipt, CustomerRefund, CustomerVoidReceipt, and CustomerReceiptAllocation.</param>
	<param name="transactionDescription">A <strong>String</strong> containing description about actions taken on the transaction which is important in audit trail.</param>
	<param name="isUseCache">A <strong>Boolean</strong> indicating to save data to the cache database.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to assign the document code to the transaction
 </summary>
	<param name="transactionType">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are CustomerReceipt, CustomerRefund, CustomerVoidReceipt, and CustomerReceiptAllocation.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.Validate">
	<summary>
 Calls the ValidateSOReceipt method to check the data in the Receipt transaction
 </summary>
	<returns>If set to true, there were no errors found.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>Validate</em></strong> method.</para>
		<code lang="VB" title="Validate" description="Checks the dataset for errors then returns a boolean value of false if errors were found.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.Validate()
    </code>
		<code lang="CS" title="Validate" description="Checks the dataset for errors then returns a boolean value of false if errors were found.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.Validate();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ValidateAllocation">
	<summary>
 Method that validates the allocation values
 </summary>
	<returns>If set to true, there were no errors found.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ValidateAllocation</em></strong> method.</para>
		<code lang="VB" title="ValidateAllocation" description="Checks the allocation transaction for errors such as unbalance allocation amounts.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ValidateAllocation()
    </code>
		<code lang="CS" title="ValidateAllocation" description="Checks the allocation transaction for errors such as unbalance allocation amounts.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ValidateAllocation();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ValidateSOReceipt(System.String@,System.Boolean)">
	<summary>
 Check the required fields in SOReceipt
 </summary>
	<returns>If set to true, there were no errors found.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ValidateSOReceipt</em></strong> method.</para>
		<code lang="VB" title="ValidateSOReceipt" description="Checks the receipt transaction for errors and returns a boolean value of false if errors were found.">
 Dim message As String 'By-Reference variable
 Dim isRejectNew As Boolean
 Dim hasNoErrors As Boolean
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 hasNoErrors = receiptFacade.ValidateSOReceipt(message, isRejectNew)
    </code>
		<code lang="CS" title="ValidateSOReceipt" description="Checks the receipt transaction for errors and returns a boolean value of false if errors were found.">
 string message; //By-Reference variable
 bool isRejectNew;
 bool hasNoErrors;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 hasNoErrors = receiptFacade.ValidateSOReceipt(message, isRejectNew);
    </code>
	</example>
	<param name="message">A <strong>String</strong> type of ByRef variable that will contain any error message found</param>
	<param name="isRejectNew">A <strong>Boolean</strong> variable that indicated if any new record from this transaction will be rejected.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<remarks>If set to true, there were no errors found.</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>Validate</em></strong> method.</para>
		<code lang="VB" title="Validate" description="Checks the value of the column from the row for errors.">
 Dim row As DataRow
 Dim columnName As String = "ReceivableCode"
 Dim colHasNoError As Boolean
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 colHasNoError = receiptFacade.Validate(row, columnName)
    </code>
		<code lang="CS" title="Validate" description="Checks the value of the column from the row for errors.">
 DataRow row; 
 string columnName = "InvoiceCode"; 
 bool colHasNoError; 
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 colHasNoError = receiptFacade.Validate(row, columnName);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>row</em> can't be nothing.</para>
		<para>Parameter <em>columnName</em> can't be empty.</para>
	</requirements>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ValidateCredit(System.Decimal@,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ComputeBankAccountValueBaseCurrency">
	<summary>
 Calculates the net amount to be deposited in the bank in home currency value.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeBankAccountValueBaseCurrency</em></strong> method.</para>
		<code lang="VB" title="ComputeBankAccountValueBaseCurrency" description="Calculates the bank amount value in bank currency.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ComputeBankAccountValueBaseCurrency()
    </code>
		<code lang="CS" title="ComputeBankAccountValueBaseCurrency" description="Calculates the bank amount value in bank currency.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.ComputeBankAccountValueBaseCurrency();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ComputeOtherChargesBaseCurrency">
	<summary>
 Calculates the other amount charges for the bank in home currency value.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeOtherChargesBaseCurrency</em></strong> method.</para>
		<code lang="VB" title="ComputeOtherChargesBaseCurrency" description="Computes the bank charges amount in bank currency.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ComputeOtherChargesBaseCurrency()
    </code>
		<code lang="CS" title="ComputeOtherChargesBaseCurrency" description="Computes the bank charges amount in bank currency.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ComputeOtherChargesBaseCurrency();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ComputeBankChargesBaseCurrency">
	<summary>
 Calculates the bank charge amount for the bank in home currency value.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeBankChargesBaseCurrency</em></strong> method.</para>
		<code lang="VB" title="ComputeBankChargesBaseCurrency" description="Computes the bank charge amount in bank currency.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ComputeBankChargesBaseCurrency()
    </code>
		<code lang="CS" title="ComputeBankChargesBaseCurrency" description="Computes the bank charge amount in bank currency.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ComputeBankChargesBaseCurrency();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ComputeAmountToBeBanked">
	<summary>
 Calculates the gross amount to be deposited in the bank in home currency value.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeAmountToBeBanked</em></strong> method.</para>
		<code lang="VB" title="ComputeAmountToBeBanked" description="Calculates the actual amount to be banked (amount paid - charges).">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ComputeAmountToBeBanked()
    </code>
		<code lang="CS" title="ComputeAmountToBeBanked" description="Calculates the actual amount to be banked (amount paid - charges).">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ComputeAmountToBeBanked();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ComputeBankCurrencyValues(System.Data.DataRow)">
	<summary>
 Method that calls the computaion method for processing the Bank amounts namely, the amount to be deposited, bank charges and other charges.
 </summary>
	<example>
		<code lang="VB" title="ComputeBankCurrencyValues" description="Calculates the net amount to be deposited in the bank in home currency value.">
 Dim row As DataRow 
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.ComputeBankCurrencyValues(row)
    </code>
		<code lang="CS" title="ComputeBankCurrencyValues" description="Calculates the net amount to be deposited in the bank in home currency value.">
 DataRow row;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.ComputeBankCurrencyValues(row);
    </code>
	</example>
	<param name="row">A <strong>DataRow</strong> that contains the Receipt row to be processed.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.MarkAllocatedTransactions">
	<summary>
 Updates the status of the selected and isapplypotential field for display.
 </summary>
	<remarks>Selected field, marked as true for a credit row if receipt has already been allocated.
 IsApplyPotentialDiscount field, marked true for debits row if a potential discount was applied.</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>MarkAllocatedTransactions</em></strong> method.</para>
		<code lang="VB" title="MarkAllocatedTransactions" description="Procedure that places a check in the receip allocation user interface for an allocation process.">
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.MarkAllocatedTransactions()
    </code>
		<code lang="CS" title="MarkAllocatedTransactions" description="Procedure that places a check in the receip allocation user interface for an allocation process.">
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 receiptFacade.MarkAllocatedTransactions();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.BalancePaymentDetail">
	<summary>
 Procedure to fix rounding difference between allocation debit and allocation detail consisting of payment detail and credit allocations.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CalculateCreditBalance(System.Data.DataRow)">
	<summary>
 Computes the unapplied balance of the credit row in the allocation transaction.
 </summary>
	<returns>Unapplied balance of the credit row</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CalculateCreditBalance</em></strong> method.</para>
		<code lang="VB" title="CalculateCreditBalance" description="Computes the remainding balance of the credit row provided.">
 Dim rowCredit As DataRow
 Dim credValue As Decimal
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 credValue = receiptFacade.CalculateCreditBalance(rowCredit)
    </code>
		<code lang="CS" title="CalculateCreditBalance" description="Computes the remainding balance of the credit row provided.">
 DataRow rowCredit;
 Decimal credValue;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 credValue = receiptFacade.CalculateCreditBalance(rowCredit);
    </code>
	</example>
	<remarks>Computation is [unapplied amount] + [reserved amount] + [allocated amount]</remarks>
	<requirements>Parameter <em>rowCredit</em> can't be nothing.</requirements>
	<param name="rowCredit">A <strong>System.Data.DataRow</strong> that contains the row to be processed.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CalculateDebitBalance(System.Data.DataRow)">
	<summary>
 Computes the remaining balance of the credit row in the allocation transaction.
 </summary>
	<returns>Remaining balance of the debit row</returns>
	<example>
		<code lang="VB" title="CalculateDebitBalance" description="Computes the remainding balance of the debit row provided.">
 Dim rowDebit As DataRow
 Dim debitValue As Decimal
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 debitValue = receiptFacade.CalculateDebitBalance(rowDebit)
    </code>
		<code lang="CS" title="CalculateDebitBalance" description="Computes the remainding balance of the debit row provided.">
 DataRow rowDebit;
 Decimal debitValue;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 debitValue = receiptFacade.CalculateDebitBalance(rowDebit);
    </code>
	</example>
	<requirements>Parameter <em>rowDebit</em> can't be nothing.</requirements>
	<remarks>
 Computation is [outstanding balance] - [write off] - [discount] - [allocated
 amount]
 </remarks>
	<param name="rowDebit">A <strong>System.Data.DataRow</strong> that contains the row to be processed.</param>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.GetLastCreditCardProcessMessage">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>GetLastCreditCardProcessMessage</em></strong> method.</para>
		<code lang="VB" title="GetLastCreditCardProcessMessage" description="Retrives the authorization message of the credit card process from the merchant.">
 Dim authMsg As String
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 authMsg = receiptFacade.GetLastCreditCardProcessMessage()
    </code>
		<code lang="CS" title="GetLastCreditCardProcessMessage" description="Retrives the authorization message of the credit card process from the merchant.">
 string authMsg;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 authMsg = receiptFacade.GetLastCreditCardProcessMessage();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.GetLastWebCheckoutProcessMessage">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>GetLastWebCheckoutProcessMessage</em></strong> method.</para>
		<code lang="VB" title="GetLastCreditCardProcessMessage" description="Retrives the authorization message of the credit card process from the merchant.">
 Dim authMsg As String
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 authMsg = receiptFacade.GetLastWebCheckoutProcessMessage()
    </code>
		<code lang="CS" title="GetLastCreditCardProcessMessage" description="Retrives the authorization message of the credit card process from the merchant.">
 string authMsg;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = new Interprise.Facade.Customer.ReceiptFacade(new ReceiptDatasetGateway());
 authMsg = receiptFacade.GetLastWebCheckoutProcessMessage();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignCreditCardTransactionType(Interprise.Framework.Customer.DatasetComponent.ReceiptDataset.PaymentMethodViewRow,Interprise.Framework.Base.Shared.Enum.CreditCardTransaction)">
	<example>
		<code lang="VB" title="AssignCreditCardTransactionType" description="Assigns the transaction information of the credit card.">
 Dim rowPaymentMethod As PaymentMethodViewRow
 Dim ccTranType As CreditCardTransaction
 Dim receiptFacade As New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway)
 receiptFacade.AssignCreditCardTransactionType(rowPaymentMethod, ccTranType)
    </code>
		<code lang="CS" title="AssignCreditCardTransactionType" description="Assigns the transaction information of the credit card.">
 PaymentMethodViewRow rowPaymentMethod;
 CreditCardTransaction ccTranType;
 Interprise.Facade.Customer.ReceiptFacade receiptFacade = New Interprise.Facade.Customer.ReceiptFacade(New ReceiptDatasetGateway());
 receiptFacade.AssignCreditCardTransactionType(rowPaymentMethod, ccTranType);
    </code>
	</example>
	<remarks>
 CreditCardTransactionTypes are Auth, Void, Capture, Force, Sale, Credit, or
 Auth/Capture.
 </remarks>
	<requirements>
		<para>Parameter <em>rowPaymentMethod</em> can't be nothing.</para>
		<para>Parameter <em>ccTranType</em> can't be nothing.</para>
	</requirements>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.DecryptCardIssueNumber(System.String,System.Data.DataRow)">
	<summary>
 Procedure to decrypt the card issue number.
 </summary>
	<param name="encryptedCardIssueNumber">An encrypted card issue number to decrypt.</param>
	<param name="rowPaymentMethod">A <strong>DataRow</strong> of <strong>PaymentMethodView</strong> datatable.</param>
	<returns>Decrypted card issue number.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.EncryptCardIssueNumber(System.String,System.Data.DataRow)">
	<summary>
 Procedure to encrypt the card issue number.
 </summary>
	<param name="unencryptedCardIssueNumber">A card issue number to encrypt.</param>
	<param name="rowPaymentMethod">A <strong>DataRow</strong> of <strong>PaymentMethodView</strong> datatable.</param>
	<returns>Encrypted card issue number.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.GetSettings(System.String)">
	<summary>
 Get the settings from different tables in just one connection. 
 </summary>
	<param name="customerCode">Code of the customer from which the payment has been received.</param>
	<remarks>This gets the value of default account for Debtor/AR and the value of whether to save credit card number or not. </remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.RecalculatePaymentWithRefund(System.Data.DataRow)">
	<summary>
 Recalculate payment whenever there is a refund.
 </summary>
	<param name="creditRow">The current row on the grid that will be updated.</param>
	<remarks>'Added By: Blyth L. Kitane   11/09/2009   Canadian Taxation 4.3.3-4.3.4</remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadInvoice(System.String)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.CreateReceiptAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadPayment(System.String,System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadPaymentMethod(System.String)">
	<summary>
	</summary>
	<param name="customerCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadAvailablePayments(System.String,Interprise.Framework.Customer.Shared.Enum.CreditType)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadAllUnpaidDebits(System.String,Interprise.Framework.Customer.Shared.Enum.DebitType)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.SetColumnValue(System.Data.DataRow,System.String,System.Object)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="columnName"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadUpaidDebit(System.String,System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<param name="type"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ApplyDiscountIfFullyAllocated">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.UpdateDataset(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadDataset(System.String,System.String)">
	<summary>
 Load payment info
 </summary>
	<param name="receivableCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.LoadDataset(System.String)">
	<summary>
 Load payment allocation
 </summary>
	<param name="allocationCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddPredefinedNotesDefaultTable(Interprise.Framework.Base.DatasetComponent.BaseDataset)">
	<summary>
	</summary>
	<param name="targetDataset"></param>
	<remarks></remarks>

 Added by Gerber: 2/8/2012

</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignPredefinedNotes(Interprise.Framework.Base.DatasetComponent.BaseDataset,System.Data.DataSet)">
Added by Gerber: 2/8/2012

</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.UnApplyInvoicePayment">
	<summary>
 Unapply payments attached to invoice transaction
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.ResetReceiptsToPost">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AddDebitRow(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="refundRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignWriteOff(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="writeOffAmount"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AllocationFacade_OnPostingLoyaltyPoints(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AllocationFacade_OnPostingRefund(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ReceiptFacade.AssignAmountPaid(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="amountPaidRate"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Interprise.Facade.Customer.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Interprise.Facade.Customer.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:Interprise.Facade.Customer.LastPriceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.LastPriceFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.LastPriceDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="lastPriceDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ItemMatrixFacade.#ctor(Interprise.Framework.Base.DatasetGateway.ItemMatrixDatasetGateway,Interprise.Facade.Customer.BaseFacade)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="itemMatrixDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ItemMatrixFacade.MatrixBatch">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ItemMatrixFacade.GetLineItem(System.Int32,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.String)">
	<summary>Gets the corresponding line item of matrix item in sales order or invoice.</summary>
	<returns>The data row view of sales order or invoice line item.</returns>
	<example>
    The following codes shows how to implement <b><i>GetLineItem</i></b> method
    <code lang="VB" title="Getting matrix item in item line" description="This shows the corresponding item matrix in an invoice or sales order">
 Dim m_itemMatrixFacade As ItemMatrixFacade
 Dim matrixBatch As Integer
 Dim transactionType As TransactionType
 Dim matrixItemCode As String
 Dim matrixGroupCode As String
 Dim value As DataRowView
 
 value = m_itemMatrixFacade.GetLineItem(matrixBatch, transactionType, "matrix-0001-blue-xl", "Matrix-0001")
    </code>
		<code lang="CS" title="Getting matrix item in item line" description="This shows the corresponding item matrix in an invoice or sales order">
 ItemMatrixFacade m_itemMatrixFacade;
 int matrixBatch;
 TransactionType transactionType;
 String matrixItemCode;
 String matrixGroupCode;
 DataRowView value;
 
 value = m_itemMatrixFacade.GetLineItem(matrixBatch, transactionType, matrixItemCode, matrixGroupCode);
    </code>
	</example>
	<param name="matrixBatch">The value of matrix batch.</param>
	<param name="transactionType">
		<para>The type of transaction. The following table shows the possible
    values.</para>
		<list type="bullet">
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.Quote</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.Invoice</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.CreditMemo</item>
		</list>
	</param>
	<param name="matrixItemCode">The item code use to identify matrix item.</param>
	<param name="matrixGroupCode">The item code use to identify matrix group.</param>
</member><member name="M:Interprise.Facade.Customer.ItemMatrixFacade.GetLineItem(System.Int32,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.String,System.String,System.Data.DataRowView@,System.String@)">
	<summary>
 Gets line item
 </summary>
	<param name="matrixBatch">An <strong>Integer</strong> value that represents the line number of the matrix item</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="matrixItemCode">A <strong>String</strong> that represents the matrix item to be retrieved</param>
	<param name="matrixGroupCode">A <strong>String</strong> that contains the matrix group code to be retrieved</param>
	<param name="lineItemRow">A <strong>DataRowView</strong> that represents the row to be processed</param>
	<param name="errMsg">A <strong>String</strong> that will contain any error message</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ItemMatrixFacade.SetDiscount(System.String,System.String,System.Data.DataRow,System.Data.DataColumn,System.Decimal,System.Data.DataRow,System.Int32,System.Int32,System.Int32,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>
 Sets the discount
 </summary>
	<example>
		<code lang="VB">
 Dim instance As ItemMatrixFacade
 Dim matrixGroup As String
 Dim matrixGroupName As String
 Dim row As DataRow
 Dim column As DataColumn
 Dim discount As Decimal
 Dim salesPriceRow As DataRow
 Dim vertAttrCount As Integer
 Dim horAttrNumber As Integer
 Dim matrixBatch As Integer
 Dim transactionType As TransactionType
 Dim errMsg As String
 
 instance.SetDiscount(matrixGroup, matrixGroupName, row, column, discount, salesPriceRow, vertAttrCount, horAttrNumber, matrixBatch, transactionType, errMsg)
    </code>
	</example>
	<param name="matrixGroup">The item code use to identify matrix item.</param>
	<param name="row">A <strong>DataRow</strong> that contains the row to be processed</param>
	<param name="column">A <strong>DataColumn</strong> that represents the column in the row</param>
	<param name="discount">A <strong>Decimal</strong> value that contains the discount amount</param>
	<param name="salesPriceRow">A <strong>DataRow</strong> that contains the sales price of the item</param>
	<param name="vertAttrCount">An <strong>Integer</strong> that represents the attribute count</param>
	<param name="horAttrNumber">An <strong>Integer</strong> that represents the attribute number</param>
	<param name="matrixBatch">An <strong>Integer</strong> value that represents the line number of the matrix item</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="errMsg">A <strong>String</strong> that will contain any error message</param>
</member><member name="M:Interprise.Facade.Customer.ItemMatrixFacade.SetManualSalesPrice(System.String,System.String,System.Data.DataRow,System.Data.DataColumn,System.Decimal,System.Data.DataRow,System.Int32,System.Int32,System.Int32,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>
 Sets Manual Sales Price
 </summary>
	<param name="row">A <strong>DataRow</strong> that contains the row to be processed</param>
	<param name="column">A <strong>DataColumn</strong> that represents the column in the row</param>
	<param name="salesPrice">A <strong>Decimal</strong> that contains the sales price of the item to be set</param>
	<param name="discountRow">A <strong>DataRow</strong> value that contains the discount row</param>
	<param name="vertAttrCount">An <strong>Integer</strong> that represents the attribute count</param>
	<param name="horAttrNumber">An <strong>Integer</strong> that represents the attribute number</param>
	<param name="matrixBatch">An <strong>Integer</strong> value that represents the line number of the matrix item</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="errMsg">A <strong>String</strong> that will contain any error message</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ItemMatrixFacade.SetTransactionLineItem(System.String,System.String,System.Data.DataRow,System.Data.DataColumn,System.Decimal,System.Boolean,System.Data.DataRow,System.Data.DataRow,System.Int32,System.Int32,System.Int32,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>
 Sets Transaction Line Item
 </summary>
	<param name="row">A <strong>DataRow</strong> that contains the row to be processed</param>
	<param name="column">A <strong>DataColumn</strong> that represents the column in the row</param>
	<param name="quantity">A <strong>Decimal</strong> value that represents the quantity</param>
	<param name="isQuantity1">A <strong>Boolean</strong> flag thet indicates if the processed is based on quantity</param>
	<param name="discountRow">A <strong>DataRow</strong> value that contains the discount row</param>
	<param name="salesPriceRow">A <strong>DataRow</strong> that contains the sales price of the item</param>
	<param name="vertAttrCount">An <strong>Integer</strong> that represents the attribute count</param>
	<param name="horAttrNumber">An <strong>Integer</strong> that represents the attribute number</param>
	<param name="matrixBatch">An <strong>Integer</strong> value that represents the line number of the matrix item</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="errMsg">A <strong>String</strong> that will contain any error message</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ItemMatrixFacade.SyncMatrixItem(System.Data.DataSet,System.Int32@)">
	<summary>
 Synchronize Matrix Item
 </summary>
	<param name="transactionDataset">A <strong>DataSet</strong> that represents the transactionDataset</param>
	<param name="matrixBatch">An <strong>Integer</strong> value that represents the line number of the matrix item</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ItemMatrixFacade.FinalizeItemMatrix(Interprise.Framework.Base.Shared.Enum.TransactionType,Interprise.Extendable.Base.Facade.IBaseInterface)">
	<summary>
 Finalizes Item Matrix
 </summary>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="originalTransactionFacade">A <strong>Extendable.Base.Facade.IBaseInterface</strong> that contains the methods/procedures of the TransactionFacade</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ItemHistoryFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.ItemHistoryFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.ItemHistoryDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="itemHistoryDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Customer.InvoiceFacade.ReceiptChanged">
	<summary>
 Occurs when the total amount of payments/receipts on sales order or invoice
 transaction is changed.
 </summary>
</member><member name="E:Interprise.Facade.Customer.InvoiceFacade.CouponDiscountChanged">
	<summary>
 Occurs when the coupon discount type is changed (Percent/Amount).
 </summary>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.TotalDue">
	<summary>
 Property that gets the total balance of the invoice
 </summary>
	<value>Decimal</value>
	<returns>The total amount due in home currency</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.TotalRate">
	<summary>
 Returns a <Strong>Decimal</Strong> containing the total base amount of the transaction.
 </summary>
	<value>Decimal</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.Balance">
	<summary>
 Property to get transaction balance in home currency
 </summary>
	<value>Decimal</value>
	<returns>Transaction balance in home currency</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.CurrencyCode">
	<summary>
 The currencycode being used in the transaction
 </summary>
	<value>String</value>
	<returns>Returns invoice currency code.</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.CurrentReportType">
	<summary>
 Property that gets the current report type.
 </summary>
	<value></value>
	<returns>Returns the type of the report. Form or Standard</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.DefaultShipToWarehouse">
	<summary>
 Returns a <strong>String</strong> containing the default warehouse where the items will be picked.
 It gets the warehouse specified in the header of the transaction. If none was specified there, 
 it gets the warehouse specified in the customer ship to record.
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.DiscountPercent">
	<summary>
 Returns Discount Percent
 </summary>
	<value>Decimal</value>
	<returns>Returns the allowed discount for the invoice transaction</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.DiscountType">
	<summary>
 The Type of Discount used in the transaction
 </summary>
	<value>String</value>
	<returns>Returns the Type of Discount used in the transaction</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.ExchangeRate">
	<summary>
 The exchange rate to be used in the transaction
 </summary>
	<value>Decimal</value>
	<returns>Property that returns the exchange rate.</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.HeaderRow">
	<summary>
 Returns  the CustomerInvoiceView table
 </summary>
	<value>DataRow</value>
	<returns>The current invoice row</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsCouponIncludesFreeShipping">
	<summary>
 Indicates that the coupon applied to sales order or invoice includes free
 delivery charge.
 </summary>
	<value>
		<strong>true</strong> if coupon includes free delivery charge; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.Receipt">
	<returns>Returns the current receipt reserved amount in home currency</returns>
	<summary>
 Gets or sets the amount deducted against the total amount due on sales order or
 invoice.
 </summary>
	<remarks>
 The amount is total of payment/receipt, term discount, write-off and coupon
 discount.
 </remarks>
	<value>
 The amount deducted against the total amount due on sales order or
 invoice.
 </value>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.ReceivableCode">
	<summary>
 Code that represents the receipt
 </summary>
	<value>String</value>
	<returns>Property to return receivable code</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.RelatedTables(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 The related tables to be used in the transaction
 </summary>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<value>String Array</value>
	<returns>Returns all the tables thats to be used in the transaction</returns>
	<remarks>This property must be overriden or implemented for it will enumerate all the related tables for the transaction to be used in the LoadDataset and UpdateDataset methods</remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.CurrentTransactionType">
	<summary>
 The type of transaction document being created
 </summary>
	<value></value>
	<returns>Property that returns the current transaction type</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.TransactionType">
	<summary>
 The type of transaction the current form is creating
 </summary>
	<value>TransactionType</value>
	<returns>Returns and sets the transactionType of the current transaction</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.SourceDocumentCode">
	<summary>
 The original code in which the current document originates from
 </summary>
	<value>String Array</value>
	<returns>Returns the source document code/s for this transaction</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.SourceDocumentType">
	<summary>
 The type of document from which the current transaction originates from
 </summary>
	<value>String Array</value>
	<returns>Returns what type of document the current transaction originates from</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.HasReceipt">
	<summary>
 Gets a <strong>Boolean</strong> value indicating that the invoice has receipts created in it.
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsVoiding">
	<summary>
 Gets or Sets a <strong>Boolean</strong> value indicating if an invoice is being voided
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.PaymentTermCode">
	<summary>Gets the payment term code of sales order or invoice transaction.</summary>
	<value>The payment term code of sales order or invoice transaction.</value>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsFreightOverwrite">
	<summary>Indicates that freight charge is overwritten.</summary>
	<value>
		<strong>true</strong> if freight charge is overwritten; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.ContactCode">
	<summary>
 Returns a <strong>String</strong> containing the contact code of the transaction.
 It gets the contactcode specified in the header of the transaction. 
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsRequireEmailAccount">
	<summary>
 Indicates that default email account for currently logged in user should be set
 up.
 </summary>
	<value>
		<strong>true</strong> if the default email account for currently logged in user
 should be set up; otherwise <strong>false</strong>.
 </value>
	<remarks>
 Download instructions should be sent to customer if the web order has
 downloadable item. The user currently logged-in should have default e-mail account in
 order for InvoiceFacade object to send e-mail automatically to customer.
 </remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsHasErrorOnValidate">
	<summary>
 Flag to mark, that the validate do have problem with the columns required.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>added by pete.a 06/08/2009

</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.TxtMessageErrorOnValidate">
	<summary>
 To hold the string messages of the error on validate method.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>added by pete.a 06/08/2009

</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsShippedOrDateShippedChanged">
	<summary>
 Returns True if the Date Shipped or Is Shipped fields are modified.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsNotesAdded">
	<summary>
Returns True of the notes field has been modified.
 </summary>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsOpeningBalance">
	<summary>
 Flag used to identify if the current transaction is using the Openning Balance 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.ApplyCoupon">
	<summary>
  Returns True if the transaction has a coupon discount applied.
 </summary>
	<value>Boolean</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsHazardousItem">
	<summary>
 Flag to mark, that the validate do have problem with the columns required.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks> added by pete.a 06/08/2009

</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.HasWriteOffAllocation(System.String)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.InvoiceAlreadyConverted(System.String)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsPickUp">
	<summary>
 IsPickUp
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Will Call change &gt; IsPickupProperty</remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsFromVoidedTransaction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.ShipToPlus4">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsFromWizard">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.BackOrderNegativeQuantity">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.DropShipReferenceAlreadyConvertedToGRN">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsRechargeGiftCard">
	<summary>
 Flag for recharge gift card
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsRequireGiftSendEmail">
	<summary>
 Returns a value depending on the require gift card / certificate to send email preference
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsCreditHasBalance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.HasGiftItems">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsLocation">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.TotalSalesPriceRate">
	<summary>
 Total Sales Price of Kit
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="p_invoiceDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddInvoice(Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow,System.String,System.String,Interprise.Framework.Base.Shared.Delegates.ShowMessage,Interprise.Framework.Base.Shared.Delegates.ShowMessage,System.String@,System.Boolean,System.Boolean)">
	<summary>
 Creates a new invoice
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddInvoice</em></strong> method.</para>
		<code lang="VB" title="AddInvoice" description="Creates a new invoice transaction.">
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 Dim shipToRow As DataRow
 Dim contactCode As String = "CCTC-000001"
 Dim contactFullName As String = "Henry McDawd"
 Dim showCreditHoldWarning As ShowMessage
 Dim showCreditLimitWarning As ShowMessage
 Dim msg As String 'By-Reference variable
 Dim isBatch As Boolean 'Optional variable
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 salesOrderFacade.AddSalesOrder(transactionType, shipToRow, contactCode, contactFullName, showCreditHoldWarning, showCreditLimitWarning, msg, isBatch)
    </code>
		<code lang="CS" title="AddInvoice" description="Creates a new invoice transaction.">
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 DataRow shipToRow;
 string contactCode = "CCTC-000001";
 string contactFullName = "Henry McDawd";
 ShowMessage showCreditHoldWarning;
 ShowMessage showCreditLimitWarning;
 string msg;
 bool isBatch;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 salesOrderFacade.AddSalesOrder(transactionType, shipToRow, contactCode, contactFullName, showCreditHoldWarning, showCreditLimitWarning, msg, isBatch);
    </code>
	</example>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="shipToRow">The current shipto record to the invoice will be created for</param>
	<param name="contactCode">The code that represents the contact of the customer</param>
	<param name="contactFullName">The name of the customer contact</param>
	<param name="showCreditHoldWarning">Flag that enables/disables the display of the Credit Hold Warning popup message</param>
	<param name="showCreditLimitWarning">Flag that enables/disables the display of the Credit Limit Warning popup message</param>
	<param name="msg">Message</param>
	<param name="isBatch">Flag that defines if the invoice is a batch invoice or a normal invoice</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddInvoiceDetail(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to add initial item line for batch invoice.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AddInvoiceDetail</em></strong> method.<br/>
		<code lang="VB" title="AddInvoiceDetail" description="Procedure to add initial item line for batch invoice.">
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.BatchInvoice
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AddInvoiceDetail(transactionType)
    </code>
		<code lang="CS" title="AddInvoiceDetail" description="Procedure to add initial item line for batch invoice.">
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.BatchInvoice;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AddInvoiceDetail(transactionType);
    </code>
	</example>
	<param name="transactionType">Defines what transaction to be created whether an invoice or credit memo/credit note.</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddAllocationCreditRows">
	<summary>
 Adds allocation information and credit details.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddAllocationCreditRows</em></strong> method.</para>
		<code lang="VB" title="AddAllocationCreditRows" description="Creates debit and credit rows for allocation.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AddAllocationCreditRows()
    </code>
		<code lang="CS" title="AddAllocationCreditRows" description="Creates debit and credit rows for allocation.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AddAllocationCreditRows();
    </code>
	</example>
	<remarks>Method is used for CM and Invoice allocation.</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddAllocationDebitRows">
	<summary>
 Adds allocation debit details
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AddAllocationDebitRows</em></strong> method.</para>
		<code lang="VB" title="AddAllocationDebitRows" description="Creates details for the allocation debit row.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AddAllocationDebitRows()
    </code>
		<code lang="CS" title="AddAllocationDebitRows" description="Creates details for the allocation debit row.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AddAllocationDebitRows();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AllocateCredit(System.Data.DataRowView,System.Boolean,System.Boolean)">
	<summary>
 Allocates credit to invoice
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AllocateCredit</em></strong> method.
    <code lang="VB" title="AllocateCredit" description="Assigns the Credit Memo/Note to the invoice transaction for allocation.">
 Dim allocationRow As DataRowView
 Dim isAutoAllocate As Boolean = True
 Dim apply As Boolean = True
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AllocateCredit(allocationRow, isAutoAllocate, apply)
 </code>
		<code lang="CS" title="AllocateCredit" description="Assigns the Credit Memo/Note to the invoice transaction for allocation.">
 DataRowView allocationRow;
 bool isAutoAllocate = true;
 bool apply = true;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AllocateCredit(allocationRow, isAutoAllocate, apply);
    </code>
	</example>
	<param name="allocationRow">The CustomerAllocation row. Main row of the allocation transaction</param>
	<param name="isAutoAllocate">Flag that indicates if the transaction should be auto allocated or not</param>
	<param name="apply">Flag that set either the credits available or balance as its credits to apply</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AllocateCredit(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway)">
	<summary>
 Allocates credit to invoice
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AllocateReceipt">
	<summary>
 Allocates Receipt to invoice
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AllocateReceipt</em></strong> method. 
    <code lang="VB" title="AllocateReceipt" description="Applies the prepayment to the invoice transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AllocateReceipt()
    </code>
		<code lang="CS" title="AllocateReceipt" description="Applies the prepayment to the invoice transaction.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AllocateReceipt();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AllocateCreditMemo(System.Data.DataView)">
	<summary>
 Allocates credit memo
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AllocateCreditMemo</em></strong> method.<br/>
		<code lang="VB" title="AllocateCreditMemo" description="Allocates the Credit Memo/Note to selected unpaid invoices.">
 Dim unpaidInvoice As DataView
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AllocateCreditMemo(unpaidInvoice)
    </code>
		<code lang="CS" title="AllocateCreditMemo" description="Allocates the Credit Memo/Note to selected unpaid invoices.">
 Dim unpaidInvoice As DataView
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AllocateCreditMemo(unpaidInvoice)
    </code>
	</example>
	<param name="unpaidInvoice">The invoice to be allocated with</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AllocateCreditMemo(System.Data.DataRowView,System.Boolean,System.Boolean)">
	<summary>
 Allocates credit memo
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AllocateCreditMemo</em></strong> method.</para>
		<code lang="VB" title="AllocateCreditMemo" description="Allocates the credit memo/note to the invoiceRow.">
 Dim invoiceRow As DataRowView
 Dim isAutoAllocate As Boolean = True
 Dim apply As Boolean = True
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AllocateCreditMemo(invoiceRow, isAutoAllocate, apply)
    </code>
		<code lang="CS" title="AllocateCreditMemo " description="Allocates the credit memo/note to the invoiceRow.">
 DataRowView invoiceRow;
 bool isAutoAllocate = True;
 bool apply = True;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AllocateCreditMemo(invoiceRow, isAutoAllocate, apply);
    </code>
	</example>
	<requirements>Parameter <em>invoiceRow</em> can't be nothing.</requirements>
	<param name="invoiceRow">A <strong>DataRowView</strong> that represents the Invoice row to be allocated against</param>
	<param name="isAutoAllocate">A <strong>Boolean</strong> flag that indicates if the transaction should be auto allocated or not</param>
	<param name="apply">A <strong>Boolean</strong> flag that set either the credits available or balance as its credits to apply</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AllocatedVoidedInvoice(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway)">
	<summary>
 Creates a <strong>DataRow</strong> in the CustomerAllocationDebitView table of the ReceiptDataset
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AllocatedVoidedInvoice</em></strong> method.</para>
		<code lang="VB" title="AllocateVoidedInvoice" description="Creates a credit memo/note with the same invoice and total as the invoice and cretes an allocation.">
 Dim datasetInvoiceToVoid As InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AllocatedVoidedInvoice(datasetInvoiceToVoid)
    </code>
		<code lang="CS" title="AllocatedVoidedInvoice" description="Creates a credit memo/note with the same invoice and total as the invoice and cretes an allocation.">
 InvoiceDatasetGateway datasetInvoiceToVoid;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 invoiceFacade.AllocatedVoidedInvoice(datasetInvoiceToVoid);
 </code>
	</example>
	<requirements>Parameter datasetInvoiceToVoid must contain the voided invoice row.</requirements>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ApplyCreditMemo(System.Int32,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway@)">
	<summary>
 Update CustomerInvoiceView ProcessCreditMemo to "Apply"
 </summary>
	<param name="tempInvoiceDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignAmountPaid(System.Decimal,System.Decimal)">
	<summary>
 Assigns the total amount paid if the payment is made in the  sales order form.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignAmountPaid</em></strong> method.
    <code lang="VB" title="AssignAmountPaid" description="Assigns the amount of the receipt to be applied/reserved to the transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignAmountPaid(100, 100)
    </code>
		<code lang="CS" title="AssignAmountPaid" description="Assigns the amount of the receipt to be applied/reserved to the transaction.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 invoiceFacade.AssignAmountPaid(100, 100);
    </code>
	</example>
	<param name="totalPaid">A <strong>Decimal</strong> containing the total amount paid in home currency.</param>
	<param name="totalPaidRate">A <strong>Decimal</strong> containing the total amount paid in customer's currency.</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignToCredit">
	<summary>
 Creates customer credit row/s from a opening credit or batch credit transaction.
 </summary>
	<remarks>This Sub Routine is only used in Opening Credit and Batch Credit transactions</remarks>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignToCredit</em></strong> method.
    <code lang="VB" title="AssignToCredit" description="Creates a record in the CustomerCredit table from opening credit or batch credit transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignToCredit()
    </code>
		<code lang="CS" title="AssignToCredit" description="Creates a record in the CustomerCredit table from opening credit or batch credit transaction.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignToCredit();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignBillTo(System.Data.DataRow,System.Data.DataRow,System.Boolean)">
	<summary>
 Procedure to assign the selected BillTo Address
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignBillTo</em></strong> method.</para>
		<code lang="VB" title="AssignBillTo" description="Assigns the customer row to the invoice transation.">
 Dim customerRow As DataRow
 Dim invoiceRow As DataRow
 Dim isIncludePaymenTerm As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignBillTo(customerRow, invoiceRow, isIncludePaymenTerm)
    </code>
		<code lang="CS" title="AssignBillTo" description="Assigns the customer row to the invoice transation.">
 DataRow customerRow;
 DataRow invoiceRow;
 bool isIncludePaymenTerm;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignBillTo(customerRow, invoiceRow, isIncludePaymenTerm);
    </code>
	</example>
	<param name="customerRow">The customer row to be assigned as billTo</param>
	<param name="invoiceRow">The row to which the billTo is to be assigned</param>
	<param name="isIncludePaymenTerm">Flag to whether include the PaymentTerm or not</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignBillTo(System.Data.DataRow,System.Data.DataRowView,System.Boolean)">
	<summary>
 Procedure to assign the selected BillTo Address
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignBillTo</em></strong> method.</para>
		<code lang="VB" title="AssignBillTo" description="Assigns the customer row to the invoice transation.">
 Dim customerRow As DataRow
 Dim invoiceRow As DataRowView
 Dim isIncludePaymenTerm As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignBillTo(customerRow, invoiceRow, isIncludePaymenTerm)
    </code>
		<code lang="CS" title="AssignBillTo" description="Assigns the customer row to the invoice transation.">
 DataRow customerRow;
 DataRowView invoiceRow;
 bool isIncludePaymenTerm;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignBillTo(customerRow, invoiceRow, isIncludePaymenTerm);
    </code>
	</example>
	<param name="customerRow">The customer row to be assigned as billTo</param>
	<param name="invoiceRow">The row to which the billTo is to be assigned</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignCoupon(System.Boolean)">
	<summary>
 Assigns the coupon the customer wishes to apply to the sales order transaction.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignCoupon</em></strong> method.</para>
		<code lang="VB" title="AssignCoupon" description="Applies the values of the coupon row to the sales order transaction">
 Dim computeTotal As Boolean
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway) 
 salesOrderFacade.AssignCoupon(rowCoupon, rowSalesOrder, computeTotal)
    </code>
		<code lang="CS" title="AssignCoupon" description="Applies the values of the coupon row to the sales order transaction">
 Bool computeTotal;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.SalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.AssignCoupon(computeTotal);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>computeTotal</em> can't be nothing</para>
	</requirements>
	<param name="computeTotal">A <strong>preference</strong> whether or not to compute the totals.</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignCoupon(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assigns the coupon to an invoice
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignCoupon</em></strong> method.</para>
		<code lang="VB" title="AssignCoupon" description="Applies the values of the coupon row to the sales order transaction">
 Dim rowCoupon As DataRow
 Dim rowInvoice As DataRow
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway) 
 invoiceFacade.AssignCoupon(rowCoupon, rowInvoice)
    </code>
		<code lang="CS" title="AssignCoupon" description="Applies the values of the coupon row to the sales order transaction">
 DataRow rowCoupon;
 DataRow rowInvoice;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignCoupon(rowCoupon, rowInvoice);
    </code>
	</example>
	<param name="rowCoupon">The coupon row to be assigned</param>
	<param name="rowInvoice">The invoice row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.IsAllowedItem(System.String)">
	<summary>
	</summary>
	<param name="itemType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetCouponInfo">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetItemsCouponProRateInfo">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetCouponSubTotal">
	<summary>
 Get's the sub total rate of the invoice
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeTransactionDetailCouponDiscount(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="rowInvoice"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeTransactionDetailCouponDiscount(System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="rowInvoice"></param>
	<param name="isCreditMemo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CalculateCouponInvoiceDetailExtPrice(System.String,System.Decimal,System.Decimal,Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewRow)">
	<summary>
	</summary>
	<param name="netPriceRate"></param>
	<param name="netPrice"></param>
	<param name="rowInvoiceDetail"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.SetAllCouponValuesToDBNullValue">
	<summary>
 Sets all coupon values to DBNull value.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignCurrency(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assign the selected Currency to current transaction
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignCurrency</em></strong> method.
    <code lang="VB" title="AssignCurrency" description="Recalculates all the invoice transaction values by assigning the currency information from the row passed.">
 Dim rowCurrency As DataRow
 Dim transaction As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway) 
 invoiceFacade.AssignCurrency(rowCurrency, transaction)
    </code>
		<code lang="CS" title="AssignCurrency" description="Recalculates all the invoice transaction values by assigning the currency information from the row passed.">
 DataRow rowCurrency;
 TransactionType transaction = Framework.Base.Shared.Enum.TransactionType.Invoice;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignCurrency(rowCurrency, transaction);
    </code>
	</example>
	<param name="drowReceiptTerm">The receipt row</param>
	<param name="transaction">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignInventoryItem(System.Data.DataRow,System.Data.DataRowView@,System.String@)">
	<summary>
 Procedure to assign the selected item's special pricing defaults.
 </summary>
	<returns>Errors found</returns>
	<remarks>FieldNames of CustomerInvoices and CustomerInvoice tables must be the same, because this function is shared in Order and Invoice module</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignInventoryItem</em></strong> method.</para>
		<code lang="VB" title="AssignInventoryItem" description="Assigns the item's information to the order transaction line item.">
 Dim itemRow As DataRow
 Dim lineItemRow As DataRowView
 Dim errMsg As String
 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceGateway)
 invoiceFacade.AssignInventoryItem(itemRow, lineItemRow, errMsg)
    </code>
		<code lang="CS" title="AssignInventoryItem" description="Assigns the item's information to the order transaction line item.">
 DataRow itemRow;
 DataRowView lineItemRow;
 string errMsg;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceGateway());
 invoiceFacade.AssignInventoryItem(itemRow, lineItemRow, errMsg);
    </code>
	</example>
	<param name="itemRow">the item row to be added</param>
	<param name="lineItemRow">The invoice row to be processed</param>
	<param name="errMsg">Error Message</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignBundle(System.Data.DataRowView,System.Data.DataRow,System.Decimal,System.String,System.String,System.String,System.Int32@,System.Decimal,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="invoiceLineItemRow"></param>
	<param name="kitItemRow"></param>
	<param name="quantity"></param>
	<param name="warehouseCode"></param>
	<param name="kitPriceType"></param>
	<param name="parentItemKitCode"></param>
	<param name="kitBatch"></param>
	<param name="bundlePercentage"></param>
	<param name="bundleSalesPriceRate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignItemKit(System.Data.DataRow,Interprise.Framework.Base.DatasetComponent.ItemKitDataset.KitConfiguratorRow[],System.Data.DataRowView,System.String,System.Decimal,System.Decimal,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@,System.String)">
	<summary>
 Procedure to assign the selected Item Kit
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignItemKit</em></strong> method.</para>
		<code lang="VB" title="AssignItemKit" description="Adds the selected kit along with its components to the transaction item lines.">
 Dim itemKitRow As DataRow
 Dim kitItemRows() As Framework.Base.DatasetGateway.ItemKitDatasetGateway.KitConfiguratorRow
 Dim lineItemRow As DataRowView
 Dim pricingType As String = "Item Price"
 Dim quantity As Decimal = 10
 Dim salesPriceRate As Decimal = 100
 Dim transactionType As Framework.Base.Shared.Enum.TransactionType = Framework.Base.Shared.TransactionType.Invoice
 Dim errMsg As String
 Dim warehouseCode As String = "MAIN"
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignItemKit(itemKitRow, kitItemRows, lineItemRow, pricingType, quantity, salesPriceRate, transactionType, transactionType, errMsg, warehouseCode)
    </code>
		<code lang="CS" title="AssignItemKit" description="Adds the selected kit along with its components to the transaction item lines.">
 DataRow itemKitRow;
 Framework.Base.DatasetGateway.ItemKitDatasetGateway.KitConfiguratorRow[] kitItemRows;
 DataRowView lineItemRow;
 string pricingType = "Item Price";
 Decimal quantity = 10;
 Decimal salesPriceRate = 100;
 Framework.Base.Shared.Enum.TransactionType transactionType = Framework.Base.Shared.TransactionType.Invoice;
 string errMsg;
 string warehouseCode = "MAIN";
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignItemKit(itemKitRow, kitItemRows, lineItemRow, pricingType, quantity, salesPriceRate, transactionType, transactionType, errMsg, warehouseCode);
 </code>
	</example>
	<param name="itemKitRow">The item row to be added</param>
	<param name="kitItemRows">The item rows to be added</param>
	<param name="lineItemRow">The invoice row to be processed</param>
	<param name="pricingType">The type of pricing for this transaction</param>
	<param name="quantity">The quantity of the item to be processed</param>
	<param name="salesPriceRate">The sales price of the item to be processed in customer currency</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="errMsg">Error Message</param>
	<param name="warehouseCode">The code of the warehouse used in this transaction</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignItemMatrix(System.Data.DataRow[],System.Int32,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>
 Assigns matrix items
 </summary>
	<remarks>This property must be overriden or implemented for it will be used in processing matrix items</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignItemMatrix</em></strong> method.</para>
		<code lang="VB" title="AssignItemMatrix" description="Adds the selected matrix items to the transaction item lines.">
 Dim itemRows() As DataRow
 Dim matrixBatch As Integer = 1
 Dim transactionType As Framework.Base.Shared.Enum.TransactionType = Framework.Base.Shared.TransactionType.Invoice
 Dim errMsg As String
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignItemMatrix(itemRows, matrixBatch, transactionType, errMsg)
    </code>
		<code lang="CS" title="AssignItemMatrix" description="Adds the selected matrix items to the transaction item lines.">
 DataRow[] itemRows;
 int matrixBatch = 1;
 Framework.Base.Shared.Enum.TransactionType transactionType = Framework.Base.Shared.TransactionType.Invoice;
 string errMsg;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignItemMatrix(itemRows, matrixBatch, transactionType, errMsg);
    </code>
	</example>
	<param name="itemRows">Defines the item rows which needs to be processed</param>
	<param name="transactionType">The type of transaction the current form is creating</param>
	<param name="errMsg">Error message reference</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignMiscItem(System.String,System.Decimal,System.String,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>
 Procedure to assign the selected Miscellaneous Item
 </summary>
	<returns>Errors found</returns>
	<remarks>
 Adds miscellaneous item to the transaction detail which includes accessory,
 substitute and cross/up sell items. Returns True if adding is successfull.
 </remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignMiscItem</em></strong> method.</para>
		<code lang="VB" title="AssignMiscItem" description="Adds miscellaneous item to the transaction detail which includes accessory, substitute and cross/up sell items.">
 Dim itemCode As String = "ITEM-1A"
 Dim quantity As Decimal = 10
 Dim umCode As String = "EACH"
 Dim warehouseCode As String = "MAIN"
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 Dim errMsg As String
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 InvoiceFacade.AssignMiscItem(itemCode, quantity, umCode, warehouseCode, transactionType, errMsg)
    </code>
		<code lang="CS" title="AssignMiscItem" description="Adds miscellaneous item to the transaction detail which includes accessory, substitute and cross/up sell items.">
 string itemCode = "ITEM-1A";
 Decimal quantity = 10;
 string umCode = "EACH";
 string warehouseCode = "MAIN";
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 string errMsg;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 InvoiceFacade.AssignMiscItem(itemCode, quantity, umCode, warehouseCode, transactionType, errMsg);
    </code>
	</example>
	<param name="itemCode">The code of the item that is to be assigne</param>
	<param name="quantity">The quantity of the item</param>
	<param name="umCode">Code that reprsents the unit of measurement of the item</param>
	<param name="warehouseCode">Code that represents the warehouse of the item</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="errMsg">Error Message</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignNoteItem(System.Data.DataRowView)">
	<summary>
 Procedure to assign the selected Note Item
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignNoteItem</em></strong> method.
    <code lang="VB" title="AssignNoteItem" description="Assigns the ItemType property of the line item added to be a NoteItem. (An empty line in the order transaction)">
 Dim noteLineItemRow As DataRowView
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignNoteItem(noteLineItemRow)
    </code>
		<code lang="CS" title="AssignNoteItem" description="Assigns the ItemType property of the line item added to be a NoteItem. (An empty line in the order transaction)">
 DataRowView noteLineItemRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignNoteItem(noteLineItemRow);
    </code>
	</example>
	<param name="noteLineItemRow">The note rw to be added</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignLineItemNumber(System.Data.DataRowView)">
	<summary>
 Assign the sum of maximum LineNum for the item row in the current document
 </summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignItemKitDetailLineItemNumber(System.Data.DataRow)">
	<summary>
 Assigns line number to an item line of the transaction. 
 </summary>
	<param name="rowKitDetail">A <strong>DataRow</strong> containing the item line to which the new line number is assigned to.</param>
	<remarks>Line number identifies a particular item line in the transaction. 
 It allows order entry of same item code in one transaction but each is assigned with different line number.
 It is unique inside the transaction only. </remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignLineItemWarehouse(System.Data.DataRowView)">
	<summary>
 Get the warehouse from the preceding row
 </summary>
	<param name="lineItemRow">Item row from where to get the values</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignItemWarehouse(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
 Assigns the default warehouse from which the item is going to be picked.
 </summary>
	<requirements>
		<para>Parameter <em>lineItemRow</em> can't be nothing</para>
		<para>Parameter <em>rowWarehouse</em> can't be nothing</para>
	</requirements>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignLineItemWarehouse</em></strong> method.</para>
		<code lang="VB" title="AssignLineItemWarehouse" description="Assigns the warehouse information to lie item row in the sales order transaction.">
 Dim lineItemRow As DataRowView
 Dim rowWarehouse As DataRow
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway) 
 salesOrderFacade.AssignLineItemWarehouse(lineItemRow, rowWarehouse)
    </code>
		<code lang="CS" title="AssignLineItemWarehouse" description="Assigns the warehouse information to lie item row in the sales order transaction.">
 DataRowView lineItemRow;
 DataRow rowWarehouse;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.AssignLineItemWarehouse(lineItemRow, rowWarehouse);
    </code>
	</example>
	<param name="lineItemRow">A <strong>DataRowView</strong> containing the item line to which the warehouse is to be assigned to.</param>
	<param name="rowWarehouse">A <strong>DataRow</strong> containing the warehouse information.</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignNonStockItem(System.Data.DataRowView)">
	<summary>Assigns the default nonstock item to the transaction detail.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignNonStockItem</em></strong> method.</para>
		<code lang="VB" title="AssignNonStockItem" description="Adds the default Non-Stock item to the sales order transaction.">
 Dim nonstockLineItemRow As DataRowView
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 InvoiceFacade.AssignNonStockItem(nonstockLineItemRow)
    </code>
		<code lang="CS" title="AssignNonStockItem" description="Adds the default Non-Stock item to the sales order transaction.">
 DataRowView nonstockLineItemRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 InvoiceFacade.AssignNonStockItem(nonstockLineItemRow);
    </code>
	</example>
	<param name="nonstockLineItemRow">
 A <strong>DataRowView</strong> containing the item line to which the default
 nonstock item is to be assigned.
 </param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignPaymentTerm(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceViewRow,System.Data.DataRow)">
	<summary>
 Procedure to assign the selected Receipt Term
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignPaymentTerm</em></strong> method.
    <code lang="VB" title="AssignPaymentTerm" description="Assigns receiptTermRow values to the invoice transaction.">
 Dim invoiceRow As CustomerInvoiceViewRow
 Dim receiptTermRow As DataRow
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignPaymentTerm(invoiceRow, receiptTermRow)
    </code>
		<code lang="CS" title="AssignPaymentTerm" description="Assigns receiptTermRow values to the invoice transaction.">
 CustomerInvoiceViewRow invoiceRow;
 DataRow receiptTermRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignPaymentTerm(invoiceRow, receiptTermRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>invoiceRow</em> can't be nothing.</para>
		<para>Parameter <em>receiptTermRow</em> can't be nothing.</para>
	</requirements>
	<param name="invoiceRow">The invoice row to be processed</param>
	<param name="receiptTermRow">The payment term that will be assigned</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignPaymentTerm(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceViewRow,System.Boolean)">
	<summary>Refreshes the payment term information stored in the transaction header.</summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignPaymentTerm</em></strong> method.
    <code lang="VB" title="AssignPaymentTerm" description="Applies the payment term to the sales order transaction.">
 Dim invoiceRow As CustomerInvoiceViewRow
 Dim isRead As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignPaymentTerm(salesOrderRow, isRead)
    </code>
		<code lang="CS" title="AssignPaymentTerm" description="Applies the payment term to the sales order transaction.">
 CustomerInvoiceViewRow invoiceRow;
 bool isRead;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignPaymentTerm(salesOrderRow, isRead);
    </code>
	</example>
	<requirements>Parameter <em>invoiceRow</em> can't be nothing.</requirements>
	<param name="invoiceRow">The invoice row to be processed</param>
	<param name="isRead">Flag that enables the reading of the payment term defaults before assigning it to the invoice</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignWarehouse(System.Data.DataRow)">
	<summary>Assigns the warehouse of the invoice transaction.</summary>
	<example>
    The following codes shows how to implement the
    <em><strong>AssignWarehouse</strong></em> method.
    <code lang="VB" title="AssignWarehouse" description="Assigns the warehouse values based on the WarehouseCode of the invoice transaction header.">
 Dim invoiceRow As DataRow
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignWarehouse(salesOrderRow)
    </code>
		<code lang="CS" title="Assignwarehouse" description="Assigns the warehouse values based on the WarehouseCode of the invoice transaction header.">
 DataRow invoiceRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignWarehouse(salesOrderRow);
    </code>
	</example>
	<param name="salesOrderRow">The Sales Order being processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignWarehouse(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assigns the ShippingAddress of the transaction
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignWarehouse</em></strong> method.
    <code lang="VB" title="AssignWarehouse" description="Assigns the rowWarehouse values to the sales order transaction.">
 Dim rowWarehouse As DataRow
 Dim invoiceRow As DataRow
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignWarehouse(rowWarehouse, salesOrderRow)
    </code>
		<code lang="CS" title="AssignWarehouse" description="Assigns the rowWarehouse values to the sales order transaction.">
 DataRow rowWarehouse;
 DataRow invoiceRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignWarehouse(rowWarehouse, salesOrderRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>rowWarehouse</em> can't be nothing</para>
		<para>Parameter <em>salesOrderRow</em> can't be nothing</para>
	</requirements>
	<param name="rowWarehouse">The warehouse to where to return the items</param>
	<param name="salesOrderRow">The Sales Order being processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignWarehouse(System.Data.DataRow,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Assigns the ShippingAddress of the transaction
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignWarehouse</em></strong> method.
    <code lang="VB" title="AssignWarehouse" description="Assigns the parameter values to theinvoice transaction.">
 Dim salesOrderRow As DataRow
 Dim warehouseCode As String = "MAIN"
 Dim warehouseDescription As String = "Main Warehouse"
 Dim address As String = "1234 Langley Lane"
 Dim city As String = "Beverly Hills"
 Dim state As String = "CA"
 Dim postalCode As String = "90210"
 Dim county As String = "Los Angeles"
 Dim country As String = "United States of America"
 Dim phone As String = "+1 (215)444-1234"
 Dim phoneExt As String = "214"
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetgateway)
 invoiceFacade.AssignWarehouse(salesOrderRow, warehouseCode, warehouseDescription, address, city, state, postalCode, county, country, phone, phoneExt)
    </code>
		<code lang="CS" title="AssignWarehouse" description="Assigns the parameter values to theinvoice transaction.">
 DataRow salesOrderRow;
 string warehouseCode = "MAIN";
 string warehouseDescription = "Main Warehouse";
 string address = "1234 Langley Lane";
 string city = "Beverly Hills";
 string state = "CA";
 string postalCode = "90210";
 string county = "Los Angeles";
 string country = "United States of America";
 string phone = "+1 (215)444-1234";
 string phoneExt = "214";
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetgateway());
 invoiceFacade.AssignWarehouse(salesOrderRow, warehouseCode, warehouseDescription, address, city, state, postalCode, county, country, phone, phoneExt);
 </code>
	</example>
	<requirements>Parameter <em>salesOrderRow</em> can't be nothing</requirements>
	<param name="salesOrderRow">The Sales Order row to be processed</param>
	<param name="warehouseCode">The code of the warehouse tobe assigned</param>
	<param name="warehouseDescription">The description of the warehouse to be assigned</param>
	<param name="address">The address of the warehouse to be assigned</param>
	<param name="city">The city of the warehouse to be assigned</param>
	<param name="state">The state of the warehouse to be assigned</param>
	<param name="postalCode">The postal code of the warehouse to be assigned</param>
	<param name="county">The county of the warehouse to be assigned</param>
	<param name="country">The country of the warehouse to be assigned</param>
	<param name="phone">The phone number of the warehouse to be assigned</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignQuantityOrdered(System.Data.DataRowView,System.Decimal,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to assign the quantity ordered
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignQuantityOrdered</em></strong> method.
    <code lang="VB" title="AssignQuantityOrdered" description="Assigns the qty ordered from an existing transaction into the current transaction's lineItemRow.">
 Dim lineItemRow As DataRowView
 Dim qtyToShip As Decimal = 10
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignQuantityOrdered(lineItemRow, qtyToShip, transactionType)
    </code>
		<code lang="CS" title="AssignQuantityOrdered" description="Assigns the qty ordered from an existing transaction into the current transaction's lineItemRow.">
 DataRowView lineItemRow;
 Decimal qtyToShip = 10;
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignQuantityOrdered(lineItemRow, qtyToShip, transactionType);
    </code>
	</example>
	<param name="lineItemRow">The row of the item to be processed</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignQuantityShipped(System.Data.DataRowView,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to assign the quantity shipped.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignQuantityShipped</em></strong> method. 
    <code lang="VB" title="AssignQuantityShipped " description="Checks and assigns the quantity shipped to the invoice transaction.">
 Dim lineItemRow As DataRowView
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 Dim msg As String
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 msg = invoiceFacade.AssignQuantityShipped(lineItemRow, transactionType)
    </code>
		<code lang="CS" title="AssignQuantityShipped " description="Checks and assigns the quantity shipped to the invoice transaction.">
 DataRowView lineItemRow;
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 string msg;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 msg = invoiceFacade.AssignQuantityShipped(lineItemRow, transactionType);
    </code>
	</example>
	<param name="lineItemRowView">The row of the item to be processed</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignQuantityBackOrdered(System.Data.DataRow,System.Decimal,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="proposeQuantityBackOrder"></param>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignQuantityBackOrdered(System.Data.DataRowView,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to assign the quantity back ordered.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignQuantityBackOrdered</em></strong> method. 
    <code lang="VB" title="AssignQuantityBackOrdered " description="Checks and assigns the quantity back ordered to the invoice transaction.">
 Dim lineItemRow As DataRowView
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 Dim msg As String
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 msg = invoiceFacade.AssignQuantityBackOrdered(lineItemRow, transactionType)
    </code>
		<code lang="CS" title="AssignQuantityBackOrdered " description="Checks and assigns the quantity back ordered to the invoice transaction.">
 DataRowView lineItemRow;
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 string msg;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 msg = invoiceFacade.AssignQuantityBackOrdered(lineItemRow, transactionType);
    </code>
	</example>
	<param name="lineItemRowView">The row of the item to be processed</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignSalesAccount(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Procedure to assign the selected sales account
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignSalesAccount</em></strong> method. 
    <code lang="VB" title="AssignSalesAccount" description="Assigns the account row into the transaction's line item.">
 Dim accountRow As DataRow
 Dim lineItemRow As DataRowView
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignSalesAccount(accountRow, lineItemRow)
    </code>
		<code lang="CS" title="AssignSalesAccount" description="Assigns the account row into the transaction's line item.">
 DataRow accountRow;
 DataRowView lineItemRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignSalesAccount(accountRow, lineItemRow);
    </code>
	</example>
	<param name="accountRow">The account row to be assigned</param>
	<param name="lineItemRow">The item row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignSalesRepCommission(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Procedure to assign the selected Sales Rep
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignSalesRepCommission</em></strong> method.
    <code lang="VB" title="AssignSalesRepCommission" description="Assigns the sales rep information into the commission for computation.">
 Dim salesRepRow As DataRow
 Dim salesRepCommissionRow As DataRowView 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignSalesRepCommission(salesRepRow, salesRepCommissionRow)
    </code>
		<code lang="CS" title="AssignSalesRepCommission" description="Assigns the sales rep information into the commission for computation.">
 DataRow salesRepRow;
 DataRowView salesRepCommissionRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignSalesRepCommission(salesRepRow, salesRepCommissionRow);
    </code>
	</example>
	<param name="salesRepRow">The sales rep row to be processed</param>
	<param name="salesRepCommissionRow">The sales rep commission row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignSalesRepGroupContact(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Procedure to assign the Sales Rep Contact
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignSalesRepGroupContact</em></strong> method.
    <code lang="VB" title="AssignSalesRepGroupContact" description="Assigns the contact information to the sales rep commission row.">
 Dim salesRepGroupContactRow As DataRow
 Dim salesRepCommissionRow As DataRowView 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignSalesRepGroupContact(salesRepGroupContactRow, salesRepCommissionRow)
    </code>
		<code lang="CS" title="AssignSalesRepGroupContact" description="Assigns the contact information to the sales rep commission row.">
 DataRow salesRepGroupContactRow;
 DataRowView salesRepCommissionRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignSalesRepGroupContact(salesRepGroupContactRow, salesRepCommissionRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>salesRepGroupContactRow</em> can't be nothing</para>
		<para>Parameter <em>salesRepCommissionRow</em> can't be nothing</para>
	</requirements>
	<param name="salesRepGroupContactRow">The row of the sales rep contact</param>
	<param name="salesRepCommissionRow">The sales rep commission row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignShipTo(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Procedure to assign the selected ShipTo Address
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignShipTo</em></strong> method.
    <code lang="VB" title="AssignShipTo" description="Procedure that assigns the shipToRow values to the invoice transaction.">
 Dim shipToRow As DataRow
 Dim invoiceRow As DataRow 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignShipTo(shipToRow, invoiceRow)
    </code>
		<code lang="CS" title="AssignShipTo" description="Procedure that assigns the shipToRow values to the invoice transaction.">
 DataRow shipToRow;
 DataRow invoiceRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignShipTo(shipToRow, invoiceRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>shipToRow</em> can't be nothing.</para>
		<para>Parameter <em>invoiceRow</em> can't be nothing.</para>
	</requirements>
	<param name="shipToRow">The shipto row</param>
	<param name="invoiceRow">The invoice row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignSSDAnalysisDefaults(System.Data.DataRowView,System.String[][])">
	<summary>
 Procedure to assign the default SSD Analysis
 </summary>
	<param name="lineItemRow">The item row to be processed</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignUnitMeasure(System.Data.DataRow,System.Data.DataRowView@)">
	<summary>
 Procedure to assign the selected unit measure
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>AssignUnitMeasure</em></strong> method.
    <code lang="VB" title="AssignUnitMeasure" description="Procedure that assigns the unitMeasureRow values of the item to the invoice detail line item.">
 Dim unitMeasureRow As DataRow
 Dim lineItemRow As DataRowView 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignUnitMeasure(unitMeasureRow, lineItemRow)
    </code>
		<code lang="CS" title="AssignUnitMeasure" description="Procedure that assigns the unitMeasureRow values of the item to the invoice detail line item.">
 DataRow unitMeasureRow;
 DataRowView lineItemRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignUnitMeasure(unitMeasureRow, lineItemRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>unitMeasureRow</em> can't be nothing.</para>
		<para>Parameter <em>lineItemRow</em> can't be nothing.</para>
	</requirements>
	<param name="unitMeasureRow">The unit of measure to be assigned</param>
	<param name="lineItemRow">The item row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeBatchDetailProjectedDiscount">
	<summary>
 Computes the Batch Detail Projected Discount
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeBatchTotal(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Compute the Batch Invoices' Totals
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeBatchTotal</em></strong> method.</para>
		<code lang="VB" title="ComputeBatchTotal" description="Procedure that computes the Batch Invoice/Credit totals including the potential discount and line item tax totals.">
 Dim isRecalcTax As Boolean = True
 Dim isRecalcDiscount As Boolean = True
 Dim isRecalcTransTax As Boolean  = True
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ComputeBatchTotal(isRecalcTax, isRecalcDiscount, isRecalcTransTax)
    </code>
		<code lang="CS" title="ComputeBatchTotal" description="Procedure that computes the Batch Invoice/Credit totals including the potential discount and line item tax totals.">
 bool isRecalcTax = true;
 bool isRecalcDiscount = true;
 bool isRecalcTransTax = true;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.ComputeBatchTotal(isRecalcTax, isRecalcDiscount, isRecalcTransTax);
    </code>
	</example>
	<param name="isRecalcTax">Flag to whether Recalculate the Tax</param>
	<param name="isRecalcDiscount">Flag to whether Recalculate the Discount</param>
	<param name="isRecalcTransTax">Flag to whether Recalculate the Transaction Tax</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeBatchDetail(System.Data.DataRow,System.Boolean,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Compute Batch Invoice Detail's Totals
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeBatchDetail</em></strong> method.</para>
		<code lang="VB" title="ComputeBatchDetail" description="Procedure that computes the batch transaction's line item totals including tax.">
 Dim lineItemRow As DataRow
 Dim isRecalc As Boolean = True
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.BatchInvoice
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ComputeBatchDetail(lineItemRow, isRecalc, transactionType)
    </code>
		<code lang="VB" description="Procedure that computes the batch transaction's line item totals including tax.">
 DataRow lineItemRow;
 bool isRecalc = True;
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.BatchInvoice;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 invoiceFacade.ComputeBatchDetail(lineItemRow, isRecalc, transactionType);
    </code>
	</example>
	<requirements>Parameter lineItemRow can't be nothing.</requirements>
	<param name="lineItemRow">The item row of the batch transaction to be processed</param>
	<param name="isRecalc">Flag to wheter Recalculate totals</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.BalanceHeaderDetail">
	<summary>
 Computes and Assigns the Balances/Totals of the Header Detail
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>BalanceHeaderDetail</em></strong> method.</para>
		<code lang="VB" title="BalanceHeaderDetail" description="Procedure that balances the values of the header transaction based on the total amounts of the detail item lines' amount and tax total.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.BalanceHeaderDetail()
    </code>
		<code lang="CS" title="BalanceHeaderDetail" description="Procedure that balances the values of the header transaction based on the total amounts of the detail item lines' amount and tax total.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.BalanceHeaderDetail();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignDetailTaxAmount(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewRow)">
	<summary>
 Procedure to reflect user entered tax in item line to it's tax detail.
 </summary>
	<param name="rowBatchInvoiceDetail">A <strong>InvoiceDatasetGateway.CustomerInvoiceDetailViewRow</strong> row containing the item line.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeFreightTax">
	<summary>
 Computes the Freight Tax
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeFreightTax</em></strong> method.</para>
		<code lang="VB" title="ComputeFreightTax" description="Computes and assigns the freight tax amount for the current transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacadeFacade.ComputeFreightTax()
    </code>
		<code lang="CS" title="ComputeFreightTax" description="Computes and assigns the freight tax amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 invoiceFacadeFacade.ComputeFreightTax();
    </code>
	</example>
	<remarks>The calculation of tax is affected by the CustomerPreference table. 
 If IsComputeTaxAfterPotentialDiscountIsDeducted is True the tax is calculated upon the total amount exclusive of potential discount.
 Otherwise, the tax is calculated upon the total amount.</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CalculateItemTransactionTax(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Procedure to calculate the item transaction total tax
 </summary>
	<remarks>
 The calculation of tax is affected by the CustomerPreference table. If
 IsComputeTaxAfterPotentialDiscountIsDeducted is True the tax is calculated upon the
 total amount exclusive of potential discount. Otherwise, the tax is calculated upon the
 total amount.
 </remarks>
	<example>
    The following codes shows how to implement the
    <strong><em>CalculateItemTransactionTax</em></strong> method.
    <code lang="VB" title="CalculateItemTransactionTax" description="Calculates and assigns the item's tax values based on the taxRow.">
 Dim taxRow As DataRow
 Dim lineItemRow As DataRowView
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.CalculateItemTransactionTax(taxRow, lineItemRow)
    </code>
		<code lang="CS" title="CalculateItemTransactionTax" description="Calculates and assigns the item's tax values based on the taxRow.">
 DataRow taxRow;
 DataRowView lineItemRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.CalculateItemTransactionTax(taxRow, lineItemRow);
    </code>
	</example>
	<requirements>
		<para>Parameter <em>taxRow</em> can't be nothing.</para>
		<para>Parameter <em>lineItemRow</em> can't be nothing.</para>
	</requirements>
	<param name="taxRow">The tax row to be assigned</param>
	<param name="lineItemRow">The line item to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeOtherTax">
	<summary>
 Computes Other Taxes
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <em><strong>ComputeOtherTax</strong></em> method.</para>
		<code lang="VB" title="ComputeOtherTax" description="Computes and assigns the other tax amount for the current transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacadeFacade.ComputeOtherTax()
    </code>
		<code lang="CS" title="ComputeOtherTax" description="Computes and assigns the other tax amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 invoiceFacadeFacade.ComputeOtherTax();
    </code>
	</example>
	<remarks>The calculation of tax is affected by the CustomerPreference table. 
 If IsComputeTaxAfterPotentialDiscountIsDeducted is True the tax is calculated upon the total amount exclusive of potential discount.
 Otherwise, the tax is calculated upon the total amount.</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeTotals(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Compute the total amount due
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeTotals</em></strong> method.</para>
		<code lang="VB" title="ComputeTotals" description="Calculates the total amounts of the transaction including the freight, total tax, total due and balance.">
 Dim isClearDiscount As Boolean = True
 Dim isCheckCreditLimit As Boolean = True
 Dim isRecalculateFreight As Boolean = True
 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacadeFacade.ComputeTotals(isClearDiscount, isCheckCreditLimit, isRecalculateFreight)
    </code>
		<code lang="CS" title="ComputeTotals" description="Calculates the total amounts of the transaction including the freight, total tax, total due and balance.">
 bool isClearDiscount = True;
 bool isCheckCreditLimit = True;
 bool isRecalculateFreight = True;
 
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 invoiceFacadeFacade.ComputeTotals(isClearDiscount, isCheckCreditLimit, isRecalculateFreight);
    </code>
	</example>
	<param name="isClearDiscount">Flag that defines if the discount values should be cleared</param>
	<param name="isCheckCreditLimit">Flag that defines if the customer's credit limit should be taken into account</param>
	<param name="isRecalculateFreight">Flag that defines if the Freight amounts should be recalculated</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeInvoiceTotal(System.Double,System.Double)">
	<summary>
 Procedure to compute total invoice
 </summary>
	<returns>Gross Amount of the transaction</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeInvoiceTotal</em></strong> method.</para>
		<code lang="VB" title="ComputeInvoiceTotal" description="Procedure that computes the invoice total value based on the parameters passed.">
 Dim numNetTotal As Double = 100
 Dim numtax As Double = 10
 Dim invoiceTotal As Double
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceTotal = invoiceFacade.ComputeInvoiceTotal(numNetTotal, numtax)
    </code>
		<code lang="VB" title="ComputeInvoiceTotal" description="Procedure that computes the invoice total value based on the parameters passed.">
 Double numNetTotal = 100;
 Double numtax = 10;
 Double invoiceTotal;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 invoiceTotal = invoiceFacade.ComputeInvoiceTotal(numNetTotal, numtax);
    </code>
	</example>
	<param name="numNetTotal">The net total of the transaction</param>
	<param name="numtax">The total tax of the transaction</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeTransactionDetails">
	<summary>
 Procedure to loop through all the item lines to calculate the extended sales price and tax.
 </summary>
	<remarks>Commission is being recalculated if the type of transaction is Sales Order.</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.DeallocateCredit">
	<summary>
 Deallocates allocated credit
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>DeallocateCredit</em></strong> method.
    <code lang="VB" title="DeallocateCredit" description="Removes the allocated credit value from the invoice.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.DeallocateCredit()
    </code>
		<code lang="CS" title="DeallocateCredit" description="Removes the allocated credit value from the invoice.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.DeallocateCredit();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.DeleteKitDetail(System.Data.DataRowView)">
	<summary>
 Method for deleting the components of the kit.
 </summary>
	<param name="lineItem"> The line number of the kit item.</param>
	<remarks>This method loops through the kit detail table to look for the components of the kit. When found the component is deleted.</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.InitializeCreditAllocation">
	<summary>
 Procedure to initialize credit allocation
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>InitializeCreditAllocation</em></strong> method.
    <code lang="VB" title="InitializeCreditAllocation" description="Retrives the credit value that can be allocated to the invoice.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.InitializeCreditAllocation()
    </code>
		<code lang="CS" title="InitializeCreditAllocation" description="Retrives the credit value that can be allocated to the invoice.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.InitializeCreditAllocation();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CheckCreditStatus(System.Data.DataRow,Interprise.Framework.Base.Shared.Delegates.ShowMessage)">
	<summary>
 Check if Customer is on Credit Hold
 </summary>
	<param name="customerRow">The customer row to be checked</param>
	<param name="showCreditHoldWarning">Flag that enables/disables the popup of the Credit Hold Warning form</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ClearCoupon(System.Data.DataRow)">
	<summary>
 Removes the assigned coupon from the sales order transaction.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ClearCoupon</em></strong> method.
    <code lang="VB" title="ClearCoupon" description="Removes the coupon values from the sales order transaction.">
 Dim rowSalesOrder As DataRow
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ClearCoupon(rowSalesOrder)
    </code>
		<code lang="CS" title="ClearCoupon" description="Removes the coupon values from the sales order transaction.">
 DataRow rowSalesOrder;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.ClearCoupon(rowSalesOrder);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.Compute(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Compute ExtPrice and totals
 </summary>
	<remarks>Computes all of the transactions totals, balances, tax, etc</remarks>
	<example>
    The following codes shows how to implement the <strong><em>Compute</em></strong>
    method.
    <code lang="VB" title="Compute" description="Calculates the extended sales price, tax amounts, total amounts and commission.">
 Dim lineItem As DataRow
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.Compute(lineItem, transactionType)
    </code>
		<code lang="CS" title="Compute" description="Calculates the extended sales price, tax amounts, total amounts and commission.">
 DataRow lineItem;
 TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.SalesOrder;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.Compute(lineItem, transactionType);
    </code>
	</example>
	<requirements>Parameter <em>lineItem</em> can't be nothing.</requirements>
	<param name="lineItem">The line item to be processed</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.RecalculateBaseCurrencyFields">
	<summary>
 Procedure to recompute home currency amounts
 </summary>
	<remarks>Recomputes the home currency amounts when the foreign currency values have been changed</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeCommission(System.Data.DataRow,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Procedure to compute the sales rep commission
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ComputeCommission</em></strong> method.
    <code lang="VB" title="ComputeCommission" description="Calculates the sales rep commission per line item of the sales order transaction base on parameter values.">
 Dim lineItemRow As DataRow
 Dim isAuto As Boolean = True
 Dim isSourceManual As Boolean = True
 Dim isCommissionable As Boolean = True
 Dim isComputeSalesRepCommission As Boolean = True
 Dim invoiceFacade As New Inteprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ComputeCommission(lineItemRow, isAuto, isSourceManual, isCommissionable, isComputeSalesRepCommission)
    </code>
		<code lang="CS" title="ComputeCommission" description="Calculates the sales rep commission per line item of the sales order transaction base on parameter values.">
 DataRow lineItemRow;
 bool isAuto = true;
 bool isSourceManual = true;
 bool isCommissionable = true;
 bool isComputeSalesRepCommission = true;
 Inteprise.Facade.Customer.InvoiceFacade invoiceFacade = new Inteprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.ComputeCommission(lineItemRow, isAuto, isSourceManual, isCommissionable, isComputeSalesRepCommission);
    </code>
	</example>
	<requirements>Parameter <em>lineItemRow</em> can't be nothing</requirements>
	<param name="lineItemRow">The line item to be processed</param>
	<param name="isAuto">Flag to set the commissionable state of the sales rep commissions</param>
	<param name="isSourceManual">Source of the commission</param>
	<param name="isCommissionable">Flag that defines if the transaction is commissionable</param>
	<param name="isComputeSalesRepCommission">Flag if whether to Compute the SalesRepCommission</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeDiscount">
	<summary>
 Computes discounts
 </summary>
	<example>
		<para>The following codes shows how to implement the ComputeDiscount method.</para>
		<code lang="VB" title="ComputeDiscount" description="Computes and assigns the discount amount for the current transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacadeFacade.ComputeDiscount()
    </code>
		<code lang="CS" title="ComputeDiscount" description="Computes and assigns the discount amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 invoiceFacadeFacade.ComputeDiscount();
    </code>
	</example>
	<remarks>Computes the potential discount for the transaction</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeCouponDiscount(Interprise.Framework.Customer.Shared.Structure.CouponInfo,Interprise.Facade.Customer.BaseSalesOrderFacade.IncludedItemInCouponInfo[],System.Decimal,System.Decimal@,System.Decimal@)">
	<summary>
 Computes the Coupon Discount
 </summary>
	<param name="coupon">Structure Coupon</param>
	<param name="includedItemInCoupon">Flag that defines if to Includ Item in Coupon</param>
	<param name="totalDue">The due total of the transaction in home currency</param>
	<param name="couponDiscount">The allowed discount for the coupon in home currency</param>
	<param name="couponDiscountRate">The allowed discount for the coupon in foreign currency</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeKitItemsSalesPrice(System.Data.DataRow)">
	<summary>
 Procedure to compute the kit item total price
 </summary>
	<remarks>Computes the totals of the kit items</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeKitItemsSalesPrice</em></strong> method.</para>
		<code lang="VB" title="ComputeKitItemsSalesPrice" description="Procedure that computes and assigns the sales price of the kit item on the invoice transaction item line.">
 Dim rowlineItem As DataRow 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ComputeKitItemsSalesPrice(rowlineItem)
    </code>
		<code lang="CS" title="ComputeKitItemsSalesPrice" description="Procedure that computes and assigns the sales price of the kit item on the invoice transaction item line.">
 DataRow rowlineItem;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.ComputeKitItemsSalesPrice(rowlineItem);
    </code>
	</example>
	<requirements>Parameter <em>rowlineItem</em> can't be nothing.</requirements>
	<param name="rowlineItem">The item line to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeKitItemsSalesPrice(System.Data.DataRow,System.String,System.Decimal,System.Decimal,System.String)">
	<summary>
 Calculates the sales price of kit components of specified kit item line.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ComputeKitItemsSalesPrice</em></strong> method.
    <code lang="VB" title="ComputeKitItemSalesPrice" description="Calculates the sales price for a specific kit item.">
 Dim rowlineItem As DataRow
 Dim couponType As String 
 Dim amount As Decimal 
 Dim percent As Decimal
 Dim salesOrderFacade As New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeKitItemsSalesPrice(rowlineItem, couponType, amount, percent)
    </code>
		<code lang="CS" title="ComputeKitItemsSalesPrice" description="Calculates the sales price for a specific kit item.">
 DataRow rowlineItem;
 String couponType;
 Decimal amount;
 Decimal percent;
 Interprise.Facade.Customer.SalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.SalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeKitItemsSalesPrice(rowlineItem, couponType, amount, percent);
    </code>
	</example>
	<requirements>Parameter <em>rowlineItem</em> can't be nothing</requirements>
	<param name="rowlineItem">A <strong>DataRow</strong> containing the kit item line.</param>
	<param name="couponType">A <strong>String</strong> containing the coupon type.</param>
	<param name="amount">A <strong>Decimal</strong> containing the coupon amount.</param>
	<param name="percent">A <strong>Decimal</strong> containing the coupon percent.</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeSalesRepCommission(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerSalesRepCommissionViewRow)">
	<summary>
 Procedure to get and compute the sales rep total commission
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeSalesRepCommission</em></strong> method.</para>
		<code lang="VB" title="ComputeSalesRepCommission" description="Computes and assign the total commission amount of the transaction to the salesRepCommissionRow.">
 Dim salesRepCommissionRow As CustomerSalesRepCommissionViewRow
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ComputeSalesRepCommission(salesRepCommissionRow)
    </code>
		<code lang="CS" title="ComputeSalesRepCommission" description="Computes and assign the total commission amount of the transaction to the salesRepCommissionRow.">
 CustomerSalesRepCommissionViewRow salesRepCommissionRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.ComputeSalesRepCommission(salesRepCommissionRow);
    </code>
	</example>
	<requirements>Parameter <em>salesRepCommissionRow</em> can't be nothing.</requirements>
	<param name="salesRepCommissionRow">A <strong>CustomerSalesRepCommissionViewRow</strong> that contains the commission row to computed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeTotalReturn(System.Data.DataRowView)">
	<summary>
 Add Good and Defective, and recalculate the total price
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeTotalReturn</em></strong> method.</para>
		<code lang="VB" title="ComputeTotalReturn" description="Procedure that computes the total number of returned items (Good * UmQty or Bad * UmQty) in the lineItemRow then recomputes the totals of the transaction.">
 Dim lineItemRow As DataRowView 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ComputeTotalReturn(lineItemRow)
    </code>
		<code lang="CS" title="ComputeTotalReturn" description="Procedure that computes the total number of returned items (Good * UmQty or Bad * UmQty) in the lineItemRow then recomputes the totals of the transaction.">
 DataRowView lineItemRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.ComputeTotalReturn(lineItemRow);
    </code>
	</example>
	<requirements>Parameter <em>lineItemRow</em> can't be nothing.</requirements>
	<param name="lineItemRow">A <strong>DataRowView</strong> that contains the line item row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ConvertInvoiceToCreditMemo(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway@,System.Boolean,System.String@)">
	<summary>
 Convert current Invoice To CreditMemo
 </summary>
	<returns>Convert Status</returns>
	<remarks>Converts the invoice to a Credit Memo</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ConvertInvoiceToCreditMemo</em></strong> method.</para>
		<code lang="VB" title="ConvertInvoiceToCreditMemo" description="Converts the current invoice transaction into a Credit Memo/Note transaction.">
 Dim tempCreditMemoDataset As InvoiceDatasetGateway
 Dim save As Boolean = True
 Dim errorMsg As String 
 Dim isConverted As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isConverted = invoiceFacade.ConvertInvoiceToCreditMemo(tempCreditMemoDataset, save, errorMsg)
    </code>
		<code lang="CS" title="ConvertInvoiceToCreditMemo" description="Converts the current invoice transaction into a Credit Memo/Note transaction.">
 InvoiceDatasetGateway tempCreditMemoDataset;
 bool save = true;
 string errorMsg;
 bool isConverted;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isConverted = invoiceFacade.ConvertInvoiceToCreditMemo(tempCreditMemoDataset, save, errorMsg);
    </code>
	</example>
	<param name="tempCreditMemoDataset">Temporary CreditMemoDataset</param>
	<param name="save">Flag that defines if changes made were to be saved</param>
	<param name="errorMsg">Error Message</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ConvertInvoiceToRMA(Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway@,System.Boolean,System.String@)">
	<summary>
 Convert current Invoice To RMA
 </summary>
	<returns>Convert Status</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ConvertInvoiceToRMA</em></strong> method.</para>
		<code lang="VB" title="ConvertInvoiceToRMA" description="Converts the current invoice transaction into an RMA.">
 Dim tempRMADataset As SalesOrderDatasetGateway
 Dim save As Boolean = True
 Dim errorMsg As String
 Dim isConverted As Boolean 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isConverted = invoiceFacade.ConvertInvoiceToRMA(tempRMADataset, save, errorMsg)
    </code>
		<code lang="CS" title="ConvertInvoiceToRMA" description="Converts the current invoice transaction into an RMA.">
 SalesOrderDatasetGateway tempRMADataset;
 bool save = true;
 string errorMsg;
 bool isConverted;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isConverted = invoiceFacade.ConvertInvoiceToRMA(tempRMADataset, save, errorMsg);
    </code>
	</example>
	<param name="tempRMADataset">Temporary RMADataset</param>
	<param name="save">A <strong>Boolean</strong> flag that defines if changes made were to be saved</param>
	<param name="errorMsg">Error Message</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateBackOrder(System.String@)">
	<summary>
 Procedure to get and save all back orders created 
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateBackOrder</em></strong> method.</para>
		<code lang="VB" title="CreateBackOrder" description="Creates a backorder transaction for every invoice included in the batch posting that has insufficient number of shipped items than the number of ordered items.">
 Dim boCodes As String 'By-Reference variable
 Dim isCreated As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreated = invoiceFacade.CreateBackOrder(boCodes)
    </code>
		<code lang="CS" title="CreateBackOrder" description="Creates a backorder transaction for every invoice included in the batch posting that has insufficient number of shipped items than the number of ordered items.">
 string boCodes; //By-reference variable
 bool isCreated;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isCreated = invoiceFacade.CreateBackOrder(boCodes);
    </code>
	</example>
	<param name="boCodes">A <strong>String</strong> that contains the Back Order Codes created</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateBackOrder(System.String@,System.String@)">
	<summary>
 Procedure to get and save all back orders created 
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateBackOrder</em></strong> method.</para>
		<code lang="VB" title="CreateBackOrder" description="Creates a backorder transaction for every invoice included in the batch posting that has insufficient number of shipped items than the number of ordered items.">
 Dim boCodes As String 'By-Reference variable
 Dim isCreated As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreated = invoiceFacade.CreateBackOrder(boCodes)
    </code>
		<code lang="CS" title="CreateBackOrder" description="Creates a backorder transaction for every invoice included in the batch posting that has insufficient number of shipped items than the number of ordered items.">
 string boCodes; //By-reference variable
 bool isCreated;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isCreated = invoiceFacade.CreateBackOrder(boCodes,message);
    </code>
	</example>
	<param name="boCodes">A <strong>String</strong> that contains the Back Order Codes created</param>
	<param name="errorMessage">Error messge that occur during the back order creation.</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateBackOrder(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway)">
	<summary>
 Create back order on items not shipped
 </summary>
	<remarks>Method creates a back order for the items not shipped after invoicing</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateBackOrder</em></strong> method.</para>
		<code lang="VB" title="CreateBackOrder" description="Creates a backorder transaction for the current invoice if item qty shipped is less than qty order.">
 Dim invoiceDataset As InvoiceDatasetGateway
 Dim backOrderDataset As SalesOrderDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.CreateBackOrder(invoiceDataset, backOrderDataset)
    </code>
		<code lang="CS" title="CreateBackOrder" description="Creates a backorder transaction for the current invoice if item qty shipped is less than qty order.">
 InvoiceDatasetGateway invoiceDataset;
 SalesOrderDatasetGateway backOrderDataset;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.CreateBackOrder(invoiceDataset, backOrderDataset);
    </code>
	</example>
	<param name="invoiceDataset">Invoice Dataset</param>
	<param name="backOrderDataset">Back Order Dataset</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateCreditMemoFromInvoice(System.Data.DataRow)">
	<summary>
 Procedure to create credit memo from invoice
 </summary>
	<returns>Creation Successful</returns>
	<remarks>Loads all of the invoice details and calls ConvertInvoiceToCreditMemo in order to create a credit memo from invoice</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateCreditMemoFromInvoice</em></strong> method.</para>
		<code lang="VB" title="CreateCreditMemoFromInvoice" description="Creates a new Credit Memo/Note transaction based on an existing invoice.">
 Dim invoiceRow As DataRow
 Dim isCreated As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreated = invoiceFacade.CreateCreditMemoFromInvoice(invoiceRow)
    </code>
		<code lang="CS" title="CreateCreditMemoFromInvoice" description="Creates a new Credit Memo/Note transaction based on an existing invoice.">
 DataRow invoiceRow;
 bool isCreated;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isCreated = invoiceFacade.CreateCreditMemoFromInvoice(invoiceRow);
    </code>
	</example>
	<param name="invoiceRow">A <strong>DataRow</strong> that contains the row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateCreditMemoFromRMA(System.Data.DataRow)">
	<summary>
 Procedure to create credit memo from RMA
 </summary>
	<returns>Creation Successful</returns>
	<remarks>Loads all of the RMA details and calls ConvertSalesOrderToInvoice in order to create a credit memo from RMA</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateCreditMemoFromRMA</em></strong> method.</para>
		<code lang="VB" title="CreateCreditMemoFromRMA" description="Creates a new RMA transaction base on an existing invoice.">
 Dim rmaRow As DataRow
 Dim isCreated As Boolean 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreated = invoiceFacade.CreateCreditMemoFromRMA(rmaRow)
    </code>
		<code lang="CS" title="CreateCreditMemoFromRMA" description="Creates a new RMA transaction base on an existing invoice.">
 DataRow rmaRow;
 bool isCreated;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isCreated = invoiceFacade.CreateCreditMemoFromRMA(rmaRow);
    </code>
	</example>
	<param name="rmaRow">A <strong>DataRow</strong> that contains the row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateInvoiceFromSalesOrder(Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway,Interprise.Extendable.Customer.Facade.ISalesOrderInterface,Interprise.Framework.Base.Shared.Delegates.ShowMessage,Interprise.Framework.Base.Shared.Delegates.ShowMessage,System.String@)">
	<summary>
 Procedure to create credit memo from sales order
 </summary>
	<returns>Creation Successful</returns>
	<remarks>Creates an Invoice from SalesOrder and calls either ConvertSalesOrderToInvoice or InsertSalesOrderToInvoice depending on the number of sales order/s to create from</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateInvoiceFromSalesOrder</em></strong> method.</para>
		<code lang="VB" title="CreateInvoiceFromSalesOrder" description="Creates a new invoice transaction from an existing sales order.">
 Dim salesOrderDataset As SalesOrderDatasetGateway
 Dim salesOrderFacade As ISalesOrderInterface
 Dim showCreditHoldWarning As ShowMessage
 Dim showCreditLimitWarning As ShowMessage
 Dim msg As String
 Dim isCreated As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreated = invoiceFacade.CreateInvoiceFromSalesOrder(salesOrderDataset, salesOrderFacade, showCreditHoldWarning, showCreditLimitWarning, msg)
    </code>
		<code lang="CS" title="CreateInvoiceFromSalesOrder" description="Creates a new invoice transaction from an existing sales order.">
 SalesOrderDatasetGateway salesOrderDataset;
 ISalesOrderInterface salesOrderFacade;
 ShowMessage showCreditHoldWarning;
 ShowMessage showCreditLimitWarning;
 string msg;
 bool isCreated;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isCreated = invoiceFacade.CreateInvoiceFromSalesOrder(salesOrderDataset, salesOrderFacade, showCreditHoldWarning, showCreditLimitWarning, msg);
    </code>
	</example>
	<param name="salesOrderDataset">Sales Order Dataset</param>
	<param name="salesOrderFacade">Facade Class Sales Order</param>
	<param name="showCreditHoldWarning">A <strong>Boolean</strong> flag that enables/disables the popup of the Credit Hold Warning form</param>
	<param name="showCreditLimitWarning">A <strong>Boolean</strong> flag that enables/disables the popup of the Credit Limit Warning form</param>
	<param name="msg">Message</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateParameterSet(System.String[])">
	<summary>
 Creates the parameter set that is used when calling the LoadDataset and UpdateDataset methods
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateParameterSet</em></strong> method.</para>
		<code lang="VB" title="CreateParameterSet" description="Returns a jagged string array containing the table names and stored procedure names (Create, Update, and Delete commands), that will be used for saving changes from the dataset to the datasource.">
 Dim relatedTables As String = New String() {"CustomerInvoice", "CustomerInvoiceDetail"}
 Dim paramterSet As String()()
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 paramterSet = invoiceFacade.CreateParameterSet(relatedTables)
    </code>
		<code lang="CS" title="CreateParameterSet" description="Returns a jagged string array containing the table names and stored procedure names (Create, Update, and Delete commands), that will be used for saving changes from the dataset to the datasource.">
 string relatedTables = new string[] {
        "CustomerInvoice",
        "CustomerInvoiceDetail"};
 string[] paramterSet;
 (Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 paramterSet = invoiceFacade.CreateParameterSet(relatedTables);
    </code>
	</example>
	<param name="relatedTables">A <strong>String Array</strong> that enumerates all of the related tables to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateProcessCustomerReturnTrigger">
	<summary>
 Create a record to trigger ProcessCustomerReturn
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateProcessCustomerReturnTrigger</em></strong> method.</para>
		<code lang="VB" title="CreateProcessCustomerReturnTrigger" description="Checks if there are changes necessary for processing the RMA transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.CreateProcessCustomerReturnTrigger()
    </code>
		<code lang="CS" title="CreateProcessCustomerReturnTrigger" description="Checks if there are changes necessary for processing the RMA transaction.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.CreateProcessCustomerReturnTrigger();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateProcessCustomerReturnTrigger(System.String,System.String)">
	<summary>
 Create a record to trigger ProcessCustomerReturn
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateProcessCustomerReturnTrigger</em></strong> method.</para>
		<code lang="VB" title="a" description="Creates a record that would trigger processing of RMA or Credit Memo/Note.">
 Dim documentCode As String = "INV-000001"
 Dim Type As String = "RMA"
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.CreateProcessCustomerReturnTrigger(documentCode, Type)
    </code>
		<code lang="VB" title="CreateProcessCustomerReturnTrigger" description="Creates a record that would trigger processing of RMA or Credit Memo/Note.">
 String documentCode = "INV-000001";
 String Type = "RMA";
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 invoiceFacade.CreateProcessCustomerReturnTrigger(documentCode, Type);
    </code>
	</example>
	<param name="documentCode">A <strong>String</strong> that represents the documentcode to be processed</param>
	<param name="type">A <strong>String</strong> that represents the type of document to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.FinalizeReceipt(Interprise.Framework.Base.Shared.Delegates.ShowMessage)">
	<summary>
 Procedure to compute totals and finalize receipt
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>FinalizeReceipt</em></strong> method.</para>
		<code lang="VB" title="FinalizeReceipt" description="Procedure that zeroes out the invoice balance amount through writeoff.">
 Dim delShowMessage As ShowMessage
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.FinalizeReceipt(delShowMessage)
    </code>
		<code lang="CS" title="FinalizeReceipt" description="Procedure that zeroes out the invoice balance amount through writeoff.">
 ShowMessage delShowMessage;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 invoiceFacade.FinalizeReceipt(delShowMessage);
    </code>
	</example>
	<param name="delShowMessage">A <strong>ShowMessage Delegate</strong> for showing the message to the user</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetOrderLineItemDefaults(System.String,System.String,System.String[][]@)">
	<summary>
 Procedure to get the item default values to be assigned to the newly added order
 item line.
 </summary>
	<example>
    The following codes shows how to implement the
    <strong><em>GetOrderLineItemDefaults</em></strong> method.
    <code lang="VB" title="GetOrderLineItemDefaults" description="Retrives the default values for the item line and puts it on the defaults parameter.">
 Dim itemCode As String = "ITEM-1A"
 Dim umCode As String = "EACH"
 Dim defaults As String()() 'By-Reference variable
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.GetOrderLineItemDefaults(itemCode, umCode, defaults)
    </code>
		<code lang="CS" title="GetOrderLineItemDefaults" description="Retrives the default values for the item line and puts it on the defaults parameter.">
 string itemCode = "ITEM-1A";
 string umCode = "EACH";
 string[] defaults;
 (Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.GetOrderLineItemDefaults(itemCode, umCode, defaults);
    </code>
	</example>
	<param name="itemCode">A <strong>String</strong> that represents the item code to be processed</param>
	<param name="umCode">A <strong>String</strong> that represents the unit of measure of the item</param>
	<param name="defaults">A <strong>String Array</strong> that contains the default values of the item</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetOrderLineItemDefaults(System.String[][],System.String[][])">
	<summary>
 Procedure to get the item default values to be assigned to the newly added order
 </summary>
	<param name="params"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CheckLineItemsTaxTranslation(System.DateTime)">
	<summary>
 Added by rachel.g&gt; checks the Line Item/s when Invoice Date changed.
 </summary>
	<param name="orderDate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeLineItemTaxOverride">
	<summary>
 Added by rachel.g &gt; Calls the LoadGetTax to Get all TaxCodes once. (For Tax Translation)
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetOrderLineItemDefaultValues(System.String,System.String,System.String,System.String,System.String,System.String,System.String[][]@)">
	<summary>
 Procedure to get the default values to be assigned to newly added item line.
 </summary>
	<param name="itemCode">A <strong>String</strong> containing the item code.</param>
	<param name="umCode">A <strong>String</strong> containing the unit of measure.</param>
	<param name="defaults">A jagged <Strong>String</Strong> array containig the default values.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetOrderType(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to get order type depending on the transaction type
 </summary>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<returns>Type of the transactuion in string format</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeRMAKitDetailOutstanding(System.Data.DataRowView)">
	<summary>
 Compute Outstanding amounts RMAKitDetail table
 </summary>
	<returns>The balance of the Quantity - Already Returned</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeRMAKitDetailOutstanding</em></strong> method.</para>
		<code lang="VB" title="ComputeRMAKitDetailOutstanding" description="Computes the total number of qty returned for the kit item.">
 Dim rowKitDetail As DataRowView
 Dim qtyOutstanding As Decimal
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 qtyOutstanding = invoiceFacade.ComputeRMAKitDetailOutstanding(rowKitDetail)
    </code>
		<code lang="CS" title="ComputeRMAKitDetailOutstanding" description="Computes the total number of qty returned for the kit item.">
 DataRowView rowKitDetail;
 Decimal qtyOutstanding;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 qtyOutstanding = invoiceFacade.ComputeRMAKitDetailOutstanding(rowKitDetail);
    </code>
	</example>
	<param name="rowKitDetail">A <strong>System.Data.DataRowView</strong> that contains the row of the RMAKitDetail to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeRMAOutstanding(System.Data.DataRowView)">
	<summary>
 Compute Outstanding values of the RMA Transaction
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ComputeRMAOutstanding</em></strong> method.</para>
		<code lang="VB" title="ComputeRMAOutstanding" description="Computes the total number of qty returned for the rowItemLine.">
 Dim rowItemLine As DataRowView
 Dim qtyOutstanding As Decimal 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 qtyOutstanding = invoiceFacade.ComputeRMAOutstanding(rowItemLine)
    </code>
		<code lang="CS" title="ComputeRMAOutstanding" description="Computes the total number of qty returned for the rowItemLine.">
 DataRowView rowItemLine;
 Decimal qtyOutstanding;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 qtyOutstanding = invoiceFacade.ComputeRMAOutstanding(rowItemLine);
    </code>
	</example>
	<param name="rowItemLine">Line item to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ComputeRMAOutstanding(System.Data.DataRow)">
	<summary>
 Compute Outstanding values of the RMA Transaction
 </summary>
	<param name="rowItemLine">Line item to be processed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.InitializeBackOrder">
	<summary>
 Procedure to initialize back order
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>InitializeBackOrder</em></strong> method.</para>
		<code lang="VB" title="InitializeBackOrder" description="Procedure the qty to be back ordered.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.InitializeBackOrder()
    </code>
		<code lang="CS" title="InitializeBackOrder" description="Procedure the qty to be back ordered.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.InitializeBackOrder
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.InsertLineItem(System.Int32)">
	<summary>
 Procedure to Insert the specified line items to the invoice transaction
 details.
 </summary>
	<remarks>Assigns the line number of the item row for reference</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>InsertLineItem</em></strong> method.</para>
		<code lang="VB" title="InsertLineItem" description="Inserts a new line item row on the sales order transaction details.">
 Dim lineNo As Integer
 Dim insertRow As DataRowView
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 insertRow = invoiceFacade.InsertLineItem(lineNo)
    </code>
		<code lang="CS" title="InsertLineItem" description="Inserts a new line item row on the sales order transaction details.">
 int lineNo;
 DataRowView insertRow;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 insertRow = invoiceFacade.InsertLineItem(lineNo);
    </code>
	</example>
	<param name="sortOrder">An <strong>Integer</strong> that represents the current line number the item row belongs to</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.InsertSalesOrderToInvoice(Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway,Interprise.Extendable.Customer.Facade.ISalesOrderInterface,System.String@,System.Data.DataRow)">
	<summary>
 Insert the specified sales order line items to invoice
 </summary>
	<returns>Insert Successful</returns>
	<remarks>Inserts Sales Order transaction details to a new Invoice transaction</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>InsertSalesOrderToInvoice</em></strong> method.</para>
		<code lang="VB" title="InsertSalesOrderToInvoice" description="Inserts the line items of an existing sales order to the current invoice transaction being processed.">
 Dim salesOrderDataset As SalesOrderDatasetGateway
 Dim salesOrderFacade As ISalesOrderInterface
 Dim errMsg As String
 Dim isInserted As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isInserted = invoiceFacade.InsertSalesOrderToInvoice(salesOrderDataset, salesOrderFacade, errMsg)
    </code>
		<code lang="CS" title="InsertSalesOrderToInvoice" description="Inserts the line items of an existing sales order to the current invoice transaction being processed.">
 SalesOrderDatasetGateway salesOrderDataset;
 ISalesOrderInterface salesOrderFacade;
 string errMsg;
 bool isInserted;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isInserted = invoiceFacade.InsertSalesOrderToInvoice(salesOrderDataset, salesOrderFacade, errMsg);
    </code>
	</example>
	<param name="salesOrderDataset">Sales Order Dataset</param>
	<param name="salesOrderFacade">Sales Order Facade</param>
	<param name="errMsg">Error Message</param>
</member><member name="P:Interprise.Facade.Customer.InvoiceFacade.IsBatch">
	<summary>
 Flag that indicates that the transaction is a batch on invoice or credit.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.IsCreateBackOrder">
	<summary>
 Check if back order should be created for the current invoice
 </summary>
	<returns>IsCreateBackOrder</returns>
	<remarks>Returns true if the quantity shipped is less than the ordered quantity thus allowing the creation of a Back Order transaction</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>IsCreateBackOrder</em></strong> method.</para>
		<code lang="VB" title="IsCreateBackOrder" description="Function that returns True if the invoice transaction should be created a back order transaction.">
 Dim isCreateBO As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isCreateBO = invoiceFacade.IsCreateBackOrder()
    </code>
		<code lang="VB" title="IsCreateBackOrder" description="Function that returns True if the invoice transaction should be created a back order transaction.">
 bool isCreateBO;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 isCreateBO = invoiceFacade.IsCreateBackOrder();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.MergeReceiptToInvoice">
	<summary>
 Merge data from related tables
 </summary>
	<remarks>Merges the changes made within the receipt to an invoice</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.OnComputeFreight(System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@)">
	<summary>
 Procedure to supply data required in freight calculation.
 </summary>
	<param name="shippingMethodCode">A <strong>String</strong> containing the shipping method code.</param>
	<param name="subtotal">A <strong>Decimal</strong> containing the subtotal amount of the transaction.</param>
	<param name="totalWeight">A <strong>Decimal</strong> containing the total weight of goods.</param>
	<param name="isCouponIncludesFreeShipping">A <strong>Boolean</strong> indicating not to calculate the freight.</param>
	<param name="isCharge">A <strong>Boolean</strong> indicating that the order has no items that can be charged for freight.</param>
	<remarks>If there's a coupon attached to the invoice, it checks if the coupon provides free shipping.
 If so, it doesn't calculate the freight.</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.OnCreateInvoiceRule">
	<summary>
 Returns the invoice rule
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.OnReceiptChanged(System.EventArgs)">
	<summary>
 Calls for the event ReceiptChanged
 </summary>
	<param name="e">Event Argument</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.OnCouponDiscountChanged(Interprise.Framework.Base.Shared.Enum.EnmFormatType)">
	<summary>
 Procedure to invoke CouponDiscountChanged event.
 </summary>
	<param name="formatType">text format</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.Post(System.String,System.String)">
	<summary>
 Post the CreditMemo/Invoice document to the journal
 </summary>
	<remarks>Posts the transaction created and creates an allocation transaction, if any should be made then posts it also</remarks>
	<example>
		<para>The following codes shows how to implement the <strong><em>Post</em></strong>
    method.</para>
		<code lang="VB" title="Post" description="Method that calls the post procedure that creates a journal for the Accounting module.">
 Dim documentCodeFrom As String = "INV-000001"
 Dim documentCodeTo As String = "INV-000001"
 Dim isPosted As String
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isPosted = invoiceFacade.Post(documentCodeFrom, documentCodeTo)
    </code>
		<code lang="CS" title="Post" description="Method that calls the post procedure that creates a journal for the Accounting module.">
 String documentCodeFrom = "INV-000001";
 String documentCodeTo = "INV-000001";
 String isPosted;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 isPosted = invoiceFacade.Post(documentCodeFrom, documentCodeTo);
    </code>
	</example>
	<param name="documentCodeFrom">The starting document code to post</param>
	<param name="documentCodeTo">The ending document code to post</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ProcessCustomerReturn(System.String)">
	<summary><para>Procedure to validate and process Credit Memo/Note transaction.</para></summary>
	<example>
    The following codes shows how to implement the
    <strong><em>ProcessCustomerReturn</em></strong> method.
    <code lang="VB" title="ProcessCustomerReturn" description="Procedure to process Credit Memo/Note transaction.">
 Dim transactionDescription As String = "CreditMemo"
 Dim isNotSucess As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isNotSucess = invoiceFacade .ProcessCustomerReturn(transactionDescription)
    </code>
		<code lang="CS" title="ProcessCustomerReturn" description="Procedure to process Credit Memo/Note transaction.">
 string transactionDescription = "CreditMemo";
 bool isNotSucess;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isNotSucess = invoiceFacade.ProcessCustomerReturn(transactionDescription);
    </code>
	</example>
	<param name="transactionDescription">The description of the transaction to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ProcessCreditMemo(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway)">
	<summary>
 Validate and process credit memo
 </summary>
	<remarks>Assigns values for the credit memo then creates an allocation transaction if credit memo is to be applied to unpaid invoices</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ProcessCreditMemo</em></strong> method.</para>
		<code lang="VB" title="ProcessCreditMemo" description="Procedure that creates a Credit Memo/Note and allocation transaction.">
 Dim receiptDataset As ReceiptDatasetGateway
 Dim datasetInvoiceToPost As InvoiceDatasetGateway
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ProcessCreditMemo(receiptDataset, datasetInvoiceToPost)
    </code>
		<code lang="CS" title="ProcessCreditMemo" description="Procedure that creates a Credit Memo/Note and allocation transaction.">
 ReceiptDatasetGateway receiptDataset;
 InvoiceDatasetGateway datasetInvoiceToPost;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.ProcessCreditMemo(receiptDataset, datasetInvoiceToPost);
    </code>
	</example>
	<param name="receiptDataset">Receipt Dataset</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ReadTransactionTax">
	<summary>
 Extracts transaction tax details from related table(s)
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.RecalculateTax">
	<summary>Procedure to recalculate item lines, freight and other tax.</summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>RecalculateTax</em></strong> method.</para>
		<code lang="VB" title="RecalculateTax" description="Recompute item, freight, and other tax amounts.">
 Dim invoiceFacade As New Inteprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.RecalculateTax()
    </code>
		<code lang="CS" title="RecalculateTax" description="Recompute item, freight, and other tax amounts.">
 Inteprise.Facade.Customer.InvoiceFacade invoiceFacade = new Inteprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.RecalculateTax();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.RecomputeSalesOrderValues(System.Data.DataRow)">
	<summary>
 Method is used to refresh all sales order values (header and detail) with the current ship to information.
 </summary>
	<remarks>Method is called when the current SO ship to is changed.</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.RecomputeSalesRepCommissions(System.Data.DataRow)">
	<summary>
 Recalculates the sales rep's commission if a line item was to be deleted.
 </summary>
	<param name="lineItemRow">A <strong>Data.Datarow</strong> that contains the information on the data to be deleted.</param>
	<remarks>Method is only called when a line item is deleted in the transaction.</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<returns>If true, the saving succeeds, if false, it fails.</returns>
	<example>
    The following codes shows how to implement the
    <strong><em>UpdateDataSet</em></strong> method. 
    <code lang="VB" title="UpdateDataset" description="Send the changes from the dataset to the datasource.">
 Dim commandSet As String()() = New String()() {New String() {"CustomerInvoice", "UpdateCustomerInvoice", "CreateCustomerInvoice", "DeleteCustomerInvoice"}}
 Dim transactionType As TransactionType = Framework.Base.Shared.Enum.TransactionType.Invoice
 Dim transactionDescription As String = "New Invoice"
 Dim isUseCache As Boolean = False
 Dim isUpdateSuccess As Boolean
 Dim invoiceFacade As New Inteprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isUpdateSuccess = invoiceFacade.UpdateDataSet(commandSet, transactionType, transactionDescription, isUseCache)
    </code>
		<code lang="CS" title="UpdateDataset" description="Send the changes from the dataset to the datasource.">
 string[,][,] commandSet = new string[,][,] {
       new string [,] {"CustomerInvoice",
       "UpdateCustomerInvoice",
       "CreateCustomerInvoice",
       "DeleteCustomerInvoice"}};
 Framework.Base.Shared.Enum.TransactionType transactionType = Framework.Base.Shared.Enum.TransactionType.Invoice;
 string transactionDescription = "New Invoice";
 bool isUseCache = false;
 bool isUpdateSuccess;
 Inteprise.Facade.Customer.InvoiceFacade invoiceFacade = new Inteprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isUpdateSuccess = invoiceFacade.UpdateDataSet(commandSet, transactionType, transactionDescription, isUseCache);
    </code>
	</example>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.SetSalesPrice(System.Data.DataRowView,System.Boolean@)">
	<summary>
 Procedure that supplies the data necessary in determining the sales price of an item line.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>SetSalesPrice</em></strong> method.</para>
		<code lang="VB" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 Dim dvyuItem As DataRowView
 Dim byTotalQty As Boolean 'By-Referece variable
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacadeFacade.SetSalesPrice(dvyuItem, byTotalQty)
    </code>
		<code lang="CS" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 DataRowView dvyuItem;
 bool byTotalQty; //By-Reference variable
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 invoiceFacadeFacade.SetSalesPrice(dvyuItem, byTotalQty);
    </code>
	</example>
	<param name="dvyuItem">A <strong>DataRowView</strong> containing the item line.</param>
	<param name="byTotalQty">A <strong>Boolean</strong> value indicating whether to compute sales price base on the total quantity of the matrix item</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.SetSalesPrice(System.Data.DataRowView,System.Boolean,System.Boolean@)">
	<summary>
 Procedure that supplies the data necessary in determining the sales price of an item line.
 </summary>
	<remarks>
		<para>FieldNames of CustomerSalesOrders and CustomerInvoice tables must be the
    same, because this function is shared on Orders and Invoices module.</para>
		<para>Method is overloaded on Interprise.Facade.Customer.SalesOrderFacade and
    Interprise.Facade.Customer.InvoiceFacade</para>
	</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>SetSalesPrice</em></strong> method.</para>
		<code lang="VB" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 Dim lineItemRow As DataRowView
 Dim isAutoSelectLastPrice As Boolean
 Dim byTotalQty As Boolean 'By-Referece variable
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacadeFacade.SetSalesPrice(lineItemRow, isAutoSelectLastPrice, byTotalQty)
    </code>
		<code lang="CS" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 DataRowView lineItemRow;
 bool isAutoSelectLastPrice;
 bool byTotalQty; //By-Reference variable
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 invoiceFacadeFacade.SetSalesPrice(lineItemRow, isAutoSelectLastPrice, byTotalQty);
    </code>
	</example>
	<param name="lineItemRow">Item row to be processed</param>
	<param name="isAutoSelectLastPrice">A <strong>Boolean</strong> indicating to autoselect the last sales price if the customer pricing method is Last Price.</param>
	<param name="byTotalQty">A <strong>Boolean</strong> value indicating whether to compute sales price base on the total quantity of the matrix item</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field
 </summary>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.SyncAmount(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceViewDataTable,System.Data.DataTable,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to compute foreign rate total
 </summary>
	<param name="dtblHeader">A <strong>CustomerInvoiceViewDataTable</strong> table that contains the transaction row</param>
	<param name="dtblDetail">A <strong>DataTable</strong> that contains the line item details of the transaction</param>
	<param name="transaction">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<remarks>Synchronizes the transaction amounts based on the exchange rate of the currency</remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.IsQtyDivisibleUoM(System.Decimal,System.Decimal)">
	<summary>
 Added by pete.a 08/26/2009
 Function to Identify if the qty entered is divisible by its item qty uom
 </summary>
	<param name="QtyEntered"></param>
	<param name="UoMQty"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.Validate(System.Data.DataRow,System.String)">
	<summary>Procedure to validate the values contained in the column of a row.</summary>
	<remarks>If set to true, there were no errors found.</remarks>
	<requirements>
		<para>Parameter <em>row</em> can't be nothing.</para>
		<para>Parameter <em>columnName</em> can't be empty.</para>
	</requirements>
	<example>
    The following codes shows how to implement the <strong><em>Validate</em></strong>
    method.
    <code lang="VB" title="Validate" description="Checks the value of the column from the row for errors.">
 Dim row As DataRow
 Dim columnName As String = "InvoiceCode"
 Dim colHasNoError As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 colHasNoError = invoiceFacade.Validate(row, columnName)
    </code>
		<code lang="CS" title="Validate" description="Checks the value of the column from the row for errors.">
 DataRow row;
 string columnName = "InvoiceCode";
 bool colHasNoError;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 colHasNoError = invoiceFacade.Validate(row, columnName);
    </code>
	</example>
	<param name="row">A <strong>System.Data.DataRow</strong> that contains the row to be validated</param>
	<param name="columnName">A <strong>String</strong> description of the DataColumn to be validated.</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.Validate(System.String[])">
	<summary>
 Validates the tables from the dataset specified in the array containing the table
 names.
 </summary>
	<remarks>If set to true, there were no errors found</remarks>
	<example>
    The following codes shows how to implement the <strong><em>Validate</em></strong>
    method.
    <code lang="VB" title="Validate" description="Checks tables specified in the tablenames parameter for errors.">
 Dim tableNames As String() = New String() {"CustomerInvoice", "CustomerInvoiceDetail"}
 Dim tableHasNoErrors As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 tableHasNoErrors = invoiceFacade.Validate(tableNames)
    </code>
		<code lang="CS" title="Validate" description="Checks tables specified in the tablenames parameter for errors.">
 string[] tableNames = new string[] {
        "CustomerInvoice",
        "CustomerInvoiceDetail"};
 bool tableHasNoErrors;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 tableHasNoErrors = invoiceFacade.Validate(tableNames);
    </code>
	</example>
	<param name="tableNames">A <strong>String Array</strong> of tablenames to be validated</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ValidateTotalReturn(System.Data.DataRow,System.Text.StringBuilder)">
	<summary>
 Validates if the the total returns match that of the quantity purchased
 </summary>
	<param name="row">A <strong>DataRow</strong> that contains which row to validate</param>
	<param name="errorText">A <strong>System.Text.StringBuilder</strong> that will contain any error message</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.VoidInvoice(System.String@)">
	<summary>
 Procedure to void Invoice
 </summary>
	<returns>Boolean</returns>
	<remarks>
 Voiding invoice also deallocates the stocks previously allocated to it. Returns
 True if voiding is successfull.
 </remarks>
	<example>
    The following codes shows how to implement the <strong><em>VoidOrder</em></strong>
    method.
    <code lang="VB" title="VoidInvoice" description="Cancels the invoice being processed. If already posted, will create a Credit Memo/Note with the same amount and items as the invoice and allocates to the invoice.">
 Dim strMessage As String
 Dim isVoided As Boolean
 Dim nvoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isVoided = nvoiceFacade.VoidInvoice(strMessage)
    </code>
		<code lang="CS" title="VoidInvoice" description="Cancels the invoice being processed. If already posted, will create a Credit Memo/Note with the same amount and items as the invoice and allocates to the invoice.">
 string strMessage;
 bool isVoided;
 Interprise.Facade.Customer.InvoiceFacade nvoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isVoided = nvoiceFacade.VoidInvoice(strMessage);
    </code>
	</example>
	<param name="strMessage">ByRef. A <string>String</string> that contains any error message</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.VoidPostedInvoice(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal,System.String)">
	<summary>
	</summary>
	<param name="gatewayReceipt"> Credit Memo</param>
	<param name="gatewayInvoice"> Invoice </param>
	<param name="totalDue">Total Due of invoice</param>
	<param name="totalDueRate">Total Due Rate of invoice</param>
	<param name="type"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AssignOpeningBalanceTotal(System.Data.DataRow)">
	<summary>
 Assigns the balance for the Opening Balance Transaction
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignOpeningBalanceTotal</em></strong> method.</para>
		<code lang="VB" title="AssignOpeningBalanceTotal" description="Assigns the balance for the Opening Balance Transaction.">
 Dim rowOpeningBalance As DataRow 
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.AssignOpeningBalanceTotal(rowOpeningBalance)
    </code>
		<code lang="CS" title="AssignOpeningBalanceTotal" description="Assigns the balance for the Opening Balance Transaction.">
 DataRow rowOpeningBalance;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.AssignOpeningBalanceTotal(rowOpeningBalance);
    </code>
	</example>
	<param name="rowOpeningBalance">A <strong>System.Data.DataRow</strong> that contains the Invoice row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetKitConfiguration(System.Data.DataRow)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>GetKitConfiguration</em></strong> method.</para>
		<code lang="VB" title="GetKitConfiguration" description="Gets the kit item's settings.">
 Dim rowItemLine As DataRow
 Dim kitConfig As KitConfiguration
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 kitConfig = invoiceFacade.GetKitConfiguration(rowItemLine)
    </code>
		<code lang="CS" title="GetKitConfiguration" description="Gets the kit item's settings.">
 DataRow rowItemLine;
 KitConfiguration kitConfig;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 kitConfig = invoiceFacade.GetKitConfiguration(rowItemLine);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.DisableFreightCalculation">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>DisableFreightCalculation</em></strong> method.</para>
		<code lang="VB" title="DisableFreightCalculation" description="Disallows computation of freight charge and tax for the sales order transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.DisableFreightCalculation()
    </code>
		<code lang="CS" title="DisableFreightCalculation" description="Disallows computation of freight charge and tax for the sales order transaction.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.DisableFreightCalculation();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ClearCommission">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ClearCommission</em></strong> method.</para>
		<code lang="VB" title="ClearCommission" description="Resets the commission values of the sales rep to 0.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.ClearCommission()
    </code>
		<code lang="CS" title="ClearCommission" description="Resets the commission values of the sales rep to 0.">
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 invoiceFacade.ClearCommission();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.DeallocateStock">
	<summary>
 Procedure for deallocating stock from deleted item lines and voided sales order.
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>DeallocateStock</em></strong> method.</para>
		<code lang="VB" title="DeallocateStock" description="Deallocate stock quantities from the current transaction.">
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacadeFacade.DeallocateStock()
    </code>
		<code lang="CS" title="DeallocateStock" description="Deallocate stock quantities from the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 invoiceFacadeFacade.DeallocateStock();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CopyOpeningBalance(System.Data.DataRow)">
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CopyOpeningBalance</em></strong> method.</para>
		<code lang="VB" title="CopyOpeningBalance" description="Creates a new Opening Balance row from an exiting OB row.">
 Dim rowOpeningBalance As DataRow
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.CopyOpeningBalance(rowOpeningBalance)
    </code>
		<code lang="CS" title="CopyOpeningBalance" description="Creates a new Opening Balance row from an exiting OB row.">
 DataRow rowOpeningBalance;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 invoiceFacade.CopyOpeningBalance(rowOpeningBalance);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CheckCustomerOnHoldStatus(System.String)">
	<summary>
 Checks customer status if on hold.
 </summary>
	<returns>Returns value of type <Strong>Boolean</Strong> indicating that customer is on hold.</returns>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CheckCustomerOnHoldStatus</em></strong> method.</para>
		<code lang="VB" title="CheckCustomerOnHoldStatus" description="Procedure that checks the credit hold status of the customer.">
 Dim customerCode As String = "CUST-000001"
 Dim isOnHold As Boolean
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 isOnHold = invoiceFacade.CheckCustomerOnHoldStatus(customerCode)
    </code>
		<code lang="CS" title="CheckCustomerOnHoldStatus" description="Procedure that checks the credit hold status of the customer.">
 string customerCode = "CUST-000001";
 bool isOnHold;
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = new Interprise.Facade.Customer.InvoiceFacade(new InvoiceDatasetGateway());
 isOnHold = invoiceFacade.CheckCustomerOnHoldStatus(customerCode);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.EmailDownloadableItem(System.String@)">
	<example>
		<code lang="VB" title="EmailDownloadableItem" description="Sends an email containing information of the Electronic Download item.">
 Dim errCode As String 'By-Reference variable
 Dim invoiceFacade As New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway)
 invoiceFacade.EmailDownloadableItem(errCode)
    </code>
		<code lang="CS" title="EmailDownloadableItem" description="Sends an email containing information of the Electronic Download item.">
 String errCode; //By-Reference variable
 Interprise.Facade.Customer.InvoiceFacade invoiceFacade = New Interprise.Facade.Customer.InvoiceFacade(New InvoiceDatasetGateway());
 invoiceFacade.EmailDownloadableItem(errCode);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddColumnChangingHandler">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.RemoveColumnChangingHandler">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.LoadInvoice(System.String)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.LoadCredit(System.String)">
	<summary>
	</summary>
	<param name="creditCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ValidateItemReturnedLocation">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddKitComponentAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerItemKitDetailViewDataTable,System.Int32)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="componentChanges"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddInvoiceDetailAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewDataTable)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="detailChanges"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddStockAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewRow)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="detailRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AddStockAllocation(System.String,Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerItemKitDetailViewRow)">
	<summary>
	</summary>
	<param name="processID"></param>
	<param name="componentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.PopulateStockAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateInvoiceDetailProcessID(System.String)">
	<summary>
	</summary>
	<param name="processID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateDropShipResevation(System.String,System.String,System.String,System.Int32,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="transactionCode"></param>
	<param name="itemCode"></param>
	<param name="warehouseCode"></param>
	<param name="lineNum"></param>
	<param name="proposeQuantityOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.AutoReserveDropShipOrder(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewDataTable)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateInvoiceQuantityShipped(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<param name="lineNum"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.MoveInvoiceReservationToBackOrder(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="invoiceCode"></param>
	<param name="backOrderCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.RemoveDropShipReference">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ValidateDropShipReferenceAlreadyConvertedToGRN(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewRow)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateDropShipAllocationAndReservation(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewRow)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.RefreshDropShipAllocationAndReservation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateDropShippingDate(System.String,System.String,System.Int32,System.DateTime)">
	<summary>
	</summary>
	<param name="transactionCode"></param>
	<param name="itemCode"></param>
	<param name="lineNum"></param>
	<param name="shippingDate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CreateGiftCardCredits">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateOrderAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.UpdateSourceOrder(System.String)">
	<summary>
	</summary>
	<param name="sourceInvoiceCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CheckPromoItems(System.String,System.Boolean,System.Boolean)">
	<summary>
 Added by Jb Mago 9/22/2015
 Sets the promo item to back order
 When the associated item has back orders
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CheckPromoItems(System.Data.DataRowView,System.Boolean,System.String)">
	<summary>
 Added by Jb Mago 12/09/2015
 If credit memo, adjust quantity of get item
 when buy item's qty is greater than 0
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.ApplyDiscountOnConvertedItems(System.String,System.String,System.Data.DataTable,System.Boolean)">
	<summary> 
 Added by Jb Mago 9/29/2015
 Re insert promo items to promo tables as Back order transaction
 </summary>
	<param name="transactionCode"></param>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.EvaluatePromo(System.Data.DataTable,System.String,System.String)">
	<summary>
 Addded by Jb Mago 12/29/2015
 Associated to ApplyDiscountOnConvertedItems Method
 Checks the promo if it has multiple free items
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.GetPromoSalesPrice(System.Data.DataRowView)">
	<summary>
 Addded by Jb Mago 9/23/2015
 Gets the Sales Price of the promo item
 </summary>
	<param name="lineItemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.CheckPromoExistence(System.Data.DataRowView)">
	<summary>
 Addded by Jb Mago 12/09/2015
 Checks the item if it has existing promo in the sales order
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.VoidFacade_ConversionCompleted(System.Object,Interprise.Framework.Customer.EventArguments.CommonEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.VoidFacade_ConversionFailed(System.Object,Interprise.Framework.Customer.EventArguments.CommonEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.VoidFacade_CreditCardAuthorizationFailed(System.Object,Interprise.Framework.Customer.EventArguments.CreditCardAuthorizationFailedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.InvoiceFacade.VoidFacade_PostingFailed(System.Object,Interprise.Framework.Customer.EventArguments.CommonEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.FinanceChargeFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Customer.FinanceChargeFacade.CurrentReportType">
	<summary>
 Property that gets the current report type
 </summary>
	<value>Framework.Base.Shared.Enum.ReportAction</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.FinanceChargeFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.FinanceChargeDatasetGateway)">
	<summary>
 Create an instance of this class
 </summary>
	<param name="p_financeChargeDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.DeliveryRouteFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.DeliveryRouteFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.DeliveryRouteDataSetGateway)">
	<summary>
 Create an instance of this class
 </summary>
	<param name="DeliveryRouteDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.DeliveryRouteFacade.AssignRoute(System.Data.DataRow,System.Data.DataRowView)">
	<summary>This is a procedure that assigns a delivery route to customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignRoute</i></b> method
    <code lang="VB" title="Assigning delivery route" description="This shows how to assign a delivery route for customers transaction">
 Dim m_deliveryRouteFacade As DeliveryRouteFacade
 Dim routeCode As DataRow
 Dim deliveryRoute As DataRowView
 
 Me.m_deliveryRouteFacade.AssignRoute(routeCode, deliveryRoute)
    </code>
		<code lang="CS" title="Assigning delivery route" description="This shows how to assign a delivery route for customers transaction">
 DeliveryRouteFacade m_deliveryRouteFacade;
 DataRow routeCode;
 DataRowView deliveryRoute;
 
 this.m_deliveryRouteFacade.AssignRoute(routeCode, deliveryRoute);
    </code>
	</example>
	<param name="rowRouteCode">A <strong>DataRow</strong> that contains the route row to be assgned</param>
	<param name="rowDeliveryRoute">A <strong>DataRowView</strong> that represents the row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.DeliveryRouteFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates user data input
 </summary>
	<param name="row">The row to be validated</param>
	<param name="columnName">The column in the row to be validated</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.DebtorLetterFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Customer.DebtorLetterFacade.CurrentTransactionType">
	<summary>
 Returns the CurrentTransactionType
 </summary>
	<value>Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.DebtorLetterFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CustomerDebtorLetterDatasetGateway)">
	<summary>
 Create an instance of this class
 </summary>
	<param name="DebtorLetterDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.DebtorLetterFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates user data input
 </summary>
	<param name="row">The row to be validated</param>
	<param name="columnName">The column in the row to be validated</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CustomerSummaryInformationFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerSummaryInformationFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CustomerSummaryInformationDatasetGateway)">
	<summary>
 Create an instance of this class
 </summary>
	<param name="customerSummaryInformationdataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CustomerOpeningBalanceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerOpeningBalanceFacade.Validate(System.Data.DataRow,System.Data.DataColumn)">
	<summary>
 Validates user data input
 </summary>
	<param name="row">The row to be validated</param>
	<param name="columnName">The column in the row to be validated</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.SystemManager.GLClassTemplate.CustomerGLClassTemplateFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.SystemManager.GLClassTemplate.CustomerGLClassTemplateFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CustomerGLClassTemplateDatasetGateway)">
	<summary>
 Create an instance of this class
 </summary>
	<param name="customerGLClassDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SystemManager.GLClassTemplate.CustomerGLClassTemplateFacade.AssignGlClassCode(System.String)">
	<summary>
 Method that assigns GLClass code
 </summary>
	<param name="ClassCode">A <strong>String</strong> that represents the class code to be assigned</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SystemManager.GLClassTemplate.CustomerGLClassTemplateFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Sets the code for this transaction
 </summary>
	<param name="transactionType">&gt;Defines what transaction is currently being created. i.e., CustomerDetail, ShipTo, SalesRep, etc</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SystemManager.GLClassTemplate.CustomerGLClassTemplateFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates user data input
 </summary>
	<param name="row">The row to be validated</param>
	<param name="columnName">The column in the row to be validated</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.SystemManager.GLClassTemplate.CustomerGLClassTemplateFacade.CustomerGLClassTemplate_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Raised when a value of a column in the CustomerGLClassTemplate table has been changed
 </summary>
	<param name="sender">An <strong>Object</strong> that raised the call for the event</param>
	<param name="e">A <strong>System.Data.DataColumnChangeEventArgs</strong> that contains the event arguments for this procedure</param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Customer.CustomerDetailFacade.UpdateCustomerRankingWorker">
	<summary>Represents the method that will update customer rankings.</summary>
</member><member name="E:Interprise.Facade.Customer.CustomerDetailFacade.UpdateCustomerRankingCompleted">
	<summary>Occurs after updating customer ranking.</summary>
</member><member name="P:Interprise.Facade.Customer.CustomerDetailFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
	<value>
 The instance of
 Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway class.
 </value>
</member><member name="P:Interprise.Facade.Customer.CustomerDetailFacade.IsBusy">
	<summary>Gets the status if updating of customer ranking is in progress.</summary>
	<value>
		<strong>true</strong> if updating customer ranking is in progress; otherwise
 <strong>false</strong>.
 </value>
	<returns>Return the flag of the thread if busy</returns>
</member><member name="P:Interprise.Facade.Customer.CustomerDetailFacade.IsUpdateCustomerShipTo">
	<summary>
 Flag that defines if the shipto record should be updated
 </summary>
	<value>
		<strong>true</strong> if ship to should be updated; otherwise
 <strong>false</strong>.
 </value>
	<returns>Returns True if ShipTo needs to be updated, otherwise False</returns>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CustomerDetailDatasetGateway)">
	<summary>Creates an Instance of this class.</summary>
	<param name="p_customerDetailDataset">The dataset to be used for this class</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignCustomerCountry(System.Data.DataRow)">
	<summary>Procedure to assign country to the customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignCustomerCountry</i></b>
    method 
    <code lang="VB" title="Assigning country in a customer" description="This code shows how to assign a country in a customer">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim countryRow As Datarow
 
 m_customerDetailFacade.AssignCustomerCountry(countryRow)
    </code>
		<code lang="CS" title="Assigning country in a Customer" description="This code shows how to assign a country in a customer">
 CustomerDetailFacade m_customerDetailFacade;
 Datarow countryRow;
 
 m_customerDetailFacade.AssignCustomerCountry(countryRow);
    </code>
	</example>
	<param name="countryRow">The DataRow containg country information.</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignDiscountBand(System.Data.DataRow)">
	<summary>Procudure to assign discount band to the customer.</summary>
	<example>
    The following codes shows how to implement <b><i>AssignDiscountBand</i></b> method
    <code lang="VB" title="Assigning Discount Band" description="This code shows how to assign a Discount Band by Pricing Level">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim categoryDiscountRow As DataRow
 
 m_customerDetailFacade.AssignDiscountBand(categoryDiscountRow)
    </code>
		<code lang="CS" title="Assigning Discount Band" description="This code shows how to assign a Discount Band by Pricing Level">
 CustomerDetailFacade m_customerDetailFacade;
 DataRow categoryDiscountRow;
 
 m_customerDetailFacade.AssignDiscountBand(categoryDiscountRow);
    </code>
	</example>
	<param name="categoryDiscountRow">The row for the category discount</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignCustomerItem(System.String,System.Data.DataRow,System.Data.DataRowView)">
	<summary>Procedure to assign an item to a customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignCustomerItem</i></b> method 
    <code lang="VB" title="Assigning Item to a Customer" description="This code shows how to assign an item to a customer">
 Dim drvyuDestination As DataRowView
 Dim m_source As DataRow
 Dim customerCode As String
 Dim m_customerDetailFacade As CustomerDetailFacade
 
 Me.m_customerDetailFacade.AssignCustomerItem("John Payne" , m_source, drvyuDestination)
    </code>
		<code lang="CS" title="Assigning Item to a Customer" description="This code shows how to assign an item to a customer">
 DataRowView drvyuDestination;
 DataRow m_source;
 string customerCode;
 CustomerDetailFacade m_customerDetailFacade;
 
 this.m_customerDetailFacade.AssignCustomerItem("John Payne", m_source, drvyuDestination);
    </code>
	</example>
	<param name="p_customerCode">The code of the customer to be process</param>
	<param name="source">The row from where to get the items</param>
	<param name="destination">The row to where to assign the customer items</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignPostalCode(System.Data.DataRow)">
	<summary>Procedure to assign postal code to a customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignPostalCode</i></b> method 
    <code lang="VB" title="Assigning PostalCode to a Customer" description="This code shows how to assign a Postal Code in a Customer">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim sourceRow As Datarow
 
 m_customerDetailFacade.AssignPostalCode(sourceRow)
    </code>
		<code lang="CS" title="Assigning postal code to a customer" description="This code shows how to assign a Postal Code in a Customer">
 CustomerDetailFacade m_customerDetailFacade;
 Datarow sourceRow;
 
 m_customerDetailFacade.AssignPostalCode(sourceRow);
    </code>
	</example>
	<param name="sourceRow">The row from which to get the postal</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignSpecialPrice(System.Data.DataRow,System.Data.DataRowView)">
	<summary>
 Procedure to create customer special pricing for the selected item.
 </summary>
	<example>
    The following codes shows how to implement <b><i>AssignSpecialPrice</i></b> method 
    <code lang="VB" title="Assiging a Special Price to a Customer" description="This code shows how to assign a Special Price to a Customer">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim rowItem As DataRow 
 Dim rowSpecialPrice As DataRowView
 
 Me.m_customerDetailFacade.AssignSpecialPrice(rowItem, rowSpecialPrice)
    </code>
		<code lang="CS" inline="False">
		</code>
		<code lang="CS" title="Assigning Special Price to a Customer" description="This code shows how to assign a Special Price to a Customer">
 CustomerDetailFacade m_customerDetailFacade;
 DataRow rowItem;
 DataRowView rowSpecialPrice;
 
 this.m_customerDetailFacade.AssignSpecialPrice(rowItem, rowSpecialPrice);
    </code>
	</example>
	<param name="rowItem">A <strong>DataRow</strong> containing the item information.</param>
	<param name="rowSpecialPrice">A <strong>DataRowView</strong> containing the special pricing.</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.RefreshSpecialPriceUM">
	<summary>
 Procedure to add unit measures that are not yet included in the price break.
 </summary>
	<example>
    The following codes shows how to implement <b><i>RefreshSpecialPriceUM</i></b> method
    <code lang="VB" title="Refresh special price unit measure" description="Procedure to refresh special price in a customer under the event of Click">
 Dim m_customerDetailFacade As CustomerDetailFacade
 
 m_customerDetailFacade.RefreshSpecialPriceUM()
    </code>
		<code lang="CS" description="Procedure to refresh special price in a customer under the event of Click">
		</code>
		<code lang="CS" title="Refresh special price unit measure" description="Procedure to refresh special price in a customer under the event of Click">
 CustomerDetailFacade m_customerDetailFacade;
 
 m_customerDetailFacade.RefreshSpecialPriceUM();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignSpecialPriceUM(System.Data.DataRowView)">
	<summary>
 Procedure to create customer special pricing for the selected item.
 </summary>
	<param name="rowSpecialPrice">A <strong>DataRowView</strong> containing the special pricing.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignSpecialPriceBreak(System.Data.DataRow)">
	<summary>Procedure to add or assign a Last price break for the customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignSpecialPriceBreak</i></b> method
    <code lang="VB" title="Assign Special Price Break" description="This code shows how to assign special price break under CellValueChanged event">
 Dim m_CustomerDetailFacade As CustomerDetailFacade
 Dim rowSpecialPrice As DataRow
 
 m_CustomerDetailFacade.AssignSpecialPriceBreak(rowSpecialPrice)
    </code>
		<code lang="CS" description="This code shows how to assign special price break under CellValueChanged event">
 CustomerDetailFacade m_CustomerDetailFacade;
 DataRow rowSpecialPrice;
 
 m_CustomerDetailFacade.AssignSpecialPriceBreak(rowSpecialPrice);
    </code>
	</example>
	<param name="rowSpecialPrice">A <strong>DataRow</strong> containing the price break being edited.</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignSpecialPriceColumnValue(System.Data.DataRow,System.String)">
	<summary>
 Procedure to cascade the changes in the dates and unit selling price from the default special price to its corresponding price break.
 </summary>
	<example>
    The following codes shows how to implement <b><i>AssignSpecialPriceColumnValue</i></b> method
    <code lang="VB" title="Procedure to cascade changes" description="This code shows how to cascade the changes in the dates and unit selling price from the default special price">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim specialPriceViewRow As DataRow
 Dim columnName As String
 
 Me.m_customerDetailFacade.AssignSpecialPriceColumnValue(specialPriceViewRow, "My Column Field")
    </code>
		<code lang="CS">
 CustomerDetailFacade m_customerDetailFacade;
 DataRow specialPriceViewRow;
 String columnName;
 
 this.m_customerDetailFacade.AssignSpecialPriceColumnValue(specialPriceViewRow, "My Column Field");
    </code>
	</example>
	<param name="rowSpecialPriceView">A <strong>DataRow</strong> containing the default special price.</param>
	<param name="columnName">A <strong>String</strong> containing the name of the column that was changed.</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignSpecialPriceViewUnitSellingPrice(System.Data.DataRow)">
	<summary>
 Procedure to cascade the selling from the price break to its corresponding default special price.
 </summary>
	<example>
    The following codes shows how to implement
    <b><i>AssignSpecialPriceViewUnitSellingPrice</i></b> method
    <code lang="VB" title="Assigning Unit Selling Price" description="This code shows how to assign a Unit Selling price in a column field">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim rowSpecialPrice As DataRow
 
 m_customerDetailFacade.AssignSpecialPriceViewUnitSellingPrice(rowSpecialPrice)
    </code>
		<code lang="CS" title="Assigning Unit Selling price" description="This code shows how to assign a Unit Selling price in a column field">
 CustomerDetailFacade m_customerDetailFacade;
 DataRow rowSpecialPrice;
 
 m_customerDetailFacade.AssignSpecialPriceViewUnitSellingPrice(rowSpecialPrice);
    </code>
	</example>
	<param name="rowSpecialPrice">A <strong>DataRow</strong> containing the edited price break.</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.ResetPriceBreak(System.Data.DataRow)">
	<summary>
 Procedure to reset the price breaks to single price break where min is set to 1 and max is set to 99,999,999.99
 </summary>
	<example>
    The following codes shows how to implement <b><i>ResetPriceBreak</i></b> method
    <code lang="VB" title="Procedure to reset the price breaks" description="This code shows how to reset the default settings of price break from min 1 to max 99,999,999.99">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim rowPriceBreak As DataRow
 
 m_customerDetailFacade.ResetPriceBreak(rowPriceBreak)
    </code>
		<code lang="CS" title="Procedure to reset the price breaks" description="This code shows how to reset the default settings of price break from min 1 to max 99,999,999.99">
 CustomerDetailFacade m_customerDetailFacade;
 DataRow specialPriceViewRow;
 String columnName;
 
 this.m_customerDetailFacade.ResetPriceBreak(rowPriceBreak);
    </code>
	</example>
	<param name="rowPriceBreak">A <strong>DataRow</strong> containing the selected row when the procedure was invoked.</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.InsertPriceBreak(System.Data.DataRow,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Procedure to insert price breaks to the existing one.
 </summary>
	<example>
    The following codes shows how to implement <b><i>InsertPriceBreak</i></b> method 
    <code lang="VB" title="Procedure to insert price breaks " description="This code shows how to insert price break into an existing item">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim rowPriceBreak As DataRow
 Dim interval As Integer
 Dim noOfBreaks As Integer
 Dim isReset As Boolean
 
 
 m_customerDetailFacade.InsertPriceBreak(rowPriceBreak, interval, noOfBreaks, True)
    </code>
		<code lang="CS" title="Procedure to insert price breaks " description="This code shows how to insert price break into an existing item">
 CustomerDetailFacade m_customerDetailFacade;
 DataRow rowPriceBreak;
 int interval;
 int noOfBreaks;
 bool isReset;
 
 
 m_customerDetailFacade.InsertPriceBreak(rowPriceBreak, interval, noOfBreaks, true);
    </code>
	</example>
	<param name="rowPriceBreak">A <strong>DataRow</strong> containing the selected row.</param>
	<param name="interval">An <strong>Integer</strong> containg the interval for each price break.</param>
	<param name="noOfBreaks">An <strong>Integer</strong> containing the number of price breaks to be created.</param>
	<param name="isReset">A <strong>Boolean</strong> indicating to recreate the entire price break.</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.HasPriceBreak(System.Data.DataRow)">
	<summary>
 Procedure to indicate the existence of price breaks.
 </summary>
	<example>
 The following codes shows how to implement <b><i>HasPriceBreak</i></b> method
    <code lang="VB" title="Procedure to indicate existence" description="This code is to indicate the existence of a price breaks">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim rowDefaultSpecialPrice As DataRow
 Dim value As Boolean
 
 value = m_customerDetailFacade.HasPriceBreak(rowDefaultSpecialPrice)
 </code>
		<code lang="CS" title="Procedure to indicate existence" description="This code is to indicate the existence of a price breaks">
 CustomerDetailFacade m_customerDetailFacade;
 DataRow rowDefaultSpecialPrice;
 bool value;
 
 value = m_customerDetailFacade.HasPriceBreak(rowDefaultSpecialPrice);
    </code>
	</example>
	<param name="rowDefaultSpecialPrice">A <strong>DataRow</strong> containing the default price break.</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.InitializeFirstPriceBreak(System.Data.DataRow)">
	<summary>
 Procedure to create the first price break.
 </summary>
	<example>
    The following codes shows how to implement <b><i>InitializeFirstPriceBreak</i></b>
    method 
    <code lang="VB" title="Procedure to create the first price break" description="This is how to initialize a first price break in a row">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim myPriceBreakRow As Datarow
 
 m_customerDetailFacade.InitializeFirstPriceBreak(myPriceBreakRow)
    </code>
		<code lang="VB" description="This is how to initialize a first price break in a row">
		</code>
		<code lang="CS" description="This is how to initialize a first price break in a row">
 CustomerDetailFacade m_customerDetailFacade;
 Datarow myPriceBreakRow;
 
 m_customerDetailFacade.InitializeFirstPriceBreak(myPriceBreakRow);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.DeleteSpecialPrice(System.Data.DataRow)">
	<summary>
 Procedure to delete the selected price break.
 </summary>
	<example>
    The following codes shows how to implement <b><i>DeleteSpecialPrice</i></b>
    method 
    <code lang="VB" title="Procedure to delete price break" description="This code shows how to delete special price break in a row">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim mySpecialPriceRow As DataRow
 
 m_customerDetailFacade.DeleteSpecialPrice(mySpecialPriceRow)
    </code>
		<code lang="CS" title="Procedure to delete price break" description="This code shows how to delete special price break in a row">
 CustomerDetailFacade m_customerDetailFacade;
 DataRow mySpecialPriceRow;
 
 m_customerDetailFacade.DeleteSpecialPrice(mySpecialPriceRow);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.DeleteAllSpecialPrice">
	<summary>
 Procedure to delete all the price breaks.
 </summary>
	<example>
    The following codes shows how to implement <b><i>DeleteAllSpecialPrice</i></b>
    method 
    <code lang="VB" title="Procedure to delete all the price breaks" description="This code shows you how to delete a Price Break data with IF Statement sample under ItemClick event">
 If MessageBox.Show("Are you sure you want to delete all price break?", "Delete", _
 MessageBoxButtons.OKCancel, MessageBoxIcon.Question) = Windows.Forms.DialogResult.OK Then
           
  m_customerDetailFacade.DeleteAllSpecialPrice()
                                   
 End If
    </code>
		<code lang="CS" title="Procedure to delete all the price breaks" description="This code shows you how to delete a Price Break data with IF Statement sample under ItemClick event">
 if (MessageBox.Show("Are you sure you want to delete all price break?", "Delete", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == Windows.Forms.DialogResult.OK)
 {
 
   m_customerDetailFacade.DeleteAllSpecialPrice();
 
 }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignGLAccount(System.Data.DataRow,System.Data.DataRowView)">
	<summary>Assigns General Ledger or nominal account to the customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignGLAccount</i></b> method 
    <code lang="VB" title="Assigning GLAccount in a customer" description="This code shows how to assign a GLAccount in a customer">
 Dim instance As CustomerDetailFacade
 Dim rowAccountCode As DataRow
 Dim rowClassTemplate As DataRowView
 
 Me.instance.AssignGLAccount(rowAccountCode, rowClassTemplate)
    </code>
		<code lang="CS" title="Assigning GLAccount in a customer" description="This code shows how to assign a GLAccount in a customer">
 CustomerDetailFacade instance;
 DataRow rowAccountCode;
 DataRowView rowClassTemplate;
 
 this.instance.AssignGLAccount(rowAccountCode, rowClassTemplate);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignGLClassTemplate(System.String)">
	<summary>
 Assigns GL Class template to the customer
 </summary>
	<example>
    The following codes shows how to implement <b><i>AssignGLClassTemplate</i></b> method
    <code lang="VB" title="Assigning GLClassTemplate in a customer" description="This code shows how to assign a GLClassTemplate in a customer">
 AssignGLClassTemplate("My Class Code")
    </code>
		<code lang="CS" title="Assigning GLClassTemplate in a customer" description="This code shows how to assign a GLClassTemplate in a customer">
 void[] AssignGLClassTemplate = new void["My Class Code" + 1];
    </code>
	</example>
	<param name="classCode">The code that represents the template to be applied</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignServiceContract(System.Data.DataRowView,System.String)">
	<summary>Procedure to assign a service contract to an existing customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignServiceContract</i></b>
    method 
    <code lang="CS" inline="False">
		</code>
		<code lang="VB" title="Assigning service contract to customer" description="This code shows you how to assign a service contract to customer">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim contractRow As DataRow
 Dim customerCode As String
 
 Me.m_customerDetailFacade.AssignServiceContract(contractRow, "CUST-000001")
    </code>
		<code lang="CS" title="Assigning service contract to customer" description="This code shows you how to assign a service contract to customer">
 CustomerDetailFacade instance;
 DataRow rowAccountCode;
 DataRowView rowClassTemplate;
 
 this.instance.AssignGLAccount(rowAccountCode, rowClassTemplate);
    </code>
	</example>
	<param name="contractRow">The row from which the contract contains</param>
	<param name="customerCode">The code that represents the customer</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignServiceContractAttachment(System.Data.DataRowView,System.String,System.IO.Stream)">
	<summary>
 Procedure to apply an attachment file to a Service Contract for the
 Customer
 </summary>
	<example>
    The following codes shows how to implement
    <b><i>AssignServiceContractAttachment</i></b> method 
    <code lang="VB" title="Attaching a service contract in a customer" description="This shows how to attach a document in a service contract row">
 Dim m_customerFacade As CustomerFacade
 Dim OpenFile As Stream
 Dim FileName As String
 Dim rowContract As DataRowView
 
 
 m_customerFacade.AssignServiceContractAttachment(rowContract, "My File Name", OpenFile)
    </code>
		<code lang="CS" title="Attaching a service contract in a customer" description="This shows how to attach a document in a service contract row">
 CustomerFacade m_customerFacade;
 Stream OpenFile;
 String FileName;
 DataRowView rowContract;
 
 
 m_customerFacade.AssignServiceContractAttachment(rowContract, "My File Name", OpenFile);
    </code>
	</example>
	<param name="rowContract">The contract row to be processed</param>
	<param name="fieldName">The description of the attachment</param>
	<param name="content">The actual attachment in Stream format</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.AssignServiceContractDetail(System.Data.DataRowView,System.String,System.String)">
	<summary>
 Assigns detail to a customer service contract
 </summary>
	<example>
    The following codes shows how to implement
    <b><i>AssignServiceContractDetail</i></b> method 
    <code lang="VB" title="Assigning Service Contract to a customer" description="This code shows how to assign contract to a customer">
 Dim ContractDetailRow As DataRowView
 Dim contactName As String
 Dim contractCode As String
 Dim m_customerDetaiFacade As CustomerDetailFacade
 
 m_customerDetaiFacade.AssignServiceContractDetail(ContractDetailRow, "John Smith" , "Contract")
    </code>
		<code lang="CS" title="Assigning servie contract to a customer" description="This code shows how to assign service contract to a customer in C#">
 DataRowView ContractDetailRow;
 string contactName;
 string contractCode;
 CustomerDetailFacade m_customerDetaiFacade;
 
 m_customerDetaiFacade.AssignServiceContractDetail(ContractDetailRow, "John Smith", "Contract");
    </code>
	</example>
	<param name="contractDetailRow">The detail row to be assigned</param>
	<param name="customerCode">Code that represents the customer</param>
	<param name="contractCode">Code that represents the service contract</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.ChangeShipTo">
	<example>
    The following codes shows how to implement
    <b><i>ChangeShipTo</i></b> method
    <code lang="VB" title="Update Ship To Detail" description="Sample of updating your dataset when changing the Shipto Detail in Customer">
 Public Overrides Function UpdateDataset() As System.Windows.Forms.DialogResult
     
       Dim m_customerDetailFacade As CustomerDetailFacade
       Dim m_customerDataset As CustomerDataset
        
       Try
           With m_customerDataset
               If m_customerDetailFacade.IsUpdateCustomerShipTo Then
                   If MessageBox.Show("Your message here", "Update", _
                       MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then
                       
                       m_customerDetailFacade.ChangeShipTo()
                       
                   End If
               End If
               End With
           Catch ex As Exception
           MessageBox.Show("example")
           End Try
       
 End Function
    </code>
		<code lang="CS" description="Sample of updating your dataset when changing the Shipto Detail in Customer">
 Public override System.Windows.Forms.DialogResult UpdateDataset()
 {
 
   CustomerDetailFacade m_customerDetailFacade;
   CustomerDataset m_customerDataset;
 
   Try {
       {
           If (m_customerDetailFacade.IsUpdateCustomerShipTo)
           {
               If (MessageBox.Show("Your message here", "Update", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == Windows.Forms.DialogResult.Yes)
               {
 
                   m_customerDetailFacade.ChangeShipTo();
 
               }
           }
       }
   }
   Catch (Exception ex) {
       MessageBox.Show("example");
   }
 
 }
    </code>
	</example>
	<summary>Update Ship To Detail when changing the Value</summary>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.CreateDataSource">
	<summary>
 Creates datasource and assigns values to it
 </summary>
	<returns>The DataTable created</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.DeleteSpecialPrice(System.String)">
	<summary>
 Deletes a row or all rows of CustomerSpecialPricing
 </summary>
	<remarks>If itemCode = "" then remove all rows. If item code not equal to "" then delete the specified item</remarks>
	<example>
    The following codes shows how to implement <b><i>DeleteSpecialPrice</i></b> method
    <code lang="VB" title="Deletion of item in a row" description="This code shows how to delete item in a row by value as string">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim itemCode As String
 
 m_customerDetailFacade.DeleteSpecialPrice("TShirt-000001")
    </code>
		<code lang="CS" title="Deletion of item in a row" description="This code shows how to delete item in a row by value as string">
 CustomerDetailFacade m_customerDetailFacade;
 String itemCode;
 
 m_customerDetailFacade.DeleteSpecialPrice("TShirt-000001");
    </code>
	</example>
	<param name="itemCode">A <strong>String</strong> value that reresents the row to be deleted</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.InitializePricingDefault(System.String)">
	<summary>Prepare / read the value for use</summary>
	<example>
    The following codes shows how to implement <b><i>InitializePricingDefault</i></b> method
    <code lang="VB" title="Initialize the data before use" description="This code shows how to prepare the data before using">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim itemCode As String
 
 m_customerDetailFacade.InitializePricingDefault("Toy-01")
    </code>
		<code lang="CS" title="Initialize the data before use" description="This code shows how to prepare the data before using">
 CustomerDetailFacade m_customerDetailFacade;
 String itemCode;
 
 m_customerDetailFacade.InitializePricingDefault("Toy-01");
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.LoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Method use to fetch data from the database and populates the tables specified in the parameters.
 </summary>
	<param name="commandSet">Contains the table/s and the corresponding stored procedure/s to be executed</param>
	<param name="parameters">The parameter for the stored procedure/s</param>
	<param name="clearTableType">Flag if the table should be cleared before reading</param>
	<param name="connStringType">An Enumeration that specifies whether the connection to the database is Online, Offline, etc.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Sets the code for this transaction
 </summary>
	<param name="transactionType">&gt;Defines what transaction is currently being created. i.e., CustomerDetail, ShipTo, SalesRep, etc</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates user data input
 </summary>
	<param name="row">The row to be validated</param>
	<param name="columnName">The column in the row to be validated</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.UpdateCustomerRanking">
	<summary>
 Updates the customer's ranking
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.UpdateCustomerRankingAsync">
	<summary>
 Updates the customer's ranking asynchronously
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.SetDefaultContract">
	<summary>
 Sets a default contract to a customer
 </summary>
	<example>
		<code lang="VB">
 Dim m_serviceContract As String
 SetDefaultContract(m_serviceContract.DefaultContract)
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.SetDefaultContract(System.String)">
	<summary>
 Sets a default contract to a customer
 </summary>
	<example>
    The following codes shows how to implement <b><i>SetDefaultContract</i></b> method 
    <code lang="VB" title="Sets default contract" description="This code shows how to set a default contract to a customer">
 Dim m_customerDetailFacade As CustomerDetailFacade
 Dim m_customerContract As String = "MyContractName"
 
 m_customerDetailFacade.SetDefaultContact("MyContractName")
    </code>
		<code lang="CS" title="Sets default contract" description="This code shows how to set a default contract to a customer">
 CustomerDetailFacade m_customerDetailFacade;
 String m_customerContract = "MyContractName";
 
 m_customerDetailFacade.SetDefaultContact("MyContractName");
    </code>
	</example>
	<param name="contractCode">The code that represents the contract to be defaulted to a customer</param>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.ShowCompleted(System.Object)">
	<summary>
 ShowCompleted
 </summary>
	<param name="state">State of the object being processed</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerDetailFacade.OverrideRankingUpdate">
	<summary>
 Update the IsRankUserOverriden field when the user manually changed a customer's rank
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditHistoryFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.CreditHistoryFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CreditHistoryDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="creditHistoryDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditControlFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
	<value>Returns the dataset instance currently being used by this facade.</value>
</member><member name="P:Interprise.Facade.Customer.CreditControlFacade.GatherInfoDelegate">
	<summary>
 Returns and sets Info Delegate
 </summary>
	<value>Framework.Base.Shared.Delegates.GatherInformation</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditControlFacade.StatementSessionCode">
	<summary>
 Returns a System.Guid
 </summary>
	<value>System.Guid</value>
	<returns>Returns a System.Guid type of variable</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditControlFacade.IsInterestCharge">
	<summary>
 Gets whether the transaction includes the calculation of the interest charge.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CreditControlDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="p_creditControlDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.CreatePredictedCashFlowTables">
	<summary>
 Creates temporary tables for the Predicted Cash Flow control
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreatePredictedCashFlowTables</em></strong> method.</para>
		<code lang="VB" title="CreatePredictedCashFlowTables" description="Creates the tables used for the predicted cash flow user interface.">
 Dim credControlFacade As New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway)
 credControlFacade.CreatePredictedCashFlowTables()
    </code>
		<code lang="CS" title="CreatePredictedCashFlowTables" description="Creates the tables used for the predicted cash flow user interface.">
 Interprise.Facade.Customer.CreditControlFacade credControlFacade = New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway());
 credControlFacade.CreatePredictedCashFlowTables();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.CreatePredictedCashFlowRows">
	<summary>
 Add rows to the created temporary tables for the Predicted Cash Flow control
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreatePredictedCashFlowRows</em></strong> method.</para>
		<code lang="VB" title="CreatePredictedCashFlowRows" description="Inserts the values for the predicted cash flow.">
 Dim credControlFacade As New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway)
 credControlFacade.CreatePredictedCashFlowRows()
    </code>
		<code lang="CS" title="CreatePredictedCashFlowRows" description="Inserts the values for the predicted cash flow.">
 Interprise.Facade.Customer.CreditControlFacade credControlFacade = New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway());
 credControlFacade.CreatePredictedCashFlowRows();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.AssignCustomerDebtorLetter(System.String)">
	<summary>
 Assign the Debtor Letter depending on the which aging the customer is on
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>AssignCustomerDebtorLetter</em></strong> method.</para>
		<code lang="VB" title="AssignCustomerDebtorLetter" description="Assigns the customer's debtor letter base on the parameter supplied.">
 Dim ageDate As String = "05/05/07"
 Dim credControlFacade As New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway)
 credControlFacade.AssignCustomerDebtorLetter(ageDate)
    </code>
		<code lang="CS" title="AssignCustomerDebtorLetter" description="Assigns the customer's debtor letter base on the parameter supplied.">
 string ageDate = "05/05/07";
 Interprise.Facade.Customer.CreditControlFacade credControlFacade = New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway());
 credControlFacade.AssignCustomerDebtorLetter(ageDate);
    </code>
	</example>
	<param name="ageDate">A <strong>String</strong> that represents the current age the customer is on</param>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.ClearCustomerStatementRun">
	<summary>
 Clears the contents of CustomerStatementRun table
 </summary>
	<remarks>This is used so that when the statement run is processed again, only customers with outstanding balances would appear</remarks>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>ClearCustomerStatementRun</em></strong> method.</para>
		<code lang="VB" title="ClearCustomerStatementRun" description="Deletes the previous records of statement run for a new one.">
 Dim credControlFacade As New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway)
 credControlFacade.ClearCustomerStatementRun()
    </code>
		<code lang="CS" title="ClearCustomerStatementRun" description="Deletes the previous records of statement run for a new one.">
 Interprise.Facade.Customer.CreditControlFacade credControlFacade = New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway());
 credControlFacade.ClearCustomerStatementRun();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.CreateCustomerStatementRunRows(System.Decimal,System.Boolean,System.DateTime,System.String)">
	<summary>
 Generates row for statement run/ debtor letter run production
 </summary>
	<example>
		<para>The following codes shows how to implement the
    <strong><em>CreateCustomerStatementRunRows</em></strong> method.</para>
		<code lang="VB" title="CreateCustomerStatementRunRows" description="Creates the documents to be included in the statement run process based on the parameters supplied.">
 Dim minBalance As Decimal = 0
 Dim isIncludeOnHold As Boolean = True
 Dim ageDate As Date = "05/05/07"
 Dim customerCode As String = "CUST-000001" 
 Dim credControlFacade As New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway)
 credControlFacade.CreateCustomerStatementRunRows(minBalance, isIncludeOnHold, ageDate, customerCode)
    </code>
		<code lang="CS" title="CreateCustomerStatementRunRows" description="Creates the documents to be included in the statement run process based on the parameters supplied.">
 Decimal minBalance = 0;
 bool isIncludeOnHold = True;
 DateTime ageDate = "05/05/07";
 String customerCode = "CUST-000001";
 Interprise.Facade.Customer.CreditControlFacade credControlFacade = New Interprise.Facade.Customer.CreditControlFacade(New CreditControlDatasetGateway());
 credControlFacade.CreateCustomerStatementRunRows(minBalance, isIncludeOnHold, ageDate, customerCode);
    </code>
	</example>
	<param name="minBalance">A <strong>Decimal</strong> value that reepresents the minimum outstanding balance a customer should have in order for the customer to be included in the production</param>
	<param name="isIncludeOnHold">A <strong>Boolean</strong> value that filters the customer that are in dispute</param>
	<param name="ageDate">A <strong>Date</strong> value that filters the customers on the date of the aging</param>
	<param name="customerCode">Optional. A <strong>String</strong> value that represents the customer to be processed</param>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.AcceptNote(System.Data.DataRowView)">
	<summary>
 Adds new note
 </summary>
	<excludetoc/>
	<exclude/>
	<param name="rowNote">A <strong>DataRowView</strong> that contains the row to be processed</param>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.SendStatementsEmail(System.String[],System.Boolean[],System.Object[][])">
	<summary>
 Sends statements through e-mail
 </summary>
	<excludetoc/>
	<exclude/>
	<param name="customerInfo">A <strong>String Array</strong> that contains information about the customer</param>
	<param name="preference">A <strong>Boolean Array</strong> that contains the sending preference of the customer</param>
	<param name="attachment">A <strong>Two Dimesional Object Array</strong> that contains the statements/reports to be sent to the customer</param>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.SendStatementsFax(System.String[],System.Boolean[],System.Object[][])">
	<summary>
 Sends Statements through Fax
 </summary>
	<excludetoc/>
	<exclude/>
	<param name="customerInfo">A <strong>String Array</strong> that contains information about the customer</param>
	<param name="preference">A <strong>Boolean Array</strong> that contains the sending preference of the customer</param>
	<param name="attachment">A <strong>Two Dimesional Object Array</strong> that contains the statements/reports to be sent to the customer</param>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.CreateCustomerAllocationDebitViewFromInvoice(Interprise.Framework.Customer.DatasetComponent.CreditControlDataset.CustomerInvoiceViewRow)">
	<summary>
 Method that will create the customer allocation debit(s) from the customer's invoice.
 </summary>
	<param name="invoiceRow">Customer invoice row</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditControlFacade.UpdateCustomerInvoiceInterestCharge">
	<summary>
 Update customer invoice transaction(s) with the new calculated interest charge.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.InitializeServicePoint">
	<summary>
 Added by Jb Mago 8/11/2015
 Set default connection to appropriate value to process request concurrently
 DefaultConnectionLimit value is 2 if not initialized
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.AddCreditCard">
	<summary>Method that adds credit card value to the table in the dataset</summary>
	<example>
    The following codes shows how to implement <b><i>AddCreditCard</i></b> method
    <code lang="VB" title="Add new credit card" description="This shows how to add new credit card value">
 Dim m_customerCreditCardFacade As CreditCardFacade
 
 m_customerCreditCardFacade.AddCreditCard()
    </code>
		<code lang="CS" title="Add new credit card" description="This shows how to add new credit card value">
 CreditCardFacade m_customerCreditCardFacade;
 
 m_customerCreditCardFacade.AddCreditCard();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.AssignCustomer(System.Data.DataRow)">
	<summary>Procedure to assign the customer information in Credit Card setup</summary>
	<example>
    The following codes shows how to implement <b><i>AssignCustomer</i></b> method
    <code lang="VB" title="Assigning customer to CC Setup" description="This shows how to assign a customer entity in a Credit Card setup">
 Dim m_creditCardFacade As CreditCardFacade
 Dim selectedCustomer As DataRow
 
 m_creditCardFacade.AssignCustomer(selectedCustomer)
    </code>
		<code lang="CS" title="Assigning customer to CC Setup" description="This shows how to assign a customer entity in a Credit Card setup">
 CreditCardFacade m_creditCardFacade;
 DataRow selectedCustomer;
 
 m_creditCardFacade.AssignCustomer(selectedCustomer);
    </code>
	</example>
	<param name="rowCustomer">A <strong>DataRow</strong> containing the customer information.</param>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CreditCardDatasetGateway)">
	<summary>
 Create an instance of this class
 </summary>
	<param name="creditCardDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.DecryptCardNumber(System.String,System.Data.DataRow)">
	<summary>
 Procedure to decrypt the card number.
 </summary>
	<param name="encryptedCardNumber">An encrypted card number to decrypt.</param>
	<param name="rowCreditCard">A <strong>DataRow</strong> of <strong>CustomerCreditCardView</strong> datatable.</param>
	<returns>Decrypted card number.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.DecryptCardNumber">
	<summary>
 Procedure to decrypt the card number.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.EncryptCardNumber(System.String,System.Data.DataRow)">
	<summary>
 Procedure to encrypt the card number.
 </summary>
	<param name="unencryptedCardNumber">A card number to encrypt.</param>
	<param name="rowCreditCard">A <strong>DataRow</strong> of <strong>CustomerCreditCardView</strong> datatable.</param>
	<returns>Encrypted card number.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.EncryptCardNumber">
	<summary>
 Procedure to encrypt the card number.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.ExecuteValidateHttpRequest(System.String)">
	<summary>
 Added by Jb Mago 8/11/2015
 <param name="stringValue">Data to be inherited by the buffer variable</param>
	</summary>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn in a row.
 </summary>
	<param name="row">A <strong>System.Data.DataRow</strong> that contains the row to be validated</param>
	<param name="columnName">A <strong>String</strong> description of the DataColumn to be validated.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to encrypt the credit card number.
 </summary>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.DecryptCardIssueNumber(System.String,System.Data.DataRow)">
	<summary>
 Procedure to decrypt the card issue number.
 </summary>
	<param name="encryptedCardIssueNumber">An encrypted card issue number to decrypt.</param>
	<param name="rowCreditCard">A <strong>DataRow</strong> of <strong>CustomerCreditCardView</strong> datatable.</param>
	<returns>Decrypted card issue number.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardFacade.EncryptCardIssueNumber(System.String,System.Data.DataRow)">
	<summary>
 Procedure to encrypt the card issue number.
 </summary>
	<param name="unencryptedCardIssueNumber">A card issue number to encrypt.</param>
	<param name="rowCreditCard">A <strong>DataRow</strong> of <strong>CustomerCreditCardView</strong> datatable.</param>
	<returns>Encrypted card issue number.</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditAvailabilityFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.CreditAvailabilityFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CreditAvailabilityDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="creditAvailabilityDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditAvailabilityFacade.GetAvailableCredit(System.String,System.String,System.String,System.DateTime,System.Decimal,System.Decimal,Interprise.Framework.Base.DatasetComponent.BaseDataset,System.String)">
	<summary>
 Gets the available credit of the customer
 </summary>
	<param name="customerCode">A <strong>String</strong> that represents the customer to be processed</param>
	<param name="documentCode">A <strong>String</strong> that represents the current document code</param>
	<param name="invoiceCode">A <strong>String</strong> that represents the invoice/credit note to be processed</param>
	<param name="invoiceDate">A <strong>Date</strong> that represents the date of the invoice/credit note to be processed</param>
	<param name="currentBalance">A <strong>Decimal</strong> that represents the balance of the invoice/credit note in home currency</param>
	<param name="currentBalanceRate">A <strong>Decimal</strong> that represents the balance of the invoice/credit note in customer currency</param>
	<param name="dataset">A <strong>Framework.Base.DatasetComponent.BaseDataset</strong> that will contain the processed values</param>
	<param name="type">A <strong>String</strong> that represents what type of document/s should be processed</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.RMAHistoryFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.RMAHistoryFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.RMAHistoryDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="rmaHistoryDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ResponseLogViewerFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.ResponseLogViewerFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.ResponseLogViewerDatasetGateway)">
	<summary>
 Initializes a new instance of
 Interprise.Facade.Customer.CustomerCreditCardTypeFacade class.
 </summary>
	<param name="m_responseLogViewerGateway">
 The instance of
 Interprise.Framework.Customer.DatasetGateway.CustomerCreditCardTypeDataset
 class.
 </param>
</member><member name="P:Interprise.Facade.Customer.Report.ReportPrinterFacade.CurrentBusinessRule">
	<summary>Gets the business rule that is use in this transaction in LAN 
 connection.</summary>
	<value>Interprise.Extendable.Base.Business.IBaseInterface</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Customer.Report.ReportPrinterFacade.CurrentDataset">
	<summary>The dataset that contains all the Tables that are use as a part of transaction.</summary>
	<value><para>Interprise.Framework.Base.DatasetComponent.BaseDataset</para></value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Customer.Report.ReportPrinterFacade.CurrentReportType">
	<summary>Specifies the report type of a transaction.</summary>
	<value>Interprise.Framework.Base.Shared.Enum.ReportAction</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Facade.Customer.Report.ReportPrinterFacade.CurrentTransactionType">
	<summary> The enum that specifies the transaction type. </summary>
	<value> Interprise.Framework.Base.Shared.Enum.TransactionType</value>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Customer.Report.ReportPrinterFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.Report.ReportPrinterDatasetGateway,Interprise.Business.Customer.BaseRule)">
	<summary>
 Create an instance of this class.
 </summary>
	<param name="reportPrinterDataset"> Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.LoyaltyPointsHistoryFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.LoyaltyPointsDatasetGateway)">
	<summary>
	</summary>
	<param name="loyalPointsGateway"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.LoyaltyPointsFacade.ComputeRedemedPoints(System.Decimal)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.LoyaltyPointsFacade.UpdateDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.LoyaltyPointsFacade.UpdateLoyaltyPoints(System.String,System.Decimal)">
	<summary>
	</summary>
	<param name="customerCode"></param>
	<param name="allocatedAmount"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.LoyaltyPointsFacade.UpdateRedeemedPoints(System.Decimal)">
	<summary>
	</summary>
	<param name="computedRedeemedPoints"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.LoyaltyPointsFacade.UpdateReservedPoints(System.String,System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="customerCode"></param>
	<param name="original"></param>
	<param name="propose"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.LegacyTransactionsFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.LegacyTransactionsFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.LegacyTransactionsDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="legacyTransDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ItemBundleFacade.TxtMessageErrorOnValidate">
	<summary>
 To hold the string messages of the error on validate method.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>added by Evans Andal 12/02/2014

</member><member name="P:Interprise.Facade.Customer.ItemBundleFacade.IsHasErrorOnValidate">
	<summary>
 Flag to mark, that the validate do have problem with the columns required.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks> added by Evans Andal 12/02/2014

</member><member name="P:Interprise.Facade.Customer.DownloadableItemEmailFacade.CurrentDataset">
	<summary>
 Gets the instance of
 Interprise.Framework.Customer.DatasetGateway.DownloadableItemEmailDatasetGateway class.
 The object contains pieces of information used in composing the download instructions
 to be e-mailed.
 </summary>
	<value>
 The instance of
 Interprise.Framework.Customer.DatasetGateway.DownloadableItemEmailDatasetGateway
 class.
 </value>
</member><member name="M:Interprise.Facade.Customer.DownloadableItemEmailFacade.ComposeAndSend(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.String@)">
	<summary>
 Composes the download instructions e-mail and saved it immediately to the Outbox
 folder of users e-mail account.
 </summary>
	<param name="gatewayInvoiceDataset">
 The instance of
 Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway class that contains
 the invoice transaction that has downloadable items.
 </param>
	<param name="errCode">
 The errors encountered that caused the failure of composing and sending of
 e-mail. Use the GetMessage method of Interprise.Facade.Base.SimpleFacade class to get
 the complete message.
 </param>
</member><member name="M:Interprise.Facade.Customer.DownloadableItemEmailFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CustomerTypeFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.CustomerTypeFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CustomerTypeDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="customerTypeDataset"> Shared dataset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CustomerTypeFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a Specific DataColumn in row in table SystemPaymentTerm.
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The DataColumn to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="P:Interprise.Facade.Customer.CustomerItemKitFacade.CustomerOverallDiscount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CustomerItemKitFacade.CouponInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Interprise.Facade.Customer.CustomerCreditCardTypeFacade.m_errormessage">
	<summary>Instance of StringBuilder that contains the validation error.</summary>
</member><member name="P:Interprise.Facade.Customer.CustomerCreditCardTypeFacade.CurrentDataset">
	<summary>
 Gets the instance of
 Interprise.Framework.Customer.DatasetGateway.CustomerCreditCardTypeDataset
 class.
 </summary>
	<value>
 The instance of
 Interprise.Framework.Customer.DatasetGateway.CustomerCreditCardTypeDataset
 class.
 </value>
</member><member name="M:Interprise.Facade.Customer.CustomerCreditCardTypeFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CustomerCreditCardTypeDatasetGateway)">
	<summary>
 Initializes a new instance of
 Interprise.Facade.Customer.CustomerCreditCardTypeFacade class.
 </summary>
	<param name="creditcardtypedataset">
 The instance of
 Interprise.Framework.Customer.DatasetGateway.CustomerCreditCardTypeDataset
 class.
 </param>
</member><member name="M:Interprise.Facade.Customer.CustomerCreditCardTypeFacade.Validate(System.Data.DataRow,System.String)">
	<summary>Validates the data of credit card type.</summary>
	<param name="row">The data row that contains the credit card type to validate.</param>
	<param name="columnName">The name of column to be validated.</param>
</member><member name="E:Interprise.Facade.Customer.CreditCardAuthorizationFacade.AuthorizationFinish">
	<summary>Occurs after card authorization has finish.</summary>
</member><member name="E:Interprise.Facade.Customer.CreditCardAuthorizationFacade.AuthorizationStart">
	<summary>Occurs when card authorization start.</summary>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.TransactionType">
	<summary>Gets or sets the type of transaction.</summary>
	<value>
		<para>The type of transaction.</para>
	</value>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.ParentTransactionType">
	<summary>Gets or sets the type of transaction.</summary>
	<value>
		<para>The type of parent transaction.</para>
	</value>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.VoidTransactionFailed">
	<summary>Gets the value that indicates that void card transaction failed.</summary>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.IsVoiding">
	<summary>
 Property is set to True when currently voiding a credit card payment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.UseCurrentDateWhenCapturedManually">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.IsCreditCardGatewayManual(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="paymentMethod"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.Is3DSecure">
	<summary>
 Set to true when the merchant account is in 3D Secure authorization.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.Secure3DStatusDetail">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.Secure3DStatus">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.Secure3DMD">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.Secure3DACSURL">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.Secure3DPAReq">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.CreditCardAuthorizationFacade.Secure3DAuthorizationResult">
	<summary>
 This property is for 3D secure feature and for CBE only.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CreditCardAuthorizationFacade.AuthorizeCreditCard(Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Boolean,System.Boolean@,System.Object[][]@)">
	<summary>
 Authorize all credit card payments loaded in the instance of
 Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway.
 </summary>
	<returns>The errors encountered during authorization.</returns>
	<param name="facadeReceipt">The instance of Interprise.Facade.Customer.ReceiptFacade.</param>
	<param name="autoOnly">Capture card payments that are marked to be charged on post.</param>
	<param name="isApproved">
		<strong>true</strong> if card transaction is approved; otherwise
 <strong>false</strong>.
 </param>
</member><member name="M:Interprise.Facade.Customer.CreditCardAuthorizationFacade.AuthorizeCreditCardPayments(Interprise.Extendable.Customer.Facade.IReceiptInterface,System.String@)">
	<summary>
 Sets the type of not yet authorized card transaction from Auth to
 Auth/Capture.
 </summary>
	<param name="facadeReceipt">The instance of Interprise.Facade.Customer.ReceiptFacade.</param>
	<param name="result">The errors encountered during authorization.</param>
</member><member name="M:Interprise.Facade.Customer.CreditCardAuthorizationFacade.AuthorizeCreditCardPayments(Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Boolean,System.String@)">
	<summary>
 Sets the type of not yet authorized card transaction from Auth to
 Auth/Capture.
 </summary>
	<param name="facadeReceipt">The instance of Interprise.Facade.Customer.ReceiptFacade.</param>
	<param name="isVoid">Indicates that authorized, captured or forced transaction will be voided.</param>
	<param name="result">The errors encountered during authorization.</param>
</member><member name="M:Interprise.Facade.Customer.CreditCardAuthorizationFacade.AuthorizeCreditCardPayments(Interprise.Extendable.Customer.Facade.ITransactionReceiptInterface,Interprise.Extendable.Customer.Facade.IReceiptInterface,Interprise.Extendable.Customer.Facade.IReceiptInterface@,System.String@)">
	<summary>
 Loads and authorizes all the card payments for the order or invoice
 transaction.
 </summary>
	<returns>
		<strong>true</strong> if all card payments are processed successfully; otherwise
 <strong>false</strong>.
 </returns>
	<param name="facadeTransactionReceipt">The instance of Interprise.Facade.Customer.TransactionReceiptFacade.</param>
	<param name="facadeCurrentReceipt">The instance of Interprise.Facade.Customer.ReceiptFacade.</param>
	<param name="facadeAllReceipts">
 The instance of Interprise.Facade.Customer.ReceiptFacade used to load all the
 card payments for the order or invoice transaction.
 </param>
	<param name="result">The error messages encountered during authorization.</param>
</member><member name="M:Interprise.Facade.Customer.CreditCardAuthorizationFacade.AuthorizeCreditCardPayments(Interprise.Extendable.Customer.Facade.ITransactionReceiptInterface,Interprise.Extendable.Customer.Facade.IReceiptInterface,System.Boolean,Interprise.Extendable.Customer.Facade.IReceiptInterface@,System.String@)">
	<summary>
 Loads and authorizes all the card payments for the order or invoice
 transaction.
 </summary>
	<returns>
		<strong>true</strong> if all card payments are processed successfully; otherwise
 <strong>false</strong>.
 </returns>
	<param name="facadeTransactionReceipt">The instance of Interprise.Facade.Customer.TransactionReceiptFacade.</param>
	<param name="facadeCurrentReceipt">The instance of Interprise.Facade.Customer.ReceiptFacade.</param>
	<param name="isVoid">Indicates that authorized, captured or forced transaction will be voided.</param>
	<param name="facadeAllReceipts">
 The instance of Interprise.Facade.Customer.ReceiptFacade used to load all the
 card payments for the order or invoice transaction.
 </param>
	<param name="result">The error messages encountered during authorization.</param>
</member><member name="M:Interprise.Facade.Customer.CreditCardAuthorizationFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway)">
	<summary>Initializes a new instance Interprise.Facade.Customer.CouponFacade class.</summary>
	<param name="CustomerCouponDataSet">
 The instance of Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway
 class.
 </param>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.CurrentDataset">
	<summary>
    Gets the instance of 
    <para>Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway
    class.</para>
	</summary>
	<value>
    The instance of 
    <para>Interprise.Framework.Customer.DatasetGateway.CouponDatasetGateway
    class.</para>
	</value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.CurrentReportType">
	<summary>Gets the report action for CouponFacade.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.ReportAction.None</para></value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.CurrentTransactionType">
	<summary>Gets the transaction type of CouponFacade.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.TransactionType.EcommerceCoupon</para></value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.DateExpiry">
	<summary>Gets the expiration date of coupon.</summary>
	<value>The expiration date of coupon.</value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.DiscountFreeShipping">
	<summary>Indicates that the coupon includes free shipping.</summary>
	<value>
		<strong>true</strong> if coupon includes free shipping; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.GetCouponType">
	<summary>Gets the coupon type.</summary>
	<value>
		<para>The following table shows the types of coupon</para>
		<para>
			<list type="table">
				<item>
					<term>Coupon Type</term>
					<description>Description</description>
				</item>
				<item>
					<term>Orders</term>
					<description>Coupon discount is applied to the total amount due of the
                order.</description>
				</item>
				<item>
					<term>Products</term>
					<description>Coupon discount is applied to specific
                products.</description>
				</item>
			</list>
		</para>
	</value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.GetCouponCode">
	<summary>Gets the code of the coupon.</summary>
	<value>The code of the coupon.</value>
	<remarks>
 Coupon code is the field displayed on Coupon window so that user can enter user
 friendly value. Unlike Coupon ID, the value is system generated.
 </remarks>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.GetNUses">
	<summary>Gets the number of times the coupon can be used.</summary>
	<value>The number of times the coupon can be used.</value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.GetCheckCustomerFirstUse">
	<summary>Indicates that the coupon expires after first use.</summary>
	<value>
		<strong>true</strong> if the coupon expires after first use; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.GetcheckAnyCustomerFirstUse">
	<summary>Indicates that the coupon expires after first use of each customer.</summary>
	<value>
		<strong>true</strong> if the coupon expires after first use of each customer;
 otherwise <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.CouponFacade.GetCheckCustomerNumberOfUse">
	<summary>Indicates that the coupon expires after the specified number of usage.</summary>
	<value>
		<strong>true</strong> if the coupon expires after the specified number of usage;
 otherwise <strong>false</strong>.
 </value>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>Overriden to allow the generation of unique code for coupon.</summary>
	<remarks>
		<para>SetDocumentCode method is called to set the unique code of newly created
    coupon.</para>
		<para>If overriden, make sure to check first if the row state is
    System.Data.DataRowState.Added. Call member method GenerateDocumentCode to generate
    the unique code then assign the value to CouponID column of CustomerSalesCoupon
    datatable.</para>
	</remarks>
	<example>
 The following sample code shows how the coupon id is generated.
 </example>
	<param name="transactionType">Interprise.Framework.Base.Shared.Enum.TransactionType.EcommerceCoupon</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AddCoupon(System.String)">
	<example>
    The following codes shows how to implement <b><i>AddCoupon</i></b> method
    <code lang="VB" title="Assigning coupon" description="This code shows how to add coupon in a customer">
 Dim m_couponFacade As CouponFacade
 Dim couponID As String = "Coupon-000001"
 
 m_couponFacade.AddCoupon("Coupon-000001")
    </code>
		<code lang="VB" title="Assigning coupon" description="This code shows how to add coupon in a customer">
 CouponFacade m_couponFacade;
 String couponID = "Coupon-000001";
 
 m_couponFacade.AddCoupon("Coupon-000001");
    </code>
	</example>
	<summary>Procedure to create a Coupon for Customer</summary>
	<param name="couponID">a <b>String</b> containing the Document Code of the Coupon</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.RemoveUnnecessaryData">
	<summary>Removes data that not needed when settings are changed.</summary>
	<remarks>
 Some data are not needed when settings are changed. For example, there's Include
 All Customers option under Customers tab of Coupon window. Customers specified are not
 needed if Include All Customers is checked. RemoveUnnecessary method is called
 automatically before saving to remove the customers specified.
 </remarks>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.Validate(System.Data.DataRow,System.String)">
	<summary>Checks the coupon record for invalid data.</summary>
	<param name="row">The coupon datarow to validate.</param>
	<param name="columnName">The name of column to validate.</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignAfterNUses(System.Int32)">
	<example>
    The following codes shows how to implement <b><i>AssignAfterNUses</i></b> method
    <code lang="VB" title="Expiration in number of usage" description="This code shows how to assign Expiration after number of usage in a coupon">
 Dim m_couponFacade As CouponFacade
 Dim int As Integer
 
 m_couponFacade.AssignAfterNUses(int)
    </code>
		<code lang="CS">
 CouponFacade m_couponFacade;
 int @int;
 
 m_couponFacade.AssignAfterNUses(@int);
    </code>
	</example>
	<summary>Procedure to limit a coupon by number of usage</summary>
	<param name="usage">An <b>Integer</b> specifying the number of use</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssigncheckAnyCustomerFirstUse(System.Int32)">
	<example>
    The following codes shows how to implement
    <b><i>AssigncheckAnyCustomerFirstUse</i></b> method
    <code lang="VB" title="Expires on first use by any customer" description="This code limits the customer in only one usage of Coupon">
 Dim m_CouponFacade As CouponFacade
 Dim int As Integer
 
 m_CouponFacade.AssigncheckAnyCustomerFirstUse(0)
    </code>
		<code lang="CS" title="Expires on first use by any customer" description="This code limits the customer in only one usage of Coupon">
 CouponFacade m_CouponFacade;
 int @int;
 
 m_CouponFacade.AssigncheckAnyCustomerFirstUse(0);
    </code>
	</example>
	<summary>Procedure to assign an expiration on first usage of coupon by any customer</summary>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignCheckCustomerFirstUse(System.Int32)">
	<summary>
 Procedure to assign an expiration after one usage of coupon by each
 customer
 </summary>
	<example>
    The following codes shows how to implement
    <b><i>AssignCheckCustomerFirstUse</i></b> method
    <code lang="VB" title="Expires after one usage for each customer" description="This code shows how to limit the coupon in a single usage for each customer">
 Dim m_couponFacade As CouponFacade
 Dim int32 As Integer
 
 m_couponFacade.AssignCheckCustomerFirstUse(0)
    </code>
		<code lang="VB" title="Expires after one usage for each customer" description="This code shows how to limit the coupon in a single usage for each customer">
 CouponFacade m_couponFacade;
 int int32;
 
 m_couponFacade.AssignCheckCustomerFirstUse(0);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignCheckCustomerNumberOfUse(System.Int32)">
	<example>
    The following codes shows how to implement
    <b><i>AssignCheckCustomerNumberOfUse</i></b> method
    <code lang="VB" title="Expires after number of uses" description="This code shows how to assign a number of usage in a coupon for any customer">
 Dim m_couponFacade As CouponFacade
 Dim check As Integer
 
 m_couponFacade.AssignCheckCustomerNumberOfUse(0)
    </code>
		<code lang="CS" title="Expires after number of uses" description="This code shows how to assign a number of uses in a coupon for any customer">
 CouponFacade m_couponFacade;
 int check;
 
 m_couponFacade.AssignCheckCustomerNumberOfUse(0);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignExpirationDate(System.DateTime)">
	<example>
    The following codes shows how to implement <b><i>AssignExpirationDate</i></b>
    method
    <code lang="VB" title="Coupon Expiration Date" description="This will assign an Expiration date for a coupon">
 Dim m_couponFacade As CouponFacade
 Dim ToDateTime As Date
 
 Me.m_couponFacade.AssignExpirationDate(ToDateTime)
    </code>
		<code lang="CS" title="Coupon Expiration Date" description="This will assign an Expiration date for a coupon">
 CouponFacade m_couponFacade;
 System.DateTime ToDateTime;
 
 this.m_couponFacade.AssignExpirationDate(ToDateTime);
    </code>
	</example>
	<summary>Procedure to specify the Expiration Date for a Coupon</summary>
	<param name="expired">A <b>DateTime</b> which you can specify the expiration date of your Coupon</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignFreeShipping(System.Int32)">
	<summary>This procedure is to assign a free shipping included in a coupon</summary>
	<example>
    The following codes shows how to implement <b><i>AssignFreeShipping</i></b> method
    <code lang="VB" title="Free Shipping check" description="This shows how to assign a free shipping in a coupon">
 Dim m_couponFacade As CouponFacade
 Dim tick As Integer
 
 Me.m_couponFacade.AssignFreeShipping(tick)
    </code>
		<code lang="CS" title="Free Shipping check" description="This shows how to assign a free shipping in a coupon">
 CouponFacade m_couponFacade;
 int tick;
 
 this.m_couponFacade.AssignFreeShipping(tick);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignCouponType(System.String)">
	<example>
    The following codes shows how to implement <b><i>AssignCouponType</i></b> method
    <code lang="VB" description="This shows how to specify the type of your coupon (example: Order type and Product type)">
 Dim m_couponFacade As CouponFacade
 Dim couponType As String
 
 Me.m_couponFacade.AssignCouponType("Product Type")
    </code>
		<code lang="CS" title="Type of coupon" description="This shows how to specify the type of your coupon (example: Order type and Product type)">
 CouponFacade m_couponFacade;
 String couponType;
 
 this.m_couponFacade.AssignCouponType("Order Type");
    </code>
	</example>
	<summary>Procedure to choose what type of coupon a customer have</summary>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignCouponCode(System.String)">
	<example>
    The following codes shows how to implement <b><i>AssignCouponCode</i></b> method
    <code lang="VB" title="Required coupon code" description="This shows how to assign a unique ID for each coupon">
 Dim m_couponCode As CouponFacade
 Dim code As String
 
 Me.m_couponCode.AssignCouponCode("Coupon-001")
    </code>
		<code lang="CS" title="Required coupon code" description="This shows how to assign a unique ID for each coupon">
 CouponFacade m_couponCode;
 String code;
 
 this.m_couponCode.AssignCouponCode("002-Coupon");
    </code>
	</example>
	<summary>Procedure to set a unique coupon code</summary>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignItem(System.Data.DataRowView,System.Data.DataRow[],System.String)">
	<summary>Add the item to which the coupon can be applied.</summary>
	<param name="itemRowView">
 The row of CustomerCouponProduct datatable to which the selected item will be
 assigned.
 </param>
	<param name="rowsSelected">The row of item to be added.</param>
	<param name="couponId">The coupon id of parent coupon record.</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignCategory(System.Data.DataRowView,System.Data.DataRow[],System.String)">
	<summary>Add the category to which the coupon can be applied.</summary>
	<param name="categoryRowView">
 The row of CustomerCouponCategory to which the selected category will be
 assigned.
 </param>
	<param name="rowsSelected">The row of category to be added.</param>
	<param name="couponId">The coupon id of parent coupon record.</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignDepartment(System.Data.DataRowView,System.Data.DataRow[],System.String)">
	<summary>Adds the department to which the coupon can be applied.</summary>
	<param name="departmentRowView">
 The row of CustomerCouponDepartment datatable to which the selected department
 will be assigned.
 </param>
	<param name="rowsSelected">The row of department to be added.</param>
	<param name="couponId">The coupon id of parent coupon record.</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignManufacturer(System.Data.DataRowView,System.Data.DataRow[],System.String)">
	<summary>Adds the manufacturer to which the coupon can be applied.</summary>
	<param name="manufacturerRowView">
 The row of CustomerCouponManufacturer to which the selected manufacturer will be
 assigned.
 </param>
	<param name="rowsSelected">The row of manufacturer to be added.</param>
	<param name="couponId">The coupon id of parent coupon record.</param>
</member><member name="M:Interprise.Facade.Customer.CouponFacade.AssignCheckCouponComputation(Interprise.Framework.Customer.Shared.Enum.CouponComputation)">
	<summary>
	</summary>
	<param name="computeOption"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.ConfirmPickedRoutineFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.ConfirmPickedRoutineFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.ConfirmPickedRoutineDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="p_confirmPickedRoutineDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ConfirmPickedRoutineFacade.GetDropShipPurchaseOrder">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.CreateReceiptFacade(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.CreateSalesOrderFacade(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.CreateNewAuthorization(System.String)">
	<summary>
	</summary>
	<param name="sourceCardPaymentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.ProcessCardPayment(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Facade.Customer.ReceiptFacade,System.Boolean,Interprise.Framework.Base.Shared.Enum.CreditCardTransaction)">
	<summary>
	</summary>
	<param name="receiptGateway"></param>
	<param name="receiptFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.VoidFacade_ConversionCompleted(System.Object,Interprise.Framework.Customer.EventArguments.CommonEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.VoidFacade_ConversionFailed(System.Object,Interprise.Framework.Customer.EventArguments.CommonEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.VoidFacade_CreditCardAuthorizationFailed(System.Object,Interprise.Framework.Customer.EventArguments.CreditCardAuthorizationFailedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.VoidFacade_PostingFailed(System.Object,Interprise.Framework.Customer.EventArguments.CommonEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.VoidFacade_AfterConversionToCreditMemo(System.Object,Interprise.Framework.Customer.EventArguments.ProcessingPaymentCompletedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.CODReturnedFacade.VoidFacade_ProcessingPaymentCompleted(System.Object,Interprise.Framework.Customer.EventArguments.ProcessingPaymentCompletedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BusinessIntelligenceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.BusinessIntelligenceFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.CustomerBusinessIntelligenceDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="p_businessIntelligenceDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BudgetForecastFacade.CurrentTransactionType">
	<summary>Gets the transaction type of CouponFacade.</summary>
	<value><para>Interprise.Framework.Base.Shared.Enum.TransactionType.EcommerceCoupon</para></value>
</member><member name="M:Interprise.Facade.Customer.BudgetForecastFacade.BudgetForecastCategory_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>Contains all changes made to a record. </summary>
	<param name="sender">The object thats excutes this method.</param>
	<param name="e">The event that contains all column changes in a data Table.</param>
	<remarks>
	</remarks>
</member><member name="E:Interprise.Facade.Customer.BaseSalesOrderFacade.CreditLimitChecked">
	<summary>Occurs after customer credit limit has been checked.</summary>
</member><member name="E:Interprise.Facade.Customer.BaseSalesOrderFacade.SalesPricingChanged">
	<summary>Occurs after line item sales price has been updated.</summary>
</member><member name="E:Interprise.Facade.Customer.BaseSalesOrderFacade.BalanceChanged">
	<summary>Occurs after BalanceRate field of transaction has been updated.</summary>
</member><member name="E:Interprise.Facade.Customer.BaseSalesOrderFacade.DropShipReservationConcurrencyOccurred">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Customer.BaseSalesOrderFacade.SalesRepCommission">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.ShippingMethodCode">
	<summary>Gets or sets the code of shipping method.</summary>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.FlatCharge">
	<summary>Gets or sets the flat charge if type is Flat Charge.</summary>
	<remarks><para>The Flat Charge amount.</para></remarks>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.ValueFrom">
	<summary>Gets or sets the minimum of order value bracket.</summary>
	<remarks><para>The minimum amount of order value bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.ValueTo">
	<summary>Gets or sets the maximum amount of order value bracket.</summary>
	<remarks><para>The maximum amount of order value bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.KgFrom">
	<summary>Gets or sets the minimum value for weight bracket.</summary>
	<remarks><para>The minimum value for weight bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.KgTo">
	<summary>Gets or sets the maximum value of weight bracket.</summary>
	<remarks><para>The maximum value of weight bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.Charge">
	<summary>Gets or sets the fix amount or percentage of a bracket.</summary>
	<remarks>
 If type is Order Value(Amount) or Weight, Charge is an amount. If type is Order
 Value(Percentage), Charge is a percentage.
 <para>The fix amount or percentage of a bracket.</para>
	</remarks>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.LbsFrom">
	<summary>Gets or sets the minimum value for weight bracket.</summary>
	<remarks><para>The minimum value for weight bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation.LbsTo">
	<summary>Gets or sets the maximum value of weight bracket.</summary>
	<remarks><para>The maximum value of weight bracket.</para></remarks>
</member><member name="T:Interprise.Facade.Customer.BaseSalesOrderFacade.ShippingMethodInformation">
	<summary>
 Structure used to cache the settings of shipping method of order and invoice
 transaction.
 </summary>
</member><member name="T:Interprise.Facade.Customer.BaseSalesOrderFacade.IncludedItemInCouponInfo">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Customer.BaseSalesOrderFacade.ItemCouponProRateInfo">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.TotalDue">
	<summary>The total amount due of the customer in base currency</summary>
	<value>Returns the total amount due in base currency.</value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.CreditAvailabilityFacade">
	<summary>Gets the instance of CreditAvailabilityFacade class.</summary>
	<value>The instance of CreditAvailabilityFacade class.</value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.CreditAvailableRate">
	<summary>
 The available credit of the customer in base currency
 </summary>
	<value>Decimal</value>
	<returns>Returns the Credit Available amount of the customer in base currency</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.CreditHold">
	<summary>
 Status of the customer if its on Credit hold
 </summary>
	<value>Boolean</value>
	<returns>Returns the flag status of the customer if its on CreditHold</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.CreditLimitRate">
	<summary>
 Credit limit for the customer in base currency
 </summary>
	<value>Decimal</value>
	<returns>Returns the Credit Limit amount for the customer</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.CurrencyCode">
	<summary>
 The currency being used by the customer
 </summary>
	<returns>Returns the currency code of the customer</returns>
	<remarks>This property must be overriden or implemented for it will be the property to define the customer's currency code</remarks>
	<value>The currency ISO code.</value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.DiscountPercent">
	<summary>
 The allowed discount percent
 </summary>
	<value>Decimal</value>
	<returns>Returns the allowed discount percent for the customer</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.DiscountType">
	<summary>
 The type of discount for the transaction
 </summary>
	<value>String</value>
	<returns>Returns the Discount Type to be used in the transaction</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.DocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow)">
	<summary>
 The code that defines the current transaction number
 </summary>
	<param name="transaction">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="lineItemRow">Defines the current header row for this transaction</param>
	<value>String</value>
	<returns>Rerunds the document code of this transaction</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.ExchangeRate">
	<summary>The exchange rate for the transaction.</summary>
	<value>The currency exchange rate used by the transaction.</value>
	<returns>Returns the exchangerate thats to be used in this transaction</returns>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.HeaderRow">
	<summary>Parent row for the transaction.</summary>
	<value>The DataRow of transaction header.</value>
	<returns>Returns the HeaderRow</returns>
	<remarks>
 If type of transaction is Quote, Sales Order and RMA, the header row is the first
 row of
 Interprise.Framework.Customer.DatasetGateway.SalesOrderDataset.CustomerSalesOrderView
 datatable. If type of transaction is Invoice, Credit Memo, Opening Invoice, Opening
 Credit, Batch Invoice and Batch Credit, the header row is the first row of
 Interprise.Framework.Customer.DatasetGateway.InvoiceDataset.CustomerInvoiceView
 datatable.
 </remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsBatch">
	<summary>
 Flag that indicates that the transaction is a batch on invoice or credit.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsSkipLoadingTransactionReceipt">
	<summary>Informs this facade to skip loading Transaction Receipt records during initialization of Transaction Receipt gateway and facade.</summary>
	<value>True if conversion is in progress.</value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsCouponIncludesFreeShipping">
	<summary>
 Indicates that the coupon applied to sales order or invoice includes free
 delivery charge.
 </summary>
	<value>
		<strong>true</strong> if coupon includes free delivery charge; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsRefreshShippingMethodCache">
	<summary>
 Flag that sets if the transaction should refresh the values of ShippingMethodInfo
 structure.
 </summary>
	<value>
		<strong>true</strong> if the values of ShippingMethodInfo structure should be
 refreshed; otherwise <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.OnHold">
	<summary>
 A flag that defines if the transaction is OnHold/InDispute
 </summary>
	<value>Boolean</value>
	<returns>Returns if the transaction is OnHold/InDispute</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.Quantity(Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow)">
	<summary>
 Returns QuantityOrdered or QuantityShipped depending on the transaction type.
 </summary>
	<param name="transaction">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="lineItemRow">Defines the current line item row to be processed</param>
	<value>Decimal</value>
	<returns>Returns either quantity ordered or quantity to be shipped</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.ReceivableCode">
	<summary>Gets the receipt code reserved for this transaction.</summary>
	<value>The receipt code reserved for this transaction.</value>
	<returns>The receivableCode for the transaction</returns>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.ReceiptFacade">
	<summary>Gets or sets the instance of ReceiptFacade class.</summary>
	<value>The instance of ReceiptFacade class.</value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.RelatedTables(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>The related tables to be used in the transaction.</summary>
	<value>String array of datatable names.</value>
	<returns>Returns all the tables thats to be used in the transaction</returns>
	<remarks>
 This property must be overriden or implemented for it will enumerate all the
 related tables for the transaction to be used in the LoadDataset and UpdateDataset
 methods.
 </remarks>
	<param name="transactionType">
 Defines what transaction is currently being created. i.e., Invoice, SalesOrder,
 Quote, etc.
 </param>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.SourceDocumentCode">
	<summary>Gets the original code in which the current document originates from.</summary>
	<value>The original code in which the current document originates from.</value>
	<returns>Returns the source document code/s for this transaction</returns>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.SourceDocumentType">
	<summary>
 Gets the type of document from which the current transaction originates
 from
 </summary>
	<value>The type of document from which the current transaction originates from.</value>
	<returns>Returns what type of document the current transaction originates from</returns>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.Balance">
	<summary>
 The balance for this transaction in home currency
 </summary>
	<value>Decimal</value>
	<returns>Returns the balance of the current transaction in home currency</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.OriginalTotalRate">
	<summary>
 The original total before the amounts has been changed.
 </summary>
	<value>Decimal</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.TotalRate">
	<summary>
 The total for this transaction in home currency
 </summary>
	<value>Decimal</value>
	<returns>Returns the total of the current transaction in home currency</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.TransactionReceiptListFacade">
	<summary>Gets or sets the instance of TransactionReceiptListFacade class.</summary>
	<value>The instance of TransactionReceiptListFacade class.</value>
	<remarks>
 The instance of TransactionReceiptListFacade is created or assigned if the sales
 order or invoice has receipt/payment.
 </remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.TransactionType">
	<summary>Gets or sets the type of transaction being created.</summary>
	<value>
		<para>The type of transaction being created. Following are the possible
    types.</para>
		<list type="bullet">
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.Quote</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.Invoice</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.CreditMemo</item>
			<item>
        Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerOpeningBalance</item>
		</list>
	</value>
	<returns>Returns and sets the transactionType of the current transaction</returns>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.DefaultShipToWarehouse">
	<summary>
 Returns a <strong>String</strong> containing the default warehouse where the items will be picked.
 It gets the warehouse specified in the header of the transaction. If none was specified there, 
 it gets the warehouse specified in the customer ship to record.
 </summary>
	<value>The default ship to warehouse.</value>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.InsertLineItem(System.Int32)">
	<summary>Procedure to Insert the specified line items to invoice.</summary>
	<remarks>Assigns the line number of the item row for reference</remarks>
	<example>
    The following codes shows how to implement the InsertLineItem method. 
    <code lang="VB" title="InsertLineItem" description="Inserts a new line item for the transaction.">
 Dim lineItemRow As DataRowView
 Dim nextLineNo As Integer
 lineItemRow = InsertLineItem(nextLineNo)
    </code>
		<code lang="CS" title="InsertLineItem" description="Inserts a new line item for the transaction.">
 DataRowView lineItemRow;
 int nextLineNo;
 lineItemRow = InsertLineItem(nextLineNo);
    </code>
	</example>
	<returns>The <strong>DataRowView</strong> if inserted line item.</returns>
	<param name="lineNo">
 An <strong>Integer</strong> that represents the current line number the item row
 belongs to.
 </param>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.PaymentTermCode">
	<summary>Gets the payment term code of sales order or invoice transaction.</summary>
	<value>The payment term code of sales order or invoice transaction.</value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsFreightOverwrite">
	<summary>Indicates that freight charge was overwritten.</summary>
	<value>
		<strong>true</strong> if freight charge was overwritten; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.ContactCode">
	<summary>
 Returns a <strong>String</strong> containing the contact code of the transaction.
 It gets the contactcode specified in the header of the transaction. 
 </summary>
	<value>The contact code of the transaction.</value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsTransactionReceiptLoaded">
	<summary>Informs this facade that CustomerTransactionReceipt records has been read already.</summary>
	<value>True if already read.</value>
	<remarks>This is being set to True when the system connects to the database and read has been done from CustomerTransactionReceipt table.
 This is set to True whether or not the read returns a record.</remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsFreightValueUserEntered">
	<summary>Informs this facade that the freight value has been entered by the user.</summary>
	<value>True if user entered.</value>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.TransactionDate">
	<summary>
the date to consider when computing taxes
 </summary>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.AppliedCreditsAmount">
	<summary>
 The balance of the SO/SI after appliying customer credits
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.AppliedCreditsAmountRate">
	<summary>
 The balance rate of the SO/SI after appliying customer credits
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsItemDefaultExist(System.String,System.String,System.String)">
	<summary>
 Property is used to check if the selected item on the order/invoice transaction has already been retrieved of default values
 </summary>
	<param name="itemCode">Item Code of the item to be checked.</param>
	<param name="umCode">Unit Measure Code of the item to be checked.</param>
	<value>Boolean</value>
	<returns>Returns a value of True if match is found on the the m_tempItemDetailTable. Otherwise a False value is returned</returns>
	<remarks>Property is part of code optimization for order/invoice processing.</remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.ReservationDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.ReservationFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.CustomerInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsIgnoreStockLevels">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.IsDropShipTransaction(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.SmallDateTimeMax">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.SmallDateTimeMaxValue">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.OriginalAllowFractionalValue">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseSalesOrderFacade.OverrideBundlePrice">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AssignAmountPaid(System.Decimal,System.Decimal)">
	<summary>
 Assigns the total amount paid if the payment is made in the  sales order form.
 </summary>
	<remarks>Override this in the derived class.</remarks>
	<example>
    The following codes shows how to implement the AssignAmountPaid method.
    <code lang="VB" title="AssignAmountPaid" description="Assigns the amount of the receipt to be applied/reserved to the transaction.">
 Dim m_salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDataset)
 m_salesOrderFacade.AssignAmountPaid(100, 100)
    </code>
		<code lang="VB" title="AssignAmountPaid" description="Assigns the amount of the receipt to be applied/reserved to the transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade m_salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDataset());
 m_salesOrderFacade.AssignAmountPaid(100, 100);
    </code>
	</example>
	<param name="totalPaid">A <strong>Decimal</strong> containing the total amount paid in home currency.</param>
	<param name="totalPaidRate">A <strong>Decimal</strong> containing the total amount paid in customer's currency.</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AssignItemMatrix(System.Data.DataRow[],System.Int32,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>Assigns matrix items.</summary>
	<remarks>This property must be overriden or implemented for it will be used in processing matrix items</remarks>
	<example>
		<para>The following codes shows how to implement the AssignItemMatrix
    method.</para>
		<code lang="VB" title="AssignItemMatrix" description="Adds the selected matrix items to the transaction item lines.">
 Dim itemRows() As DataRow
 Dim matrixBatch As Integer = 1
 Dim transactionType As Framework.Base.Shared.Enum.TransactionType = Framework.Base.Shared.TransactionType.SalesOrder
 Dim errMsg As String
 
 AssignItemMatrix(itemRows, matrixBatch, transactionType, errMsg)
    </code>
		<code lang="CS" title="AssignItemMatrix" description="Adds the selected matrix items to the transaction item lines.">
 DataRow[] itemRows;
 int matrixBatch = 1;
 Framework.Base.Shared.Enum.TransactionType transactionType = Framework.Base.Shared.TransactionType.SalesOrder;
 String errMsg;
 
 void[,,,] AssignItemMatrix = New void[itemRows, matrixBatch, transactionType, errMsg];
    </code>
	</example>
	<param name="itemRows">Defines the item rows which needs to be processed</param>
	<param name="transactionType">The type of transaction the current form is creating</param>
	<param name="errMsg">Error message reference</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AssignItemKit(System.Data.DataRow,Interprise.Framework.Base.DatasetComponent.ItemKitDataset.KitConfiguratorRow[],System.Data.DataRowView,System.String,System.Decimal,System.Decimal,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@,System.String)">
	<summary>Procedure to assign the selected Item Kit.</summary>
	<example>
		<para>The following codes shows how to implement the AssignItemKit method.</para>
		<code lang="VB" title="AssignItemKit" description="Adds the selected kit along with its components to the transaction item lines.">
 Dim itemKitRow As DataRow
 Dim kitItemRows() As Framework.Base.DatasetGateway.ItemKitDatasetGateway.KitConfiguratorRow
 Dim lineItemRow As DataRowView
 Dim pricingType As String = "Item Price"
 Dim quantity As Decimal = 10
 Dim salesPriceRate As Decimal = 100
 Dim transactionType As Framework.Base.Shared.Enum.TransactionType = Framework.Base.Shared.TransactionType.SalesOrder
 Dim errMsg As String
 Dim warehouseCode As String = "MAIN"
 
 AssignItemKit(itemKitRow, kitItemRows, lineItemRow, pricingType, quantity, salesPriceRate, transactionType, transactionType, errMsg, warehouseCode)
    </code>
		<code lang="CS" title="AssignItemKit" description="Adds the selected kit along with its components to the transaction item lines.">
 DataRow itemKitRow;
 Framework.Base.DatasetGateway.ItemKitDatasetGateway.KitConfiguratorRow[] kitItemRows;
 DataRowView lineItemRow;
 string pricingType = "Item Price";
 decimal quantity = 10;
 decimal salesPriceRate = 100;
 Framework.Base.Shared.Enum.TransactionType transactionType = Framework.Base.Shared.TransactionType.SalesOrder;
 string errMsg;
 string warehouseCode = "MAIN";
 
 void[,,,,,,,,,] AssignItemKit = new void[itemKitRow, kitItemRows, lineItemRow, pricingType, quantity, salesPriceRate, pricingType, transactionType, errMsg, warehouseCode];
    </code>
	</example>
	<param name="itemKitRow">The item row to be added</param>
	<param name="kitItemRows">The item rows to be added</param>
	<param name="lineItemRow">The invoice row to be processed</param>
	<param name="pricingType">The type of pricing for this transaction</param>
	<param name="quantity">The quantity of the item to be processed</param>
	<param name="salesPriceRate">The sales price of the item to be processed in customer currency</param>
	<param name="transactionType">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
	<param name="errMsg">Error Message</param>
	<param name="warehouseCode">The code of the warehouse used in this transaction</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AssignWebStore(System.String)">
	<summary>
	</summary>
	<param name="webStoreCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.CheckCreditLimit(System.Boolean)">
	<summary>
 Checks the credit limit of the customer
 </summary>
	<param name="isControl">Flag that defines if the calling method is from a control class or not</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeCommission(Interprise.Framework.Customer.Shared.Structure.Commission@)">
	<summary>
 Computes commission amount and rate.
 </summary>
	<example>
		<code lang="VB" title="ComputeCommission" description="Computes the commission amount for the sales rep.">
 Dim commissionInfo As Interprise.Framework.Customer.Shared.Structure.Commission
 
 commissionInfo.commissionPercent = 10
 commissionInfo.source = "Internet"
 commissionInfo.extPrice = 100
 commissionInfo.extPriceRate = 100
 commissionInfo.profit = 10
 commissionInfo.profitRate = 10
 commissionInfo.applyTo = "Sales"
 commissionInfo.currencyCode = "USD"
 commissionInfo.commissionable = True
 commissionInfo.isManual = True
 
 ComputeCommission(commissionInfo)
    </code>
		<code lang="CS" title="ComputeCommission" description="Computes the commission amount for the sales rep.">
 Interprise.Framework.Customer.Shared.Structure.Commission commissionInfo;
 
 commissionInfo.commissionPercent = 10;
 commissionInfo.source = "Internet";
 commissionInfo.extPrice = 100;
 commissionInfo.extPriceRate = 100;
 commissionInfo.profit = 10;
 commissionInfo.profitRate = 10;
 commissionInfo.applyTo = "Sales";
 commissionInfo.currencyCode = "USD";
 commissionInfo.commissionable = true;
 commissionInfo.isManual = true;
 
 ComputeCommission(commissionInfo);
    </code>
	</example>
	<param name="commissionInfo">Structure for processing the commission</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeCouponDiscount(Interprise.Framework.Customer.Shared.Structure.CouponInfo,Interprise.Facade.Customer.BaseSalesOrderFacade.IncludedItemInCouponInfo[],System.Decimal,System.Decimal@,System.Decimal@)">
	<summary>
 Computes the discount for the coupon
 </summary>
	<param name="coupon">Structure CouponInfo</param>
	<param name="includedItemInCoupon">Structure IncludedItemInCouponInfo</param>
	<param name="totalDue">Total amount for the coupon</param>
	<param name="couponDiscount">Discount for the coupon in home currency</param>
	<param name="couponDiscountRate">Discount for the coupon in customer currency</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeCouponDiscount(Interprise.Framework.Customer.Shared.Structure.CouponInfo,System.Decimal,System.Decimal@,System.Decimal@)">
	<summary>
 Computes the discount for the coupon
 </summary>
	<param name="coupon">Structure CouponInfo</param>
	<param name="discountableAmt">The max allowed amount for the coupon discount</param>
	<param name="couponDiscount">Discount for the coupon in home currency</param>
	<param name="couponDiscountRate">Discount for the coupon in customer currency</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeDiscount">
	<summary>Computes term discounts</summary>
	<example>
		<para>The following codes shows how to implement the ComputeDiscount method.</para>
		<code lang="VB" title="ComputeDiscount" description="Computes and assigns the discount amount for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeDiscount()
    </code>
		<code lang="CS" title="ComputeDiscount" description="Computes and assigns the discount amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ComputeDiscount();
    </code>
	</example>
	<remarks>
 Method is overloaded in Interprise.Facade.Customer.SalesOrderFacade and
 Interprise.Facade.Customer.InvoiceFacade
 </remarks>
	<seealso cref="M:Interprise.Facade.Customer.SalesOrderFacade.ComputeDiscount">ComputeDiscount Method (Interprise.Facade.Customer.SalesOrderFacade)</seealso>
	<seealso cref="M:Interprise.Facade.Customer.InvoiceFacade.ComputeDiscount">ComputeDiscount Method (Interprise.Facade.Customer.InvoiceFacade)</seealso>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeFreight">
	<summary>
 Procedure to refresh the freight amount.
 </summary>
	<example>
		<para>The following codes shows how to implement the ComputeFreight method.</para>
		<code lang="VB" title="ComputeFreight" description="Computes and assigns the freight amount for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeFreight()
    </code>
		<code lang="CS" title="ComputeFreight" description="Computes and assigns the discount amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeFreight();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeFreight(System.Decimal@,System.String)">
	<summary>
 Computes the freight amounts of the transaction
 </summary>
	<returns>True if freight amount was computed, otherwise False</returns>
	<example>
		<para>The following codes shows how to implement the ComputeFreight method.</para>
		<code lang="VB" title="ComputeFreight " description="The following codes shows how to implement the ComputeFreight method.">
		</code>
		<code lang="VB" title="ComputeFreight" description="Assigns the freight amount for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 
 Dim freightAmount As Decimal = 20
 salesOrderFacade.ComputeFreight(freightAmount)
    </code>
		<code lang="VB" title="ComputeFreight" description="Assigns the freight amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 
 Decimal freightAmount = 20;
 salesOrderFacade.ComputeFreight(freightAmount);
    </code>
	</example>
	<param name="freight">The freight amount in home currency</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeFreightCharge(System.String,System.Decimal,System.Decimal,System.Decimal@,System.String,System.Boolean)">
	<summary>
 Computes the freight amounts of the transaction and checks if the transaction can be freight charged
 </summary>
	<returns>True if freight amount is to be charged, otherwise False</returns>
	<remarks>System.Boolean</remarks>
	<example>
		<para>The following codes shows how to implement the ComputeFreightCharge
    method.</para>
		<code lang="VB" title="ComputeFreightCharge" description="Calls ComputeFreightCharge method to check if freight amount should be charged.">
 Dim shippingMethodCode As String = "NextDayDelivery"
 Dim subTotal As Decimal = 100
 Dim totalWeight As Decimal = 12
 Dim freight As Decimal = 13.5
 Dim m_isRefreshShippingMethodCache As Boolean = False
 
 Dim ComputeFreight As Boolean = ComputeFreightCharge(shippingMethodCode, subTotal, totalWeight, freight, m_isRefreshShippingMethodCache)
    </code>
		<code lang="CS" title="ComputeFreightCharge" description="Calls ComputeFreightCharge method to check if freight amount should be charged.">
 string shippingMethodCode = "NextDayDelivery";
 decimal subTotal = 100;
 decimal totalWeight = 12;
 decimal freight = 13.5;
 bool m_isRefreshShippingMethodCache = false;
 
 bool ComputeFreight = ComputeFreightCharge(shippingMethodCode, subTotal, totalWeight, freight, m_isRefreshShippingMethodCache);
    </code>
	</example>
	<param name="shippingMethodCode">The shipping method in use for the transaction</param>
	<param name="subTotal">The sub total of the transaction</param>
	<param name="totalWeight">The total weight of items</param>
	<param name="freight">The freight amount in home currency</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.OnComputeFreight(System.String@,System.Decimal@,System.Decimal@,System.Boolean@)">
	<summary>
	</summary>
	<param name="shippingMethodCode">The method of shipping for this transaction</param>
	<param name="subtotal">The net amount for the transaction in home currency</param>
	<param name="totalWeight">The weight of the items to be shipped</param>
	<param name="isCouponIncludesFreeShipping">Flag that defines if the Coupon should include Free Shipping</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.OnComputeFreight(System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@)">
	<summary>
	</summary>
	<param name="shippingMethodCode">The method of shipping for this transaction</param>
	<param name="subtotal">The net amount for the transaction in home currency</param>
	<param name="totalWeight">The weight of the items to be shipped</param>
	<param name="isCouponIncludesFreeShipping">Flag that defines if the Coupon should include Free Shipping</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeFreightTax">
	<summary>
 Computes the Freight Tax
 </summary>
	<example>
		<para>The following codes shows how to implement the ComputeFreightTax
    method.</para>
		<code lang="VB" title="ComputeFreightTax" description="Computes and assigns the freight tax amount for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeFreightTax()
    </code>
		<code lang="CS" title="ComputeFreightTax" description="Computes and assigns the freight tax amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeFreightTax();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeOtherTax">
	<summary>
 Computes Other Taxes
 </summary>
	<example>
		<para>The following codes shows how to implement the ComputeOtherTax method.</para>
		<code lang="VB" title="ComputeOtherTax" description="Computes and assigns the other tax amount for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeOtherTax()
    </code>
		<code lang="CS" title="ComputeOtherTax" description="Computes and assigns the other tax amount for the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeOtherTax();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeSalesRepCommission(Interprise.Facade.Customer.BaseSalesOrderFacade.SalesRepCommission@)">
	<summary>
 Computes sales rep total commission and commission rate.
 </summary>
	<param name="salesRepCommissionInfo">Structure SalesRepCommission</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeSalesRepCommissions">
	<summary>
 Computes Sales Rep Commissions
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeSettlementDiscountedExtPrice(System.Decimal@,System.Decimal@)">
	<summary>
 Computes the discount for the transaction
 </summary>
	<example>
		<para>The following codes shows how to implement the
    ComputeSettlementDiscountedExtPrice method.</para>
		<code lang="VB" title="ComputeSettlementDiscountedExtPrice" description="Computes and allowed potentail discount for the current transaction.">
 Dim extPrice As Decimal = 100
 Dim extPriceRate As Decimal = 100
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeSettlementDiscountedExtPrice(extPrice, extPriceRate)
    </code>
		<code lang="CS" title="ComputeSettlementDiscountedExtPrice" description="Computes and allowed potentail discount for the current transaction.">
 decimal extPrice = 100;
 decimal extPriceRate = 100;
 
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ComputeSettlementDiscountedExtPrice(extPrice, extPriceRate);
    </code>
	</example>
	<param name="extPrice">The net amount of the item to be processed in home currency</param>
	<param name="extPriceRate">The net amount of the item to be processed in customer currency</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeTransactionDetail(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Compute the ExtPrice and Tax amounts
 </summary>
	<example>
		<para>The following codes shows how to implement the ComputeTransactionDetail
    method.</para>
		<code lang="VB" title="ComputeTransactionDetail" description="Computes the extended price and tax amounts for the row being processed.">
 Dim lineItem As System.Data.DataRow
 Dim transaction As Framework.Base.Shared.Enum.TransactionType = [Enum].TransactionType.SalesOrder
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeTransactionDetail(lineItem, transaction)
    </code>
		<code lang="CS" title="ComputeTransactionDetail" description="Computes and allowed potentail discount for the current transaction.">
 System.Data.DataRow lineItem;
 Framework.Base.Shared.Enum.TransactionType transaction = Enum.TransactionType.SalesOrder;
 
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ComputeTransactionDetail(lineItem, transaction);
    </code>
	</example>
	<param name="lineItem">The item row to be processed</param>
	<param name="transaction">Defines what transaction is currently being created. i.e., Invoice, SalesOrder, Quote, etc</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeTransactionDetails">
	<summary>
 Computes transaction details
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeTotals(System.Data.DataRow,System.Data.DataTable,System.Boolean,System.Boolean)">
	<summary>
 Compute the total amount due
 </summary>
	<example>
		<para>The following codes shows how to implement the ComputeTotals method.</para>
		<code lang="VB" title="ComputeTotals" description="Calculates the total amounts of the transaction including the freight, total tax, total due and balance.">
 Dim header As DataRow
 Dim dtblDetail As DataTable
 Dim isClearDiscount As Boolean = True
 Dim isRecalculateFreight As Boolean = True
 
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeTotals(header, dtblDetail, isClearDiscount, isRecalculateFreight)
    </code>
		<code lang="CS" title="ComputeTotals" description="Calculates the total amounts of the transaction including the freight, total tax, total due and balance.">
 DataRow header;
 DataTable dtblDetail;
 bool isClearDiscount = True;
 bool isRecalculateFreight = True;
 
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.ComputeTotals(header, dtblDetail, isClearDiscount, isRecalculateFreight);
    </code>
	</example>
	<param name="header">Transaction header row to be processed</param>
	<param name="dtblDetail">The detail table for the transaction</param>
	<param name="isClearDiscount">Flag that defines if the discount values should be cleared</param>
	<param name="isRecalculateFreight">Flag that defines if the Freight amounts should be recalculated</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ComputeTotals(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Compute the total amount due
 </summary>
	<example>
		<code lang="VB" title="ComputeTotals" description="Recompute totals to remove discount if no payment was made.">
 Dim isClearDiscount As Boolean = True
 Dim isCheckCreditLimit As Boolean = True
 Dim isRecalculateFreight As Boolean = True
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.ComputeTotals(isClearDiscount, isCheckCreditLimit, isRecalculateFreight)
    </code>
		<code lang="CS" title="ComputeTotals" description="Recompute totals to remove discount if no payment was made.">
 bool isClearDiscount = true;
 bool isCheckCreditLimit = true;
 bool isRecalculateFreight = true;
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.ComputeTotals(isClearDiscount, isCheckCreditLimit, isRecalculateFreight);
    </code>
	</example>
	<param name="isClearDiscount">Flag that defines if the discount values should be cleared</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ProcessTaxSummary(System.Data.DataRow,Interprise.Framework.Base.DatasetComponent.BaseDataset)">
	<summary>
 This method is used to compute transaction's tax summary and tax group amounts
 </summary>
	<param name="header">The transaction being updated</param>
	<param name="targetDS">Normally has a value of Nothing. This will only have a value when order is being duplicated.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.CreateParameterSet(System.String[])">
	<summary>
 Creates the parameter set that is used when calling the LoadDataset and UpdateDataset methods
 </summary>
	<param name="relatedTables">Enumerate all the related tables to be processed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetCustomerStatistics(System.String,System.Data.DataRow)">
	<summary>
 Gets customer statistics.
 </summary>
	<param name="itemCode">Item to be processed</param>
	<param name="lineItemRow">Current row in which the item belongs to</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetSalesPrice(System.String,System.String@,System.String,System.String,System.Decimal,System.DateTime,System.Decimal,System.Decimal,System.Boolean@,System.Decimal@,System.Boolean@,System.Decimal@,System.Decimal@,System.String@,System.Decimal@,System.Decimal@,System.Decimal@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@)">
	<summary>
 Gets the sales price of the item
 </summary>
	<example>
		<para>The following codes shows how to implement the GetSalesPrice method.</para>
		<code lang="VB" title="GetSalesPrice" description="Get the sales price for a particular item.">
 Dim itemCode As String = "ITEM-1A"
 Dim um As String = "EACH"
 Dim umQty As Decimal = 1
 Dim documentDate As Date = Date.Today
 Dim quantity As Decimal = 10
 Dim matrixGroupQuantity As Decimal = 2
 '
 'By-Reference variables
 Dim customerCode As String = "CUST-000001"
 Dim currencyCode As String = "USD"
 
 Dim byTotalQty As Boolean
 Dim salesPrice As Decimal
 Dim isSalesPriceInBaseCurrency As Boolean
 Dim regularPrice As Decimal
 Dim promotionalPrice As Decimal
 Dim pricing As String
 Dim percent As Decimal
 Dim discount As Decimal
 Dim categoryDiscount As Decimal
 Dim customerItemCode As System.String
 Dim customerItemDescription As String
 Dim InventoryItemDescription As String
 Dim basePricingCost As Decimal
 Dim baseCostingMethodCost As Decimal
 Dim isInventorySpecialPriceExpired As Boolean
 Dim isCustomerSpecialPriceExpired As Boolean
 GetSalesPrice(customerCode, currencyCode, itemCode, um, umQty, documentDate, quantity, matrixGroupQuantity, byTotalQty, salesPrice, isSalesPriceInBaseCurrency, regularPrice, promotionalPrice, pricing, percent, discount, categoryDiscount, customerItemCode, customerItemDescription, InventoryItemDescription, basePricingCost, baseCostingMethodCost, isInventorySpecialPriceExpired, isCustomerSpecialPriceExpired)
    </code>
		<code lang="CS" title="GetSalesPrice" description="Get the sales price for a particular item.">
 string itemCode = "ITEM-1A";
 string um = "EACH";
 Decimal umQty = 1;
 DateTime documentDate;
 Date.Today;
 Decimal quantity = 10;
 Decimal matrixGroupQuantity = 2;
 //
 //By-Reference variables
 string customerCode = "CUST-000001";
 string currencyCode = "USD";
 
 bool byTotalQty;
 Decimal salesPrice;
 bool isSalesPriceInBaseCurrency;
 Decimal regularPrice;
 Decimal promotionalPrice;
 string pricing;
 Decimal percent;
 Decimal discount;
 Decimal categoryDiscount;
 string customerItemCode;
 string customerItemDescription;
 string InventoryItemDescription;
 Decimal basePricingCost;
 Decimal baseCostingMethodCost;
 bool isInventorySpecialPriceExpired;
 bool isCustomerSpecialPriceExpired;
 GetSalesPrice(customerCode, currencyCode, itemCode, um, umQty, documentDate, quantity, matrixGroupQuantity, byTotalQty, salesPrice, isSalesPriceInBaseCurrency, regularPrice, promotionalPrice, pricing, percent, discount, categoryDiscount, customerItemCode, customerItemDescription, InventoryItemDescription, basePricingCost, baseCostingMethodCost, isInventorySpecialPriceExpired, isCustomerSpecialPriceExpired);
    </code>
	</example>
	<param name="customerCode">The code that represents the customer </param>
	<param name="currencyCode">The currency code of the customer</param>
	<param name="itemCode">Code that represents the item to be processed</param>
	<param name="um">The unit of measure of the item</param>
	<param name="umQty">The quantity of which the unit measure contains</param>
	<param name="documentDate">The date of the transaction</param>
	<param name="quantity">The quantity to be processed for the item</param>
	<param name="salesPrice">The price in which the item is being sold</param>
	<param name="isSalesPriceInBaseCurrency">Flag that defines if the sales price is in home currency</param>
	<param name="regularPrice">The regular salesprice of an item.</param>
	<param name="promotionalPrice">The promotional pricing that is taking effect on the date specified.</param>
	<param name="pricing">The type of pricing to be used</param>
	<param name="percent">The percent used when setting the sales price</param>
	<param name="discount">The allowed discount for the item</param>
	<param name="categoryDiscount">The discount applied if the item belongs to a particular category</param>
	<param name="customerItemDescription">The customer's description of the item</param>
	<param name="basePricingCost">The pricing cost of the item in home currency</param>
	<param name="isInventorySpecialPriceExpired">Flag that defines if the inventory's special pricing has expired</param>
	<param name="isCustomerSpecialPriceExpired">Flag that defines if the customer's special pricing has expired</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetSalesPrice(System.String,System.String@,System.String,System.String,System.Decimal,System.DateTime,System.Decimal,System.Decimal,Interprise.Framework.Base.Shared.Enum.DefaultPricing,Interprise.Framework.Base.Shared.Enum.PricingMethod,System.String,System.Boolean@,System.Decimal@,System.Boolean@,System.Decimal@,System.Decimal@,System.String@,System.Decimal@,System.Decimal@,System.Decimal@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@,System.Decimal@)">
	<summary>Gets the sales price of the item</summary>
	<example>
		<para>The following codes shows how to implement the GetSalesPrice method.</para>
		<code lang="VB" title="GetSalesPrice" description="Get the sales price for a particular item.">
 Dim customerCode As String = "CUST-000001"
 Dim itemCode As String = "ITEM-1A"
 Dim um As String = "EACH"
 Dim umQty As Decimal = 1
 Dim documentDate As Date = Date.Today
 Dim quantity As Decimal = 10
 Dim matrixGroupQuantity As Decimal = 2
 Dim defaultPricing As Framework.Base.Shared.Enum.DefaultPricing
 Dim pricingMethod As Framework.Base.Shared.Enum.PricingMethod
 Dim priceList As String
 '
 'By-Reference variables
 Dim currencyCode As String
 Dim byTotalQty As Boolean
 Dim salesPrice As Decimal
 Dim isSalesPriceInBaseCurrency As Boolean
 Dim regularPrice As Decimal
 Dim promotionalPrice As Decimal
 Dim pricing As String
 Dim percent As Decimal
 Dim discount As Decimal
 Dim categoryDiscount As Decimal
 Dim customerItemCode As System.String
 Dim customerItemDescription As String
 Dim inventoryItemDescription As String
 Dim basePricingCost As Decimal
 Dim baseCostingMethodCost As Decimal
 Dim isInventorySpecialPriceExpired As Boolean
 Dim isCustomerSpecialPriceExpired As Boolean
 
 GetSalesPrice(customerCode, _
 currencyCode, _
 itemCode, _
 um, _
 umQty, _
 documentDate, _
 quantity, _
 matrixGroupQuantity, _
 DefaultPricing.None, _
 PricingMethod.None, _
 String.Empty, _
 byTotalQty, _
 salesPrice, _
 isSalesPriceInBaseCurrency, _
 regularPrice, _
 promotionalPrice, _
 pricing, _
 percent, _
 discount, _
 categoryDiscount, _
 customerItemCode, _
 customerItemDescription, _
 InventoryItemDescription, _
 basePricingCost, _
 baseCostingMethodCost, _
 isInventorySpecialPriceExpired, _
 isCustomerSpecialPriceExpired)
    </code>
		<code lang="VB" title="GetSalesPrice" description="Get the sales price for a particular item.">
 String customerCode = "CUST-000001";
 String itemCode = "ITEM-1A";
 String um = "EACH";
 Decimal umQty = 1;
 DateTime documentDate;
 Date.Today;
 Decimal quantity = 10;
 Decimal matrixGroupQuantity = 2;
 Framework.Base.Shared.Enum.DefaultPricing defaultPricing;
 Framework.Base.Shared.Enum.PricingMethod pricingMethod;
 String priceList;
 //
 //By-ReferenceVariables
 String currencyCode;
 bool byTotalQty;
 Decimal salesPrice;
 bool isSalesPriceInBaseCurrency;
 Decimal regularPrice;
 Decimal promotionalPrice;
 String pricing;
 Decimal percent;
 Decimal discount;
 Decimal categoryDiscount;
 String customerItemCode;
 String customerItemDescription;
 String inventoryItemDescription;
 Decimal basePricingCost;
 Decimal baseCostingMethodCost;
 bool isInventorySpecialPriceExpired;
 bool isCustomerSpecialPriceExpired;
 GetSalesPrice(customerCode, currencyCode, itemCode, um, umQty, documentDate, quantity, matrixGroupQuantity, DefaultPricing.None, PricingMethod.None, String.Empty, byTotalQty, salesPrice, isSalesPriceInBaseCurrency, regularPrice, promotionalPrice, pricing, percent, discount, categoryDiscount, customerItemCode, customerItemDescription, InventoryItemDescription, basePricingCost, baseCostingMethodCost, isInventorySpecialPriceExpired, isCustomerSpecialPriceExpired);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetPrice(System.String,System.String@,System.String,System.String,System.Decimal,System.DateTime,System.Decimal,System.Decimal,Interprise.Framework.Base.Shared.Enum.DefaultPricing,Interprise.Framework.Base.Shared.Enum.PricingMethod,System.String,System.Boolean@,System.Decimal@,System.Boolean@,System.Decimal@,System.Decimal@,System.String@,System.Decimal@,System.Decimal@,System.Decimal@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@)">
	<summary>Gets the sales price of the item</summary>
	<example>
		<para>The following codes shows how to implement the GetPrice method.</para>
		<code lang="VB" title="GetPrice" description="Get the sales price for a particular item.">
 Dim customerCode As String = "CUST-000001"
 Dim itemCode As String = "ITEM-1A"
 Dim um As String = "EACH"
 Dim umQty As Decimal = 1
 Dim documentDate As Date = Date.Today
 Dim quantity As Decimal = 10
 Dim matrixGroupQuantity As Decimal = 2
 Dim defaultPricing As Framework.Base.Shared.Enum.DefaultPricing
 Dim pricingMethod As Framework.Base.Shared.Enum.PricingMethod
 Dim priceList As String
 '
 'By-Reference variables
 Dim currencyCode As String
 Dim byTotalQty As Boolean
 Dim salesPrice As Decimal
 Dim isSalesPriceInBaseCurrency As Boolean
 Dim regularPrice As Decimal
 Dim promotionalPrice As Decimal
 Dim pricing As String
 Dim percent As Decimal
 Dim discount As Decimal
 Dim categoryDiscount As Decimal
 Dim customerItemCode As System.String
 Dim customerItemDescription As String
 Dim inventoryItemDescription As String
 Dim basePricingCost As Decimal
 Dim baseCostingMethodCost As Decimal
 Dim isInventorySpecialPriceExpired As Boolean
 Dim isCustomerSpecialPriceExpired As Boolean
 
 GetPrice(customerCode, _
 currencyCode, _
 itemCode, _
 um, _
 umQty, _
 documentDate, _
 quantity, _
 matrixGroupQuantity, _
 DefaultPricing.None, _
 PricingMethod.None, _
 String.Empty, _
 byTotalQty, _
 salesPrice, _
 isSalesPriceInBaseCurrency, _
 regularPrice, _
 promotionalPrice, _
 pricing, _
 percent, _
 discount, _
 categoryDiscount, _
 customerItemCode, _
 customerItemDescription, _
 InventoryItemDescription, _
 basePricingCost, _
 baseCostingMethodCost, _
 isInventorySpecialPriceExpired, _
 isCustomerSpecialPriceExpired)
    </code>
		<code lang="VB" title="GetPrice" description="Get the sales price for a particular item.">
 String customerCode = "CUST-000001";
 String itemCode = "ITEM-1A";
 String um = "EACH";
 Decimal umQty = 1;
 DateTime documentDate;
 Date.Today;
 Decimal quantity = 10;
 Decimal matrixGroupQuantity = 2;
 Framework.Base.Shared.Enum.DefaultPricing defaultPricing;
 Framework.Base.Shared.Enum.PricingMethod pricingMethod;
 String priceList;
 //
 //By-ReferenceVariables
 String currencyCode;
 bool byTotalQty;
 Decimal salesPrice;
 bool isSalesPriceInBaseCurrency;
 Decimal regularPrice;
 Decimal promotionalPrice;
 String pricing;
 Decimal percent;
 Decimal discount;
 Decimal categoryDiscount;
 String customerItemCode;
 String customerItemDescription;
 String inventoryItemDescription;
 Decimal basePricingCost;
 Decimal baseCostingMethodCost;
 bool isInventorySpecialPriceExpired;
 bool isCustomerSpecialPriceExpired;
 GetPrice(customerCode, currencyCode, itemCode, um, umQty, documentDate, quantity, matrixGroupQuantity, DefaultPricing.None, PricingMethod.None, String.Empty, byTotalQty, salesPrice, isSalesPriceInBaseCurrency, regularPrice, promotionalPrice, pricing, percent, discount, categoryDiscount, customerItemCode, customerItemDescription, InventoryItemDescription, basePricingCost, baseCostingMethodCost, isInventorySpecialPriceExpired, isCustomerSpecialPriceExpired);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetShippingMethodInfo(System.String,System.Boolean,System.String)">
	<summary>
 Process shipping method for this transaction
 </summary>
	<param name="shippingMethodCode">The code that represents the shipping method</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetTax(System.String,System.String,System.String,System.String,System.String,System.Int32)">
	<summary>
 Gets Accounts Receivable (AR) tax
 </summary>
	<param name="taxCode">The code that represents the tax</param>
	<param name="shipToPostalCode">The postal code of the ship to address</param>
	<param name="shipToCity">The city of the ship to address</param>
	<param name="shipToCountryCode">The country code of the ship to address</param>
	<param name="ItemCode">The item code to check if it is exempted</param> 'addded by: dwight.b
 <returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.LoadGetTax">
	<summary>
 Added by rachel.g &gt; Gets all TaxCode(for Tax Translation) when order date changed. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.RecalculateBaseCurrencyFields">
	<summary>
 Recalculates Base Currency Fields
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.RecalculateTransaction">
	<summary>
 Recalculates all transactions amounts/values
 </summary>
	<example>
		<para>The following codes shows how to implement the RecalculateTransaction
    method.</para>
		<code lang="VB" title="RecalculateTransaction" description="Calls methods to recompute all values for the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.RecalculateTransaction()
    </code>
		<code lang="CS" title="RecalculateTransaction" description="Calls methods to recompute all values for the current transaction..">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.RecalculateTransaction();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.SetInventoryStockTotal(System.String)">
	<summary>
 Updates the inventory stock totals
 </summary>
	<example>
		<para>The following codes shows how to implement the SetInventoryStockTotal
    method.</para>
		<code lang="VB" title="SetInventoryStockTotal" description="Updates the stock quantities of all items included in the transaction specified.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.SetInventoryStockTotal("SO-000001")
    </code>
		<code lang="CS" title="SetInventoryStockTotal" description="Updates the stock quantities of all items included in the transaction specified.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.SetInventoryStockTotal("SO-000001");
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.SetSalesPrice(System.Data.DataRowView,System.Boolean,System.Boolean@)">
	<summary>
 Set the SalesPrice of item for the current customer
 </summary>
	<remarks>
		<para>FieldNames of CustomerSalesOrders and CustomerInvoice tables must be the
    same, because this function is shared on Orders and Invoices module.</para>
		<para>Method is overloaded on Interprise.Facade.Customer.SalesOrderFacade and
    Interprise.Facade.Customer.InvoiceFacade</para>
	</remarks>
	<example>
		<para>The following codes shows how to implement the SetSalesPrice method.</para>
		<code lang="VB" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 Dim lineItemRow As DataRowView
 Dim isAutoSelectLastPrice As Boolean
 Dim byTotalQty As Boolean 'By-Referece variable
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.SetSalesPrice(lineItemRow, isAutoSelectLastPrice, byTotalQty)
    </code>
		<code lang="CS" title="SetSalesPrice" description="Assigns the price for the line item being added in the current transaction.">
 DataRowView lineItemRow;
 bool isAutoSelectLastPrice;
 bool byTotalQty; //By-Reference variable
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway());
 salesOrderFacade.SetSalesPrice(lineItemRow, isAutoSelectLastPrice, byTotalQty);
    </code>
	</example>
	<seealso cref="M:Interprise.Facade.Customer.SalesOrderFacade.SetSalesPrice(System.Data.DataRowView,System.Boolean@)">SetSalesPrice Method (Interprise.Facade.Customer.SalesOrderFacade)</seealso>
	<seealso cref="M:Interprise.Facade.Customer.InvoiceFacade.SetSalesPrice(System.Data.DataRowView,System.Boolean@)">SetSalesPrice Method (Interprise.Facade.Customer.InvoiceFacade)</seealso>
	<param name="lineItemRow">Item row to be processed</param>
	<param name="isAutoSelectLastPrice">Flag that defines if the method should automatically select the last price set for the item</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.SetSalesPrice(Interprise.Framework.Customer.Shared.Structure.ItemLinePricing@)">
	<summary>
 Set the SalesPrice of item for the current customer
 </summary>
	<remarks>
		<para>FieldNames of CustomerSalesOrders and CustomerInvoice tables must be the
    same, because this function is shared on Orders and Invoices module.</para>
		<para>Method is overloaded on Interprise.Facade.Customer.SalesOrderFacade and
    Interprise.Facade.Customer.InvoiceFacade</para>
	</remarks>
	<param name="itemLinePricingInfo">Structure ItemLinePricing</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.VerifyItem(System.String,System.Data.DataRow)">
	<summary>
 Verifies items.
 </summary>
	<param name="itemCode">The code that reprsents the item</param>
	<param name="lineItemRow">The row in which the item belongs to</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetLastPriceCount(System.String,System.String,System.String)">
	<summary>
 Returns the lastprice count
 </summary>
	<param name="customerCode">The code that represents the customer</param>
	<param name="itemCode">The code that represents the item</param>
	<param name="umCode">The code that represents the unit of measurement of the item</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.UpdateDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to update the data to the database.
 </summary>
	<param name="commandSet">A jagged <strong>String</strong> array containing the tablenames and stored procedure names.</param>
	<param name="transactionType">Any of <strong>Interprise.Framework.Base.Shared.Enum.TransactionType</strong> values. Possible values are Quote, SalesOrder, BackOrder and RMA.</param>
	<param name="transactionDescription">A <strong>String</strong> containing description about actions taken on the transaction which is important in audit trail.</param>
	<param name="isUseCache">A <strong>Boolean</strong> indicating to save data to the cache database.</param>
	<returns></returns>
	<remarks>Returns True if update is successful.</remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetKitConfiguration(System.Data.DataRow)">
	<summary>
 Gets the configuration of kit line item(s) when editing kit using
 configurator.
 </summary>
	<returns>Structure containing kit configuration information.</returns>
	<param name="rowItemLine">DataRow of kit line item.</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.DisableFreightCalculation">
	<summary>
 Disable the calculation of freight by setting IsFreightOverwrite field of
 CustomerSalesOrderView and CustomerInvoiceView datatables to true.
 </summary>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ClearCommission">
	<summary>Clears the commission in all line items.</summary>
	<remarks>
 This method is called after all the sales reps in sales order or invoice
 transaction are deleted.
 </remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.DeallocateStock">
	<summary>
 Procedure for deallocating stock from deleted item lines and voided sales order.
 </summary>
	<example>
		<para>The following codes shows how to implement the DeallocateStock method.</para>
		<code lang="VB" title="DeallocateStock" description="Deallocate stock quantities from the current transaction.">
 Dim salesOrderFacade As New Interprise.Facade.Customer.BaseSalesOrderFacade(New SalesOrderDatasetGateway)
 salesOrderFacade.DeallocateStock()
    </code>
		<code lang="CS" title="DeallocateStock" description="Deallocate stock quantities from the current transaction.">
 Interprise.Facade.Customer.BaseSalesOrderFacade salesOrderFacade = new Interprise.Facade.Customer.BaseSalesOrderFacade(new SalesOrderDatasetGateway());
 salesOrderFacade.DeallocateStock();
    </code>
	</example>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetOrderLineItemDefaults(System.String,System.String,System.String[][]@)">
	<summary>
 Procedure to get the default values to be assigned to newly added item line.
 </summary>
	<param name="itemCode">A <strong>String</strong> containing the item code.</param>
	<param name="umCode">A <strong>String</strong> containing the unit of measure.</param>
	<param name="defaults">A jagged <Strong>String</Strong> array containig the default values.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetOrderLineItemDefaultValues(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.DateTime,System.Boolean,System.String,System.String[][]@)">
	<summary>
 Procedure to get the default values to be assigned to newly added item line.
 </summary>
	<param name="itemCode">A <strong>String</strong> containing the item code.</param>
	<param name="umCode">A <strong>String</strong> containing the unit of measure.</param>
	<param name="defaults">A jagged <Strong>String</Strong> array containig the default values.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AssignMiscItem(System.String,System.Decimal,System.String,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String@)">
	<summary>
 Adds the specified accessory, substitute and cross/up sell item to sales order or
 invoice transaction.
 </summary>
	<returns>
		<strong>true</strong> if adding is successful; otherwise
 <strong>false</strong>.
 </returns>
	<param name="itemCode">The item code of accessory, substitute, cross/up sell item.</param>
	<param name="quantity">The order quantity.</param>
	<param name="umCode">The initial unit measure code.</param>
	<param name="warehouseCode">The initial warehouse code.</param>
	<param name="transactionType">
    Interprise.Framework.Base.Shared.Enum.TransctionType enumeration. Following are
    possible types. 
    <list type="bullet">
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.Quote</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.SalesOrder</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.Invoice</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.RMA</item>
			<item>Interprise.Framework.Base.Shared.Enum.TransactionType.CreditMemo</item>
			<item>
        Interprise.Framework.Base.Shared.Enum.TransactionType.CustomerOpeningBalance</item>
		</list>
	</param>
	<param name="errMsg">The error message returned if adding failed.</param>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetCalculatedTotalDue(System.DateTime)">
	<summary>
	</summary>
	<param name="paymentDate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.RecomputeSalesRepCommissions(System.Data.DataRow)">
	<summary>
 Recalculates the sales rep's commission if a line item was to be deleted.
 </summary>
	<param name="lineItemRow">A <strong>Data.Datarow</strong> that contains the information on the data to be deleted.</param>
	<remarks>Method is only called when a line item is deleted in the transaction.</remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.IncrementSaveCounterID">
	<summary>
 IncrementSaveCounterID will increment the saving counter ID of each tranction, to have any changes on the dataset
 </summary>
	<remarks></remarks>pete.a 06/26/2009

</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.IsAutoCloseSourceForm">
	<summary>
 Check if the customer setting IsAutoCloseSourceForm is activated.
 </summary>
	<returns></returns>
	<remarks></remarks>pete.a 07/22/2009

</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.IsOffConversionPopUp">
	<summary>
 Check if the customer setting IsOffConversionPopUp is activated.
 </summary>
	<returns></returns>
	<remarks></remarks>pete.a 07/22/2009

</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.CreateTempItemDetailTable">
	<summary>
 This method is called to create a temporary table to be used as the storage for line item defaults for item's being added on the Order/Invoice transaction
 </summary>
	<remarks>
 Method is called only once and m_tempItemDetailTable is exposed for data manipulation purposes.
 Property is part of code optimization for order/invoice processing.
 </remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AutoGenerate(System.String)">
	<summary>
 Returns the auto generate preference of the item
 </summary>
	<param name="itemCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ValidateGiftCardCertificateSerialNumber(System.Data.DataTable,System.Data.DataTable)">
	<summary>
 Validate the serial number of the gift card / gift certificate items added.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ValidateGiftCardCertificateEmailSerial(System.Data.DataTable)">
	<summary>
 Validate if there is an email account setup for the user account when sending gift card / certificate serials.
 </summary>
	<param name="serialNumberDataTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AssignQuantityReserved(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="proposeQuantityReserved"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AllocateStock">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AllocateStock(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AllocateStock(System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<param name="focusedColumn"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.MoveReservation(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="sourceTransactionCode"></param>
	<param name="sourceLineNum"></param>
	<param name="sourceKitLineNum"></param>
	<param name="newTransactionCode"></param>
	<param name="destinationLineNum"></param>
	<param name="destinationKitLineNum"></param>
	<param name="sourceTransaction"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ColumnChanging(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AllocateAndReserveStock(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AllocateAndReserveStock">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ReserveStock(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ReserveStock(System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<param name="allowBackOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ReserveStock(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ReserveStock(System.Data.DataRow,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="focusedRow"></param>
	<param name="proposeQuantityToReserve"></param>
	<param name="allowBackOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.MergeTransactionReservation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ClearTransactionReservation(System.Boolean)">
	<summary>
	</summary>
	<param name="updateResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AddHandlerAllocationReservationChanged">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.RemoveHandlerAllocationReservationChanged">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ReservationFacade_AllocationReservationChanged(System.Object,Interprise.Framework.Base.EventArguments.ReserveQuantityChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetUnReservedTransaction(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="allReservationForVoidedSO"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AutoReserveSO(System.Data.DataSet,Interprise.Framework.Base.DatasetComponent.ReservationDataSet.CustomerTransactionReservationViewRow)">
	<summary>
	</summary>
	<param name="allReservationForVoidedSO"></param>
	<param name="unreservedRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AssignOldDueDate(System.Data.DataRow,System.DateTime)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="dueDate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ResetKitReservationToZero">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.MoveNonKitReservation(System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.DateTime)">
	<summary>
	</summary>
	<param name="salesOrderCode"></param>
	<param name="invoiceCode"></param>
	<param name="invoiceLineNum"></param>
	<param name="itemCode"></param>
	<param name="itemLineNum"></param>
	<param name="warehouseCode"></param>
	<param name="dueDate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.MoveKitReservation(System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.DateTime,System.Data.DataRow[],Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway)">
	<summary>
	</summary>
	<param name="salesOrderCode"></param>
	<param name="invoiceCode"></param>
	<param name="invoiceLineNum"></param>
	<param name="itemCode"></param>
	<param name="itemLineNum"></param>
	<param name="itemType"></param>
	<param name="itemUnitMeasureQty"></param>
	<param name="warehouseCode"></param>
	<param name="dueDate"></param>
	<param name="SOKitComponents"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.DeleteNonKitReservation(System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.DateTime)">
	<summary>
	</summary>
	<param name="salesOrderCode"></param>
	<param name="itemCode"></param>
	<param name="itemLineNum"></param>
	<param name="itemType"></param>
	<param name="warehouseCode"></param>
	<param name="dueDate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.DeleteKitReservation(System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.DateTime,System.Data.DataRow[],Interprise.Framework.Customer.DatasetGateway.SalesOrderDatasetGateway)">
	<summary>
	</summary>
	<param name="salesOrderCode"></param>
	<param name="itemCode"></param>
	<param name="itemLineNum"></param>
	<param name="itemType"></param>
	<param name="itemUnitMeasureQty"></param>
	<param name="warehouseCode"></param>
	<param name="dueDate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AssignInventoryItem(System.Data.DataRow,System.Data.DataRowView@,System.String@)">
	<summary>
	</summary>
	<param name="itemRow"></param>
	<param name="lineItemRow"></param>
	<param name="errMsg"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.SetSalesPrice(System.Data.DataRowView,System.Boolean@)">
	<summary>
	</summary>
	<param name="dvyuItem"></param>
	<param name="byTotalQty"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.Compute(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="lineItem"></param>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.AddPredefinedNotesDefault(Interprise.Framework.Base.DatasetComponent.BaseDataset)">
	<summary>
	</summary>
	<param name="targetDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.UpdateDropShipResevation(System.String,System.String,System.String,System.Int32,System.Decimal)">
	<summary>
	</summary>
	<param name="transactionCode"></param>
	<param name="itemCode"></param>
	<param name="warehouseCode"></param>
	<param name="lineNum"></param>
	<param name="proposeQuantityOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.UpdateDropShipResevation(System.String,System.String,System.String,System.Int32,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="transactionCode"></param>
	<param name="itemCode"></param>
	<param name="warehouseCode"></param>
	<param name="lineNum"></param>
	<param name="proposeQuantityOrder"></param>
	<param name="directInvoice"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.RaiseDropShipReservationConcurrencyOccurred(System.Object,Interprise.Framework.Base.Exceptions.ReservationConcurrencyException)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetOrderWorflow(System.String,System.String)">
	<summary>
	</summary>
	<param name="transactionCode"></param>
	<param name="warehouseCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.CalculateDueDate(System.Data.DataRow)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ValidateQuantity(System.Decimal,System.String,System.Decimal,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="quantity"></param>
	<param name="lineItemType"></param>
	<param name="maximumQuantity"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ValidatePrice(System.Decimal,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="price"></param>
	<param name="minimumPrice"></param>
	<param name="maximumPrice"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ValidatePrice(System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
	<summary>
	</summary>
	<param name="price"></param>
	<param name="minimumPrice"></param>
	<param name="maximumPrice"></param>
	<param name="validateEqualToZero"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.UpdateQuantityColumnsOnNoBackOrderCreation(Interprise.Framework.Customer.DatasetComponent.InvoiceDataset.CustomerInvoiceDetailViewRow)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ImportSupplierPurchaseOrderReservation(System.Data.DataRow,System.String,System.String)">
	<summary>
	</summary>
	<param name="reservationRow"></param>
	<param name="currentDocumentCode"></param>
	<param name="originalDocumentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ImportSupplierPurchaseOrderReservationClone(System.Data.DataRow,System.String,System.String)">
	<summary>
	</summary>
	<param name="reservationRow"></param>
	<param name="currentDocumentCode"></param>
	<param name="originalDocumentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ImportCustomerKittransactionReservation(System.Data.DataRow,System.String,System.String)">
	<summary>
	</summary>
	<param name="reservationRow"></param>
	<param name="currentDocumentCode"></param>
	<param name="originalDocumentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.ImportCustomerKittransactionReservationClone(System.Data.DataRow,System.String,System.String)">
	<summary>
	</summary>
	<param name="reservationRow"></param>
	<param name="currentDocumentCode"></param>
	<param name="originalDocumentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="row"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.DeleteStockAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.GetCouponInfo">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseSalesOrderFacade.TaxFacade_OverrideTaxAmount(System.Object,Interprise.Framework.Base.EventArguments.OverrideTaxAmountEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Customer.BaseFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Customer.BaseFacade.CurrentReportType">
	<summary>
 Returns CurrentReportType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseFacade.GetMinQuantiy">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseFacade.DefaultUnitMeasure">
	<summary>
 Returns DefaultUnitMeasure
 </summary>
	<value>String</value>
	<returns></returns>
	<remarks>Returns the default unit of measurement</remarks>
</member><member name="P:Interprise.Facade.Customer.BaseFacade.CurrentTransactionType">
	<summary>
 Returns CurrentTransactionType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.BaseFacade.SuspendTableEventHandler">
	<summary>
 Property to read or write SuspendTableEventHandler
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseFacade.AddTradingInfoDetails">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseFacade.#ctor">
	<summary>
 Create an Instance of this class
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.BaseFacade.MergeTradingInfo(System.Data.DataSet,System.Data.DataSet)">
	<summary>
	</summary>
	<param name="target"></param>
	<param name="source"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.ApplyPaymentFacade.LoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AppliedCreditFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.AppliedCreditDatasetGateway)">
	<summary>
	</summary>
	<param name="applyCreditDataSet"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.AllocationFacade.CreditAllocated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.AllocationFacade.CreditAllocatedRate">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.AllocationFacade.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.AllocationFacade.CustomerReceiptAllocation">
	<summary>
 Returns CustomerReceiptAllocation Dataset
 </summary>
	<value>ReceiptDatasetGateway</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.AllocationFacade.CustomerReceiptFacade">
	<summary>
 Returns CustomerReceiptFacade
 </summary>
	<value>ReceiptFacade</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.ApplyDiscount(Interprise.Framework.Customer.DatasetComponent.ReceiptDataset.CustomerAllocationDebitViewRow,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal)">
	<summary>
	</summary>
	<param name="debitRow"></param>
	<param name="invoiceGateway"></param>
	<param name="totalDueRate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.AutoWriteOff(Interprise.Framework.Customer.DatasetComponent.ReceiptDataset.CustomerAllocationDebitViewRow,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="debitRow"></param>
	<param name="writeOffAmountRate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.CreateAllocation(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway)">
	<summary>
	</summary>
	<param name="invoiceGateway"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.CreateAllocationCredit(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal)">
	<summary>
 Returns total allocated.
 </summary>
	<param name="receiptGateway"></param>
	<param name="invoiceGateway"></param>
	<param name="totalDue"></param>
	<param name="totalDueRate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.CreateAllocationDebit(Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="invoiceGateway"></param>
	<param name="totalDue"></param>
	<param name="totalDueRate"></param>
	<param name="totalAllocatedRate"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.CreateReceiptFacade">
	<summary>
 Creates a new instance of the ReceiptDataset
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.CreateReceiptAllocation(Interprise.Framework.Customer.DatasetGateway.ReceiptDatasetGateway,Interprise.Framework.Customer.DatasetGateway.InvoiceDatasetGateway,System.Decimal,System.Decimal)">
	<summary>
 Creates header, credits and debits allocation.
 </summary>
	<param name="receiptGateway">A <strong>Dataset</strong> that represensts the ReceiptDataset</param>
	<param name="invoiceGateway">A <strong>Dataset</strong> that represensts the InvoiceDataset</param>
	<param name="totalDue">A <strong>Decimal</strong> value that represents the Gross Total due for the transaction in home currency</param>
	<param name="totalDueRate">A <strong>Decimal</strong> value that represents the Gross Total due for the transaction in customer currency</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.GetAllowedProposedValueToAllocateInCredit(System.Decimal,System.Decimal)">
	<summary>
	</summary>
	<param name="proposedValueToAllocate"></param>
	<param name="totalDueRate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.PostReceiptAllocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.PostLoyaltyPoints">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Customer.AllocationFacade.PostRefund">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Customer.AgingFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Customer.AgingFacade.#ctor(Interprise.Framework.Customer.DatasetGateway.AgingDatasetGateway)">
	<summary>
 Create an Instance of this class
 </summary>
	<param name="agingDataset">The dataset to be used for this class</param>
	<remarks></remarks>
</member>
</members>
</doc>