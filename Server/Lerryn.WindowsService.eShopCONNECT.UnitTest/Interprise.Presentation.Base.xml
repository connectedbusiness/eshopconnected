<?xml version="1.0"?>
<doc>
<assembly>
<name>
Interprise.Presentation.Base
</name>
</assembly>
<members>
<member name="M:Interprise.Presentation.Base.PivotGridChart.UserControlChart.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:Interprise.Presentation.Base.PivotGridChart.UserControlChart">
	<summary>
UserControlChart
</summary>
</member><member name="M:Interprise.Presentation.Base.SectionDescriptionForm.GetSectionDescriptionControl">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.SectionDescriptionForm.Focused">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.SectionDescriptionControl.Focus">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.KeyField">
	<summary>
 Gets or sets the primary key field of the tree list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.ParentField">
	<summary>
 Gets or sets root field for the tree structure.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.Movement">
	<summary>
 Property that determines the focus movement of the grid when the row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.Columns">
	<summary>
 Gets or sets the columns to be displayed on the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.TreeImageList">
	<summary>
 Gets or sets the ImageList object to be used by the tree list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchTreeControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.VRepSearchComboControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.DisplayField">
	<summary>
 Gets or sets the text to be returned to the text box when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is also the column that fixed to the left, it is also the default sorting of the grid.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.Movement">
	<summary>
 Defines the movement of the cursor for the search control
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepSearchComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.VRepSearchComboControl.#ctor">
	<summary>
 Constructor.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.VRepSearchComboControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.Movement">
	<summary>
 Property that determines the focus movement of the grid when the row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.AutoAddRecord">
	<summary>
 Property to enable or disable auto add new record in the vertical grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.#ctor">
	<summary>
 Constructor.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.VRepHyperlinkSearchComboControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.CriteriaBuilderControl.CurrentDataset">
	<summary> Property that gets the value of CurrentDataset . </summary>
	<value> Interprise.Framework.Base.DatasetComponent.BaseDataset</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.CriteriaBuilderControl.IgnoreSavedCriteria">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeForm.DisplayField">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeForm.UseCache">
	<summary>
 Gets or sets if the list control will search in the cache database of not.
 </summary>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeForm.SearchTree">
	<summary>
 Searches the tree view using the specified search text.
 </summary>
	<remarks>The VisibleRowCount is rather erractic.  When the number of columns displayed is greater than 1 even if 1 node is visible the VisibleRowCount = 2.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeForm.btnOK_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeForm.DevExTree_DoubleClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeForm.DevExTree_FocusedNodeChanged(System.Object,DevExpress.XtraTreeList.FocusedNodeChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeForm.DevExTree_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeForm.SearchTreeForm_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.SearchListFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.ParentField">
	<summary>
 Gets or sets root field for the tree structure.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.KeyField">
	<summary>
 Gets or sets the primary key field of the tree list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.DisplayField">
	<summary>
 Gets or sets the text to be returned to the text box when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is also the column that fixed to the left, it is also the default sorting of the grid.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.Columns">
	<summary>
 Gets or sets the columns to be displayed on the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.TreeImageList">
	<summary>
 Gets or sets the ImageList object to be used by the tree list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.AdditionalFilter">
	<summary>
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.RetainValue">
	<summary>
 Gets or sets the drop-down capability of the control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.DefaultSort">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.UseCache">
	<summary>
 Gets or sets if the list control will search in the cache database of not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.SearchCacheConnector">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeControl.Validate">
	<summary>
 Procedure to validate the contents of the combo box.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTreeControl.CurrentFacade">
	<summary>
 Gets the facade being used by the parent control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used for validation.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeControl.GetCurrentFacade(System.Windows.Forms.Control)">
	<summary>
 Procedure to retrieve the facade of the parent control.
 </summary>
	<param name="ctrl">The control to search on.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTreeControl.SearchTreeControl_CloseUp(System.Object,DevExpress.XtraEditors.Controls.CloseUpEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.ConvertCSVToStringArray(System.String,System.Boolean)">
	<summary>
 Convert CSV data to String Array
 </summary>
	<param name="csvValue">CSV Data to parse</param>
	<param name="isToLower">Flag to determine if the value(s) will be converted to lower case</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetSearchRowBySearchName(Interprise.Framework.Base.DatasetComponent.SystemManager.User.SearchTabDataset.SystemUserRoleSearchTabManagerViewDataTable,System.String)">
	<summary>
 Searches for a row that matches the search name defined by the specified searchName, and returns the first occurrence within the entire SystemUserRoleSearchTabManagerView.
 </summary>
	<param name="searchTable"></param>
	<param name="searchName"></param>
	<returns>The first row that matches the conditions defined by the specified searchName, if found; otherwise, the default value for SystemUserRoleSearchTabManagerViewRow.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetDescription(System.String[],System.Collections.Hashtable,System.String)">
	<summary>
	</summary>
	<param name="tableDescriptions"></param>
	<param name="customDescriptionCollection"></param>
	<param name="description"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetSearchTabData(System.String,System.String,System.String,System.String[]@,Interprise.Framework.Base.DatasetComponent.SystemManager.User.SearchTabDataset@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.String@,System.String@,System.String[]@)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formMenuCode"></param>
	<param name="tableDescriptions"></param>
	<param name="gatewaySearchTab"></param>
	<param name="customSearchCollection"></param>
	<param name="customDescriptionCollection"></param>
	<param name="currentTableDescription"></param>
	<param name="displayField"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetPluginFormsData(System.String)">
	<summary>
	</summary>
	<param name="objectNames"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetPluginFormsData(System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="rowIDFrom"></param>
	<param name="rowIDTo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetPluginFormsData(System.Int32,System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="rowIDFrom"></param>
	<param name="rowIDTo"></param>
	<param name="topNRecords"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetPluginFormsData(System.Int32,System.Int32,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="rowIDFrom"></param>
	<param name="rowIDTo"></param>
	<param name="topNRecords"></param>
	<param name="formClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTabHelper.ReloadSystemUserAccounts">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTabHelper.SystemUserAccounts(System.Boolean)">
	<summary>
	</summary>
	<param name="isReload"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetUserInfoCollection(System.String,Interprise.Framework.Base.DatasetComponent.SystemManager.User.SearchTabDataset@,System.String)">
	<summary>
	</summary>
	<param name="xmlUserInfoCollection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetSearchInfoCollection(System.String,Interprise.Framework.Base.DatasetComponent.SystemManager.User.SearchTabDataset@,System.String)">
	<summary>
	</summary>
	<param name="xmlSearchInfoCollection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.ReplaceCurrentUserAccountValues(System.String,Interprise.Presentation.Base.Search.FilterInfoCollection)">
	<summary>
	</summary>
	<param name="queryText"></param>
	<param name="userFilterCollection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.GetOperator(Interprise.Presentation.Base.Search.FilterInfo)">
	<summary>
	</summary>
	<param name="searchFilter"> Search Criteria</param>
	<returns>SQL Operand</returns>
	<remarks>Use to select proper SQL operand</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.ConvertToCBCriteria(DevExpress.Data.Filtering.BinaryOperator,System.String,Interprise.Presentation.Base.Search.FilterInfo)">
	<summary>
	</summary>
	<param name="p_operand">Sql operand</param>
	<param name="p_devExFilterCriteria">Default Filter Criteria</param>
	<param name="p_searchFilter">Serch Filter</param>
	<returns>Modified Criteria</returns>
	<remarks>Return converted criteria</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.ReBuildSearchQuery(System.String,Interprise.Presentation.Base.Search.FilterInfoCollection)">
	<summary>
	</summary>
	<param name="queryText"></param>
	<param name="searchFilterCollection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchTabHelper.FormatQueryFilter(System.String,System.String,System.String,System.Data.DataTable,Interprise.Presentation.Base.Search.FilterInfoCollection,Interprise.Presentation.Base.Search.FilterInfoCollection)">
	<summary>
	</summary>
	<param name="sqlQueryText"></param>
	<param name="userFilter"></param>
	<param name="searchFilter"></param>
	<param name="staticListHelper"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchTabHelper.SearchItems">
	<summary>
 An array of type custom search tab 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Search.CustomSearchTabCollection">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Search.FilterInfoCollection">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.SearchComboControl.PopupClose">
	<summary>
 Event that will be raised when the popup form closes.
 </summary>
	<param name="sender"></param>
	<param name="eRow">Parameter containing the row/s selected.</param>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.SearchComboControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.Movement">
	<summary>
 Defines the movement of the cursor for the search control
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.RowSelected">
	<summary>
 Gets the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.DisplayField">
	<summary>
 Gets or sets the text to be returned to the text box when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is also the column that fixed to the left, it is also the default sorting of the grid.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.CurrentTableDescription">
	<summary>
 Gets the current tab description.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is only used when the IsEntitySearch property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.RowCount">
	<summary>
 Gets the number of rows found in the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.SuppressDropDown">
	<summary>
 Gets or sets if the search control should show the list control or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.SearchGrid">
	<summary>
 Gets the result grid of the ListControl.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.RetainValue">
	<summary>
 Gets or sets the drop-down capability of the control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.Text">
	<summary>
 Gets or sets the text in the text box.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is also used to set the value text property to empty if the text is left blank.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.AllowEdit">
	<summary>
 Gets or set if the search grid can be edited.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="E:Interprise.Presentation.Base.Search.SearchComboControl.ValueTextChanged">
	<summary>
 Event triggered when the value text is changed.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.ValueText">
	<summary>
 Gets or sets the value of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.UseCache">
	<summary>
 Gets or sets if the list control will search in the cache database of not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.ShowTabs(Interprise.Framework.Base.Shared.Structure.SearchParameters)">
	<summary>
 Determines if the tabs will be shown or not.
 </summary>
	<param name="searchParameters">Contains the tab information.</param>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.CurrentFacade">
	<summary>
 Gets the facade being used by the parent control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used for validation.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.BypassEntityFilter">
	<summary>
 Gets or sets if the filter stored in the EntityTable table will be ignored.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Setting this to false will make the ListControl use the AdditionalFilter property.
 This is generally used when IsEntitySearch is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.IsSearchable">
	<summary>
 Gets or sets if the combo box should search in the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.ShowNewButton">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.ListGridView">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.SearchCacheConnector">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchComboControl.SkipDataValidation">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.GetCurrentFacade(System.Windows.Forms.Control)">
	<summary>
 Procedure to retrieve the facade of the parent control.
 </summary>
	<param name="ctrl">The control to search on.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.ShowComboSearchForm(System.Boolean)">
	<summary>
 Procedure to show the mini search form when the button is clicked.
 </summary>
	<param name="blnBypassCache"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.AddValueTextBinding">
	<summary>
 Procedure to add a databinding to the ValueText property.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.BindingCollectionChanging(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
	<summary>
 Procedure that triggers when the Databindings is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This is to prevent users from add directly the ValueText databinding.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.BindingCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
	<summary>
 Procedure that triggers when the Databindings is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This refreshes the ValueText binding when the EditValue binding is changed.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.RepSearchComboControl_ButtonClick(System.Object,DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)">
	<summary>
 Event triggered when the button of the button edit is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.HyperlinkSearchComboControl_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Event that will be triggered when when the editor loses focus.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This will check the database if the user input is valid.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.OnRowSelected(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
 Procedure that will be triggered when a row is selected in the list control.
 </summary>
	<param name="sender"></param>
	<param name="eRow">Parameter containing the row information.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.OnNoRowSelected(System.Object,System.EventArgs)">
	<summary>
 Procedure that will be triggered when there is no row selected.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.Validate">
	<summary>
 Procedure to validate the contents of the combo box.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchComboControl.OnCreateControl">
	<summary>
 Procedure that triggeres when the control is created.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.CachingInProgress">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.IsRepository">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.ParentForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.RepositoryControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.Search">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.SearchControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.SearchObject">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.SearchTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.SearchCacheConnector.UseCache">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.#ctor(Interprise.Presentation.Base.Search.SearchComboControl)">
	<summary>
	</summary>
	<param name="searchCombo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.#ctor(Interprise.Presentation.Base.Search.HyperlinkSearchComboControl)">
	<summary>
	</summary>
	<param name="searchCombo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.#ctor(Interprise.Presentation.Base.Search.SearchTreeControl)">
	<summary>
	</summary>
	<param name="searchCombo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.#ctor(Interprise.Presentation.Base.Search.RepSearchComboControl)">
	<summary>
	</summary>
	<param name="searchCombo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.#ctor(Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl)">
	<summary>
	</summary>
	<param name="searchCombo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.#ctor(Interprise.Presentation.Base.Search.RepSearchTreeControl)">
	<summary>
	</summary>
	<param name="searchCombo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.#ctor(Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl)">
	<summary>
	</summary>
	<param name="searchCombo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.OnCacheBuilderCompleted(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.ValidateCacheUpdated(System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.SearchCacheConnector.Caching_Completed(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.KeyField">
	<summary>
 Gets or sets the primary key field of the tree list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.ParentField">
	<summary>
 Gets or sets root field for the tree structure.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.Movement">
	<summary>
 Property that determines the focus movement of the grid when the row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.Columns">
	<summary>
 Gets or sets the columns to be displayed on the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.TreeImageList">
	<summary>
 Gets or sets the ImageList object to be used by the tree list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.RetainValue">
	<summary>
 Gets or sets the drop-down capability of the control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.SearchCacheConnector">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.Movement">
	<summary>
 Property that determines the focus movement of the grid when the row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchTreeComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="E:Interprise.Presentation.Base.Search.RepSearchFilterControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.Movement">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchFilterControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchFilterControl.#ctor">
	<summary>
 Constructor.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchFilterControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchFilterControl.ShowComboSearchForm(System.Boolean)">
	<summary>
 Procedure to show the mini search form when the button is clicked.
 </summary>
	<param name="blnBypassCache"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchFilterControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.RepSearchComboControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.TargetDisplayField">
	<summary>
 Gets or set the target column of the display field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the display field column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.Movement">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.SearchCacheConnector">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepSearchComboControl.SkipDataValidation">
	<summary>
 Property to determine if the data entered needs to validate on the second time.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchComboControl.#ctor">
	<summary>
 Constructor.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchComboControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchComboControl.ShowComboSearchForm(System.Boolean)">
	<summary>
 Procedure to show the mini search form when the button is clicked.
 </summary>
	<param name="blnBypassCache"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchComboControl.DeleteRow(DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
 Procedure to delete the row where the search combo control belongs.
 </summary>
	<param name="gridView"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepSearchComboControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.DisplayField">
	<summary>
 Gets or sets the text to be returned to the text box when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is also the column that fixed to the left, it is also the default sorting of the grid.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.Movement">
	<summary>
 Defines the movement of the cursor for the search control
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.RowCount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchTreeComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="E:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.TargetDisplayField">
	<summary>
 Gets or set the target column of the display field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the display field column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.Movement">
	<summary>
 Property that determines the focus movement of the grid when the row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.SearchCacheConnector">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.Parent">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.#ctor">
	<summary>
 Constructor.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.ShowComboSearchForm(System.Boolean)">
	<summary>
 Procedure to show the mini search form when the button is clicked.
 </summary>
	<param name="blnBypassCache"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboFilterControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.TargetDisplayField">
	<summary>
 Gets or set the target column of the display field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the display field column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.Movement">
	<summary>
 Property that determines the focus movement of the grid when the row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.SearchCacheConnector">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.#ctor">
	<summary>
 Constructor.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.ShowComboSearchForm(System.Boolean)">
	<summary>
 Procedure to show the mini search form when the button is clicked.
 </summary>
	<param name="blnBypassCache"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.DeleteRow(DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
 Procedure to delete the row where the search combo control belongs.
 </summary>
	<param name="gridView"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.m_parentGridView_InvalidValueException(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepHyperlinkSearchComboControl.m_parentGridView_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepBarItemSearchComboControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepBarItemSearchComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepBarItemSearchComboControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.RepBarItemSearchComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.RepBarItemSearchComboControl.OnLoaded">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.MiniSearchForm.IsSearching">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.MainSearchForm.ListControl">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.MainSearchForm.MultiSelect">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.MainSearchForm.m_ctrlList_SelectedTabChanged(System.Object,DevExpress.XtraTab.TabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.FieldEditorList">
	<summary>
 Set a field editor list. Use this to have a repository for your column.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.Autosave">
	<summary>
 Gets of sets if a list control should save a record when the focused row is changed.
 </summary>
	<remarks>This is important only when the AllowEdit property of the list control is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.UseCache">
	<summary>
 Gets or sets if the list control will search in the cache database of not.
 </summary>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.InputText">
	<summary>
 Gets of sets the initial text input. This will be place in the search box of the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is called from the combo controls. 
 Setting this will filter the listcontrol according the value when retrieving data.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.AdditionalFilter">
	<summary>
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.DataRowFocused">
	<summary>
 Gets the currently focused row in the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.OfflineRows">
	<summary>
 Sets these rows in the search grid.
 </summary>
	<value></value>
	<remarks>This is only useful in offline mode, meaning there is DataTable set in the 
 DataSource property.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.DisplayField">
	<summary>
 Gets or sets the text to be returned to the combo controls when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is also the column that fixed to the left, it is also the default sorting of the grid.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.SearchResults">
	<summary>
 Gets the contents of the search grid in dataset form.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.GridRowHandle">
	<summary>
 Gets or sets the focused row index of the grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.EntityName">
	<summary>
 Gets or sets the Entity of the ListControl
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Set this only if IsEntitySearch is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.IsEntitySearch">
	<summary>
 Gets or sets if the saerch list is being used as a stand alone control or a search combo control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.SearchGrid">
	<summary>
 Gets the result grid of the ListControl.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.CurrentTableDescription">
	<summary>
 Gets or sets the current tab description.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is only used when the IsEntitySearch property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.TableDescriptions">
	<summary>
 Gets or sets the tables to be searched on.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Each table description will be assigned a tab. The tabs are arranged according to the order of the string array.
 IsEntitySearch must be set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.TabVisible">
	<summary>
 Gets or sets if the tab is visible.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If IsEntitySearch is set to false, but there is a need for the tabs to be shown,
 set this property.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.DataRowsSelected">
	<summary>
 Gets the rows selected upon user selection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.BypassEntityFilter">
	<summary>
 Gets or sets if the filter stored in the EntityTable table will be ignored.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Setting this to false will make the ListControl use the AdditionalFilter property.
 This is generally used when IsEntitySearch is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.AllowEdit">
	<summary>
 Gets or set if the search grid can be edited.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.IsAdvancedSearch">
	<summary>
 Gets or sets if the advanced search control is shown.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.ViewAllRecords">
	<summary>
 Gets or sets if the ListControl will view all records regardless of what was set in the preferences.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.IsMultiSelection">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.AcceptButtonVisible">
	<summary>
 Gets or sets if the Accept/OK button is visible.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.ShowCriteriaPanel">
	<summary>
 Gets or sets if the criteria box is visible.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.ShowRecordPanel">
	<summary>
 Gets or sets if the panel that shows the records is visible.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.ShowStatusPanel">
	<summary>
 Gets or sets if the status panel is visible.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.ListingType">
	<summary>
 Gets or sets the type of list to display.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.IgnoreGrouping">
	<summary>
 Gets or sets if the selection of rows should be based on the group.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.CancelButtonVisible">
	<summary>
 Property to make visible/invisible the cancel button.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.CustomSearchDescriptions">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.CustomSearchCollection">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.CustomDescriptionCollection">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.GatewaySearch">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.IsCustomSearchTab">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.CustomSearchTabRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.CustomSearchName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.SQLQueryObjectNames">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.SearchEntityInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.ListControl.CriteriaBuilderControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.AddColumns(System.Int32@,System.Int32)">
	<summary>
 Procedure to add the columns to grid according to the DataDictionary.
 </summary>
	<param name="totalWidth">Returns the totalWidth of the columns added.</param>
	<param name="columnCount">Specifies the index of the column.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ArrangeColumns">
	<summary>
 Procedure to adjust the width of the grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ArrangeLetters">
	<summary>
 Arrange the sidebar buttons as it is being resized.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ArrangeSidebar">
	<summary>
 Procedure used to arrange the buttons in the sidebar.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.BeginLoadList(System.Boolean)">
	<summary>
 Procedure that happens when the control is loaded up for the first time.
 </summary>
	<param name="willBypassCache">To be used at a later time.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.BeginSetupGrid(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 Retrieves and assigns the datasource to the grid as well as arranges the columns.
 </summary>
	<param name="tableName">The table to be searched on.</param>
	<param name="whereClause">The filtering of the table.</param>
	<param name="viewAll">Determines if all records should be returned.</param>
	<param name="bypassCache">To be used later.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ContinueAllPendingCreation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ContinueFindNowEvent">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ContinueLoadList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ContinueMoreEvent">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.EndLoadSearchResultsData(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetDefaultSettings">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ChangeSearchUI">
	<summary>
 Procedure to change the look of the ListControl according to the IsEntitySearch property.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.CheckSelectedRows">
	<summary>
 Procedure to check if the selected rows are within the group or not.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportToExcel">
	<summary>
 Procedure used to export the list data to an excel file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportToHtml">
	<summary>
 Procedure used to export the list data to a html file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportToText">
	<summary>
 Procedure used to export the list data to a text file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportToXML">
	<summary>
 Procedure used to export the list data to an xml file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportToPDF">
	<summary>
 Exports to PDF format the search grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportSearchToPDF">
	<summary>
 Procedure used to export the list data to an pdf file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportToRTF">
	<summary>
 Procedure used to export the list data to an rtf file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportToCSV">
	<summary>
 Procedure used to export the list data to an csv file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ExportToPNG">
	<summary>
 Procedure used to export the list data to an png file.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SortGrid">
	<summary>
 Sorts Grid according to default sort, display field or first column
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.FocusGrid">
	<summary>
 Procedure to set the focus on the criteria box.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.FocusNewRecord">
	<summary>
 Procedure to focus on the new row.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.FormulateFilterString(System.String,System.String,System.String,System.String)">
	<summary>
 Procedure to formulate the where clause.
 </summary>
	<param name="field">The field to be searched on.</param>
	<param name="value">The value to search.</param>
	<param name="prefix">The prefix for the value.</param>
	<param name="stringCriteria">The criteria for the searching.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.LoadList(System.Boolean)">
	<summary>
 Procedure that happens when the control is loaded up for the first time.
 </summary>
	<param name="willBypassCache">To be used at a later time.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.OnCreateControl">
	<summary>
 Procedure that triggers when the ListControl is first shown.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.MakeColumnsInvisible">
	<summary>
 Procedure to make all visible columns in the criteria grid invisible.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.Print(System.Boolean)">
	<summary>
 Loads the Print Preview of the selected Grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.PrintDialog">
	<summary>
 Loads the Print Preview of the selected Grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ReadEntityTable(System.Boolean)">
	<summary>
 Retrieves the entity table and sets it in the tab control.
 </summary>
	<param name="addTabs">Determines if the tab control will add tab pages or 
 will just use the existing tab pages.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.RefreshData">
	<summary>
 Procedure to refresh the data in the grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.RegroupColumns">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SaveData">
	<summary>
 Procedure to save the data on editable ListControls.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SelectAll">
	<summary>
 Procedure to tick all entries in the grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetBooleanColumns">
	<summary>
 Procedure to arrange the needed columns for a true/false search.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetColumnColorsNormal">
	<summary>
 Sets the column style back to normal.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetCriteria">
	<summary>
 Procedure which handles the fixing of the criteria grid when the tab changes.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetCriteriaSort">
	<summary>
 Procedure which handles the fixing of the criteria grid when the user changes the sorting.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetDateColumns">
	<summary>
 Procedure to arrange the needed columns for a date search.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetNumericColumns">
	<summary>
 Procedure to arrange the needed columns for a numeric search.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetStringColumns">
	<summary>
 Procedure to arrange the needed columns for a string search.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetTablePrimaryKey(System.Data.DataColumn[])">
	<summary>
 Set the primary key of the table in the search grid.
 </summary>
	<param name="datacolumnPrimary"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetupColumns">
	<summary>
 Procedure to configure the layout of the search grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SetupGrid(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 Retrieves and assigns the datasource to the grid as well as arranges the columns.
 </summary>
	<param name="tableName">The table to be searched on.</param>
	<param name="whereClause">The filtering of the table.</param>
	<param name="viewAll">Determines if all records should be returned.</param>
	<param name="bypassCache">To be used later.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ShowSelectButton">
	<summary>
 Show the select all and select none buttons according to the MultiSelect property.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.UnSelectAll">
	<summary>
 Procedure to untick all entries in the grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.GetPageText(System.Boolean,System.Int32,System.Int32,System.String[],System.String[])">
	<summary>
	</summary>
	<param name="addKey"></param>
	<param name="tabIndex"></param>
	<param name="tabPageCount"></param>
	<param name="systemTableDescriptions"></param>
	<param name="customTableDescriptions"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.CreateCustomSearchTab(System.Int32,System.Boolean)">
	<summary>
	</summary>
	<param name="tabPageCount"></param>
	<param name="hasPageInitial"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ButtonCriteriaBuilderGo_Click(System.Object,System.EventArgs)">
	<summary>
 Event that is triggered when the advanced criteria 'Go' button is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.btnSelectAll_Click(System.Object,System.EventArgs)">
	<summary>
 Event that is triggered when the select all button is clicked
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.btnSelectNone_Click(System.Object,System.EventArgs)">
	<summary>
 Event that is triggered when the select none button is clicked
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.grdSearch_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
 Event to check the location information of the pointer within the grid.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This is used in conjuction with the double click event.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.grdSearch_DoubleClick(System.Object,System.EventArgs)">
	<summary>
 Event when the grid is double clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.grdSearch_ProcessGridKey(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Event when a keystroke is pressed within the grid.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.acceptButton_Click(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the accept button is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.SimpleButtonCancel_Click(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the cancel button is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.gvwCriteria_CellValueChanging(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs,System.Boolean)">
	<summary>
 Event triggered when a cell is being changed in the grid.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<param name="ViewAll">Determines if all the data should be retrieved.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.gvwCriteria_CellValueChanged(System.Object,DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs)">
	<summary>
 Event that is triggered when a cell is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.gvwSearch_FocusedRowChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs)">
	<summary>
 Retrieves the underlying datarow as the focus is being changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.btnFindNow_Click(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the user clicks on the find now button.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.gvwSearch_EndSorting(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the user clicks a column to sort.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.btnViewAll_Click(System.Object,System.EventArgs)">
	<summary>
 Event triggered to view all of the records for a table.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.grdCriteria_ProcessGridKey(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Event triggered when the user presses a key in the criteria grid.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.gvwCriteria_GotFocus(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the grid is focused.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ListControl_Resize(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the list control changes size.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.DirectoryButton_Click(System.Object,System.EventArgs)">
	<summary>
 Event triggered when a button from the side bar is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.btnClose_Click(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the close button is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.btnMore_Click(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the more button is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ListControl_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
	<summary>
 Event triggered when the ListControl is repainted.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
	<summary>
 Event triggered when a key is pressed.
 </summary>
	<param name="msg"></param>
	<param name="keyData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.ListControl.gvwSearch_InvalidValueException(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
 Event triggered when the search grid returns an error.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Search.ListControl">
	<summary>
 User control which will search the database according to the table name supplied.
 </summary>
	<remarks>
		<para>Important properties to fill:</para>
		<para>1. TableName - the name of the table to be search in the database.</para>
		<para>2. DisplayField - the default sort of the table, usually pertains to the
     primary key.</para>
	</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.PopupClose">
	<summary>
 Event that will be raised when the popup form closes.
 </summary>
	<param name="sender"></param>
	<param name="eRow">Parameter containing the row/s selected.</param>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.Movement">
	<summary>
 Defines the movement of the cursor for the search control
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.RowSelected">
	<summary>
 Gets the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.DisplayField">
	<summary>
 Gets or sets the text to be returned to the text box when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is also the column that fixed to the left, it is also the default sorting of the grid.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.CurrentTableDescription">
	<summary>
 Gets the current tab description.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is only used when the IsEntitySearch property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.AdditionalFilter">
	<summary>
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.RowCount">
	<summary>
 Gets the number of rows found in the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.SuppressDropDown">
	<summary>
 Gets or sets if the search control should show the list control or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.RetainValue">
	<summary>
 Gets or sets the drop-down capability of the control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.Text">
	<summary>
 Gets or sets the text in the text box.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is also used to set the value text property to empty if the text is left blank.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.AllowEdit">
	<summary>
 Gets or set if the search grid can be edited.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="E:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.ValueTextChanged">
	<summary>
 Event triggered when the value text is changed.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.ValueText">
	<summary>
 Gets or sets the value of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.UseCache">
	<summary>
 Gets or sets if the list control will search in the cache database of not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.ShowTabs(Interprise.Framework.Base.Shared.Structure.SearchParameters)">
	<summary>
 Determines if the tabs will be shown or not.
 </summary>
	<param name="searchParameters">Contains the tab information.</param>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.CurrentFacade">
	<summary>
 Gets the facade being used by the parent control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used for validation.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.BypassEntityFilter">
	<summary>
 Gets or sets if the filter stored in the EntityTable table will be ignored.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Setting this to false will make the ListControl use the AdditionalFilter property.
 This is generally used when IsEntitySearch is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.IsSearchable">
	<summary>
 Gets or sets if the combo box should search in the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.SearchCacheConnector">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.OverrideSearchFormSize">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.SearchFormSize">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.GetCurrentFacade(System.Windows.Forms.Control)">
	<summary>
 Procedure to retrieve the facade of the parent control.
 </summary>
	<param name="ctrl">The control to search on.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.ShowComboSearchForm(System.Boolean)">
	<summary>
 Procedure to show the mini search form when the button is clicked.
 </summary>
	<param name="blnBypassCache"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.AddValueTextBinding">
	<summary>
 Procedure to add a databinding to the ValueText property.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.BindingCollectionChanging(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
	<summary>
 Procedure that triggers when the Databindings is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This is to prevent users from add directly the ValueText databinding.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.BindingCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
	<summary>
 Procedure that triggers when the Databindings is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This refreshes the ValueText binding when the EditValue binding is changed.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.RepSearchComboControl_ButtonClick(System.Object,DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)">
	<summary>
 Event triggered when the button of the button edit is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.HyperlinkSearchComboControl_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Event that will be triggered when when the editor loses focus.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This will check the database if the user input is valid.</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.OnRowSelected(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
 Procedure that will be triggered when a row is selected in the list control.
 </summary>
	<param name="sender"></param>
	<param name="eRow">Parameter containing the row information.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.OnNoRowSelected(System.Object,System.EventArgs)">
	<summary>
 Procedure that will be triggered when there is no row selected.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.Validate">
	<summary>
 Procedure to validate the contents of the combo box.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.HyperlinkSearchComboControl.OnCreateControl">
	<summary>
 Procedure that triggeres when the control is created.
 </summary>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Search.FRepSearchComboControl.AddNewValue">
	<summary>
 Event that will be raised when the user wants to add a new value.
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.RowSelected">
	<summary>
 Property that reads the row selected by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.DisplayField">
	<summary>
 First field to be shown on the search grid. Also sets the text to be returned to the column when a row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.TargetDisplayField">
	<summary>
 Gets or set the target column of the display field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the display field column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.TableName">
	<summary>
 Gets of sets the name of the table to be searched. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.Movement">
	<summary>
 Property that determines the focus movement of the grid when the row is selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.AdditionalFilter">
	<summary>  
 Gets or sets another layer of filtering in the list control.
 </summary>
	<remarks>
		<para>If a constant filter is needed for this table, (eg. Active Suppliers (and
     IsActive = 1)) set it here.</para>
		<para>The filter should always have a conjuction in the beginning (and/or) in
     lowercase.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.ColumnNames">
	<summary>
 Gets or sets the columns that will be used for grouping.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Make sure that the columns are present in the database 
 or this will return an exception.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.ColumnDescriptions">
	<summary>
 Gets or sets the column description of the datasource used by the list control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.DataSource">
	<summary>
 Gets or sets the DataTable that will be used as the datasource instead of searching the database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the data is not yet present in the database, set this property to use
 custom datasources.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.RowCount">
	<summary>
 Property to read the number of rows in the search grid.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.IsMultiSelect">
	<summary>
 Gets or sets if the ListControl is in multi-select mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If set to true, an additional column 'select' if created at the beginning.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.AllowEdit">
	<summary>
 Property to read or write if the search grid is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.DataSourceColumns">
	<summary>
 Gets or sets the columns to be used by the DataSource property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This will only work if the DataSource property is set 
 or if the UseSpecified columns property is set to true.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.ValueMember">
	<summary>
 Gets or sets the actual primary key field of the source table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is used if you want to show the display field but also 
 populate the key field.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.TargetValueMember">
	<summary>
 Gets or set the target column of the key field.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The value retrieved from the value member column in the source table is placed here.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.ValueText">
	<summary>
 Property to read or write the value field content.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.UseSpecifiedColumns">
	<summary>
 Gets or sets if the ListControl will use the DataSourceColumns property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Use this if there is a need to read from the database (the DataSource property is not specified)
 but the columns needed must be specified. </remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.UseCache">
	<summary>
 Property to read or write if the search if to be read from the cache database.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.DefaultSort">
	<summary>
 Gets or sets the default sorting of the columns.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Place here the column to be sorted, do not anymore place the 'order by' keyword.</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.FRepSearchComboControl.Parent">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.FRepSearchComboControl.#ctor">
	<summary>
 Constructor.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.FRepSearchComboControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.FRepSearchComboControl.ShowComboSearchForm(System.Boolean)">
	<summary>
 Procedure to show the mini search form when the button is clicked.
 </summary>
	<param name="blnBypassCache"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.FRepSearchComboControl.CheckDataExistence(System.String)">
	<summary>
 Procedure to determine if the value entered exists on the database.
 </summary>
	<param name="value">The value to be searched in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchRibbonForm.MenuItemManageMultipleUserSignInInitializeCommandPattern">
	<summary>
	</summary>
	<remarks>"Use for pop up search dashboard"</remarks>
</member><member name="P:Interprise.Presentation.Base.Search.BaseSearchDashboard.ReloadSearchDashboard">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.BaseSearchDashboard.CurrentSearchParameters">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.BaseSearchDashboard.DashboardInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.BaseSearchDashboard.CustomSearchTabInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Search.BaseSearchDashboard.CustomSortedList">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.UpdateDashboardInfo(Interprise.Framework.Base.Shared.Structure.SearchParameters)">
	<summary>
	</summary>
	<param name="searchParameters"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.Execute(Interprise.Framework.Base.Shared.Enum.DashboardActionType,Interprise.Framework.Base.Shared.Structure.SearchParameters,System.Object[])">
	<summary>
	</summary>
	<param name="actionType"></param>
	<param name="searchParameters"></param>
	<param name="param"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.InitializeBarManagerSettings">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.IsMultiSelect(System.Boolean)">
	<summary>
	</summary>
	<param name="multiSelect"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.ClearAllCustomSearchData">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.GetCustomSearchParameters">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.HandleReloadSearchDashboard">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.InitializeBarManagerHistoryTab">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.BarManagerSearch_ShowToolbarsContextMenu(System.Object,DevExpress.XtraBars.ShowToolbarsContextMenuEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.BaseSearchDashboard_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.ExecuteManageMultipleUserSignIn(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<remarks> "This is use to load ManageMultipleUserSignInForm "</remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.BaseSearchDashboard_VisibleChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Search.BaseSearchDashboard.#ctor(Interprise.Facade.Base.ListControlFacade)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.UserRoleFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.UsedMaxCounter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.PluginMaxCounter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.GatewayUserRoleDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.FindForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.FormClassType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.FormAssemblyName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.MenuGroupCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.RoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.RoleManager.HasUsedPluginInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.PluginInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.GridViewLayoutInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.RoleManager.ControlInfo">
	<summary>
 Custom control information
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.SubExtendedLayouts">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.PluginInfoCollection">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RoleManager.LayoutControlHash">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.#ctor(System.Windows.Forms.Form)">
	<summary>
	</summary>
	<param name="parentForm"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.#ctor(Interprise.Framework.Base.Shared.Structure.PluginInfo)">
	<summary>
	</summary>
	<param name="pluginInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SetRoleCode">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.GetAssemblyName(System.Object)">
	<summary>
	</summary>
	<param name="control"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.GetSectionControl(System.Windows.Forms.Control)">
	<summary>
	</summary>
	<param name="parentControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.InitializeSection(System.Windows.Forms.Control,System.String[])">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="pluginInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.InitializeSection(System.Windows.Forms.Control,System.String[],DevExpress.XtraTab.XtraTabPage)">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="pluginInfo"></param>
	<param name="containerPage"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.InitContainerPage(System.String[],DevExpress.XtraTab.XtraTabPage)">
	<summary>
	</summary>
	<param name="containerPage"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.InitSectionControl(System.String[],System.Windows.Forms.Control)">
	<summary>
	</summary>
	<param name="pluginInfo"></param>
	<param name="sectionControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.FindGridControl(System.Windows.Forms.Control,DevExpress.XtraGrid.Views.Grid.GridView[]@)">
	<summary>
 Find all grid controls in the particular section control.
 </summary>
	<param name="sectionControl"></param>
	<param name="gridviewCollection"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.FindBindedControl(System.Windows.Forms.Control,System.Object@,System.String@,System.Data.DataTable@)">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="dataSource"></param>
	<param name="tableName"></param>
	<param name="entityTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SaveGridLayout(System.Windows.Forms.Control,DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
 Saves grid layout.
 </summary>
	<param name="sectionControl"></param>
	<param name="gridview"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SaveGridLayout(System.String,System.String,DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<param name="gridview"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SaveGridLayout(Interprise.Framework.Base.Shared.Structure.PluginInfo,DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
	</summary>
	<param name="pluginInfo"></param>
	<param name="gridview"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SaveSectionLayout(System.Windows.Forms.Control,Interprise.Presentation.Base.ExtendedLayoutControl)">
	<summary>
 Savc changes to section layout.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SaveSectionLayout(System.String,System.String,Interprise.Presentation.Base.ExtendedLayoutControl,System.String@,DevExpress.XtraLayout.LayoutGroup[])">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<param name="layoutControl"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SaveSectionLayout(Interprise.Framework.Base.Shared.Structure.PluginInfo,Interprise.Presentation.Base.ExtendedLayoutControl)">
	<summary>
	</summary>
	<param name="pluginInfo"></param>
	<param name="layoutControl"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SaveMenuLayout(DevExpress.XtraBars.BarManager,System.Windows.Forms.Form)">
	<summary>
 Load layout of menu.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LoadSectionLayout(System.Windows.Forms.Control,System.String)">
	<summary>
 Loads the layout of the section control.
 </summary>
	<param name="sectionControl"></param>
	<param name="sectionLayout"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LoadSectionLayout(System.Windows.Forms.Control,System.String,System.Boolean@)">
	<summary>
 Loads the layout of the section control.
 </summary>
	<param name="sectionControl"></param>
	<param name="sectionLayout"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LoadSectionLayout(System.Windows.Forms.Control,System.String,System.String[],System.Boolean@)">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="sectionLayout"></param>
	<param name="pluginInfo"></param>
	<param name="hasLayoutManager"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LoadGridLayout(System.Windows.Forms.Control,System.String)">
	<summary>
 Loads the grid layout of grid views in a control.. 
 </summary>
	<param name="sectionControl"></param>
	<param name="gridLayout"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LoadMenuLayout(DevExpress.XtraBars.BarManager)">
	<summary>
 Load layout of menu.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.ResetMenuLayout">
	<summary>
 Reset menu layout.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.ResetSectionLayout(System.String,System.String,System.String)">
	<summary>
 Reset section layout
 </summary>
	<param name="formClassType"></param>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.ResetGridLayout(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.ResetGridLayout">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.ResetGridLayout(System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.IsInLayoutControl(DevExpress.XtraLayout.LayoutControl,System.String)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LoadColumnFields(DevExpress.XtraGrid.Views.Grid.GridView[])">
	<summary>
 Loads all fields to the grid control.
 </summary>
	<param name="gridviewCollection"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SearchCombo_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.SearchCombo_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LoadAllTableFields(Interprise.Presentation.Base.ExtendedLayoutControl,System.Windows.Forms.Control,System.String)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.FindParentSectionControl(System.Windows.Forms.Control)">
	<summary>
	</summary>
	<param name="control"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.FindGridDataSource(DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
	</summary>
	<param name="gridView"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.UpgradeGridLayout(System.String,System.String,DevExpress.XtraGrid.Views.Grid.GridView,System.String@)">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<param name="gridview"></param>
	<param name="layout"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.RemoveExtendedLayoutFromHashTable(Interprise.Presentation.Base.ExtendedLayoutControl)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.RemoveHandlerLayoutControlMouseEvent(Interprise.Presentation.Base.ExtendedLayoutControl)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.RemoveReferenceFindForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.GetAllDraggedItem(System.String)">
	<summary>
	</summary>
	<param name="sectionLayout"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.AttachLayoutControlEventHandler(System.Windows.Forms.Control,Interprise.Presentation.Base.ExtendedLayoutControl)">
	<summary>
 Attach event handler to the layout manager control.
 </summary>
	<param name="sectionControl"></param>
	<param name="layoutControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.AttachLayoutControlMouseEvent(System.Windows.Forms.Control,Interprise.Presentation.Base.ExtendedLayoutControl)">
	<summary>
 Attach event handler to the layout manager control.
 </summary>
	<param name="sectionControl"></param>
	<param name="layoutControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LayoutControl_ItemSelectionChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.Gridview_HideCustomizationForm(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.GridView_MenuItemClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LayoutControl_HideCustomization(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.LayoutControl_ForceSaveLayout(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RoleManager.Gridview_ForceSaveLayout(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.AddressControlItem.NewControlName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.AddressControlItem.MustHandleControlCreated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PhoneControlItem.NewControlName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PhoneControlItem.MustHandleControlCreated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PasswordControlItem.NewControlName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PasswordControlItem.MustHandleControlCreated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RenameCaptionControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RenameCaptionControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RenameCaptionControl.ColumnName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RenameCaptionControl.DisplayName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RenameCaptionControl.NewDisplayName">
	<summary>
 Return
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.RenameCaptionControl.TableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RenameCaptionControl.#ctor">
	<summary>
 Create instance of this class.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RenameCaptionControl.#ctor(System.String)">
	<summary>
 Create instance of this class.
 </summary>
	<param name="displayName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RenameCaptionControl.Focus">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RenameCaptionControl.LoadDisplayName">
	<summary>
 Loads all displayname of particular table.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RenameCaptionControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.RenameCaptionControl.btnAdavance_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.QueryBuilderControl.ColumnNames">
	<summary>
 Returns the column name(s) of the query
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.QueryBuilderControl.ObjectNames">
	<summary>
 Returns view(s)/table(s) of the query
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.QueryBuilderControl.ClearSqlQueryCommand">
	<summary>
 This will clear the sql query command
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.QueryBuilderControl.CloseProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.QueryBuilderControl.NewDatasource">
	<summary>
 This should clear the sql query command
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.QueryBuilderControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtenderUtilityClass.PropertyExtenderFormatHandler.GetCurrencyCostDigits(System.String)">
	<summary>
 Get CurrencyCostDecimalDigits from SystemCurrency table.
 </summary>
	<param name="currencyCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtenderUtilityClass.CurrencyFormatter.RemoveObjectReference">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PropertyExtender.IsInDesignMode">
	<summary>
 This is just a workaround for DesignMode Property of Component.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GetSectionControl(System.Windows.Forms.Control)">
	<summary>
	</summary>
	<param name="control"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GetTabControl(System.Windows.Forms.Control)">
	<summary>
 Retrieves the control's tab page if any.
 </summary>
	<param name="control"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GetControlContainer(System.Windows.Forms.Control)">
	<summary>
 Retrieves the control's container
 </summary>
	<param name="control"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.SetTextMaxLength(System.MarshalByRefObject,System.String)">
	<summary>
 SetTextMaxLength
 </summary>
	<param name="p_Editor"></param>
	<param name="p_FieldName"></param>
	<remarks>JDR @ 10/26/09 &gt; Add method to set the maximum length of the editor</remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.BuildSmartTag(System.MarshalByRefObject)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GridControl_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GridControl_MouseHover(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GridControl_MouseLeave(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.Gridview_CustomDrawCell(System.Object,DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GetDisplayText(System.MarshalByRefObject)">
	<summary>
 Get the display text of the control.
 </summary>
	<param name="extendee"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.Gridview_ShowGridMenu(System.Object,DevExpress.XtraGrid.Views.Grid.GridMenuEventArgs)">
	<summary>
 Enable/Disable column customization
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GridView_MenuItemEditFieldClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GridView_MenuItemAddCustomFieldClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.ResetGridViewLayout(DevExpress.XtraGrid.GridControl)">
	<summary>
 Method that resets the section layout
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.GridView_MenuItemClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.Gridview_RenameCaption(System.Object,System.EventArgs)">
	<summary>
 Handles adding of rename caption menu.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.Gridview_ColumnCustomization(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.MemoExEdit_QueryPopUp(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyExtender.MemoExEdit_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handles showing of editor when a valid key is pressed
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyEditor.ColumnEditEditor.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PropertyEditor.PropertyEditorControl.BuildPropertyGrid">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressForm.GetProgressControl(Interprise.Extendable.Base.Presentation.Generic.Progress.IProgressInterface)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressForm.Maximum">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressForm.Minimum">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressForm.ProgressKind">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressForm.Status">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressForm.Value">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressForm.IsShowCancelButton">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressForm.m_progressControl_ProgressCancel(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressControl.Maximum">
	<summary>
 Gets or sets the progress maximum value. 
 <para>Applies when progresskind is default</para>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressControl.Minimum">
	<summary>
 Gets or sets the progress minimum value. 
 <para>Applies when progresskind is default</para>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressControl.Status">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressControl.Value">
	<summary>
 Gets or sets the current progress value. 
 <para>Applies when progresskind is default</para>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressControl.IsShowCancelButton">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressControl.InitializeControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressControl.GetValue">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressControl.GetMinimum">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressControl.GetMaximum">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Progress.ProgressControl.ProgressKind">
	<summary>
 Gets or sets the type of progress bar to display.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressControl.SetValue(System.Int32)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressControl.SetMinimum(System.Int32)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressControl.SetMaximum(System.Int32)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Progress.ProgressControl.buttonCancelProgress_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainForm.GetMainControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface)">
	<summary>
	</summary>
	<param name="plugin">The control that serves as a plugin or replacement for the current control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainForm.MenuItemAddPlugin_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.PluginTransactionKind">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.AssemblyPath">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.IsCompleted">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.AddData(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.DeleteData">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.Focus">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.LoadGridSettings">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.RegisterPlugin(System.String)">
	<summary>
	</summary>
	<param name="assemblyPath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.RemovePlugin(System.String)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.BeginRegisterPlugin(System.String)">
	<summary>
 Register the plugin asynchronously.
 </summary>
	<param name="assemblyPath">The full path of the assembly.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.Refresh">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<param name="row"></param>
	<param name="clearTableType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.LoadDataSet(Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.PluginTransactionType)">
	<summary>
	</summary>
	<param name="pluginKind"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.ShowNewForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.HideAddAndRemoveMenukey(System.Boolean)">
	<summary>
	</summary>
	<param name="isVisible"></param>
	<remarks>To hide Add and Remove Plugin menu key</remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.barmanagerPlugin_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.LoadDataset_Completed(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.SetDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.TabPluginManager_SelectedPageChanged(System.Object,DevExpress.XtraTab.TabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.gridviewPluginManager_FocusedRowChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.gridviewPluginManager_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.m_pluginHelper_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginManagerMainControl.m_pluginHelper_WorkCompleted(System.Object,Interprise.Presentation.Base.PluginManager.WorkCompletedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.AssemblyPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.Callback">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.IsCustom">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.LoadFromSDK">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.PluginAssemblyName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.PluginConfig">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.PluginFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.PluginState">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.ProgressFormText">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.ProgressFormHeading">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.ProgressFormSubHeading">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.ProgressFormStatusText">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.ShowApplyUserRoleForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.PluginHelper.UpdateResult">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.ApplySkinBaseOnOperatingSystem">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.#ctor(Interprise.Facade.Base.PluginManager.PluginFacade)">
	<summary>
	</summary>
	<param name="pluginFacade"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.CloseProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.CreateProgressForm">
	<summary>
	</summary>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.FinalizeAction">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.ShowErrMessage(System.String)">
	<summary>
	</summary>
	<param name="errorMessage"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.ShowModuleExistsMessage(System.String,System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<param name="currentVersion"></param>
	<param name="newVersion"></param>
	<param name="isUpGradeVersion"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.BeginPublishToMarketPlace">
	<summary>
 Register the plugin asynchronously.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.BeginRegisterPlugin">
	<summary>
 Register the plugin asynchronously.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.RegisterPlugin(System.String)">
	<summary>
	</summary>
	<param name="assemblyPath"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.RegisterPlugin_Completed(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.BeginUnregisterPlugin(System.Boolean,System.String)">
	<summary>
	</summary>
	<param name="isCustom"></param>
	<param name="pluginAssemblyName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.RemovePlugin(System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.RemovePlugin_Completed(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.RemoveAndRegisterPlugin(System.String)">
	<summary>
	</summary>
	<param name="assemblyPath"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.RemoveAndRegister_Completed(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.RunGenerateScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.UpdateDataSet">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.MergeXmlSchema(System.Data.DataSet@)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.GetDeveloperCodeFromUserRoleXML">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.ShowLogMessageForClassesWithMultipleImplementationJobExecutionMethod">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.UpdateProgress(System.Int32,System.String)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.Progress_Changed(System.Object,System.Timers.ElapsedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.m_pluginFacade_OnExecutingUserRoleScript(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.PluginFacade_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.PluginHelper.ProgressForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.WorkCompletedEventArgs.UpdateResult">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.NameControl.ParseName(System.String)">
	<summary>
 Parse full name into salutation, first name, middle name, last name and suffix.
 </summary>
	<param name="fullName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.HyperLinkControl.LinkType">
	<summary>
 Returns or sets the link type of the hyperlink (0 - URL; 1 - email)
 </summary>
	<value>The link type of the hyperlink (0 - URL; 1 - email)</value>
	<returns>The link type of the hyperlink (0 - URL; 1 - email)</returns>
</member><member name="M:Interprise.Presentation.Base.HyperLinkControl.#ctor">
	<summary>
 Initializes a new instance of the HyperLinkControl class; hyperlink functionality is set as single click 
 </summary>
</member><member name="M:Interprise.Presentation.Base.HyperLinkControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.HyperLinkControl.ResolveHyperLink(System.Int32)">
	<summary>
 Displays a hand cursor when the mouse pointer is over the hyperlink
 </summary>
	<param name="xpos">The x-coordinate of the mouse pointer when it is over the hyperlink</param>
	<returns>True, if the mouse pointer is not over the hyperlink; returns a null value, otherwise</returns>
	<remarks>This function saves the value of xpos as a class variable.</remarks>
</member><member name="M:Interprise.Presentation.Base.HyperLinkControl.ShouldHyperLink">
	<summary>
 Checks if the mouse pointer is over the hyperlink
 </summary>
	<returns>True, if the mouse pointer is over the hyperlink; False, otherwise</returns>
</member><member name="M:Interprise.Presentation.Base.HyperLinkControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Overrides the subroutine System.Windows.Forms.Control.OnMouseMove; calls function ResolveHyperlink
 when the mouse pointer is moved over the hyperlink
 </summary>
	<param name="e">The System.Windows.Forms.MouseEventArgs object that stores 
 the position of the mouse pointer</param>
</member><member name="M:Interprise.Presentation.Base.HyperLinkControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Overrides the subroutine System.Windows.Forms.Control.OnMouseDown; calls function ResolveHyperlink
 when the mouse button is pressed
 </summary>
	<param name="e">The System.Windows.Forms.MouseEventArgs object that stores 
 the position of the mouse pointer</param>
</member><member name="M:Interprise.Presentation.Base.HyperLinkControl.DoClick">
	<summary>
 Calls Global.DevExpress.XtraEditors.HyperLinkEdit.DoClick if the mouse pointer is over the hyperlink
 </summary>
</member><member name="M:Interprise.Presentation.Base.HyperLinkControl.HyperLinkControl_OpenLink(System.Object,DevExpress.XtraEditors.Controls.OpenLinkEventArgs)">
	<summary>
 Handles the OpenLink event of this hyperlink. It checks if the address represented by the hyperlink is null or not. If it is, the handler
 exits. If the link type is email, "mailto:" is appended to the front of the String representing the address of the hyperlink and is saved
 in the OpenLinkEventArgs instance of this hyperlink.
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An OpenLinkEventArgs containing the data for the event</param>
</member><member name="T:Interprise.Presentation.Base.HyperLinkControl">
	<summary>
 The base for all hyperlink controls in Connected Business
 </summary>
</member><member name="M:Interprise.Presentation.Base.FieldCheckerControl.comboPostalCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
 Gets the City, State, County, and Country
 </summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks>Gets the City, State, County, and Country</remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.WizardControl.FinishingWizard">
	<summary>
	</summary>
	<returns>True, if not cancelled.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabPageShared.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.TabPage(System.String)">
	<summary>
 Returns the instace of the tab page.
 </summary>
	<param name="tabPageName">The name of the tab page to retrieved.</param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.IsCustom">
	<summary>
 Gets or sets if a custom tab control.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.IsPlugIn">
	<summary>
 Gets or sets if a custom tab control.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.#ctor">
	<summary>
 Create an instance of the Extended TabControl.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.DiscoverPlugin(DevExpress.XtraTab.XtraTabPage,System.Object[])">
	<summary>
 Discovers and returns the plugin for the tabpage container.
 </summary>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.DiscoverPlugin(System.Type,DevExpress.XtraTab.XtraTabPage,System.Object[])">
	<summary>
 Discovers and returns the plugin for the tabpage container.
 <para>Usage: 1. TabControl.DiscoverPlugin(GetType(sectioncontrol),tabPage,parameters) </para>
		<para>       2. TabControl.DiscoverPlugin(GetType(sectioncontrol),tabPage) </para>
	</summary>
	<param name="sectionClassType">Type of the plugin control. Use GetType to retrieved.</param>
	<param name="tabPage">The container of the control.</param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.IsAssemblyExists(System.String)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.GetPluginSection(System.Type,DevExpress.XtraTab.XtraTabPage,System.Object[])">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.GetRegisteredPlugin(System.Type,DevExpress.XtraTab.XtraTabPage,System.Boolean,System.Object[])">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="autoRegister"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.GetPluginTabs(System.String)">
	<summary>
 Get plugin tab pages of a tab control.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.AttachHandler(System.Windows.Forms.Control,System.String)">
	<summary>
 Attach event handler for the grid control.
 </summary>
	<param name="sectionControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.AttachLayoutControlEventHandler(System.Windows.Forms.Control,DevExpress.XtraLayout.LayoutControl)">
	<summary>
 Attach event handler to the layout manager control.
 </summary>
	<param name="sectionControl"></param>
	<param name="layoutControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.LoadSectionLayout(System.Windows.Forms.Control,System.String)">
	<summary>
 Loads the layout of the section control.
 </summary>
	<param name="sectionControl"></param>
	<param name="sectionLayout"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.InitializeSection(System.Windows.Forms.Control,System.String[])">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="plugins"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.LoadGridLayout(System.Windows.Forms.Control,DevExpress.XtraGrid.Views.Grid.GridView[],System.String)">
	<summary>
 Load grid layout. 
 </summary>
	<param name="sectionControl"></param>
	<param name="gridLayout"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.SaveGridLayout(System.Windows.Forms.Control,DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
 Saves grid layout.
 </summary>
	<param name="sectionControl"></param>
	<param name="gridview"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.InitializeOnFormLoad(System.String[][])">
	<summary>
	</summary>
	<param name="pluginTabs"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.InitializeOnFormLoad(System.String[])">
	<summary>
	</summary>
	<param name="pluginTab"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl.InitializeCustomPlugin(DevExpress.XtraTab.ViewInfo.ViewInfoTabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="eventArgsTabPage"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.PluginToRemove">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.PluginContainerRows">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.HasUnusedPlugin">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.PluginContainerItemAdded">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.IsPluginContainer">
	<summary>
 Determines the use of this control.
 </summary>
	<value>
		<para>True if serves as container for plugin</para>
		<para>False if serves as a contaner for any control rather than plugins. </para></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.IsIntializeOnFormLoad(System.Windows.Forms.Control)">
	<summary>
	</summary>
	<param name="sectioncontrol"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.ParentTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.CurrentExtendedLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.IsTabPageAdded">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.HasCustomUserRoleSection">
	<summary>
 Gets or sets whether the plugin container control has custom user role section.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.OwnerItem">
	<summary>
 Gets or sets whether the plugin container control has custom user role section.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.CanAddCustomField">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.PluginInfoCollection">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.CurrentRoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.InitializeButtons">
	<summary>
 This method creates buttons(help, select none, select none) when ShowHelpTopicButton and ShowSelectionButtons are set to True.
 This method will only be used when Form Type is  Wizard 
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetPluginBindingAttribute(System.Windows.Forms.Control)">
	<summary>
	</summary>
	<param name="sectioncontrol"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.DiscoverPlugin(System.Object[])">
	<summary>
 Discovers and returns the plugin for the plugin container.
 </summary>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.DiscoverPlugin(System.String[][],System.Object[])">
	<summary>
 Discovers and returns the plugin for the plugin container.
 </summary>
	<param name="plugins"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.DiscoverPlugin(System.Type,System.Object[])">
	<summary>
 Discovers and returns the plugin for the plugin container.
 </summary>
	<param name="sectionClassType">Type of the plugin control. Use GetType to retrieved.</param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.PluginContainerControl_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.RemoveUnusedPlugin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.AddPlugin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.SystemUserRoleMenuFormSectionInfos">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.SystemUserRolePluginMenuFormSectionInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.RemovePlugin(System.Boolean,Interprise.Presentation.Base.BaseRibbonForm)">
	<summary>
 Remove a plugin section of plugin tab page.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ReplacePlugin">
	<summary>
 Replace plugin section.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.CustomizeSectionLayout">
	<summary>
 Customize layout of a control.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.SaveSectionLayout">
	<summary>
 Customize layout of a control.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ResetSectionLayout">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ShowHidePlugin">
	<summary>
 Show or hide a plugin section or page.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.EnableDisablePlugin">
	<summary>
 Enable or disable a plugin section or page.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.HasGridControl(System.Windows.Forms.Control@)">
	<summary>
 Detect if a section control has underlying grid control.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ResetGridLayout">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.CustomizeGridLayout">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.FindExtendedLayout(System.Windows.Forms.Control)">
	<summary>
 Find's the ExtendedLayoutControl of the current PluginContainerControl
 </summary>
	<param name="container"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.AddCustomField">
	<summary>
 Add's a custom field to the current section
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.EditDataSource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.RemoveHandler_ExtendedLayoutTabPageChanged(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface)">
	<summary>
 This method method remove the tab page changed handler of the ExtendedLayoutControl
 </summary>
	<param name="plugin">This is the section plugin with extended layout control.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetCurrentSectionControl(System.Windows.Forms.Control@,DevExpress.XtraTab.XtraTabPage@)">
	<summary>
 Gets the current control and the selected tab page.
 </summary>
	<param name="currentSectionControl"></param>
	<param name="currentTabPage"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetCurrentTabPage">
	<summary>
 Returns the currently selected tab page
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetMenuFormSectionRow(System.Type,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetUserRoleMenuFormSectionDescription(System.Type,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="sectionClassName"></param>
	<param name="parentSectionName"></param>
	<param name="sectionDescription"></param>
	<param name="formClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.RegisterPluginForm(System.Type)">
	<summary>
	</summary>
	<param name="formClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ShowRegistrationStatus(System.String)">
	<summary>
	</summary>
	<param name="status"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetErrorMessage(System.Exception,System.String)">
	<summary>
	</summary>
	<param name="ex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.HandleException(System.Exception)">
	<summary>
	</summary>
	<param name="ex"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetPluginSection(System.Type,System.Object[])">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetRegisteredPlugin(System.Type,System.Boolean,System.Object[])">
	<summary>
	</summary>
	<param name="sectionClassType"></param>
	<param name="autoRegister"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.IsAssemblyExists(System.String,System.Boolean,System.String,System.String)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.OnUserSignedOut(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.IsCustomPlugin(System.String)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetGridLayout(System.String,System.String)">
	<summary>
 To transfer on base control
 </summary>
	<param name="gridLayout"></param>
	<param name="gridViewName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.FindGridControl(System.Windows.Forms.Control,DevExpress.XtraGrid.Views.Grid.GridView[]@)">
	<summary>
 Find all grid controls in the particular section control.
 </summary>
	<param name="sectionControl"></param>
	<param name="gridviewCollection"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.SaveGridLayout(System.Windows.Forms.Control,DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
 Saves grid layout.
 </summary>
	<param name="sectionControl"></param>
	<param name="gridview"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.LoadGridLayout(System.Windows.Forms.Control,System.String)">
	<summary>
 Loads the grid layout of grid views in a control.. 
 </summary>
	<param name="sectionControl"></param>
	<param name="gridLayout"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.LoadSectionLayout(System.Windows.Forms.Control,System.String)">
	<summary>
 Loads the layout of the section control.
 </summary>
	<param name="sectionControl"></param>
	<param name="sectionLayout"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.AttachLayoutControlEventHandler(System.Windows.Forms.Control,DevExpress.XtraLayout.LayoutControl)">
	<summary>
 Attach event handler to the layout manager control.
 </summary>
	<param name="sectionControl"></param>
	<param name="layoutControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.InitializeSection(System.Windows.Forms.Control,System.String[])">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="pluginInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.FindBindedControl(System.Windows.Forms.Control,System.Object@,System.String@,System.Data.DataTable@)">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="dataSource"></param>
	<param name="tableName"></param>
	<param name="entityTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.IsInLayoutControl(DevExpress.XtraLayout.LayoutControl,System.String)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.LoadAllTableFields(DevExpress.XtraLayout.LayoutControl,System.Windows.Forms.Control)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonPluginInspector_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.barManagerPluginManagement_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonGroupContext_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonPopupMenu_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonAddPlugin_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.SearchForm_EndInitializeColumns(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonRemoveUnusedPlugin_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonReplacePlugin_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonRemovePlugin_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonEnableDisablePlugin_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonShowHidePlugin_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonCustomizeSectionLayout_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonSaveSectionLayout_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
 Ref: INTVIPTI-4203 Added by: g.medina 09242012

</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonRemoveAssignedHelpTopic_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonResetSectionLayout_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_layoutcontextmenu_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Handle visibility and accessibility of menus.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonAddCustomField_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonEditProperties_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.m_buttonSetColumns_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.EditorItem_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.CanHandleControlAdded(System.Windows.Forms.ControlEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.HandleControlAdded(System.Windows.Forms.ControlEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.AddChildToParent(Interprise.Presentation.Base.BaseControl,Interprise.Presentation.Base.BaseControl)">
	<summary>
	</summary>
	<param name="actAsParent"></param>
	<param name="actAsChild"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.Facade_PluginSerialization(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginContainerControl.ItemClickEventArgs.Name">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ItemClickEventArgs.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ItemClickEventArgs.#ctor(System.String)">
	<summary>
	</summary>
	<param name="name"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetClassType(System.String,System.String)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<param name="classType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.AddAutoHidePageEventHandlers(DevExpress.XtraLayout.TabbedControlGroup,DevExpress.XtraLayout.LayoutControlGroup)">
	<summary>
	</summary>
	<param name="parentLayoutGroup"></param>
	<param name="layoutGroup"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.InitializedAutoHideRibbonPages(Interprise.Presentation.Base.BaseControl)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetItemControl(DevExpress.XtraLayout.BaseLayoutItem)">
	<summary>
	</summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetItemControls(Interprise.Presentation.Base.ExtendedLayoutControlItem)">
	<summary>
	</summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetMainLayoutControl(Interprise.Presentation.Base.BaseControl)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.GetTabPageItemControls(DevExpress.XtraLayout.LayoutGroup)">
	<summary>
	</summary>
	<param name="tabPage"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ManageAutoHideEventHandlers(Interprise.Presentation.Base.PluginContainerControl.MangedEventHandler,DevExpress.XtraLayout.TabbedControlGroup,DevExpress.XtraLayout.LayoutTabPageChangingEventHandler,DevExpress.XtraLayout.LayoutTabPageChangedEventHandler)">
	<summary>
	</summary>
	<param name="manageEventHandler"></param>
	<param name="tabbedControlGroup"></param>
	<param name="selectedPageChanging"></param>
	<param name="selectedPageChanged"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.RemoveAutoHidePageEventHandlers(DevExpress.XtraLayout.TabbedControlGroup,DevExpress.XtraLayout.LayoutControlGroup)">
	<summary>
	</summary>
	<param name="parentLayoutGroup"></param>
	<param name="layoutGroup"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.RemoveAutoHideRibbonPageEventHandler(Interprise.Presentation.Base.BaseControl)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ShowHideRibbonPage(System.Boolean,System.String,System.String)">
	<summary>
	</summary>
	<param name="show"></param>
	<param name="controlName"></param>
	<param name="controlRibbonPage"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ShowHideRibbonPage(Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl,System.Boolean)">
	<summary>
	</summary>
	<param name="tabControl"></param>
	<param name="show"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ShowHideRibbonPage(DevExpress.XtraLayout.LayoutControl,System.Boolean)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<param name="show"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.TabbedControlGroup_SelectedPageChanging(System.Object,DevExpress.XtraLayout.LayoutTabPageChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.TabbedControlGroup_SelectedPageChanged(System.Object,DevExpress.XtraLayout.LayoutTabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.ManageChildControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginContainerControl.CreatePluginInfo(System.String,System.String,System.String,System.Type)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formMenuCode"></param>
	<param name="sectionClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginContainerControlDesigner.AutoSizeThis(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginContainerControlDesigner.AutoSizeWidth(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginContainerControlDesigner.AutoSizeHeight(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginContainerControlDesigner.AddEventHandlerAsInvoker(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginContainerControlDesigner.AddEventHandlerAsReceiver(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.FormSectionsInfo.Refresh">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Patterns.EnableChangedEventArgs.IsEnabled">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Patterns.EnableChangedEventArgs.#ctor(System.Boolean)">
	<summary>
	</summary>
	<param name="isEnabled"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Patterns.BarManagerCommander.BarItem">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Patterns.BarManagerCommander.FormID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Patterns.BarManagerCommander.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Patterns.BarManagerCommander.GetFormID">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Patterns.BarManagerCommander.SetFormID(System.String)">
	<summary>
	</summary>
	<param name="formID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Patterns.BarManagerCommander.HandleUIEvent(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Patterns.BarManagerCommander.HandleEnableChangedEvent(System.Object,Interprise.Presentation.Base.Patterns.EnableChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Patterns.BarManagerCommander.ManageItemClickHandler(System.Boolean)">
	<summary>
	</summary>
	<param name="add"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Patterns.BarManagerCommander.Disconnect(System.String)">
	<summary>
	</summary>
	<param name="formId"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.My.Resources.MessageWindowForm.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.MessageWindowForm.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Interprise.Presentation.Base.My.Resources.MessageWindowForm">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_AlignRight">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_AutoCorrect">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_AutoNumbered">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_Bold">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_Bullet">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_Center">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_CheckBox">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_DecreaseIndent">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_FontBackColor">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_FontColor">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_FormatTable">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_HeaderAndFooter">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_Help">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_ImageInline">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_IncreaseIndent">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_InputButton">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_InsertDateAndTime">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_InsertPageNumber">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_InsertPicture">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_Italic">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_Justify">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_Link">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_ManageMultipleUserSignin">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_MergeEmailTemplate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_MergeFields">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_MergeTemplates">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_NewEmailTemplate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_OpenEmailTemplate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_OpenFile">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_PageSetup">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_RadioButton">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_ReadOnly">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_RemoveReadOnly">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_Replace">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_SelectAll">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_SpellCheck">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_SubmitButton">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_TextBox">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_UserRoleUpdate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_ViewNormal">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_ViewPrintLayout">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16px_WoohaaUserRoleUpdate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._16x16_Info">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources._1MergeTemplates">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AddCustomFieldSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AddPluginLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AddPluginSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AddressSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AddTabSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AdvancedSearchLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AlignLeftLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AlignLeftSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AlignRightLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AlignRightSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AmendLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AmendSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AppearanceLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AppearanceSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ArrowDownCircleSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AssignedHelpTopicSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AutoCorrect">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AutoNumbered">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AutoNumberedLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.AutoNumberedSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.BoldLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.BoldSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.BulletLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.BulletSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CancelSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CenterLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CenterSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ChartSelectionOnlySmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CheckBox">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CheckedSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CheckSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CloseLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CloseSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CollapseAll">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ColumnChooserSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ColumnsLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ColumnsSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CommunityLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CommunitySmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CopyLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CopySmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CustomizeLayoutSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CutLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.CutSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DataDictionaryLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DataDictionarySmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DataSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DecreaseIndentLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DecreaseIndentSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DeleteCellSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DeletePluginSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DiscardChangesLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.DisplayGraphSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.EditPluginLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.EditPluginSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.EditPropertiesLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.EditPropertiesSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.EditSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.EnableSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ErrorShieldLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExpandAll">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToCSVLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToCSVSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToExcelLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToExcelSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToHTMLLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToHTMLSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToMHTLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToMHTSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToPDFLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToPDFSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToPNGLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToPNGSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToRTFLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToRTFSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToTXTLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToTXTSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExportToXMLSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ExtendedLayoutControlSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FetchMoreLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FetchMoreSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FindLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FindSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FontBackColorLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FontBackColorSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FontColorLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FontColorSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.FormatTable">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ForumLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ForumSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.GenerateSeriesFromColumnsSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.HeaderAndFooter">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.HelpSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.HtmlSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.IERefreshSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ImageInline">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.IncreaseIndentLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.IncreaseIndentSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.Info">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InformationLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InputButton">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertDateAndTime">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertLinkLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertLinkSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertPageNumber">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertPicture">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertPictureLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertPictureSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertRowAboveLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertRowAboveSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertRowBelowLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InsertRowBelowSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InspectPluginLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InspectPluginSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.InstalledPluginLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ISSISuite">
	<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.Italic">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ItalicLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ItalicSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ItemAlignmentLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.JustifyLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.JustifySmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.LayoutSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.Link">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.LockedSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.LogOut">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.LogOut16x16">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.LostPlugin">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.LostPlugin_16px">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ManageMultipleUserSignin">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.MergeEmailTemplate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.MergeFields">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.MiscellanaeousLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.MiscellanaeousSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.moveback">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.MoveLeftSelectedMedium">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.moveright">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.MoveRightSelectedMedium">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.NewEmailTemplate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.NewLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.NewSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.NoSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.NoticeSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OKSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OneColumn">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OnlineHelpInterpriseSuiteeCommerceLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OnlineHelpInterpriseSuiteeCommerceSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OnlineHelpInterpriseSuiteLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OnlineHelpInterpriseSuiteSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OpenEmailTemplate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OpenFile">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OpenPluginLocationLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OpenSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.OptionSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PageSetup1">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PasswordSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PasteLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PasteSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PhoneSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PluginContainerControlSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PluginFromLocalLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PluginFromWebLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PlusPlusSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PrintDialogLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PrintDialogSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PrintLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PrintPreviewLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PrintPreviewSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PrintSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PropertiesLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.PropertiesSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.QuestionLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RadioButton">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RedoLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RedoSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RefreshLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RefreshSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RemoveAssignedHelpTopicSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RemoveHyperlInkLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RemoveHyperlInkSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RemovePluginLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RemovePluginSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RepHyperlinkSearchComboControlSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RepHyperlinkSearchTreeComboControlSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.Replace">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ReplacePlugin14px">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RepositoryControlsLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RepositoryControlsSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RepSearchComboControlSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RepSearchTreeComboControlSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ResetGridLayoutSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ResetLayoutSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ResetSectionLayoutSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ResetSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RibbonLogo">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RibbonStyle_Icon_EPoint">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RibbonStyle_Icon_i">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RibbonStyle_Icon_QMark">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.RibbonStyle_Icon_X">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAndCloseLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAndCloseSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAndNewLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAndNewSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAndPostLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAndPostSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAs">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAsSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveAsWebPage">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveChangesLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SaveSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SearchListLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SearchListSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SectionDescription14px">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SelectAllLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SelectAllSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SelectNoneLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SelectNoneSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SetColumnsSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ShowColumnGrandTotalSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ShowPointLabelsSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ShowRowGrandTotalSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ShowRulerLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ShowRulerSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ShowSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SignOutLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SignOutSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SortAscendingSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SourceCodeInstallation_ISLogo">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SpellCheck">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SubmitButton">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SupportLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SupportSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.SystemPlugin12px">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.TextBox">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ThreeColumns">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ToolSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.TwoColumns">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UnCheckedSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UncheckSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UnderlineLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UnderlineSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UndoLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UndoSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UnLockedSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UserRoleUpdate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UserSkinLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.UserSkinSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ViewGridSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ViewNormal">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ViewPrintLayout">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ViewTableLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ViewTableSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WarningLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WizardCompleted">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WizardLeftLogo">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WizardLeftSignage">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WizardSideBanner">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WizardTopBanner">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WizardTopLogo">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WizardWelcome">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WoohaaUserRoleUpdate">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WoohaaWizardSideBanner">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WoohaaWizardTopBanner">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.WriteLetterLarge">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ZoomInSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Presentation.Base.My.Resources.Resources.ZoomOutSmall">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:Interprise.Presentation.Base.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="E:Interprise.Presentation.Base.Message.MessageWindowForm.Cancelled">
	<summary>
 Occurs when an action is cancelled
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowForm.IsNotifier">
	<summary>
 Gets or sets the value indicating if the message window will be shown as a notifier in the taskbar (True) or just an ordinary message window (False)
 </summary>
	<value>The value indicating if the message window will be shown as a notifier in the taskbar (True) or just an ordinary message window (False)</value>
	<returns>The value indicating if the message window will be shown as a notifier in the taskbar (True) or just an ordinary message window (False)</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowForm.DefaultButton">
	<summary>
 Gets or sets the value representing the type of default button
 </summary>
	<value>The Enum value representing the type of default button</value>
	<returns>The Enum value representing the type of default button</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowForm.Icon">
	<summary>
 Gets or sets the value representing the type of icon
 </summary>
	<value>The Enum value representing the type of icon</value>
	<returns>The Enum value representing the type of icon</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowForm.Message">
	<summary>
 Gets or sets the String representing the text in the message window
 </summary>
	<value>The String representing the text in the message window</value>
	<returns>The String representing the text in the message window</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowForm.Title">
	<summary>
 Gets or sets the String representing the title of the message window
 </summary>
	<value>The String representing the title of the message window</value>
	<returns>The String representing the title of the message window</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowForm.IsSystemError">
	<summary>
 Gets or sets the value indicating if the error that occurred is a system error (True) or not (False)
 </summary>
	<value>The value indicating if the error that occurred is a system error (True) or not (False)</value>
	<returns>The value indicating if the error that occurred is a system error (True) or not (False)</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowForm.Detail">
	<summary>
 Gets or sets the text containing the error details of the exception
 </summary>
	<value>The text containing the error details of the exception</value>
	<returns>The text containing the error details of the exception</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowForm.HowToReproduce">
	<summary>
 Gets the text contained in the reproduce error page 
 </summary>
	<returns>The text contained in the reproduce error page</returns>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.CreateMessageWindowControl">
	<summary>
 Creates an instance of a message window control
 </summary>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.AssignDefaultButton">
	<summary>
 Assigns the button to trigger when Enter is pressed
 </summary>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.UpdateMessage(System.String,System.Boolean)">
	<summary>
 Appends the message String to the existing memo message 
 </summary>
	<param name="message">The message String to append to the existing memo message</param>
	<param name="isClear">The value indicating if the text is set for clearing (True) or not (False)</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.InitializeUserSkin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.MessageWindowForm_Load(System.Object,System.EventArgs)">
	<summary>
 Handles the Load event of MessageWindowForm; performs various settings and creates an instance of a message window control
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.MessageWindowForm_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 MessageWindowForm_KeyUp
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This should handle the shortcut keys of the popup form.  This needs the KeyPreview property of the form to be TRUE.</remarks>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.MenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Handles the Click event of the message button; returns the appropriate button according to the text displayed 
 within the pressed button and closes the message box
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.NotifyIconMessage_BalloonTipClosed(System.Object,System.EventArgs)">
	<summary>
 Handles the BalloonTipClosed event of NotifyIconMessage; closes the message window
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.NotifyIconMessage_BalloonTipClicked(System.Object,System.EventArgs)">
	<summary>
 Handles the BalloonTipClicked event of NotifyIconMessage; closes the message window
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.m_messageWindowControl_Cancelled(System.Object,System.EventArgs)">
	<summary>
 Handles the Cancelled event of the message window control; raises the Cancelled event with the message window form as the sender
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.Dispose(System.Boolean)">
	<summary>
 Overrides System.Windows.Forms.Form.Dispose; disposes of MessageWindowControl components 
 </summary>
	<param name="disposing">True, to release both managed and unmanaged resources; False, to release only unmanaged resources</param>
</member><member name="E:Interprise.Presentation.Base.Message.MessageWindowControl.Cancelled">
	<summary>
 Occurs when an action is cancelled
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowControl.DefaultButton">
	<summary>
 Gets the value representing the type of default button; sets the type of default button according to the value given
 </summary>
	<value>The Enum value representing the type of default button</value>
	<returns>The Enum value representing the type of default button</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowControl.HowToReproduce">
	<summary>
 Gets the text contained in the reproduce error page 
 </summary>
	<returns>The text contained in the reproduce error page</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowControl.Icon">
	<summary>
 Gets the value representing the type of icon in the message window; sets the type of icon according to the value given
 </summary>
	<value>The Enum value representing the type of icon</value>
	<returns>The Enum value representing the type of icon</returns>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowControl.IsSystemError">
	<summary>
 Checks if the message is system error or not. Use in setting up the UI.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindowControl.Message">
	<summary>
 Gets or sets the String representing the text in the message window
 </summary>
	<value>The String representing the text in the message window</value>
	<returns>The String representing the text in the message window</returns>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.#ctor">
	<summary>
 Initializes a new instance of the MessageWindowControl class
 </summary>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.#ctor(System.String,Interprise.Connectivity.Database.Configuration.Design.Shared.Enum.MessageWindowButtons,Interprise.Connectivity.Database.Configuration.Design.Shared.Enum.MessageWindowDefaultButton,Interprise.Connectivity.Database.Configuration.Design.Shared.Enum.MessageWindowIcon,System.String,System.String,System.Boolean,System.Boolean,System.String)">
	<summary>
 Initializes a new instance of the MessageWindowControl class; sets the defaults
 </summary>
	<param name="message">A String representing the error message</param>
	<param name="enmButtons">A MessageWindowButtons Enum representing the type of message window button</param>
	<param name="enmDefaultButton">A MessageWindowDefaultButton Enum representing the type of default button</param>
	<param name="enmIcon">A MessageWindowIcon Enum representing the type of message window icon</param>
	<param name="title">A String representing the title of the control</param>
	<param name="detail">A String representing the details of the error message</param>
	<param name="isSystemError">A value indicating if a system error has occurred (True); False, otherwise</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.ShowErrorDetail(System.Boolean)">
	<summary>
 Displays the error details in a dialog box
 </summary>
	<param name="isShowHowToReproducePage">The value indicating if the reproduce error page is shown (True) or not (False)</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.UpdateMessage(System.String,System.Boolean)">
	<summary>
 Appends the message String to the existing window message 
 </summary>
	<param name="message">The message String to append to the existing window message</param>
	<param name="isClear">The value indicating if the text is set for clearing (True) or not (False)</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.ButtonLiveSupport2_Click(System.Object,System.EventArgs)">
	<summary>
 Handles the Click event of Live Support 2 button; opens the appropriate URL
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.ButtonGoToForum_Click(System.Object,System.EventArgs)">
	<summary>
 Handles the Click event of Forum button; opens the appropriate URL
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.LinkLabel1_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
	<summary>
 Handles the LinkClicked event of LinkLabel1; shows the error details in a dialog box 
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A LinkLabelLinkClickedEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.LinkLabel2_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
	<summary>
 Handles the LinkClicked event of LinkLabel2; shows the error details in a dialog box
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A LinkLabelLinkClickedEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowControl.MessageWindowControl_ParentChanged(System.Object,System.EventArgs)">
	<summary>
 Handles the ParentChanged event of the message window control; assigns the new button to be clicked when Enter is pressed
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="P:Interprise.Presentation.Base.Message.MessageWindow.ParentForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindow.GetHost">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ErrorDetailForm.IsShowHowToReproducePage">
	<summary>
 Sets the value indicating if the reproduce error page is shown (True) or not (False)
 </summary>
	<value>The value indicating if the reproduce error page is shown (True) or not (False)</value>
</member><member name="P:Interprise.Presentation.Base.ErrorDetailForm.ErrorDetail">
	<summary>
 Sets the error message details text
 </summary>
	<value>The error message details text</value>
</member><member name="P:Interprise.Presentation.Base.ErrorDetailForm.HowToReproduce">
	<summary>
 Gets or sets the text contained in the reproduce error page 
 </summary>
	<value>The text to be contained in the reproduce error page</value>
	<returns>The text contained in the reproduce error page</returns>
</member><member name="M:Interprise.Presentation.Base.ErrorDetailForm.CreateErrorDetailControl">
	<summary>
 Adds a new error detail control to the panel body
 </summary>
</member><member name="M:Interprise.Presentation.Base.ErrorDetailControl.#ctor">
	<summary>
 Initializes a new instance of the ErrorDetailControl class
 </summary>
</member><member name="M:Interprise.Presentation.Base.ErrorDetailControl.Dispose(System.Boolean)">
	<summary>
 Overrides System.Windows.Forms.Form.Dispose; disposes of all associated components
 </summary>
	<param name="disposing">True, to release both managed and unmanaged resources; False, to release only unmanaged resources</param>
</member><member name="P:Interprise.Presentation.Base.ErrorDetailControl.IsShowHowToReproducePage">
	<summary>
 Sets the value indicating if the reproduce error page is shown (True) or if the error details page is shown (False)
 </summary>
	<value>The value indicating if the reproduce error page is shown (True) or if the error details page is shown (False)</value>
</member><member name="P:Interprise.Presentation.Base.ErrorDetailControl.ErrorDetail">
	<summary>
 Sets the error message details text
 </summary>
	<value>The error message details text</value>
</member><member name="P:Interprise.Presentation.Base.ErrorDetailControl.HowToReproduce">
	<summary>
 Gets or sets the text contained in the reproduce error page 
 </summary>
	<value>The text to be contained in the reproduce error page</value>
	<returns>The text contained in the reproduce error page</returns>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.#ctor">
	<summary>
 Initializes a new instance of the MessageWindowForm class
 </summary>
</member><member name="M:Interprise.Presentation.Base.Message.MessageWindowForm.Dispose(System.Boolean)">
	<summary>
 Overrides System.Windows.Forms.Form.Dispose; disposes of MessageWindowForm components 
 </summary>
	<param name="disposing">True, to release both managed and unmanaged resources; False, to release only unmanaged resources</param>
</member><member name="M:Interprise.Presentation.Base.ErrorDetailForm.#ctor">
	<summary>
 Initializes a new instance of the ErrorDetailForm class
 </summary>
</member><member name="M:Interprise.Presentation.Base.ErrorDetailForm.Dispose(System.Boolean)">
	<summary>
 Overrides System.Windows.Forms.Form.Dispose; disposes of all associated components
 </summary>
	<param name="disposing">True, to release both managed and unmanaged resources; False, to release only unmanaged resources</param>
</member><member name="M:Interprise.Presentation.Base.MergeFieldForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.MergeFieldForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IMergeFieldInterfacevb</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.MenuActionAttribute.Action">
	<summary>
 Indicates action to be performed by the current form.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.MenuActionAttribute.#ctor(System.String)">
	<summary>
 Set action performed by this class.
 </summary>
	<param name="action">Indicates actions or usage to be performed by the class.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.MenuActionAttribute.GetAction(System.String,System.String)">
	<summary>
 Gets the fully qualified name of an action.
 </summary>
	<param name="actionQualifiedName"></param>
	<param name="action"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedControlActionList.CheckActionExists(System.String,System.String,System.Boolean)">
	<summary>
 Function to check if an action item was already added in the action collection
 </summary>
	<param name="displayName"></param>
	<param name="category"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedXtraTabContol.SelectedPageChangedEventArgs.PrevPage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedXtraTabContol.SelectedPageChangedEventArgs.NextPage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedXtraTabContol.SelectedPageChangedEventArgs.SelectedPage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedXtraTabContol.SelectedPageChangedEventArgs.TabControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.BarItemEventCodeGenerator.VSCodeGeneratorClass.InsertRegionInClass(EnvDTE80.EditPoint2,System.CodeDom.CodeStatement,System.String)">
	<summary>
	</summary>
	<param name="editPoint"></param>
	<param name="regionDirectiveStatement"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.BarItemEventCodeGenerator.VSCodeGeneratorClass.CreateRegionDirectiveForMethodName(System.CodeDom.CodeRegionMode,System.String)">
	<summary>
	</summary>
	<param name="codeRegionMode"></param>
	<param name="methodName"></param>
	<remarks></remarks>
</member><member name="F:Interprise.Presentation.Base.SearchSettingsControl.m_dataBindingDataSet">
	<summary>
 Returns the Databinding-DataSource that will be used on the search query and extended property
 </summary>
	<remarks></remarks>
</member><member name="F:Interprise.Presentation.Base.SearchSettingsControl.m_dataBindingTableName">
	<summary>
 Returns the Databinding-TableName that will be used on the search query and extended property
 </summary>
	<remarks></remarks>
</member><member name="F:Interprise.Presentation.Base.SearchSettingsControl.m_dataBindingColumnName">
	<summary>
 Returns the Databinding-ColumnName that will be used on the search query and extended property
 </summary>
	<remarks></remarks>
</member><member name="F:Interprise.Presentation.Base.SearchSettingsControl.m_additionalFilter">
	<summary>
 Returns the additional filter string that will be used on the search query and extended property
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedPropertyGrid.PropertyGrid.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedPropertyGrid.PropertyGrid.m_toolStrip_ItemClicked(System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.ExtendedLayoutControl.ForceSaveLayout">
	<summary>
 Force save changes to the ExtendedLayout
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.IsPluginChild">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.CurrentPluginInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.Filter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.TableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.ParentTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.CurrentSelectedItem">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.PreviousSelectedItem">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.IsCustomized">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.HasGroupRemoved">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.DisableForceSaveLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.ControlBindingMemberInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.ColumnName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.ColumnType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.SelectedTabbedControlGroup">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.IsAddingTab">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.DataContainer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.LayoutRoleManager">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.IsRestoringLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.PluginInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.TableSchema">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.ParentBaseControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.IsPopupMenuShowing">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.IsChangesPending">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.HasItemAdded">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.HasCustomItems">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.HasPluginInstance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.NewTabs">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.CanRemoveTab">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.CustomLayouts">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.DeveloperID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.AddressColumns(Interprise.Presentation.Base.Address.AddressControl)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.PasswordColumns(Interprise.Presentation.Base.Customization.PasswordControl)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.PhoneColumns(Interprise.Presentation.Base.Address.PhoneControl)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.AddressControls">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.PhoneControls">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.PasswordControls">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.CancelHandleEvent">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.PluginContainerDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.DefaultTabPages">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.OverrideAllowCustomizationMenu">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.SystemUserRoleMenuFormSectionInfos">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.UsedMaxCounter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ClearSelectedItems">
	<summary>
 Clear's all selected layout control item(s)
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.GetCurrentDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.GetCurrentFacade">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.UpdateCustomLayouts(Interprise.Presentation.Base.PluginContainerControl,DevExpress.XtraLayout.LayoutGroup,System.Boolean)">
	<summary>
	</summary>
	<param name="pcc">Parent control of the new ExtendedLayoutControl</param>
	<param name="group">The group(Tab) to be added or removed</param>
	<param name="removeTab">Value that determines if a group(Tab) is to be removed</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.OnCreateNewExtendedLayoutControl(System.Boolean,Interprise.Presentation.Base.PluginContainerControl)">
	<summary>
	</summary>
	<param name="isNewTab">Determine if an ExtendedLayoutControl to be added is from a newly added tab.</param>
	<param name="pcc">Parent control of the new ExtendedLayoutControl to be created.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.CanAddTab(System.Object)">
	<summary>
 Validate's an object if a new tab can be added.
 </summary>
	<param name="sender">An object to be checked if it's valid for adding new tab.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedLayoutControl.CurrentLayoutControlGroup">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.NewPluginTab(System.Object)">
	<summary>
 Create's PluginContainerItem with a PluginContainerControl as the item's Control
 </summary>
	<param name="sender"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.OnAddField(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.OnEditField(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.OnAddTab(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.FixedItem(Interprise.Framework.Base.Shared.Enum.FixedItemType,Interprise.Framework.Base.Shared.Enum.Management)">
	<summary>
 Register/un-register Interprise (Custom) fixed item
 </summary>
	<param name="fixedItem">Indicate the fixed item type</param>
	<param name="register">Indicate if a fixed item is to be registered or un-registered</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.TempAddHandler(DevExpress.Utils.Menu.DXMenuItemCollection)">
	<summary>
	</summary>
	<param name="items"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.DisableTabEventHandler(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.CanHandleControlAdded(System.Windows.Forms.ControlEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.GetExtendedLayoutControl(Interprise.Presentation.Base.PluginContainerControl)">
	<summary>
	</summary>
	<param name="pcc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.HandleControlAdded(System.Windows.Forms.ControlEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.HandleItemAdded(System.Object)">
	<summary>
	</summary>
	<param name="sender"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.HandlePopupMenuShowing(DevExpress.XtraLayout.PopupMenuShowingEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.LayoutControl_ItemSelectionChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_ControlRemoved(System.Object,System.Windows.Forms.ControlEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_TabPageCloseButtonClick(System.Object,DevExpress.XtraLayout.Utils.LayoutGroupEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_ControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_ItemAdded(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.PopupMenu_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_PopupMenuShowing(System.Object,DevExpress.XtraLayout.PopupMenuShowingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_ForceSaveLayout(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_Leave(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_MouseHover(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_MouseLeave(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_HandleCreated(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedLayoutControl.ExtendedLayoutControl_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>DevExpress.Utils.Menu.IDXMenuManager</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="T:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.EditCommand">
	<summary>
 Edit command type enumeration
 </summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.HTMLEditorView">
	<summary>
 HTML editor view type enumeration
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.Editor">
	<summary>Gets the instance of the Editor control.</summary>
	<value>The instance of the Editor control.</value>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.EmailMessage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.HTMLBody">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.HTMLCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.HTMLCodeEditor">
	<summary>
 Gets the instance of HTML code view editor.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.MergeFields">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.SelectionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.ShowMenuFile">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.TemplateCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.TemplateCodeNew">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.UseDefault">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.IsFormClosing">
	<summary>
 Indicates if the current form is closing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.DefaultRibbonPage">
	<summary>
 Get's the default ribbon page of the HTML Editor Control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.EnableDisableButtons(System.Boolean)">
	<summary>
	</summary>
	<param name="enable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.LoadMergeFields">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.LoadMergeFields(Interprise.Framework.Base.Shared.Enum.TemplateTable)">
	<summary>
	</summary>
	<param name="templateTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.LoadMime(System.String)">
	<summary>
	</summary>
	<param name="mimeString"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.LoadTemplates(Interprise.Framework.Base.Shared.Enum.SendingType)">
	<summary>
	</summary>
	<param name="type"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.LoadTemplates(System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.SendingType)">
	<summary>
	</summary>
	<param name="templateCode"></param>
	<param name="tableCode"></param>
	<param name="moduleCode"></param>
	<param name="type"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.NewDocument">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.SaveHTML">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.Clone(System.Windows.Forms.Form)">
	<summary>
	</summary>
	<param name="newForm"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.DisposeManager">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.ShowPopupMenu(DevExpress.Utils.Menu.DXPopupMenu,System.Windows.Forms.Control,System.Drawing.Point)">
	<summary>
	</summary>
	<param name="menu"></param>
	<param name="control"></param>
	<param name="pos"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.SetDialogFilters">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.ManageEditCommand(Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.HTMLEditorView,Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.EditCommand)">
	<summary>
	</summary>
	<param name="editorView"></param>
	<param name="command"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.InsertMergeField(System.String)">
	<summary>
	</summary>
	<param name="displayName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.SetTemplate(System.Byte[])">
	<summary>
	</summary>
	<param name="contentData"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.MoveFocusToSharedRibbonPage">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.EnableTableItems(System.Boolean)">
	<summary>
 Enable/disable menu items of the menu page group tables.
 </summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.DisableItem">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.HtmlEditorComponent_OnLoadHTML(System.Object,Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.LoadHTMLEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.HtmlEditorComponent_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.HtmlEditorComponent_DragOver(System.Object,System.Windows.Forms.DragEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.MergeFieldControlMergeFields_SelectedMergeFieldChanged(System.Object,System.String,System.String)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="selectedMergeField"></param>
	<param name="displayname"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.MergeFieldControlTemplate_SelectedTemplateChanged(System.Object,System.Byte[])">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="contentData"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.TabHTMLEditor_SelectedPageChanged(System.Object,DevExpress.XtraLayout.LayoutTabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditorControl.MemoEditHTMLCodeView_TextChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.HTMLCode">
	<summary>Gets or sets the text of the Editor, including all HTML text format.</summary>
	<value>HTML formatted string.</value>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.HTMLBody">
	<summary>Gets or sets the HTML body.</summary>
	<value>HTML body.</value>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.MHTML">
	<summary>Gets or sets the text of the Editor, including all MHTML text format.</summary>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.Mime">
	<summary>Gets or sets the text of the Editor, including all Mime text format.</summary>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.HTMLDoc">
	<summary>
 Gets /sets the html document.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.InnerHTML">
	<summary>
 Gets /sets the inner HTML of the HTML editor.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.GetParsedHTML(System.String)">
	<summary>
	</summary>
	<param name="htmlCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.SaveHTML(System.String)">
	<summary>Save the content in HTML format.</summary>
	<param name="path">The file to write to.</param>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.SaveMHT(System.String)">
	<summary>
 Save the content in MHT format
 </summary>
	<param name="path">The file to write to</param>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.LoadMime(System.String)">
	<summary>Loads a mime format into the editor.</summary>
	<param name="mimeString">Mime string to load into the editor.</param>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.LoadMime(System.Byte[])">
	<summary>Loads a mime bytes into the editor.</summary>
	<param name="mimeByte">Mime bytes to load into the editor.</param>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.CanPaste">
	<summary>True if the clipboard object is supported.</summary>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.Paste">
	<summary>Pastes the contents of the clipboard in the specified clipboard format.</summary>
</member><member name="M:Interprise.Presentation.Base.ExtendedHTMLEditor.HTMLEditor.MoveCaretTo(System.Int32)">
	<summary>
 Move the caret to a specific position.
 </summary>
	<param name="caretPosition">The position of the caret.</param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.FilterPropertyGridWrapper.SelectedObject">
	<summary>Get or set a reference to the selected objet that will linked to the parent PropertyGrid.</summary>
</member><member name="P:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.FilterPropertyGridWrapper.PropertyDescriptors">
	<summary>Get or set a reference to the collection of properties to show in the parent PropertyGrid.</summary>
</member><member name="P:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedPropertyTab.TabName">
	<summary>
 This is the tooltip string that will be displayed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedPropertyTab.RefreshProperties">
	<summary>Build the list of the properties to be displayed in the PropertyGrid, following the filters defined the Browsable and Hidden properties.</summary>
</member><member name="M:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedPropertyTab.ShowProperty(System.ComponentModel.PropertyDescriptor)">
	<summary>Add a property to the list of properties to be displayed in the PropertyGrid.</summary>
	<param name="property">The property to be added.</param>
</member><member name="F:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.m_PropertyDescriptors">
	<summary>Contain a reference to the collection of properties to show in the parent PropertyGrid.</summary>
	<remarks>By default, m_PropertyDescriptors contain all the properties of the object. </remarks>
</member><member name="F:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.m_HiddenAttributes">
	<summary>Contain a reference to the array of properties to display in the PropertyGrid.</summary>
</member><member name="F:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.m_BrowsableProperties">
	<summary>Contain references to the arrays of properties or categories to hide.</summary>
</member><member name="F:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.m_Wrapper">
	<summary>Contain a reference to the wrapper that contains the object to be displayed into the PropertyGrid.</summary>
</member><member name="P:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.HiddenAttributes">
	<summary>Get or set the categories to hide.</summary>
</member><member name="P:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.BrowsableProperties">
	<summary>Get or set the properties to show.</summary>
	<exception cref="T:System.ArgumentException">if one or several properties don't exist.</exception>
</member><member name="P:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.HiddenProperties">
	<summary>Get or set the properties to hide.</summary>
</member><member name="P:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.SelectedObject">
	<summary>Overwrite the PropertyGrid.SelectedObject property.</summary>
	<remarks>The object passed to the base PropertyGrid is the wrapper.</remarks>
</member><member name="M:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.OnBrowsablePropertiesChanged">
	<summary>Called when the browsable properties have changed.</summary>
</member><member name="M:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.RefreshProperties">
	<summary>Build the list of the properties to be displayed in the PropertyGrid, following the filters defined the Browsable and Hidden properties.</summary>
</member><member name="M:Interprise.Presentation.Base.ExtendedFilterPropertyGrid.ExtendedFilterPropertyGrid.ShowProperty(System.ComponentModel.PropertyDescriptor)">
	<summary>Add a property to the list of properties to be displayed in the PropertyGrid.</summary>
	<param name="property">The property to be added.</param>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.AutoSizeOption">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.ClassProjectItems(System.String)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.Component">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.CurrentProject">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.DesignerClass(System.String)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.DesignerProjectItem(System.String)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.LayoutControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.ParentClassType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.PluginContainer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.ProjectDTE">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.ResizerDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.AddNewPluginSizeRecord(System.Data.DataSet,DevExpress.XtraLayout.BaseLayoutItem,System.Drawing.Size)">
	<summary>
	</summary>
	<param name="resizerDataset"></param>
	<param name="baseLayoutItem"></param>
	<param name="pluginSize"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.AssignArrayValue``1(``0[]@,System.Object)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="array"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.#ctor(Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.AutoSizeOptionEnum,System.ComponentModel.IComponent)">
	<summary>
	</summary>
	<param name="component"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.CreateCodeInvoker">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.CreateResizerDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.FindPluginSection(EnvDTE.CodeElements,System.String)">
	<summary>
	</summary>
	<param name="codeElements"></param>
	<param name="fullName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.FindTextPointByValue(EnvDTE80.CodeElement2,System.String)">
	<summary>
	</summary>
	<param name="targetCodeElement"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.FindWhichHeightIsTaller(DevExpress.XtraLayout.BaseLayoutItem[])">
	<summary>
	</summary>
	<param name="baseLayoutItems"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.FindWhichIsBigger(DevExpress.XtraLayout.BaseLayoutItem[],System.String)">
	<summary>
	</summary>
	<param name="baseLayoutItems"></param>
	<param name="columnNameToCheck"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.FindWhichWidthIsWider(DevExpress.XtraLayout.BaseLayoutItem[])">
	<summary>
	</summary>
	<param name="baseLayoutItems"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GenerateCode(System.CodeDom.CodeExpression)">
	<summary>
	</summary>
	<param name="expression"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetClassProjectItems(EnvDTE.ProjectItems,System.String)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetDesignerClass(System.String)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetLayoutControlItem(DevExpress.XtraLayout.LayoutControlGroup)">
	<summary>
	</summary>
	<param name="layoutGroup"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetLayoutItemByLocation(DevExpress.XtraLayout.LayoutControlGroup,System.Drawing.Point)">
	<summary>
	</summary>
	<param name="parentGroup"></param>
	<param name="location"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetLayoutItemsByLocationY(DevExpress.XtraLayout.LayoutControlGroup,System.Int32)">
	<summary>
	</summary>
	<param name="parentGroup"></param>
	<param name="locationY"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetLayoutItemSize(System.String)">
	<summary>
	</summary>
	<param name="layoutItemName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetLayoutItemSize(DevExpress.XtraLayout.BaseLayoutItem)">
	<summary>
	</summary>
	<param name="baseLayoutItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetPluginSize(System.String)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetProposeHeight(DevExpress.XtraLayout.BaseLayoutItem)">
	<summary>
	</summary>
	<param name="selectedLayoutItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetProposeWidth(DevExpress.XtraLayout.BaseLayoutItem)">
	<summary>
	</summary>
	<param name="selectedLayoutItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetSizeUsingCodeModel(System.String)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.LoadAssembly(System.String)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.GetSizeUsingReferenceAssembly(System.String)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.InitializedResizeDataset(DevExpress.XtraLayout.BaseLayoutItem)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.PopulateResizerDataset(DevExpress.XtraLayout.LayoutControlGroup,System.Data.DataSet)">
	<summary>
	</summary>
	<param name="rootGroup"></param>
	<param name="resizerDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.AddPluginRecord(Interprise.Presentation.Base.ExtendedLayoutControlItem)">
	<summary>
	</summary>
	<param name="baseLayoutItem"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.MergeArray``2(``0[],``1[]@)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<typeparam name="U"></typeparam>
	<param name="sourceArray"></param>
	<param name="destinationArray"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.Resize(DevExpress.XtraLayout.BaseLayoutItem)">
	<summary>
	</summary>
	<param name="baseLayoutItem"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.ResizeForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginInitializationCodeGenerator.PluginContainerResizer.Execute">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.ParameterInformation.Name">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.ParameterInformation.Type">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.ParameterInformation.TypeAsString">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.AddParameters">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.CodeFunction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.Description">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.FromReferenceAssembly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.IsMainMethod">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.IsParentFunction">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.Name">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.Parameters">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.PluginClassType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.PluginContainer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.PluginInterface">
	<summary>
 '
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.Signature">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.#ctor(EnvDTE80.CodeFunction2,System.String)">
	<summary>
	</summary>
	<param name="codeFunction"></param>
	<param name="pluginClassType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.#ctor(System.Reflection.MethodInfo,System.String)">
	<summary>
	</summary>
	<param name="methodInfo"></param>
	<param name="pluginClassType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.#ctor(EnvDTE80.CodeFunction2,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="codeFunction"></param>
	<param name="pluginClassType"></param>
	<param name="pluginContainer"></param>
	<param name="pluginInterface"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.#ctor(System.Reflection.MethodInfo,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="methodInfo"></param>
	<param name="pluginClassType"></param>
	<param name="pluginContainer"></param>
	<param name="pluginInterface"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.ExtractAllParameters(EnvDTE80.CodeFunction2)">
	<summary>
	</summary>
	<param name="codeFunction"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation.ExtractAllParameters(System.Reflection.MethodInfo)">
	<summary>
	</summary>
	<param name="methodInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.CodeEvent">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.Description">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.EventType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.FromReferenceAssembly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.Name">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.Parameters">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.PluginClassType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.PluginContainer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.PluginInterface">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.Signature">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.ExtractAllParameters(EnvDTE80.CodeEvent)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation.ExtractAllParameters(System.Reflection.EventInfo)">
	<summary>
	</summary>
	<param name="codeEvent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.AppendValue(System.String,System.String)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.GenerateSelectedPluginContainerMember">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.GetEventInfo(System.String,System.String)">
	<summary>
	</summary>
	<param name="pluginContainer"></param>
	<param name="member"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.GetMethodInfo(System.String,System.String)">
	<summary>
	</summary>
	<param name="pluginContainer"></param>
	<param name="member"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.PopulateComboBoxEditEventOrMethod">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.PopulateRepositoryItemComboBoxMember(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.PopulateRepositoryItemComboBoxPluginContainer">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.ComboBoxEditEventOrMethod_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.ManagePluginEventConnector_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.RepositoryItemComboBoxPluginContainer_Closed(System.Object,DevExpress.XtraEditors.Controls.ClosedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.RepositoryItemComboBoxPluginContainer_EditValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.RepositoryItemComboBoxMember_EditValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.SimpleButtonOk_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.ManagePluginEventConnector.SimpleButtonCancel_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.Action">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.Component">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CurrentProject">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.DesignerClass">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.DesignerHost">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.DesignerProjectItem">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.DesignerWindow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MainClass">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MainProjectItem">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ParentClassType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ParentName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.PluginEventDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ProgrammingLanguage(EnvDTE80.CodeElement2)">
	<summary>
	</summary>
	<param name="codeElement"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ProjectDTE">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ProjectItems">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.SelectedComboBoxEditEventOrMethod">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.SelectedImplementedInterface">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.SelectedPluginContainerName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.SelectedPluginClassType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.AddParentAsPluginContainer">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.AddParentFunctions">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.AttachEventHandler(System.CodeDom.CodeMemberMethod,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="mainMethod"></param>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ClearAllMethodRecords">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateAddEventHandlerExpressionStatement(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation,System.String)">
	<summary>
	</summary>
	<param name="eventInformation"></param>
	<param name="mainMethod"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateAddEventHandlerMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateAfterMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateBeforeMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateBeforeDisposingMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateMainMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateMainMethodExpressionStatement(System.CodeDom.CodeMemberMethod,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation)">
	<summary>
	</summary>
	<param name="codeMemberMethod"></param>
	<param name="methodInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateMemberDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateMethod(System.String,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateMethodExpressionStatement(System.CodeDom.CodeMemberMethod,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation)">
	<summary>
	</summary>
	<param name="codeMemberMethod"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateMethodExpressionStatement(System.CodeDom.CodeMemberMethod,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.MethodInformation,System.CodeDom.CodeExpression)">
	<summary>
	</summary>
	<param name="codeMemberMethod"></param>
	<param name="methodInformation"></param>
	<param name="targetObjet"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateOtherPluginDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreatePluginEventDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateRegionDirectiveForInterprisePluginEventManagement(System.CodeDom.CodeRegionMode)">
	<summary>
	</summary>
	<param name="codeRegionMode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateRegionDirectiveForMethodName(System.CodeDom.CodeRegionMode,System.String)">
	<summary>
	</summary>
	<param name="codeRegionMode"></param>
	<param name="methodName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateRegionDirectiveForPluginContainer(System.CodeDom.CodeRegionMode,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="codeRegionMode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateRegionDirectiveForPluginContainerInfo(System.CodeDom.CodeRegionMode,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="codeRegionMode"></param>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateRemoveCustomEventHandlerMethod">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateRemoveEventHandlerExpressionStatement(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation,System.String)">
	<summary>
	</summary>
	<param name="eventInformation"></param>
	<param name="mainMethod"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.CreateTextEditPoint(EnvDTE80.CodeClass2)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.DeleteMemberImplementation(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.DoCutAndPaste(EnvDTE80.EditPoint2,EnvDTE80.EditPoint2,EnvDTE80.EditPoint2)">
	<summary>
	</summary>
	<param name="fromStartPoint"></param>
	<param name="toStartPoint"></param>
	<param name="targetClassEditPoint"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindAllEvents(EnvDTE.CodeElements,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="iBaseFormSectionInterface"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindAllEvents(EnvDTE.Project,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentProject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindAllMethods(EnvDTE.CodeElements,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="iBaseFormSectionInterface"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindAllMethods(EnvDTE.Project,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentProject"></param>
	<param name="pluginContainerInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindCodeElementByName(EnvDTE.CodeElements,System.String)">
	<summary>
	</summary>
	<param name="colCodeElements"></param>
	<param name="sName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindIBaseFormSectionInterface(EnvDTE.CodeElements)">
	<summary>
	</summary>
	<param name="implementedInterface"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindParentClassAllMethods(EnvDTE.CodeElements)">
	<summary>
	</summary>
	<param name="iBaseFormSectionInterface"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindPluginContainerRegion(EnvDTE80.CodeClass2,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindPluginContainerInfoRegion(EnvDTE80.CodeClass2,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindPluginEventManagementRegion(EnvDTE80.CodeClass2)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindPluginSection(EnvDTE.CodeElements,System.String)">
	<summary>
	</summary>
	<param name="codeElements"></param>
	<param name="fullName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.FindTextPointByValue(EnvDTE80.CodeElement2,System.String)">
	<summary>
	</summary>
	<param name="targetCodeElement"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GenerateAfterInitializePlugin(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GenerateBeforeDisposing(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GenerateCode(System.CodeDom.CodeStatement)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GenerateCode(System.CodeDom.CodeTypeMember)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GenerateEventHandler(System.String,System.String)">
	<summary>
	</summary>
	<param name="pluginContainerName"></param>
	<param name="eventName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GeneratePluginContainerEventHandler(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetDesignerClass(System.String)">
	<summary>
	</summary>
	<param name="parentClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetDerivedInterface(System.Type,System.Type)">
	<summary>
	</summary>
	<param name="examineType"></param>
	<param name="interfaceType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetEventOrMethod">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetMainClass(System.String)">
	<summary>
	</summary>
	<param name="parentClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetMembers(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetOtherPluginContainers">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetPluginContainerInfoRegion(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetPluginInterface(System.String)">
	<summary>
	</summary>
	<param name="pluginClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetSelectedEvent">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetSelectedMethod">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.GetVisualStudioHierarchy(EnvDTE.Project,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,Microsoft.VisualStudio.Shell.Design.DynamicTypeService@)">
	<summary>
	</summary>
	<param name="currentProj"></param>
	<param name="hier"></param>
	<param name="dts"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.IndentComment(System.String)">
	<summary>
	</summary>
	<param name="code"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.Initialize">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.InsertCodeInClass(EnvDTE80.EditPoint2,System.String)">
	<summary>
	</summary>
	<param name="editPoint"></param>
	<param name="codeGenerated"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.InsertCodeInFunction(EnvDTE80.EditPoint2,System.CodeDom.CodeStatement)">
	<summary>
	</summary>
	<param name="editPoint"></param>
	<param name="codeStatement"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.InsertNewLine(EnvDTE80.EditPoint2)">
	<summary>
	</summary>
	<param name="editPoint"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.InsertRegionInClass(EnvDTE80.EditPoint2,System.CodeDom.CodeStatement)">
	<summary>
	</summary>
	<param name="editPoint"></param>
	<param name="regionDirectiveStatement"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MoveAfterInitializePluginToDesignerClass(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MoveBeforeDisposing(EnvDTE80.CodeClass2,EnvDTE80.EditPoint2,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<param name="targetClassEditPoint"></param>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MoveBeforeDisposingToDesignerClass(EnvDTE80.EditPoint2,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="targetClassEditPoint"></param>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MoveEditPoint(EnvDTE80.EditPoint2,System.Int32,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.Direction)">
	<summary>
	</summary>
	<param name="editPoint"></param>
	<param name="noOfLines"></param>
	<param name="direction"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MoveEditPointDown(EnvDTE80.EditPoint2)">
	<summary>
	</summary>
	<param name="editPoint"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MoveEventHandlerToDesignerClass(System.String,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventHandlerName"></param>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.MoveFunction(EnvDTE80.CodeClass2,EnvDTE80.EditPoint2,System.String)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<param name="targetClassEditPoint"></param>
	<param name="eventHandlerName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.PopulatePluginContainers(System.Data.DataSet)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.IsPopulatePluginEventForSelectedPlugin(System.String)">
	<summary>
	</summary>
	<param name="pluginClassType"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.IsPopulatePluginMethodForSelectedPlugin(System.String)">
	<summary>
	</summary>
	<param name="pluginClassType"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.PopulatePluginEvents(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="pluginEventDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.PopulatePluginMethods(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="pluginEventDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.RemoveEventHandler(System.CodeDom.CodeMemberMethod,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="mainMethod"></param>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidateEventHandlerExistInBase(EnvDTE80.CodeClass2,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidateIsAlreadyAttachEventHandler(System.CodeDom.CodeMemberMethod,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="mainMethod"></param>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidateIsDisposeAlreadyHaveRemoveEventHandler(System.CodeDom.CodeMemberMethod,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="mainMethod"></param>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidateIsAddEventHandlerHandled(EnvDTE80.CodeClass2,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidateIsBeforeDisposingHandled(EnvDTE80.CodeClass2,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidateIsRemoveCustomEventHandlerAlreadyOverride">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidatePluginEventManagementRegionWritten">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidatePluginContainerEventWritten(EnvDTE80.CodeClass2)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.ValidateMainMethodExist(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.VSCodeGenerate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WriteAfterMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WriteBeforeDisposingMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WriteBeforeMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WriteAddEventHandlerMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WriteMainMethod(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WritePluginContainerEventHandlerRegion(EnvDTE80.CodeClass2,Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="targetCodeClass"></param>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WritePluginEventManagementRegion">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WritePluginContainerRegionInfo(Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.Shared.EventInformation)">
	<summary>
	</summary>
	<param name="eventInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Design.PluginEventConnectorCodeGenerator.EventConnectorCodeGenerator.WriteRemoveCustomEventHandler">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.GatewayMerchantAccountControlAttribute.MerchantAccountControl">
	<summary>
 Gets the class name of merchant account control tied up to a gateway
 plug-in.
 </summary>
	<value>The class name of merchant account control tied up to a gateway plug-in.</value>
</member><member name="M:Interprise.Presentation.Base.CreditCardGateway.GatewayMerchantAccountControlAttribute.#ctor(System.Type)">
	<summary>Initializes an instance of GatewayMerchantAccountControlAttribute class.</summary>
	<param name="merchantAccountControlType">
 The type of presentation class that implements
 Interprise.Extendable.Customer.Presentation.CreditCardGateway.IMerchantAccountInterface.
 </param>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseMerchantAccountControl.CurrentDataset">
	<summary>Gets the dataset that is currently being used by the control.</summary>
	<value>The dataset that is currently used by the control.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseMerchantAccountControl.CurrentFacade">
	<summary>Gets the facade that is currently used by the control.</summary>
	<value>The facade that is currently used by the control.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseMerchantAccountControl.GatewayDescription">
	<summary>Gets or sets the name of credit card gateway.</summary>
	<value>The name of credit card gateway.</value>
</member><member name="M:Interprise.Presentation.Base.CreditCardGateway.BaseMerchantAccountControl.#ctor">
	<summary>Initializes a new instance of BaseMerchantAccountControl class.</summary>
</member><member name="M:Interprise.Presentation.Base.CreditCardGateway.BaseMerchantAccountControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>Loads the dataset with merchant account information.</summary>
	<returns>
		<strong>true</strong> if loading the dataset is successful; otherwise
 <strong>false</strong>.
 </returns>
	<param name="documentCode">The class name of credit card gateway plug-in.</param>
	<param name="row">The datarow of selected row on the search list.</param>
	<param name="clearTableType">
 If <strong>Interprise.Framework.Base.Shared.Enum.ClearType.None</strong> the
 newly loaded data is merged with existing data in the dataset. If
 <strong>Interprise.Framework.Base.Shared.Enum.ClearType.Specific</strong> the specified
 datatable is cleared first with existing data then the newly loaded data is merged. If
 <strong>Interprise.Framework.Base.Shared.Enum.ClearType.All</strong> all the datatables
 in the dataset are cleared first with existing data then the newly loaded data is
 merged.
 </param>
</member><member name="M:Interprise.Presentation.Base.CreditCardGateway.BaseMerchantAccountControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>Updates the database with the changes in the dataset.</summary>
	<returns>
		<strong>DialogResult.Yes</strong> if successful; otherwise
 <strong>DialogResult.Cancel</strong>
	</returns>
	<param name="confirm">
 If <strong>true</strong> a confirmation message is displayed before
 saving.
 </param>
	<param name="clear">If <strong>true</strong> the dataset is cleared after successful update.</param>
	<param name="isUseCache">If <strong>true</strong> the changes are saved to the cache database.</param>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CreditCardGatewayDataset">
	<summary>Gets the dataset gateway that contains merchant account information.</summary>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CardNumber">
	<summary>Get or sets the credit card number.</summary>
	<value>The number of the credit card.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ExpirationMonth">
	<summary>Gets or sets the expiration month of a credit card.</summary>
	<value>The expiration month of a credit card.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ExpirationYear">
	<summary>Gets or sets the expiration year of a credit card.</summary>
	<value>The expiration year of a credit card.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CustomerCode">
	<summary>Gets or sets the customer code of credit card payment.</summary>
	<value>Customer code of credit card payment.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CustomerAddress">
	<summary>
 Gets or sets the credit card holder's address that can be used in address
 verification.
 </summary>
	<value>The address of credit card holder.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CustomerCity">
	<summary>
 Gets or sets the credit card holder's city that can be used in address
 verification.
 </summary>
	<value>The city of credit card holder.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CustomerState">
	<summary>
 Gets or sets the credit card holder's state that can be used in address
 verification.
 </summary>
	<value>The state of credit card holder.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CustomerPostalCode">
	<summary>
 Gets or sets the credit card holder's postal code that can be used in address
 verification.
 </summary>
	<value>The postal code of credit card holder.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CustomerFirstName">
	<summary>Gets or sets the first name of credit card holder.</summary>
	<value>The first name of credit card holder.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.CustomerLastName">
	<summary>Gets or sets the last name of credit card holder.</summary>
	<value>The last name of credit card holder.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.MerchantLogin">
	<summary>Gets or sets the merchant login name.</summary>
	<value>The login name of merchant.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.MerchantPassword">
	<summary>Gets or sets the merchant password.</summary>
	<value>The password of merchant.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.TransactionAmount">
	<summary>Gets or sets the amount of credit card transaction.</summary>
	<value>
 The amount of credit card transaction. The amount is formatted base on gateway
 specification.
 </value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.TransactionCode">
	<summary>Gets or sets the transaction id of capture, void and credit transactions.</summary>
	<value>The transaction id of capture, void and credit transactions.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ResponseApprovalCode">
	<summary>Gets the authorization code when a transaction has been approved.</summary>
	<value>The authorization code of approved transaction.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ResponseAVS">
	<summary>Gets the Address Verification System result code.</summary>
	<value>The Address Verification System result code.</value>
	<remarks>
		<para>This one character field contains the Address Verification Service (AVS)
    result code. An AVS result code can provide additional information concerning the
    authentication of a particular transaction for which cardholder address
    verification was requested. An AVS result code of "0" will be returned in the
    response message when no address verification has been requested. The value
    returned should be stored for later retrieval, as it may be required when voiding
    or refunding a transaction. Valid AVS response codes are listed below, and are
    identical across all <a href="ICharge_p_Gateway.htm">Gateway</a>s. (Note that some
    gateways do not return an AVS response)</para>
		<para>
			<para>
				<center>
					<list type="table">
						<item>
							<term>Code</term>
							<description>Description</description>
						</item>
						<item>
							<term>A</term>
							<description>
								<a href="ICharge_p_CustomerAddress.htm">CustomerAddress</a>
                        matches, <a href="ICharge_p_CustomerZip.htm">CustomerZip</a>
                        does not.</description>
						</item>
						<item>
							<term>E</term>
							<description>AVS error.</description>
						</item>
						<item>
							<term>N</term>
							<description>No match on
                        <a href="ICharge_p_CustomerAddress.htm">CustomerAddress</a> or
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a>.</description>
						</item>
						<item>
							<term>P</term>
							<description>AVS not applicable for this
                        transaction.</description>
						</item>
						<item>
							<term>R</term>
							<description>Retry - Issuer system unavailable.</description>
						</item>
						<item>
							<term>S</term>
							<description>Service not supported by issuer.</description>
						</item>
						<item>
							<term>U</term>
							<description>Address information is unavailable.</description>
						</item>
						<item>
							<term>W</term>
							<description>Nine digit
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a> matches,
                        <a href="ICharge_p_CustomerAddress.htm">CustomerAddress</a>
                        does not.</description>
						</item>
						<item>
							<term>X</term>
							<description>Exact AVS match, nine digit
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a>.</description>
						</item>
						<item>
							<term>Y</term>
							<description>Exact AVS match, five digit
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a>.</description>
						</item>
						<item>
							<term>Z</term>
							<description>Five digit
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a> matches,
                        <a href="ICharge_p_CustomerAddress.htm">CustomerAddress</a>
                        does not.</description>
						</item>
					</list>
				</center>
				<para>Note: The above table does not apply to the WorldPay gateway. For
            Worldpay, this property will contain a 4-character string, which contains
            the AVS checks for the following fields:</para>
				<para>
					<para>
						<center>
							<list type="table">
								<item>
									<term>1st Character</term>
									<description>Card Verification Value (CVV)
                                check</description>
								</item>
								<item>
									<term>2nd Character</term>
									<description>Postal/Zip Code AVS check</description>
								</item>
								<item>
									<term>3rd Character</term>
									<description>Address AVS check</description>
								</item>
								<item>
									<term>4th Character</term>
									<description>Country Comparison check</description>
								</item>
							</list>
						</center>
						<para>The possible values for each result character are:</para>
						<para>
							<para>
								<center>
									<list type="table">
										<item>
											<term>0</term>
											<description>Not Supported.</description>
										</item>
										<item>
											<term>1</term>
											<description>Not Checked.</description>
										</item>
										<item>
											<term>2</term>
											<description>Matched.</description>
										</item>
										<item>
											<term>4</term>
											<description>No Match.</description>
										</item>
										<item>
											<term>8</term>
											<description>Partial Match.</description>
										</item>
									</list>
								</center>
							</para>
						</para>
					</para>
				</para>
			</para>
		</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ResponseCode">
	<summary>Gets the status of authorization request.</summary>
	<remarks>
		<para>This field contains the actual response code as returned by the
    <a href="ECheck_p_Gateway.htm">Gateway</a>. Unlike the
    <a href="ECheck_p_TransactionApproved.htm">TransactionApproved</a> property, this
    <b><font style="BACKGROUND-COLOR: #316ac5" color="white">ResponseCode</font></b>
    property provides more details about why a transaction was declined. Therefore, it
    is recommended that developers check the <b><font style="BACKGROUND-COLOR: #316ac5" color="white">ResponseCode</font></b> as well as the
    <a href="ECheck_p_TransactionApproved.htm">TransactionApproved</a> property. The
    Point of Sale system should evaluate this response code and NOT the
    <a href="ECheck_p_ResponseText.htm">ResponseText</a> to determine nature of a
    response message. The current (at the time of this release) response codes for the
    supported Gateways are listed below. Please see the individual specifications for
    each Gateway (available from the Gateway itself) for an updated list of these
    codes.</para>
		<para>
			<b>Authorize.Net:</b> (works with Authorize.net, ECX, MPCS, Planet Payment, and
        RTWare) 
        <para>
				<center>
					<list type="table">
						<item>
							<term>Code</term>
							<description>Description</description>
						</item>
						<item>
							<term>1</term>
							<description>Approved.</description>
						</item>
						<item>
							<term>2</term>
							<description>Declined.</description>
						</item>
						<item>
							<term>3</term>
							<description>Error.</description>
						</item>
					</list>
				</center>
				<para>
					<b>ITransact:</b>
					<para>
						<center>
							<list type="table">
								<item>
									<term>Code</term>
									<description>Description</description>
								</item>
								<item>
									<term>0</term>
									<description>Approved.</description>
								</item>
								<item>
									<term>1</term>
									<description>Declined or error condition.</description>
								</item>
							</list>
						</center>
						<para>
							<b>NetBilling:</b>
							<para>
								<center>
									<list type="table">
										<item>
											<term>Code</term>
											<description>Description</description>
										</item>
										<item>
											<term>I (letter I) = Incomplete</term>
											<description>These are transactions that are
                                        successful, but may fail at a later date, ie:
                                        An ACH transaction is approved, but then is
                                        later denied due to NSF.</description>
										</item>
										<item>
											<term>1 (number 1) = Approved, Good</term>
											<description>This is a transaction that is
                                        approved and charged.</description>
										</item>
										<item>
											<term>R = Refunded</term>
											<description>This transaction has been
                                        refunded. It is extremely unlikely you will
                                        ever see this return code in this context,
                                        although you may see it when browsing old
                                        transactions in the NetBilling database (via
                                        the Admin tools).</description>
										</item>
										<item>
											<term>T = Ticket</term>
											<description>This is returned when an
                                        Authorize-Only or AVS-Only transaction is
                                        good.</description>
										</item>
										<item>
											<term>F or 0 = Failure</term>
											<description>The number zero "0" or the letter
                                        "F" indicates that the transaction failed. A
                                        more detailed message will be available in the
                                        <a href="ECheck_p_ResponseText.htm">ResponseText</a>
                                        field.</description>
										</item>
										<item>
											<term>Other Code</term>
											<description>Any other non-zero, non-null codes
                                        should be interpreted as success for
                                        compatibility with future response
                                        codes.</description>
										</item>
									</list>
								</center>
								<para>
									<b>USAePay:</b>
									<para>
										<center>
											<list type="table">
												<item>
													<term>Code</term>
													<description>Description</description>
												</item>
												<item>
													<term>Approved</term>
													<description>Transaction
                                                approved.</description>
												</item>
												<item>
													<term>Declined</term>
													<description>Transaction
                                                declined.</description>
												</item>
												<item>
													<term>Error</term>
													<description>There is an error in the
                                                data received.</description>
												</item>
											</list>
										</center>
										<para>
											<b>TrustCommerce:</b>
											<para>
												<center>
													<list type="table">
														<item>
															<term>approved</term>
															<description>The transaction
                                                        was successfully
                                                        authorized.</description>
														</item>
														<item>
															<term>accepted</term>
															<description>The transaction
                                                        has been successfully accepted
                                                        into the system.</description>
														</item>
														<item>
															<term>decline</term>
															<description>The transaction
                                                        was declined. See
                                                        <a href="ECheck_p_ResponseText.htm">
                                                        ResponseText</a> for more
                                                        details.</description>
														</item>
														<item>
															<term>baddata</term>
															<description>Invalid parameters
                                                        passed. See
                                                        <a href="ECheck_p_ResponseData.htm">
                                                        ResponseData</a> for more
                                                        details.</description>
														</item>
														<item>
															<term>error</term>
															<description>System error when
                                                        processing transaction. See
                                                        <a href="ECheck_p_ResponseData.htm">
                                                        ResponseData</a> for more
                                                        details.</description>
														</item>
													</list>
												</center>
												<para>
													<b>MerchantAnywhere</b>
													<para>
														<center>
															<list type="table">
																<item>
																	<term>0</term>
																	<description>
                                                                Transaction
                                                                Approved.</description>
																</item>
																<item>
																	<term>1</term>
																	<description>
                                                                Transaction
                                                                Declined.</description>
																</item>
															</list>
														</center>
													</para>
												</para>
											</para>
										</para>
									</para>
								</para>
							</para>
						</para>
					</para>
				</para>
			</para>
		</para>
	</remarks>
	<value>The status of authorization request.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ResponseCVV2">
	<summary>Gets the CVV2 result code if it was requested.</summary>
	<remarks>
		<para>This field contains the host returned CVV2 result code as requested in
    <a href="ICharge_p_CardCVV2Data.htm">CardCVV2Data</a>. The following is a list of
    current result codes:</para>
		<para>
			<para>
				<center>
					<list type="table">
						<item>
							<term>M</term>
							<description>CVV2 Match.</description>
						</item>
						<item>
							<term>N</term>
							<description>CVV2 No Match.</description>
						</item>
						<item>
							<term>P</term>
							<description>Not Processed.</description>
						</item>
						<item>
							<term>S</term>
							<description>Merchant has indicated that CVV2 is not present on
                        card.</description>
						</item>
						<item>
							<term>U</term>
							<description>Issuer not certified and/or has not provided Visa
                        encryption keys.</description>
						</item>
					</list>
				</center>
				<para>A gateway may also support custom codes or human-readable response
            messages in this field. Please consult your gateway documentation to
            determine if CVV2 codes are supported.</para>
			</para>
		</para>
	</remarks>
	<value>The CVV2 result code.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ResponseInvoiceNumber">
	<summary>Gets the invoice number submitted in authorization request.</summary>
	<value>The invoice number submitted in authorization request.</value>
	<remarks>
		<para>This field contains the InvoiceNumber submitted in the original transaction.
    This only applies to gateways that support the InvoiceNumber property. Please check
    the <a href="ICharge_p_Gateway.htm">Gateway</a> property for a list of properties
    that are supported by each gateway. If the ResponseInvoiceNumber does not match the
    InvoiceNumber originally submitted for this transaction, this transaction must not
    be settled by your processor.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ResponseTransactionCode">
	<summary>Gets the Visa Transaction Identifier or MasterCard Reference Number.</summary>
	<value>The Visa Transaction Identifier or MasterCard Reference Number.</value>
	<remarks>
 This character field contains a transaction identifier or reference number. The
 Point of Sale (POS) device should not attempt to interpret the meaning of any data
 appearing in this field. Data returned in this field (if any) should be recorded and
 used to submit a modification of this transaction at a later time. (such as voiding the
 transaction or capturing an authorization-only transaction, if applicable).
 </remarks>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ResponseText">
	<summary>Gets the text information that describes each response code.</summary>
	<remarks>
		<para>This field contains a response or display text message. This message can be
    used by the terminal to display the authorization result. The display text must not
    be used to determine the nature of a response message. A Gateway may translate the
    response according to the language indicated in the merchant account setup (if
    applicable).</para>
	</remarks>
	<value>The text information that describes each response code.</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ResponseData">
	<summary>Gets the entire response returned from the gateway processor.</summary>
	<value>The entire response returned from the gateway processor.</value>
	<remarks>
		<para>This field contains the entire response returned from the gateway processor.
    You may use this to parse additional information that is not returned in the
    standard response properties.</para>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ReceivableCode">
	<summary>Gets or sets the document code of credit card payment.</summary>
	<value>The document code of credit card payment</value>
</member><member name="P:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.ErrorOccured">
	<summary>Indicates an error occurred on card authorization.</summary>
	<value>
		<strong>true</strong> if an error occurred; otherwise
 <strong>false</strong>.
 </value>
</member><member name="M:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.#ctor">
	<summary>Initializes a new instance of BaseCreditCardGatewayControl class.</summary>
</member><member name="M:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.PreAuthorize(System.String@)">
	<summary>Runs pre-authorization checks on the customer's credit card data.</summary>
	<remarks>
		<para>This method performs several checks on the customer information to determine
    if the card information submitted <i>could be</i> valid before proceeding with the
    actual transaction. If the pre-authorization was unsuccessful, the method throws an
    IPWorksException . The tests performed are listed below:</para>
		<para>
			<para>
				<center>
					<list type="table">
						<item>
							<term>Luhn Digit Check</term>
							<description>This process checks the digits of the
                        <a href="ICharge_p_CardNumber.htm">CardNumber</a> to make sure
                        that it <i>could be</i> a valid card number. The mathematical
                        algorithm used to determine validity is outlined in the Visa
                        External Interface Specification: Authorization Record Formats
                        Version 5.8, page 63.</description>
						</item>
						<item>
							<term>Card Type Check</term>
							<description>This process checks the prefix digits of the
                        <a href="ICharge_p_CardNumber.htm">CardNumber</a> to determine
                        if it is a valid card type. If the number prefix does not
                        correspond to a valid Visa, MasterCard, AMEX, Discover, or
                        Diner's Club card, the method throws an IPWorksException
                        .</description>
						</item>
						<item>
							<term>Expiration Date Check</term>
							<description>The date given in
                        <a href="ICharge_p_CardExpMonth.htm">CardExpMonth</a> and
                        <a href="ICharge_p_CardExpYear.htm">CardExpYear</a> is compared
                        to the current system date to make sure that the card is still
                        valid.</description>
						</item>
					</list>
				</center>
				<para>Please note that some Check Cards and foreign credit cards may not
            necessarily conform to either the Luhn Digit Check or Card Type Check.
            These pre-authorization checks are merely to help merchants reduce fees
            from invalid transactions and may not work for every credit card.</para>
			</para>
		</para>
	</remarks>
	<param name="result">
		<strong>true</strong> if pre-authorization is successful; otherwise
 <strong>false</strong>.
 </param>
</member><member name="M:Interprise.Presentation.Base.CreditCardGateway.BaseCreditCardGatewayControl.Authorize(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.CreditCardTransaction,System.String@)">
	<summary>Initiates an authorization request transaction.</summary>
	<remarks>This method sends an authorization request to the specified gateway.</remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.CacheDatabaseName">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.CacheTableToUpdate">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.IsCreatingNewCache">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.IsSkipCachingOnPluginTablesWithAssembly">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.GetSynchronizeCacheControl(Interprise.Presentation.Base.Cache.SynchronizeCacheControl)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.SynchronizeCacheForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.SynchronizeCacheForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.Cache.ISynchronizeCacheInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.CacheBuilder">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.CacheDatabaseName">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.CacheTableToUpdate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.Completed">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.IsCreatingNewCache">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.IsSkipCachingOnPluginTablesWithAssembly">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.Update">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.OnCacheBuilderCompleted(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.OnCacheBuilderFailed(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.OnCacheBuilderProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.ValidateFormClosing">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.SimpleButtonCancel_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.m_cacheBuilder_CancelOperation(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.m_cacheBuilder_Completed(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.m_cacheBuilder_Failed(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.SynchronizeCacheControl.m_cacheBuilder_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="F:Interprise.Presentation.Base.Cache.CacheManager.m_cacheQueue">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheManager.CacheServerNotInLocalMessage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheManager.CacheServerNotExistsMessage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheManager.DatabaseName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheManager.IsServerLocal">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheManager.RefreshEntireCacheNotAllowedInRemoteServer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheManager.ServerName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.CloseCachingForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheManager.IsCacheTablesModifiedHavePlugins(System.String[][])">
	<summary>
	</summary>
	<param name="cacheTablesModified"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Interprise.Presentation.Base.Cache.CacheManager.m_cachingForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.ValidateCacheUpdated(System.ComponentModel.CancelEventArgs,Interprise.Presentation.Base.BaseRibbonForm,System.String,System.Boolean@,Interprise.Framework.Base.Shared.Delegates.CachingCompletedEventHandler)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.CreateCacheBuilder(Interprise.Presentation.Base.BaseRibbonForm,System.String,Interprise.Framework.Base.Shared.Delegates.CachingCompletedEventHandler)">
	<summary>
	</summary>
	<param name="invoker"></param>
	<param name="cacheTable"></param>
	<param name="completed"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.FindCacheQueue(System.String)">
	<summary>
	</summary>
	<param name="cacheTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.OnCacheBuilderCompleted(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.OnCacheBuilderFailed(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.OnCacheBuilderProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.SetCaptionOnCachingProgressBar(System.String,Interprise.Presentation.Base.BaseRibbonForm)">
	<summary>
	</summary>
	<param name="caption"></param>
	<param name="invoker"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.ShowCachingProgressBar(System.Boolean,Interprise.Presentation.Base.BaseRibbonForm)">
	<summary>
	</summary>
	<param name="show"></param>
	<param name="invoker"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.UpdateCacheDatabase(Interprise.Framework.Base.EventArguments.UpdateCacheEventArgs)">
	<summary>
	</summary>
	<param name="cacheArgs"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.CacheManagerFacade_CBNServerDown(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.CacheBuilder_Completed(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.CacheBuilder_Failed(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.CacheBuilder_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheManager.Invoker_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AssemblyPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.DashboardType(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.IsChecked(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.IsDefault(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.IsFolder(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.NewRoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.NewRoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.OutputPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.SubFormDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.RoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.RoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.ShowApplyUserRoleForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.UserRoles">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.UserRoleTables">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.UserRoleChangesDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.UserRoleXMLDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AddRow(System.Data.DataSet@,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.String,System.String[],System.String[][],System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="objectName"></param>
	<param name="createdBy"></param>
	<param name="dateCreated"></param>
	<param name="lastModifiedBy"></param>
	<param name="dateModified"></param>
	<param name="treeParentID"></param>
	<param name="treeChildID"></param>
	<param name="isFolder"></param>
	<param name="tempChilID"></param>
	<param name="type"></param>
	<param name="dashboardType"></param>
	<param name="imageIndex"></param>
	<param name="parameters"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CascadeChangesToParent(DevExpress.XtraTreeList.Nodes.TreeListNode,System.Boolean)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CheckAll(DevExpress.XtraTreeList.TreeList,System.Boolean)">
	<summary>
	</summary>
	<param name="list"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CheckUncheckIsSelected(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.InitializeSkin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.InitializeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.FinalizeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.searchComboRoleCode_BeforeValidate(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendDashboardPageRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="dashboardTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendDashboardPageContentRows(System.Data.DataSet,System.String,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="parentPageNumber"></param>
	<param name="pageTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendFormMenuRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="mainFormID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendSubFormMenuRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendMethodFormMenuRows(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendCustomFormMenuRows(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendFormSectionMenuRows(System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="formClassType"></param>
	<param name="formMenuTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendGroupRows(System.Data.DataSet@)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendReportRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="reportTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendGroupRowsCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.BeginAppendGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.BeginCreateTreeListDatasource">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CreateTreeListDatasourceCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.FinalizeCreateTreeListDatasource(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="createdUserRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.InitializeTreeListDatasouce">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CreateTreeListDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CreateTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CreateUserRoleDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CreateUserRoleDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.SetDefaultSelectedUserRole(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetDashboardType(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="pageRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetMaxSelectedItems">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateSelectedUserRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateFormRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateFormSectionRows(System.Data.DataTable)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GeneratePageRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GeneratePageContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateReportContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetImageKey(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetDashboardPageChanges(System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetDashboardPageContentChanges(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetFormChanges(System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetParentFormChanges(System.String,System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetFormSectionChanges(System.String)">
	<summary>
	</summary>
	<param name="formMenuCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetGroupChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadGroup(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadPage(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadReport(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadDeveloperPageChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadDeveloperPageContentChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadDeveloperFormChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadDeveloperFormSectionChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadDeveloperGroupChanges(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadParentForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadDeveloperReportChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CreateProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.FinalizeProgress">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.SetProgressValue(System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.UpdateProgress(System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<param name="maximum"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.RefreshTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.MergeChangesAndUpdateLanguage(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="viewTable"></param>
	<param name="mainTable"></param>
	<param name="languageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateNewLanguageSet(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="languages"></param>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AppendLanguageRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String[][])">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.BeginSaveToDatabase">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateWhereClause(System.Data.DataRow,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow,System.Object[])">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<param name="proposedValue"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.ProcessFormSectionRow(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AssignRoleCode(System.Data.DataRow@,System.String)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.ProcessRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="currentTable"></param>
	<param name="roleCode"></param>
	<param name="whereClause"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateTableChanges(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.String[][],System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.SaveChangesToDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AddLanguageCodeAsPrimaryOnSystemMenuReportTemplate(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.ProcessScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.SaveToDatabase">
	<summary>
	</summary>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.SaveToDatabaseCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.SelectAllUserRole(System.Boolean)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.BeginWriteUserRoleInXml">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetWhereClause(System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadDataset(System.String,System.String[])">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateCommandText(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadSelectedGroups">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadSelectedRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GetSubFolderCondition(System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="mainForms"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadSelectedForms">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadSelectedSections">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadSelectedPages">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadSelectedContents">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadSelectedReports">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.LoadSelectedRule">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.WriteUserRoleInXml">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.WriteXML">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.WriteXMLCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.WriteConfiguration(System.String)">
	<summary>
	</summary>
	<param name="configPath"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.ButtonSelectAll_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.ButtonSelectNone_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.btnSelectAllUserRole_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.btnSelectNoneUserRole_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateXMLForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.GenerateXMLForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.CancelProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.AcceptProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.RefreshProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.TreeListUserRole_GetSelectImage(System.Object,DevExpress.XtraTreeList.GetSelectImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.TreeListUserRole_GetStateImage(System.Object,DevExpress.XtraTreeList.GetStateImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.TreeListUserRole_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.TreeListUserRole_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.searchComboRoleCode_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLWriteControl.TextEditRoleDescription_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AssemblyPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.DashboardType(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.IsChecked(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.IsDefault(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.IsFolder(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.NewRoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.NewRoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.OutputPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.SubFormDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.RoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.RoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.ShowApplyUserRoleForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.UserRoles">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.UserRoleTables">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.UserRoleChangesDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.UserRoleXMLDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CascadeChangesToParent(DevExpress.XtraTreeList.Nodes.TreeListNode,System.Boolean)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CheckAll(DevExpress.XtraTreeList.TreeList,System.Boolean)">
	<summary>
	</summary>
	<param name="list"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CheckUncheckIsSelected(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.InitializeSkin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.InitializeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.FinalizeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.PrepareCBNData">
	<summary>
 This routine will get all rows in the table and combine with the new ones. New records would be appended with details from the CBNSupplier or CBNRetailer
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.searchComboRoleCode_BeforeValidate(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendDashboardPageRows(System.Data.DataSet,System.String,System.String,System.Object)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="dashboardTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendDashboardPageContentRows(System.Data.DataSet,System.String,System.Int32,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="parentPageNumber"></param>
	<param name="pageTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendFormMenuRows(System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="mainFormID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendSubFormMenuRows(System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendMethodFormMenuRows(System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendCustomFormMenuRows(System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendFormSectionMenuRows(System.Data.DataSet,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="formClassType"></param>
	<param name="formMenuTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendGroupRows(System.Data.DataSet@)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendReportRows(System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="reportTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendGroupRowsCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.BeginAppendGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.BeginCreateTreeListDatasource">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CreateTreeListDatasourceCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.IsParentRow(System.Data.DataTable,System.Data.DataRow)">
	<summary>
 Check if the current row is a parent row by checking if it has a child rows.
 </summary>
	<param name="lookUpTable">Where to check the child rows.</param>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.FinalizeCreateTreeListDatasource(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="createdUserRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.MultiplyUserRole">
	<summary>
 This would initialize the dataset by distributing the CBN Menus to all user roles into the main dataset(m_treeListDatasourceTable)
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AssignDatasource(System.String,System.Data.DataTable)">
	<summary>
 This would filter the main dataset based on the currently selected user role during initialization
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.InitializeTreeListDatasouce">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CreateTreeListDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CreateTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CreateUserRoleDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CreateUserRoleDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetDashboardType(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="pageRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetMaxSelectedItems">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateSelectedUserRole(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateFormRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateFormSectionRows(System.Data.DataTable)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GeneratePageRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GeneratePageContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateReportContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetImageKey(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetDashboardPageChanges(System.String,System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetDashboardPageContentChanges(System.String,System.String,System.Int32)">
	<summary>
	</summary>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetFormChanges(System.String,System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetParentFormChanges(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetFormSectionChanges(System.String,System.String)">
	<summary>
	</summary>
	<param name="formMenuCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetGroupChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadGroup(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadPage(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadReport(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadDeveloperPageChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadDeveloperPageContentChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadDeveloperFormChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadDeveloperFormSectionChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadDeveloperGroupChanges(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadParentForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadDeveloperReportChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CreateProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.FinalizeProgress">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.SetProgressValue(System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.UpdateProgress(System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<param name="maximum"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.RefreshTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.MergeChangesAndUpdateLanguage(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="viewTable"></param>
	<param name="mainTable"></param>
	<param name="languageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateNewLanguageSet(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="languages"></param>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AppendLanguageRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String[][])">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.BeginSaveToDatabase">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateWhereClause(System.Data.DataRow,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow,System.Object[])">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<param name="proposedValue"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.ProcessFormSectionRow(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AssignRoleCode(System.Data.DataRow@,System.String)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.ProcessRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="currentTable"></param>
	<param name="roleCode"></param>
	<param name="whereClause"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateTableChanges(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.String[][],System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.SaveChangesToDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AddLanguageCodeAsPrimaryOnSystemMenuReportTemplate(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.ProcessScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.SaveToDatabase">
	<summary>
	</summary>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.SaveToDatabaseCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.SelectAllUserRole(System.Boolean)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.BeginWriteUserRoleInXml">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetWhereClause(System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadDataset(System.String,System.String[])">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateCommandText(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadSelectedGroups(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadSelectedRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GetSubFolderCondition(System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="mainForms"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadSelectedForms(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadSelectedSections(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadSelectedPages(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadSelectedContents(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadSelectedReports">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.LoadSelectedRule">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.WriteUserRoleInXml">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.WriteXML">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.WriteXMLCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.WriteConfiguration(System.String)">
	<summary>
	</summary>
	<param name="configPath"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.SetDatasource(System.String)">
	<summary>
 This will filter the treelist based on the selected user roles in the grid
 </summary>
	<param name="roleCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.ButtonSelectAll_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.ButtonSelectNone_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.btnSelectAllUserRole_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.btnSelectNoneUserRole_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateXMLForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.GenerateXMLForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.CancelProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.AcceptProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.RefreshProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.TreeListUserRole_GetSelectImage(System.Object,DevExpress.XtraTreeList.GetSelectImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.TreeListUserRole_GetStateImage(System.Object,DevExpress.XtraTreeList.GetStateImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.TreeListUserRole_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.TreeListUserRole_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.searchComboRoleCode_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.TextEditRoleDescription_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.TextEditRoleDescription_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.gridviewUserRole_FocusedRowChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs)">
	<summary>
 This would set the treelist based on the user role selection
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLUpdateControl.chckIsSelected_EditValueChanged(System.Object,System.EventArgs)">
	<summary>
 This would make the user role checkbox to update directly the grid's datasource
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AssemblyPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.DashboardType(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.IsChecked(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.IsDefault(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.IsFolder(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.NewRoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.NewRoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.OutputPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.SubFormDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.RoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.RoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.ShowApplyUserRoleForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.UserRoles">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.UserRoleTables">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.UserRoleChangesDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.UserRoleXMLDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AddRow(System.Data.DataSet@,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.String,System.String[],System.String[][],System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="objectName"></param>
	<param name="createdBy"></param>
	<param name="dateCreated"></param>
	<param name="lastModifiedBy"></param>
	<param name="dateModified"></param>
	<param name="treeParentID"></param>
	<param name="treeChildID"></param>
	<param name="isFolder"></param>
	<param name="tempChilID"></param>
	<param name="type"></param>
	<param name="dashboardType"></param>
	<param name="imageIndex"></param>
	<param name="parameters"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CascadeChangesToParent(DevExpress.XtraTreeList.Nodes.TreeListNode,System.Boolean)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CheckAll(DevExpress.XtraTreeList.TreeList,System.Boolean)">
	<summary>
	</summary>
	<param name="list"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CheckUncheckIsSelected(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.InitializeSkin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.InitializeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.FinalizeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.searchComboRoleCode_BeforeValidate(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendDashboardPageRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="dashboardTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendDashboardPageContentRows(System.Data.DataSet,System.String,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="parentPageNumber"></param>
	<param name="pageTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendFormMenuRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="mainFormID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendSubFormMenuRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendMethodFormMenuRows(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendCustomFormMenuRows(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendFormSectionMenuRows(System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="formClassType"></param>
	<param name="formMenuTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendGroupRows(System.Data.DataSet@)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendReportRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="reportTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendGroupRowsCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.BeginAppendGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.BeginCreateTreeListDatasource">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CreateTreeListDatasourceCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.FinalizeCreateTreeListDatasource(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="createdUserRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.InitializeTreeListDatasouce">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CreateTreeListDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CreateTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CreateUserRoleDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CreateUserRoleDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.SetDefaultSelectedUserRole(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetDashboardType(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="pageRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetMaxSelectedItems">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateSelectedUserRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateFormRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateFormSectionRows(System.Data.DataTable)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GeneratePageRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GeneratePageContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateReportContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetImageKey(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetDashboardPageChanges(System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetDashboardPageContentChanges(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetFormChanges(System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetParentFormChanges(System.String,System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetFormSectionChanges(System.String)">
	<summary>
	</summary>
	<param name="formMenuCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetGroupChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadGroup(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadPage(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadReport(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadDeveloperPageChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadDeveloperPageContentChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadDeveloperFormChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadDeveloperFormSectionChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadDeveloperGroupChanges(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadParentForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadDeveloperReportChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CreateProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.FinalizeProgress">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.SetProgressValue(System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.UpdateProgress(System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<param name="maximum"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.RefreshTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.MergeChangesAndUpdateLanguage(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="viewTable"></param>
	<param name="mainTable"></param>
	<param name="languageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateNewLanguageSet(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="languages"></param>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AppendLanguageRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String[][])">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.BeginSaveToDatabase">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateWhereClause(System.Data.DataRow,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow,System.Object[])">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<param name="proposedValue"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.ProcessFormSectionRow(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AssignRoleCode(System.Data.DataRow@,System.String)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.ProcessRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="currentTable"></param>
	<param name="roleCode"></param>
	<param name="whereClause"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateTableChanges(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.String[][],System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.SaveChangesToDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AddLanguageCodeAsPrimaryOnSystemMenuReportTemplate(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.ProcessScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.SaveToDatabase">
	<summary>
	</summary>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.SaveToDatabaseCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.SelectAllUserRole(System.Boolean)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.BeginWriteUserRoleInXml">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetWhereClause(System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadDataset(System.String,System.String[])">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateCommandText(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadSelectedGroups">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadSelectedRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GetSubFolderCondition(System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="mainForms"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadSelectedForms">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadSelectedSections">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadSelectedPages">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadSelectedContents">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadSelectedReports">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.LoadSelectedRule">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.WriteUserRoleInXml">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.WriteXML">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.WriteXMLCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.WriteConfiguration(System.String)">
	<summary>
	</summary>
	<param name="configPath"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.ButtonSelectAll_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.ButtonSelectNone_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.btnSelectAllUserRole_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.btnSelectNoneUserRole_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateXMLForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.GenerateXMLForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.CancelProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.AcceptProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.RefreshProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.TreeListUserRole_GetSelectImage(System.Object,DevExpress.XtraTreeList.GetSelectImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.TreeListUserRole_GetStateImage(System.Object,DevExpress.XtraTreeList.GetStateImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.TreeListUserRole_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.TreeListUserRole_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.searchComboRoleCode_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReportControl.TextEditRoleDescription_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AssemblyPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.DashboardType(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.IsChecked(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.IsDefault(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.IsFinalized">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.IsFolder(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.NewRoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.NewRoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.OutputPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.SubFormDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.RoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.RoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.ShowApplyUserRoleForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.UserRoles">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.UserRoleTables">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.UserRoleChangesDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.UserRoleXMLDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AddRow(System.Data.DataSet@,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.String,System.String[],System.String[][],System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="objectName"></param>
	<param name="createdBy"></param>
	<param name="dateCreated"></param>
	<param name="lastModifiedBy"></param>
	<param name="dateModified"></param>
	<param name="treeParentID"></param>
	<param name="treeChildID"></param>
	<param name="isFolder"></param>
	<param name="tempChilID"></param>
	<param name="type"></param>
	<param name="dashboardType"></param>
	<param name="imageIndex"></param>
	<param name="parameters"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CascadeChangesToParent(DevExpress.XtraTreeList.Nodes.TreeListNode,System.Boolean)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CheckAll(DevExpress.XtraTreeList.TreeList,System.Boolean)">
	<summary>
	</summary>
	<param name="list"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CheckUncheckIsSelected(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.InitializeCommandPattern">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.InitializeSkin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.InitializeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.FinalizeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.searchComboRoleCode_BeforeValidate(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendDashboardPageRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="dashboardTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendDashboardPageContentRows(System.Data.DataSet,System.String,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="parentPageNumber"></param>
	<param name="pageTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendFormMenuRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="mainFormID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendSubFormMenuRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendMethodFormMenuRows(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendCustomFormMenuRows(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendFormSectionMenuRows(System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="formClassType"></param>
	<param name="formMenuTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendGroupRows(System.Data.DataSet@)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendReportRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="reportTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendGroupRowsCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.BeginAppendGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.BeginCreateTreeListDatasource">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CreateTreeListDatasourceCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.FinalizeCreateTreeListDatasource(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="createdUserRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.InitializeTreeListDatasouce">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CreateTreeListDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CreateTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CreateUserRoleDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CreateUserRoleDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.SetDefaultSelectedUserRole(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetDashboardType(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="pageRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetMaxSelectedItems">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateSelectedUserRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateFormRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateFormSectionRows(System.Data.DataTable)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GeneratePageRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GeneratePageContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateReportContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetImageKey(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetDashboardPageChanges(System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetDashboardPageContentChanges(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetFormChanges(System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetParentFormChanges(System.String,System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetFormSectionChanges(System.String)">
	<summary>
	</summary>
	<param name="formMenuCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetGroupChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadGroup(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadPage(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadReport(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadDeveloperPageChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadDeveloperPageContentChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadDeveloperFormChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadDeveloperFormSectionChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadDeveloperGroupChanges(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadParentForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadDeveloperReportChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CreateProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.FinalizeProgress">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.SetProgressValue(System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.UpdateProgress(System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<param name="maximum"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.RefreshTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.MergeChangesAndUpdateLanguage(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="viewTable"></param>
	<param name="mainTable"></param>
	<param name="languageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateNewLanguageSet(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="languages"></param>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AppendLanguageRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String[][])">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.BeginSaveToDatabase">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateWhereClause(System.Data.DataRow,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow,System.Object[])">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<param name="proposedValue"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.ProcessFormSectionRow(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AssignRoleCode(System.Data.DataRow@,System.String)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.ProcessRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="currentTable"></param>
	<param name="roleCode"></param>
	<param name="whereClause"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateTableChanges(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.String[][],System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.SaveChangesToDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AddLanguageCodeAsPrimaryOnSystemMenuReportTemplate(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.ProcessScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.SaveToDatabase">
	<summary>
	</summary>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.SaveToDatabaseCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.SelectAllUserRole(System.Boolean)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.BeginWriteUserRoleInXml">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetWhereClause(System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadDataset(System.String,System.String[])">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateCommandText(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadSelectedGroups">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadSelectedRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GetSubFolderCondition(System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="mainForms"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadSelectedForms">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadSelectedSections">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadSelectedPages">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadSelectedContents">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadSelectedReports">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.LoadSelectedRule">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.WriteUserRoleInXml">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.WriteXML">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.WriteXMLCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.WriteConfiguration(System.String)">
	<summary>
	</summary>
	<param name="configPath"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.ButtonSelectAll_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.ButtonSelectNone_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.btnSelectAllUserRole_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.btnSelectNoneUserRole_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateXMLForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.GenerateXMLForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.CancelProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.AcceptProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.RefreshProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.TreeListUserRole_GetSelectImage(System.Object,DevExpress.XtraTreeList.GetSelectImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.TreeListUserRole_GetStateImage(System.Object,DevExpress.XtraTreeList.GetStateImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.TreeListUserRole_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.TreeListUserRole_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.searchComboRoleCode_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLReadControl.TextEditRoleDescription_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AssemblyPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.DashboardType(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.IsChecked(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.IsDefault(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.IsFolder(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.NewRoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.NewRoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.OutputPath">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.SubFormDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.RoleCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.RoleDescription">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.ShowApplyUserRoleForm">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.UserRoles">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.UserRoleTables">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.UserRoleChangesDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.UserRoleXMLDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AddRow(System.Data.DataSet@,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.String,System.String[],System.String[][],System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="objectName"></param>
	<param name="createdBy"></param>
	<param name="dateCreated"></param>
	<param name="lastModifiedBy"></param>
	<param name="dateModified"></param>
	<param name="treeParentID"></param>
	<param name="treeChildID"></param>
	<param name="isFolder"></param>
	<param name="tempChilID"></param>
	<param name="type"></param>
	<param name="dashboardType"></param>
	<param name="imageIndex"></param>
	<param name="parameters"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CascadeChangesToParent(DevExpress.XtraTreeList.Nodes.TreeListNode,System.Boolean)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CheckAll(DevExpress.XtraTreeList.TreeList,System.Boolean)">
	<summary>
	</summary>
	<param name="list"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CheckUncheckIsSelected(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.InitializeSkin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.InitializeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.FinalizeTreeList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.searchComboRoleCode_BeforeValidate(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendDashboardPageRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="dashboardTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendDashboardPageContentRows(System.Data.DataSet,System.String,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="parentPageNumber"></param>
	<param name="pageTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendFormMenuRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="mainFormID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendSubFormMenuRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendMethodFormMenuRows(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendCustomFormMenuRows(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendFormSectionMenuRows(System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="formClassType"></param>
	<param name="formMenuTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendGroupRows(System.Data.DataSet@)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendReportRows(System.Data.DataSet,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentMenuGroupCode"></param>
	<param name="reportTreeParentID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendGroupRowsCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.BeginAppendGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.BeginCreateTreeListDatasource">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CreateTreeListDatasourceCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asyncResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.FinalizeCreateTreeListDatasource(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="createdUserRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.InitializeTreeListDatasouce">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CreateTreeListDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CreateTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CreateUserRoleDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.SetDefaultSelectedUserRole(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetDashboardType(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="pageRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetMaxSelectedItems">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateSelectedUserRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateGroupRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateFormRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateFormSectionRows(System.Data.DataTable)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GeneratePageRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GeneratePageContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateReportContentRows">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetImageKey(DevExpress.XtraTreeList.Nodes.TreeListNode)">
	<summary>
	</summary>
	<param name="node"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetDashboardPageChanges(System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetDashboardPageContentChanges(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetFormChanges(System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetParentFormChanges(System.String,System.String)">
	<summary>
	</summary>
	<param name="groupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetFormSectionChanges(System.String)">
	<summary>
	</summary>
	<param name="formMenuCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetGroupChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadGroup(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadPage(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadReport(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadDeveloperPageChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadDeveloperPageContentChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadDeveloperFormChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadDeveloperFormSectionChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadDeveloperGroupChanges(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadParentForm(System.Data.DataSet@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<param name="parentRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadDeveloperReportChanges(System.Data.DataSet@)">
	<summary>
	</summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CreateProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.FinalizeProgress">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.SetProgressValue(System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.UpdateProgress(System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<param name="maximum"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.RefreshTreeListDatasource">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.MergeChangesAndUpdateLanguage(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="viewTable"></param>
	<param name="mainTable"></param>
	<param name="languageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateNewLanguageSet(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="languages"></param>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AppendLanguageRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataSet,System.String[][])">
	<summary>
	</summary>
	<param name="userRoleGateway"></param>
	<param name="userRoleChanges"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.BeginSaveToDatabase">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateWhereClause(System.Data.DataRow,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.MergeChangesByColumn(System.Data.DataRow@,System.Data.DataRow,System.Object[])">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<param name="proposedValue"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.ProcessFormSectionRow(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.Data.DataRow,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="oldRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AssignRoleCode(System.Data.DataRow@,System.String)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.ProcessRows(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.Data.DataRow@,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="currentRow"></param>
	<param name="currentTable"></param>
	<param name="roleCode"></param>
	<param name="whereClause"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateTableChanges(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@,System.String[][],System.String)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<param name="userRoleTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.SaveChangesToDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AddLanguageCodeAsPrimaryOnSystemMenuReportTemplate(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway@)">
	<summary>
	</summary>
	<param name="gateway"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.ProcessScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.SaveToDatabase">
	<summary>
	</summary>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.SaveToDatabaseCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.SelectAllUserRole(System.Boolean)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.BeginWriteUserRoleInXml">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetWhereClause(System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadDataset(System.String,System.String[])">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateCommandText(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadSelectedGroups">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadSelectedRole">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GetSubFolderCondition(System.Data.DataRow[])">
	<summary>
	</summary>
	<param name="mainForms"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadSelectedForms">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadSelectedSections">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadSelectedPages">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadSelectedContents">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadSelectedReports">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.LoadSelectedRule">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.WriteUserRoleInXml">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.WriteXML">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.WriteXMLCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.WriteConfiguration(System.String)">
	<summary>
	</summary>
	<param name="configPath"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.ButtonSelectAll_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.ButtonSelectNone_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateXMLForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.GenerateXMLForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.CancelProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.AcceptProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.RefreshProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.TreeListUserRole_GetSelectImage(System.Object,DevExpress.XtraTreeList.GetSelectImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.TreeListUserRole_GetStateImage(System.Object,DevExpress.XtraTreeList.GetStateImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.TreeListUserRole_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.TreeListUserRole_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.searchComboRoleCode_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.TextEditRoleDescription_InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLNewControl.TextEditRoleDescription_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLForm.UserRoleChangesDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLForm.InitializeSkin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLForm.ProcessScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLForm.CancelProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLForm.AcceptProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.PluginManager.UserRole.GenerateXMLForm.RefreshProcess(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.InterpriseHTMLEditor.HTMLEditorForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.InterpriseHTMLEditor.HTMLEditorForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.HTMLEditor.IInterpriseHTMLEditorInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Base.InterpriseHTMLEditor.HtmlEditorControl.EnableDisableButtons(System.Boolean)">
	<summary>
	</summary>
	<param name="enable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.FindControl.ChangeFormTitleText">
	<summary>
 Change the form's title to My.Application.Info.ProductName.
 If My.Application.Info.ProductName, form title will be "Connected Business".
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.FindControl.IsCustomSearch">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.FindControl.TargetInstance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.FindControl.SelectedSearchRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.FindControl.SelectedSearchRows">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.TemplateDetailsForm.#ctor">
	<summary>
 Use this when saving a new Template.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.TemplateDetailsForm.#ctor(System.String,System.String,System.Boolean)">
	<summary>
  Use this when updating an existing Template. 
 </summary>
	<param name="p_TemplateCode"></param>
	<param name="p_TemplateDescrition"></param>
	<param name="p_ApplyToDefaultContactsOnly"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.TemplateDetailsForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.DocumentEditor.PopUpForm.TemplateDetailsForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.DocumentEditor.PopUpForm.ITemplateDetailsControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MergeFieldDataSourceForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MergeFieldDataSourceForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.DocumentEditor.PopUpForm.IMergeFieldDataSourceControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MergeFieldDataSourceControl.GetDataTableSchema(System.String,System.Boolean,System.Boolean)">
	<summary>
 Returns the Table Schema of a Table or View.
 </summary>
	<param name="p_TableViewName">Name of the Table or View</param>
	<param name="p_JoinSchema">If TRUE, will return the DataDictionary Columns with Display Names. Else, will return the Schema.</param>
	<param name="p_IsTemplateTable">Tells if the specified p_TableViewName is a member of [Shared].Enum.TemplateTable</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MergeDocumentDetailsForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MergeDocumentDetailsForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.DocumentEditor.PopUpForm.IMergeDocumentDetailsControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MergeCountForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MergeCountForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.DocumentEditor.PopUpForm.IMergeCountControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MailMergeTemplatesForm.#ctor(Interprise.Framework.Base.Shared.Enum.Module,Interprise.Framework.Base.Shared.Structure.CRMDocumentProperties,System.Boolean)">
	<summary>
 Create New Instance of MailMergeTemplatesForm.
 </summary>
	<param name="p_CurrentModule">Current Module where the form is being called/used.</param>
	<param name="p_CRMDocumentProperties">CRM Document Properties.</param>
	<param name="p_PopUpListMode">Will behave like a PopUp Form where use can only select a template.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MailMergeTemplatesForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MailMergeTemplatesForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.DocumentEditor.PopUpForm.IMailMergeTemplatesControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.PopUpForm.MailMergeTemplatesControl.#ctor(Interprise.Framework.Base.Shared.Enum.Module,Interprise.Framework.Base.Shared.Structure.CRMDocumentProperties)">
	<summary>
 Create New Instance of MailMergeTemplatesControl.
 </summary>
	<param name="p_CurrentModule">Current Module where the form is being called/used.</param>
	<param name="p_CRMDocumentProperties">CRM Document Properties</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.DocumentEditor.DocumentEditorForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.DocumentEditor.DocumentEditorForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.DocumentEditor.IDocumentEditorControlInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="T:Interprise.Presentation.Base.CustomizedLayout.NewLayoutsInfo">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.CustomizedLayout.CurrentDataset">
	<summary> Returns Current Dataset. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.CustomizedLayout.CurrentFacade">
	<summary> Returns the instance of the business facade that will be use by the ReadData and SaveData method. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.CustomizedLayout.TableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.CustomizedLayout.ParentTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.CustomizedLayout.FormSectionDocumentCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.CustomizedLayout.DocumentCodeColumnName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.CustomizedLayout.DocumentCodeParentTable">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.CustomizedLayout.CurrentExtendedLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.#ctor(System.Collections.Hashtable)">
	<summary>
	</summary>
	<param name="cl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.SaveMainLayoutChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.SaveDataDictionaryDataset(Interprise.Framework.Base.DatasetGateway.DataDictionaryDatasetGateway,System.Boolean)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.UpdateDatasetCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.FinalizeUpdate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.ProgressForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.Progress_Changed(System.Object,System.Timers.ElapsedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.UpdateProgress(System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>.

</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.CreateReadProcedure">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.UpdateCacheData">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.SaveSubLayoutChanges">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.CustomizedLayout.Dispose(System.Boolean)">
	<summary>
	</summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.UnusedPluginForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.UnusedPluginForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.UnusedPluginControl.PluginContainerRows">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.PasswordControl.PassWordAttributeType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.IsReadOnly">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.Password">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.PasswordIV">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.PasswordSalt">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.ButtonMaskedControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.UseSystemPasswordChar">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.IsValid">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.PasswordRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.IsEncrypted">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.IsPending">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.TableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.OriginalValueText">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.IsPasswordChanged">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.PasswordControl.ItemContainer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.BindingCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.ConvertFromBase64String(System.Object)">
	<summary>
	</summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.ConvertPassword(System.Boolean)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.SetButtonImage(System.Boolean)">
	<summary>
	</summary>
	<param name="isLocked"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.Reset(System.Boolean)">
	<summary>
	</summary>
	<param name="isMasked"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.EncryptPassword">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.ButtonMasked_Click(System.Object,DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.ButtonMasked_Leave(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.ButtonMasked_TextChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.ButtonMasked_GotFocus(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.PasswordControl.PasswordControl_VisibleChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldForm.PluginContainerItemAdded">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldForm.CurrentExtendedLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldForm.GridView">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldForm.CurrentCustomizationType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldForm.PluginContainerDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldForm.#ctor(Interprise.Framework.Base.DatasetGateway.DataDictionaryDatasetGateway,Interprise.Framework.Base.Shared.Enum.CustomizationType)">
	<summary>
	</summary>
	<param name="referenceDataset"></param>
	<param name="customizationType"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.CurrentDataset">
	<summary> Returns Current Dataset. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.CurrentFacade">
	<summary> Returns the instance of the business facade that will be use by the ReadData and SaveData method. </summary>
	<value>
	</value>
	<remarks>
	</remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.DataDictionaryFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.CurrentExtendedLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.TableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.ParentTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.GridView">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.CurrentCustomizationType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.IsBindingDisabled">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.DefaultColumnName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.IsPending">
	<summary>
 Determines if the current transaction is on pending state.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.IsForceUpdate">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.PluginContainerDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.EventHandlerCount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.IsDataTypeChanged">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.CurrentFieldType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.IsCustomFieldGeneric">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.NewFieldControl.UndoPicture">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.Customization.NewFieldControl.Gridview_ForceSaveLayout">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.AddControlValidation(System.Windows.Forms.Control)">
	<summary>
 Show bubble help text in Custom Fields
 </summary>
	<param name="editor"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.InvalidValue(System.Object,DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.#ctor(Interprise.Framework.Base.DatasetGateway.DataDictionaryDatasetGateway)">
	<summary>
	</summary>
	<param name="gatewayDataDictionary"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.#ctor(Interprise.Framework.Base.DatasetGateway.DataDictionaryDatasetGateway,Interprise.Facade.Base.DataDictionaryFacade,System.Boolean)">
	<summary>
	</summary>
	<param name="gatewayDataDictionary"></param>
	<param name="facadeDataDictionary"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.AddData(System.String)">
	<summary>
	</summary>
	<param name="paramParentTableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.CreateGenericField">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.IsInLayoutControl(DevExpress.XtraLayout.LayoutControl,System.String)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.FindBindedControl(System.Windows.Forms.Control,System.Object@,System.String@,System.Data.DataTable@)">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="dataSource"></param>
	<param name="tableName"></param>
	<param name="entityTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.AddItemToLayout(Interprise.Presentation.Base.ExtendedLayoutControl,System.Windows.Forms.Control)">
	<summary>
 Methods that add's the new layoutitem(s) in the current layout control.
 </summary>
	<param name="layoutControl"></param>
	<param name="sectionControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.AddToGridView">
	<summary>
 Method that add's the new field(s) to the gridview columns.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.Progress_Changed(System.Object,System.Timers.ElapsedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.UpdateProgress(System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>.

</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.UpdateDatasetCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="result"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.FinalizeUpdate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.UpdateCacheData">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.ClearSelectedItems">
	<summary>
 Clear's all selected layout control item(s)
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.CreateAddressFields">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.CreatePhoneFields">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.CreatePasswordFields">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.GetCustomFieldType(DevExpress.XtraTab.XtraTabPage)">
	<summary>
	</summary>
	<param name="selectedPage"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.TextEdit_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.pictureEdit_ImageChanged(System.Object,System.EventArgs)">
	<summary>
 Handles size mode of image data type field.
 Detects whether a picture is stretch or on normal mode.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.comboDataType_QueryPopUp(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.comboDataType_SelectedValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.checkDefault_EditValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.NewFieldWizard_BeforePageDisplayed(System.Object,Interprise.Presentation.Base.ExtendedXtraTabContol.SelectedPageChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.NewFieldWizard_BeforeFinish(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.NewFieldWizard_Finished(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.textColumnName_Leave(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.textColumnName_LostFocus(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.textColumnName_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.NewFieldControl_VisibleChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.NewFieldControl.BaseControl_Disposed(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AllowProcessNodeChanged">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.BrowsableAttributes(Interprise.Presentation.Base.Customization.CustomizationHelper.ControlType)">
	<summary>
	</summary>
	<param name="objectType"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.CanAdd(System.String,System.Int16)">
	<summary>
	</summary>
	<param name="editorName"></param>
	<param name="containerID"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.CanLocateObject(System.Object)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.FocusedEditorRow(Interprise.Presentation.Base.Customization.CustomizationHelper.ControlType)">
	<summary>
	</summary>
	<param name="objectType"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.Editors">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.EditorHelper">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ParentHelper">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.CurrentObjectType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ValidCategoryRow(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="editor"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ValidEditor(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="editor"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ValidEditorRow(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="editor"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ValidGrid(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="editor"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ValidGridColumn(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="editor"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ValidGridView(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="editor"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ValidPluginContainer(System.ComponentModel.Component)">
	<summary>
 TODO: To be changed to PluginContainerControl type
 </summary>
	<param name="editor"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ValidTreeListColumn(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="editor"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ParentChildEditorHelper">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.CurrentSelectObject">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.PreviousSelectObject">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.PluginInstance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ParentContainer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ParentTreeListNode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.#ctor(System.Windows.Forms.Control,Interprise.Presentation.Base.PluginContainerControl)">
	<summary>
	</summary>
	<param name="instance"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.Initialize(System.Windows.Forms.Control,Interprise.Presentation.Base.PluginContainerControl)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ParseInstance(System.Windows.Forms.Control,Interprise.Presentation.Base.PluginContainerControl)">
	<summary>
	</summary>
	<param name="instance"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AddDynamicParentNode(DevExpress.XtraTreeList.Nodes.TreeListNode,System.String)">
	<summary>
	</summary>
	<param name="sourceNode"></param>
	<param name="groupType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AddEditor(System.Windows.Forms.Control,Interprise.Presentation.Base.PluginContainerControl,System.Int16)">
	<summary>
	</summary>
	<param name="editor"></param>
	<param name="container"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AddEditor(System.Windows.Forms.Control,DevExpress.XtraTreeList.Nodes.TreeListNode,Interprise.Presentation.Base.PluginContainerControl,System.Int16)">
	<summary>
	</summary>
	<param name="editor"></param>
	<param name="parentNode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AddEditor(DevExpress.XtraGrid.GridControl,DevExpress.XtraTreeList.Nodes.TreeListNode,Interprise.Presentation.Base.PluginContainerControl,System.Int16)">
	<summary>
	</summary>
	<param name="container"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AddEditor(DevExpress.XtraVerticalGrid.VGridControl,DevExpress.XtraTreeList.Nodes.TreeListNode,Interprise.Presentation.Base.PluginContainerControl,System.Int16)">
	<summary>
	</summary>
	<param name="container"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AddEditor(DevExpress.XtraVerticalGrid.Rows.CategoryRow,DevExpress.XtraTreeList.Nodes.TreeListNode,Interprise.Presentation.Base.PluginContainerControl,System.Int16)">
	<summary>
	</summary>
	<param name="container"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AddEditor(DevExpress.XtraTreeList.TreeList,DevExpress.XtraTreeList.Nodes.TreeListNode,Interprise.Presentation.Base.PluginContainerControl,System.Int16)">
	<summary>
	</summary>
	<param name="container"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AssignEditorIcon(DevExpress.XtraTreeList.GetStateImageEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.AssignEditorIcon(DevExpress.XtraTreeList.GetStateImageEventArgs,System.Object)">
	<summary>
	</summary>
	<param name="e"></param>
	<param name="editor"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ConvertToComponent(System.Object)">
	<summary>
	</summary>
	<param name="object"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ConvertToTreeListNode(System.Object)">
	<summary>
	</summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.CopyToClipboard(System.Boolean)">
	<summary>
 Copy sample code to clipboard
 </summary>
	<param name="closeForm">True to close the Plugin Inspector Form otherwise False</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ExpandOrCollapseTree(System.Boolean)">
	<summary>
 Expand or Collapse the TreeList
 </summary>
	<param name="expand">False to collapse the TreeList otherwise True</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.HighlightSelectedNode(System.Boolean)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.GenerateUniqueName(System.Object)">
	<summary>
	</summary>
	<param name="obj"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.GetObjectType(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="editor"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.GroupByEditor">
	<summary>
 Group nodes by editor type when there are 2 or more instance of that type.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.GroupByEditor(DevExpress.XtraTreeList.Nodes.TreeListNode,Interprise.Presentation.Base.Customization.InterprisePropertyForm.EditorGroup)">
	<summary>
	</summary>
	<param name="parentNode"></param>
	<param name="group"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ParseControl(System.Windows.Forms.Control,Interprise.Presentation.Base.PluginContainerControl,System.Int16)">
	<summary>
	</summary>
	<param name="parentEditor"></param>
	<param name="container"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ProcessSelectedNode(DevExpress.XtraTreeList.FocusedNodeChangedEventArgs)">
	<summary>
	</summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ParseUnhandledCharacters(System.String,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="sampleCode"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ParseSampleCode(System.String,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="sampleCode"></param>
	<param name="language"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.UpdateEditor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.UpdateEditorFont">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.ComboBoxEditLanguageOption_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.TreeListControl_CustomDrawNodeCell(System.Object,DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.TreeListControl_FocusedNodeChanged(System.Object,DevExpress.XtraTreeList.FocusedNodeChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.TreeListControl_GetStateImage(System.Object,DevExpress.XtraTreeList.GetStateImageEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.TreeListControl_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.TabSampleCode_SelectedPageChanging(System.Object,DevExpress.XtraLayout.LayoutTabPageChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.button_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.InterprisePropertyForm.InterprisePropertyForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.InterprisePropertyForm.EditorGroup">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.InterprisePropertyForm.EditorContainer">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.InterprisePropertyForm.EditorInfo">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.HelpTextPopUpForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.HelpTextPopUpForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.PluginContainerItemAdded">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.CurrentDataset">
	<summary> Returns Current Dataset. </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.CurrentFacade">
	<summary> Returns the instance of the business facade that will be use by the ReadData and SaveData method. </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.TableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.ParentTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.CurrentLayoutItem">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.CurrentExtendedLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.CurrentCustomizationType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.GridColumn">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.CurrentPluginContainerControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.FormSectionDocumentCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.PluginInfoCollection">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.UsedMaxCounter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.FieldPropertyEditorForm_Shown(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.PanelBody_InitializePlugin(System.Object,System.EventArgs)">
	<summary>
 Initializes the plugin assigned to the container using the Interprise plugin framework.
 </summary>
	<param name="sender">The object instance that invoked the event</param>
	<param name="e">The event argument passed by the sender</param>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorForm.PanelBodyPluginInstance">
	<summary>
 Returns the instance of plugin assigned to the plugin container.
 </summary>
	<value>The instance of plugin assigned to the plugin container</value>
	<returns>Interprise.Extendable.Base.Presentation.Generic.Customization.IFieldPropertyEditorInterface</returns>
	<remarks>Code generated by Interprise Solution's Plugin Initialization Code Generator. Modifying the generated code manually may cause errors. You may also lost your changes when the codes are regenerated.</remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginTableType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DataDictionaryObjectType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.TableKind">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginContainerItemAdded">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CurrentDataset">
	<summary> Returns Current Dataset. </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CurrentFacade">
	<summary> Returns the instance of the business facade that will be use by the ReadData and SaveData method. </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DataDictionaryDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.FacadeDataDictionary">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.IsReadOnly">
	<summary> Property to enable/disable controls for editing. </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.LanguageCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.BindedTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ParentTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ColumnName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CurrentLayoutItem">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CurrentLayoutItemControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CurrentExtendedLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ControlBindingMemberInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.MergeChanges">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CurrentCustomizationType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.GridColumn">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.IsCustomized">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CurrentPluginContainerControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginContainerDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginTables">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginViews">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.UserDefinedTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.UserDefinedViewName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.TableExist">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ViewExist">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DeveloperID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DefaultTableName">
	<summary>
 Gets the new table name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DefaultViewName">
	<summary>
 Gets the new view name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.NewTableName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.NewViewName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.IsRadioGroupControl">
	<summary>
 Determine if the an active control is a radiogroup
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CanAddObject">
	<summary>
 Determine if a table or a view can be added in the plugin container dataset.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CanUpdate">
	<summary>
 Gets or sets whether the PluginDataDictionary can be updated or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.GatewayUserRoleDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginSectionInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.FormSectionDocumentCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DocumentCodeColumnName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DocumentCodeParentTable">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginProperties">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.IsPending">
	<summary>
 Gets or sets whether the current process is on pending state or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.HasTableAndViewRows">
	<summary>
 Indicates if the current column name has a table and view rows in the DataDictionaryColumn table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.IsObjectCreated">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginInfoCollection">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.LoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.SetPropertyDescription(System.String,DevExpress.XtraVerticalGrid.Rows.BaseRow)">
	<summary>
	</summary>
	<param name="vGridName"></param>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.SetRowReadonlyProperties(System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="isCustomTable"></param>
	<param name="IsCustomField"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ShowNewForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PopulateTablesAndViews">
	<summary>
 Populate tables and views from the plugin container CurrentDataset
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.SetUserRolePluginMode">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.AddRelationAndForeignKeyConstraint(System.Data.DataTable,System.Data.DataTable)">
	<summary>
	</summary>
	<param name="parentTable"></param>
	<param name="childTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.GetSectionRow(System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="formClassType"></param>
	<param name="formAssemblyName"></param>
	<param name="sectionClassType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CreateXMLTableSchema(System.Data.DataTable,System.String)">
	<summary>
	</summary>
	<param name="newTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.AddDatasetTable(System.Data.DataTable,Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DataDictionaryObjectType)">
	<summary>
	</summary>
	<param name="newTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CreateDataTable(System.String)">
	<summary>
 Method that creates the dataset object and adds it to the PluginContainer dataset
 </summary>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CopyTableProperties(System.String,System.String)">
	<summary>
 Methods that copies the table properties to the view
 </summary>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CreateTemporaryTable">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CreateTemporaryView">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.CreateTableAndView">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.bwCreateObject_Initialize(System.Object)">
	<summary>
	</summary>
	<param name="sender"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.BindLayout">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.Validate">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.AssignPluginBinding">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.GenerateObjectName(Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DataDictionaryObjectType,Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginTableType)">
	<summary>
	</summary>
	<param name="objectType"></param>
	<param name="tableType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.AppendPluginTables(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.SetDefaultTableAndViewName(Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.PluginTableType)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.SetTextDisplay">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="confirm"></param>
	<param name="clear"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.Merge(System.Boolean)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ClearUserDefinedObjectNames">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.Focus">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.InCurrentDataset(System.String)">
	<summary>
 Determines if the current object name is in the PluginContainer dataset.
 </summary>
	<param name="objectName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.SetTableType(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ClearSelectedItems">
	<summary>
 Clear's all selected layout control item(s)
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.FindBindedControl(System.Windows.Forms.Control,System.Object@,System.String@,System.Data.DataTable@)">
	<summary>
	</summary>
	<param name="sectionControl"></param>
	<param name="dataSource"></param>
	<param name="tableName"></param>
	<param name="entityTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.IsInLayoutControl(DevExpress.XtraLayout.LayoutControl,System.String)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.AddItemsToLayout(Interprise.Presentation.Base.ExtendedLayoutControl,System.Windows.Forms.Control)">
	<summary>
 Methods that add's new layoutitem(s) into the layout control
 </summary>
	<param name="layoutControl"></param>
	<param name="sectionControl"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ObjectDescription(Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DataDictionaryObjectType,System.String)">
	<summary>
 Create's the default object description
 </summary>
	<param name="objectType"></param>
	<param name="objectName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.UpdatePluginDataDictionary(Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.DataDictionaryObjectType,System.String,System.Int32)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.BaseControl_Disposed(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.VGridFieldProperty_FocusedRowChanged(System.Object,DevExpress.XtraVerticalGrid.Events.FocusedRowChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoMultilingualLanguageCode_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoColumnListType_EditValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoColumnListType_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.VGridFieldProperty_FocusedRecordChanged(System.Object,DevExpress.XtraVerticalGrid.Events.IndexChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoColumnPullDownColumn_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoColumnAdditionalFilter_ButtonPressed(System.Object,DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.m_additionalFilter_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.FieldPropertyEditorForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.ShowProgressForm">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.UpdateProgress(System.Int32)">
	<summary>
	</summary>
	<param name="progress"></param>
	<remarks></remarks>.

</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoComboTable_QueryCloseUp(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoComboTable_SelectedValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoComboTable_Leave(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoComboView_QueryCloseUp(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoComboView_Leave(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoComboView_SelectedValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.RepoComboTableType_SelectedValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.FieldPropertyEditorControl_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.FieldPropertyEditorControl.VGridPluginProperties_FocusedRowChanged(System.Object,DevExpress.XtraVerticalGrid.Events.FocusedRowChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.CustomizationHelper.ControlType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.CustomizationHelper.ObjectType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.ConvertToType(System.Object,System.String,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.ConvertToControl(System.ComponentModel.Component)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GetDataBindingObject(System.Windows.Forms.Binding,System.String,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType,System.String)">
	<summary>
	</summary>
	<param name="binding"></param>
	<param name="bindingFieldWithQuotes"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(System.ComponentModel.Component,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType,System.String)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(System.Windows.Forms.Control,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType,System.String)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(DevExpress.XtraGrid.GridControl,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType,System.String)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(DevExpress.XtraGrid.Views.Grid.GridView,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType,System.String)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(DevExpress.XtraGrid.Columns.GridColumn,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType,System.String)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(DevExpress.XtraVerticalGrid.Rows.EditorRow,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType,System.String)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(DevExpress.XtraVerticalGrid.VGridControl,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(DevExpress.XtraTreeList.Columns.TreeListColumn,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType,System.String)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeAssignStatement(DevExpress.XtraTreeList.TreeList,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCode(System.ComponentModel.Component,Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCodeType,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="codeType"></param>
	<param name="language"></param>
	<param name="selectedObject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateCode(System.IO.MemoryStream,System.IO.StreamWriter)">
	<summary>
	</summary>
	<param name="sourceWriter"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateStrongTypedDataSet(System.ComponentModel.Component,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GetObject(System.Windows.Forms.Control,Interprise.Presentation.Base.Customization.CustomizationHelper.ObjectType)">
	<summary>
	</summary>
	<param name="asParentControl"></param>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GenerateGridDataSet(System.ComponentModel.Component,Interprise.Framework.Base.DatasetComponent.BaseDataset,System.String,System.String,System.String,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="selectedObject"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GetOwnerClassStyle(Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GetCommentStyle(Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GetDirectiveStyle(Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GetDataSetName(Interprise.Framework.Base.DatasetComponent.BaseDataset)">
	<summary>
	</summary>
	<param name="dataSource"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.GetHelpProjectReference(Interprise.Framework.Base.DatasetComponent.BaseDataset,Interprise.Presentation.Base.Customization.CustomizationHelper.LanguageType)">
	<summary>
	</summary>
	<param name="dataSource"></param>
	<param name="language"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.CustomCodeComment.#ctor(System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="description"></param>
	<param name="value"></param>
	<param name="returns"></param>
	<param name="remarks"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.CustomizationHelper.CustomCodeComment.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.Customization.CustomizationHelper.CustomCodeComment">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.ExtendedLayout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.Root">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.ItemsHelper">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.IndexHelper">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.GetItemNames">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.MustAddHelper">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.ItemsPerGroup">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.ItemCount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Customization.ColumnsHelperForm.Columns">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.ClearHashTables">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.#ctor(Interprise.Presentation.Base.ExtendedLayoutControl,System.Int32)">
	<summary>
	</summary>
	<param name="layout"></param>
	<param name="columns"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.DisableMenuItems">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.ApplyColumns">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.FindItem(System.String)">
	<summary>
	</summary>
	<param name="itemName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.CanMoveItem(DevExpress.XtraLayout.BaseLayoutItem,DevExpress.XtraLayout.BaseLayoutItem)">
	<summary>
	</summary>
	<param name="nextItem"></param>
	<param name="baseItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.MoveItem(DevExpress.XtraLayout.BaseLayoutItem,DevExpress.XtraLayout.BaseLayoutItem,DevExpress.XtraLayout.Utils.InsertType)">
	<summary>
	</summary>
	<param name="nextItem"></param>
	<param name="baseItem"></param>
	<param name="insertType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.RemoveItemsHelper">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.UpdateCheckButtonState(DevExpress.XtraEditors.CheckButton,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="checkButton"></param>
	<param name="isChecked"></param>
	<param name="ignoreCheckState"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.SpinEditColumns_ValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.CheckButtonColumn_CheckedChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.ColumnsHelperForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.SimpleButtonRestore_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.CheckButtonColumn_DoubleClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.ColumnsHelperForm.SpinEditColumns_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.AdditionalFilterForm.MenuItemOKAction(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Customization.AdditionalFilterForm.MenuItemCancelAction(System.Object)">
	<summary>
	</summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.ConnectMngr.BaseConnectMngrControl.AddLinkedServer(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Creates a new instance of a Linked Server on the current target SQL
 </summary>
	<param name="srvproduct">Is the product name of the OLE DB data source to add as a linked server. product_name is nvarchar(128), with a default of NULL. If SQL Server, provider_name, data_source, location, provider_string, and catalog do not have to be specified.</param>
	<param name="provider">Is the unique programmatic identifier (PROGID) of the OLE DB provider that corresponds to this data source. provider_name must be unique for the specified OLE DB provider installed on the current computer. provider_name is nvarchar(128), with a default of NULL; however, if provider_name is omitted, SQLNCLI is used. (Use SQLNCLI and SQL Server will redirect to the latest version of SQL Server Native Client OLE DB Provider.) The OLE DB provider is expected to be registered with the specified PROGID in the registry.</param>
	<param name="datasrc">Is the name of the data source as interpreted by the OLE DB provider. data_source is nvarchar(4000). data_source is passed as the DBPROP_INIT_DATASOURCE property to initialize the OLE DB provider.</param>
	<param name="provstr">Is the OLE DB provider-specific connection string that identifies a unique data source. provider_string is nvarchar(4000), with a default of NULL. provstr is either passed to IDataInitialize or set as the DBPROP_INIT_PROVIDERSTRING property to initialize the OLE DB provider.</param>
	<param name="authMode">Is the authentication mode used to login to the database server.</param>
	<param name="srvULogin">Is a login on the local server. locallogin is sysname, with a default of NULL. NULL specifies that this entry applies to all local logins that connect to rmtsrvname. If not NULL, locallogin can be a SQL Server login or a Windows login. The Windows login must have been granted access to SQL Server either directly, or through its membership in a Windows group granted access.</param>
	<param name="uName">Is the remote login used to connect to datasrc when @useself is FALSE. When the remote server is an instance of SQL Server that does not use Windows Authentication, rmtuser is a SQL Server login. rmtuser is sysname, with a default of NULL.</param>
	<param name="uPass">Is the password associated with uName. uPass is sysname, with a default of NULL.</param>
	<param name="isTest">Is the the flag which identifies if the linked server is just being tested for its connectivity.</param>
	<returns></returns>
	<remarks>Resource: http://msdn.microsoft.com/en-us/library/ms190479.aspx</remarks>
</member><member name="M:Interprise.Presentation.Base.ConnectMngr.BaseConnectMngrControl.AddLinkedServerUser(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Creates the linked server user that will be used when connecting to this database
 </summary>
	<param name="datasrc">Is the name of the data source as interpreted by the OLE DB provider. data_source is nvarchar(4000). data_source is passed as the DBPROP_INIT_DATASOURCE property to initialize the OLE DB provider.</param>
	<param name="authMode">Is the authentication mode used to login to the database server.</param>
	<param name="srvULogin">Is a login on the local server. locallogin is sysname, with a default of NULL. NULL specifies that this entry applies to all local logins that connect to rmtsrvname. If not NULL, locallogin can be a SQL Server login or a Windows login. The Windows login must have been granted access to SQL Server either directly, or through its membership in a Windows group granted access.</param>
	<param name="uName">Is the remote login used to connect to datasrc when @useself is FALSE. When the remote server is an instance of SQL Server that does not use Windows Authentication, rmtuser is a SQL Server login. rmtuser is sysname, with a default of NULL.</param>
	<param name="uPass">Is the password associated with uName. uPass is sysname, with a default of NULL.</param>
	<returns></returns>
	<remarks>Resource: http://msdn.microsoft.com/en-us/library/ms189811.aspx</remarks>
</member><member name="M:Interprise.Presentation.Base.ConnectMngr.BaseConnectMngrControl.DropLinkedServer(System.String)">
	<summary>
 Removes the instance of the Linked Server from the target SQL 
 </summary>
	<param name="datasrc">Is the server to be removed. server must exist.</param>
	<returns></returns>
	<remarks>Resource: http://msdn.microsoft.com/en-us/library/ms174310.aspx</remarks>
</member><member name="M:Interprise.Presentation.Base.ConnectMngr.BaseConnectMngrControl.DeleteQueueFiles">
	<summary>
 Deletes all the contents of the queue folder for the current linked server connection
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheBuilder.CacheManagerFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheBuilder.CacheTableToUpdate">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheBuilder.CreatingCacheThreadAlive">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheBuilder.IsSkipCachingOnPluginTablesWithAssembly">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Cache.CacheBuilder.UpdatingCacheThreadAlive">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.Cancel">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.CreateCacheDatabase(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.DropCacheDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.GetCacheTableInfo(System.String)">
	<summary>
	</summary>
	<param name="cacheTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.GetCacheTablesModified">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.ManageEventHandlers(System.Boolean,Interprise.Framework.Base.Shared.Delegates.CachingCompletedEventHandler,Interprise.Framework.Base.Shared.Delegates.CachingFailedEventHandler,System.ComponentModel.ProgressChangedEventHandler)">
	<summary>
	</summary>
	<param name="add"></param>
	<param name="completed"></param>
	<param name="failed"></param>
	<param name="progress"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.UpdateCacheData">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.m_cacheManagerFacade_CBNServerDown(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.m_cacheManagerFacade_Completed(System.Object,Interprise.Framework.Base.EventArguments.CachingCompletedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.m_cacheManagerFacade_Failed(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Cache.CacheBuilder.m_cacheManagerFacade_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseWizardControl.InitializeWelcomePage(DevExpress.XtraWizard.WelcomeWizardPage)">
	<summary>
 Initializes Welcome Page 
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseWizardControl.InitializeFinishPage(DevExpress.XtraWizard.CompletionWizardPage)">
	<summary>
 Initializes Completion Page
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseWizardControl.InitializeWizardPage(DevExpress.XtraWizard.BaseWizardPage)">
	<summary>
 Will Add PluginContainerControl to WizardPage
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseWizardControl.OnComponentRemoving(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
	<summary>
 Prevent the Designer to remove components that are being 
 used by the wizard such as welcome and finish page as well as the
 pagedescriptioncollection componet.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseWizardControl.FinishWizard">
	<summary>
	</summary>
	<returns>True, if not cancelled.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseWizardControl.HideSharedPluginContainer(Interprise.Presentation.Base.PluginContainerControl,Interprise.Presentation.Base.PluginContainerControl)">
	<summary>
 Hides SharedPlugin Container when property SharedPage=False. SharedPlugin Container is hidden by default.
 </summary>
	<param name="p_maincontainer"></param>
	<param name="p_sharedcontainer"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseWizardControl.EnableSharedPluginContainer(Interprise.Presentation.Base.PluginContainerControl,Interprise.Presentation.Base.PluginContainerControl)">
	<summary>
 Shows the SharedPluginContainer at runtime.
 </summary>
	<param name="p_maincontainer"></param>
	<param name="p_sharedcontainer"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseSystemManagerForm.menuBase_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseSystemControl.EndCurrentEdit">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseSystemControl.RefreshList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.BaseRibbonForm.ForceSignout">
	<summary>
	</summary>
	<param name="userCode"></param>
	<param name="ipAddress"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.PluginContainerRows">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.LayoutUserRoleCode">
	<summary>
 Gets/sets the layout role code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsActionCalledFromNumKey">
	<summary>
 Gets or sets a value indicating if an entry was made by entering through a Num key (True) or by choosing from a selection (False)
 </summary>
	<value>The value indicating if an entry was made by entering through a Num key (True) or by choosing from a selection (False)</value>
	<returns>The value indicating if an entry was made by entering through a Num key (True) or by choosing from a selection (False</returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.BaseFormType(System.String,System.Windows.Forms.Control)">
	<summary>
 Gets the form type of the current form as specified by Interprise.Framework.Base.Shared.Enum.Enum.FormType;
 sets the form type, title and child control of the current form
 </summary>
	<param name="title">The title of the form</param>
	<param name="childControl">The user control to be added to the form</param>
	<value>The form type of the current control</value>
	<returns>The form type of the current control</returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.CurrentControl">
	<summary>
 Gets or sets the current control
 </summary>
	<value>The current control</value>
	<returns>The current control</returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.DocumentCode(System.Data.DataRow)">
	<summary>
 Gets or sets the String representing the unique code of the given transaction
 </summary>
	<param name="readRow">The DataRow to be read</param>
	<value>The String representing the unique code of the given transaction</value>
	<returns>The String representing the unique code of the given transaction</returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.DocumentCodeRow">
	<summary>
 The row which was assigned in DocumentCode property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Used as handler for multiple DocumentCode codes.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsReadOnly">
	<summary>
 Gets or sets the value indicating if the current control is read only (True) or not (False)
 </summary>
	<value>The value indicating if the current control is read only (True) or not (False)</value>
	<returns>The value indicating if the current control is read only (True) or not (False)</returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.Converted">
	<summary>
 Sets the value indicating if the form is converted from another type of form (True); False, otherwise
 </summary>
	<value>The value indicating if the form is converted from another type of form (True); False, otherwise</value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsAdd(System.String)">
	<summary>
 Sets the value that determines if the form will perform an add operation (True) or a read operation (False)
 </summary>
	<param name="newDocumentCode">The unique code of the given transaction</param>
	<value>True, if the form will perform an add operation; False, if the form will perform a read operation</value>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsMeasurePerformance">
	<summary>
 Sets the value indicating if the performance will be checked
 </summary>
	<value>The value indicating if the performance will be checked</value>
	<remarks>The value indicating if the performance will be checked</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.DeveloperID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.FormID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.CustomLayouts">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.RemovePlugin">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.ReplacedPlugins">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsCreateCustomTable">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.SystemUserRoleMenuFormSectionInfos">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.SystemUserRolePluginMenuFormSectionInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.CustomSubLayouts">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.CustomizedLayoutControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.CachingProgressBar">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.ChildControls">
	<summary>
 Gets the collection of controls contained within the main control before and after the main control has been added in the form.
 </summary>
	<value>A control of base type BaseControl representing the array of controls contained within the main control.</value>
	<returns>A control of base type BaseControl representing the array of controls contained within the main control.</returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.SystemUserRoleMenuFormViewDataRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsCustomSearch">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.TargetInstance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.SelectedSearchRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.SelectedSearchRows">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.AllowLoadCustomSearch">
	<summary>
 Determine if the base method LoadDataSet(SelectedSearchRowCollection) was overriden in the current control (or in the derrived control).
 </summary>
	<value>Boolean</value>
	<returns>True if the method was overriden in the current control (or in the derrived control), otherwise false.</returns>
	<remarks>This flag is intended for custom search ONLY.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.OwnerClosing">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.PluginInfoCollection">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.UsedMaxCounter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.PluginMaxCounter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.CustomizedGrid">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.Activate">
	<summary>
 Activates the form and gives it focus (uses the System.Windows.Forms.Form.Activate subroutine)
 </summary>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.AddControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface)">
	<summary>
 Instantiates an Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface and passes it to the this method to 
 create a control to be added to the container control
 </summary>
	<param name="control">An Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface</param>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.AddControl(System.Windows.Forms.UserControl)">
	<summary>
 Adds a control to the current container control
 </summary>
	<param name="control">A System.Windows.Forms.UserControl control</param>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.AddControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface,System.Windows.Forms.Control)">
	<summary>
 Instantiates an Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface and passes it to the this method to 
 create a control to be added to a specified container control
 </summary>
	<param name="control">An Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface</param>
	<param name="containerControl">A System.Windows.Forms.Control container control</param>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.AddControl(System.Windows.Forms.Control,System.Windows.Forms.Control)">
	<summary>
 Adds a control to a specified container control
 </summary>
	<param name="control">A System.Windows.Forms.Control control</param>
	<param name="containerControl">A System.Windows.Forms.Control container control</param>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.Close">
	<summary>
 Closes the form.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.GetDerivedInterface(System.Type,System.Type)">
	<summary>
 Returns the derived interface types of a given object type (examineType) that conforms to the criteria of a certain
 interface type (interfaceType)
 </summary>
	<param name="examineType">The object type whose derived interfaces are to be obtained</param>
	<param name="interfaceType">The interface type that is used a filter in determining the right interfaces</param>
	<returns>The derived interface (or an array of derived interfaces)</returns>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.ChangeFormTitleText">
	<summary>
 Change the form's title to My.Application.Info.ProductName.
 If My.Application.Info.ProductName, form title will be "Connected Business".
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.HasLayoutChanges(System.Collections.Hashtable)">
	<summary>
	</summary>
	<param name="layouts"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.InterfaceFilter(System.Type,System.Object)">
	<summary>
 Returns the value indicating if the implemented or inherited interface(s) of the given object type matches the filter criteria
 </summary>
	<param name="examineType">The object type whose implemented of inherited interface(s) are to be matched with the filter criteria</param>
	<param name="filterCriteria">The filter criteria</param>
	<returns>The value indicating if the implemented or inherited interface(s) of the given object type matches the filter criteria</returns>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.SetBaseFormType(Interprise.Framework.Base.Shared.Enum.FormType,System.String,System.Windows.Forms.Control)">
	<summary>
 Sets the necessary values of the form according to the specified form type with other optional parameters
 (title and child control)
 </summary>
	<param name="type">The form type as specified by Interprise.Framework.Base.Shared.Enum.Enum.FormType</param>
	<param name="title">The title of the form</param>
	<param name="childControl">The child control to be added to the form</param>
 Added by Emily Gatbonton: Feb 10, 2011- FormType - Standard,Popup,Wizard 

</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsMainMenuEnabled(System.String[],System.Boolean)">
	<summary>
 Sets the value indicating if the desired menu items are enabled (True) or disabled (False)
 </summary>
	<param name="menuItems">The String or array of Strings representing the tool key(s)</param>
	<param name="includeCommonMenuItems">The value indicating if the common keys will be included for enabling or disabling</param>
	<value>The value indicating if the desired menu items are enabled (True) or disabled (False)</value>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsMainMenuEnabled(DevExpress.XtraBars.BarSubItem)">
	<summary>
 Sets the value indicating if the desired menu items are enabled (True) or disabled (False)
 </summary>
	<param name="subMenu">The BarSubItem subitem contained within a menu item</param>
	<value>The value indicating if the desired menu items are enabled (True) or disabled (False)</value>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.SaveLayoutChanges(System.Windows.Forms.DialogResult@)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.MissingDataDictionaryDetected(System.Object,Interprise.Framework.Base.EventArguments.MissingDataDictionaryDetectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.PanelBody_ControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.RemoveCustomEventHandler">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.ShowDialog(System.Windows.Forms.IWin32Window)">
	<summary>
 Shadows the System.Windows.Forms.Form.ShowDialog function with an optional Windows.Forms.IWin32Window object;
 shows the form as a modal dialog box and the currently active window will be set as its owner if the optional
 parameter is filled up
 </summary>
	<param name="owner"> Any object that implements System.Windows.Forms.IWin32Window that represents the top-level 
 window that will own the modal dialog</param>
	<returns>One of the System.Windows.Forms.DialogResult values</returns>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.Show">
	<summary>
 Displays the control to the user (uses the base subroutine System.Windows.Forms.Control.Show)
 </summary>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.GetUserSkin">
	<summary>
 Gets the system's preferred skin.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.ChangeCursor(System.Windows.Forms.Cursor)">
	<summary>
 Replaces the current cursor with the replacement cursor if a handle is associated with the form
 </summary>
	<param name="replacementCursor">The replacement cursor</param>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.DoChangeCursor(System.Windows.Forms.Cursor)">
	<summary>
 Replaces the current cursor with the replacement cursor
 </summary>
	<param name="replacementCursor">The replacement cursor</param>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.EnableFormHandlerForOnSignInErrorEvent">
	<summary>
 Enable or Disable internal handling of OnSignInErrorEvent of Simple Facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.Focus">
	<summary>
 Sets input focus to the control (uses the base subroutine System.Windows.Forms.Control.Focus)
 </summary>
	<returns>True, if the input focus request was successful; otherwise, False</returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsDisposed">
	<summary>
 Gets the value whether the control has been disposed of.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.IsVoid(System.Data.DataRow)">
	<summary>
 Sets the value indicating if the transaction will be voided (True) or not (False)
 </summary>
	<param name="row">The DataRow with details of the concerned transaction</param>
	<value>The value indicating if the transaction will be voided (True) or not (False)</value>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.StartPosition">
	<summary>
 Gets or sets the starting position of the form at run time (uses the System.Windows.Forms.Form.StartPosition property)
 </summary>
	<value>A System.Windows.Forms.FormStartPosition that represents the starting position of the form</value>
	<returns>A System.Windows.Forms.FormStartPosition that represents the starting position of the form</returns>
</member><member name="P:Interprise.Presentation.Base.BaseRibbonForm.Text">
	<summary>
 Gets/set the text of the form.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.OnSignInError(System.Object,Interprise.Framework.Base.EventArguments.SignInErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.PanelBody_BeforeDisposing(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.PanelBody_AddEventHandler(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.MenuItem_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.Caching_CacheValidated(System.Object,Interprise.Framework.Base.EventArguments.UpdateCacheEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.OnCacheBuilderCompleted(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.Caching_Completed(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseRibbonForm.BaseRibbonForm_Activated(System.Object,System.EventArgs)">
	<summary>
 This is event that triggers when the form is activated by the user or code.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BasePopupForm.CurrentControl">
	<summary>
 Gets or sets the current control
 </summary>
	<value>The current control</value>
	<returns>The current control</returns>
</member><member name="P:Interprise.Presentation.Base.BasePopupForm.IsDesignedMode">
	<summary>
  Indicates if a form is on customization mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BasePopupForm.IsLayoutMode">
	<summary>
 Indicates if a form is on customization mode.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.BasePopupForm.IsCustomSearch">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BasePopupForm.TargetInstance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BasePopupForm.SelectedSearchRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BasePopupForm.SelectedSearchRows">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BasePopupForm.ShowDialog(System.Windows.Forms.IWin32Window)">
	<summary>
 Shadows the System.Windows.Forms.Form.ShowDialog function with an optional Windows.Forms.IWin32Window object;
 shows the form as a modal dialog box and the currently active window will be set as its owner if the optional
 parameter is filled up
 </summary>
	<param name="owner"> Any object that implements System.Windows.Forms.IWin32Window that represents the top-level 
 window that will own the modal dialog</param>
	<returns>One of the System.Windows.Forms.DialogResult values</returns>
</member><member name="M:Interprise.Presentation.Base.BasePopupForm.Show">
	<summary>
 Displays the control to the user (uses the base subroutine System.Windows.Forms.Control.Show)
 </summary>
</member><member name="M:Interprise.Presentation.Base.BasePopupForm.AddControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface)">
	<summary>
 Instantiates an Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface and passes it to the this method to 
 create a control to be added to the container control
 </summary>
	<param name="control">An Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface</param>
</member><member name="M:Interprise.Presentation.Base.BasePopupForm.AddControl(System.Windows.Forms.UserControl)">
	<summary>
 Adds a control to the current container control
 </summary>
	<param name="control">A System.Windows.Forms.UserControl control</param>
</member><member name="M:Interprise.Presentation.Base.BasePopupForm.AddControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface,System.Windows.Forms.Control)">
	<summary>
 Instantiates an Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface and passes it to the this method to 
 create a control to be added to a specified container control
 </summary>
	<param name="control">An Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface</param>
	<param name="containerControl">A System.Windows.Forms.Control container control</param>
</member><member name="M:Interprise.Presentation.Base.BasePopupForm.AddControl(System.Windows.Forms.Control,System.Windows.Forms.Control)">
	<summary>
 Adds a control to a specified container control
 </summary>
	<param name="control">A System.Windows.Forms.Control control</param>
	<param name="containerControl">A System.Windows.Forms.Control container control</param>
</member><member name="M:Interprise.Presentation.Base.BasePopupForm.ChangeFormTitleText">
	<summary>
 Change the form's title to My.Application.Info.ProductName.
 If My.Application.Info.ProductName, form title will be "Connected Business".
 </summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.BaseListDetailControl.FormType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.AdditionalFilter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.ControlStyle">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.SourceTable">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.DefaultSort">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.DeleteMessageText">
	<summary>
 Returns the message that will be display when record will be deleted.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.DisplayField">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.FindCaption">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.IsHostExecute">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.IsTableNameEqualToTableNames">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.ListGridView">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.RepositoryColumn">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.RepositoryDisplayField">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.RepositoryTablename">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.SelectedRow">
	<summary>
 Returns the keyfield row.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ShowButtons(DevExpress.XtraEditors.SimpleButton,System.Boolean)">
	<summary>
	</summary>
	<param name="btnDefault"></param>
	<param name="IsShowButton"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.ShowGrouping">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.Tablename">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.Tablenames">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.IsClassTemplate">
	<summary>
 Property to get/set the flag which indicates whether this class is used to maintain class templates or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.BackendTableName">
	<summary>
 Property to get/set the name of the database table which is the data source of the list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.BackendTableIsActiveColumnName">
	<summary>
 Property to get/set the the column name of the table which flags whether a record is active or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseListDetailControl.BackendTableCountryColumnName">
	<summary>
 Property to get/set the name of country column of the table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.DeleteData">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.DeleteAll">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.EndEdit">
	<summary>
 Use to end edit of controls.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.Find">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.FocusOnNextPageControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GenerateTableChanges(System.Data.DataRowState,System.String)">
	<summary>
	</summary>
	<param name="rowState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetCurrentDocumentCode">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetCurrentTableChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetDatarowValue(System.String)">
	<summary>
	</summary>
	<param name="fieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetDefinedSortOrder(System.String[])">
	<summary>
	</summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetSortFields">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetPrimaryKey(System.Data.DataTable)">
	<summary>
	</summary>
	<param name="currentTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetPrimaryKeyValues(System.Data.DataTable,System.Boolean)">
	<summary>
	</summary>
	<param name="currentTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetPrimaryKeyAndValues">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetRowState(System.Object)">
	<summary>
	</summary>
	<param name="updateObject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.InitializeRepositoryEditor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.MergeChanges(System.Data.DataTable)">
	<summary>
	</summary>
	<param name="changes"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.MergeChangesToListDatasource(Interprise.Framework.Base.EventArguments.UpdateDatasetEventArgs)">
	<summary>
	</summary>
	<param name="updateArgs"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.PopulateDisplayName">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.Print(System.Boolean)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.RefreshList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.RefreshDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.SetFocusedRow">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.SetInitialMenuSettings">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.SetupColumns">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.SetSelectedRow">
	<summary>
 Set the currently selected row on the grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ShowButtons(System.Boolean)">
	<summary>
	</summary>
	<param name="IsShow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ActivateDeactivateAllClassTemplates(System.Boolean)">
	<summary>
 Activates all class templates of a specific table in the database. Deactivate deactivates all class tempaltes except the ones for the company's country.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.BeforeDeleteData">
	<summary>
 Execute this before deletion of data in the dataset
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.AddAutoHidePageEventHandlers(DevExpress.XtraLayout.TabbedControlGroup,DevExpress.XtraLayout.LayoutControlGroup)">
	<summary>
	</summary>
	<param name="parentLayoutGroup"></param>
	<param name="layoutGroup"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetItemControl(DevExpress.XtraLayout.BaseLayoutItem)">
	<summary>
	</summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetItemControls(Interprise.Presentation.Base.ExtendedLayoutControlItem)">
	<summary>
	</summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetMainLayoutControl(Interprise.Presentation.Base.BaseControl)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GetTabPageItemControls(DevExpress.XtraLayout.TabbedControlGroup,DevExpress.XtraLayout.LayoutGroup)">
	<summary>
	</summary>
	<param name="tabPage"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ManageAutoHideEventHandlers(Interprise.Presentation.Base.BaseListDetailControl.MangedEventHandler,DevExpress.XtraLayout.TabbedControlGroup,DevExpress.XtraLayout.LayoutTabPageChangingEventHandler,DevExpress.XtraLayout.LayoutTabPageChangedEventHandler)">
	<summary>
	</summary>
	<param name="manageEventHandler"></param>
	<param name="tabbedControlGroup"></param>
	<param name="selectedPageChanging"></param>
	<param name="selectedPageChanged"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.RemoveAutoHidePageEventHandlers(DevExpress.XtraLayout.TabbedControlGroup,DevExpress.XtraLayout.LayoutControlGroup)">
	<summary>
	</summary>
	<param name="parentLayoutGroup"></param>
	<param name="layoutGroup"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.RemoveAutoHideRibbonPageEventHandler(Interprise.Presentation.Base.BaseControl)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ShowHideRibbonPage(System.Boolean,System.String,System.String)">
	<summary>
	</summary>
	<param name="show"></param>
	<param name="controlName"></param>
	<param name="controlRibbonPage"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ShowHideRibbonPage(Interprise.Presentation.Base.ExtendedXtraTabContol.TabControl,System.Boolean)">
	<summary>
	</summary>
	<param name="tabControl"></param>
	<param name="show"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ShowHideRibbonPage(DevExpress.XtraLayout.LayoutControl,System.Boolean)">
	<summary>
	</summary>
	<param name="layoutControl"></param>
	<param name="show"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.TabbedControlGroup_SelectedPageChanging(System.Object,DevExpress.XtraLayout.LayoutTabPageChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.TabbedControlGroup_SelectedPageChanged(System.Object,DevExpress.XtraLayout.LayoutTabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ButtonAddNew_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.BaseListDetailControl_BeforeUpdateDataset(System.Object,Interprise.Framework.Base.EventArguments.UpdateDatasetEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.BaseListDetailControl_AfterUpdateDataset(System.Object,Interprise.Framework.Base.EventArguments.UpdateDatasetEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.BaseListDetailControl_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.BaseListControl_RowSelected(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.barMngrGridContextMenu_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ButtonRefresh_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ButtonEdit_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.cborepository_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.ButtonDelete_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GridViewList_DoubleClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GridViewList_FocusedColumnChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedColumnChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GridViewList_FocusedRowChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GridViewList_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GridViewList_InvalidRowException(System.Object,DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GridViewList_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.GridViewList_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.listControl_RowSelected(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.TabListDetail_SelectedPageChanged(System.Object,DevExpress.XtraTab.TabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseListDetailControl.TabListDetail_SelectedPageChanging(System.Object,DevExpress.XtraTab.TabPageChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.#ctor">
	<summary>
 Initializes a new instance of the BaseForm class; checks for a valid license, assigns the 
 icon for the form and sets the defaults
 </summary>
</member><member name="M:Interprise.Presentation.Base.BaseForm.Dispose(System.Boolean)">
	<summary>
 Overrides System.Windows.Forms.Form.Dispose; disposes of BaseForm components
 </summary>
	<param name="disposing">True, to release both managed and unmanaged resources; False, to release only unmanaged resources</param>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsActionCalledFromNumKey">
	<summary>
 Gets or sets a value indicating if an entry was made by entering through a Num key (True) or by choosing from a selection (False)
 </summary>
	<value>The value indicating if an entry was made by entering through a Num key (True) or by choosing from a selection (False)</value>
	<returns>The value indicating if an entry was made by entering through a Num key (True) or by choosing from a selection (False</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.BaseFormType">
	<summary>
 Gets or sets the form type of the current form as specified by Interprise.Framework.Base.Shared.Enum.Enum.FormType
 </summary>
	<value>The form type of the current form</value>
	<returns>The form type of the current form</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.BaseFormType(System.String,System.Windows.Forms.Control)">
	<summary>
 Gets the form type of the current form as specified by Interprise.Framework.Base.Shared.Enum.Enum.FormType;
 sets the form type, title and child control of the current form
 </summary>
	<param name="title">The title of the form</param>
	<param name="childControl">The user control to be added to the form</param>
	<value>The form type of the current control</value>
	<returns>The form type of the current control</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.Converted">
	<summary>
 Sets the value indicating if the form is converted from another type of form (True); False, otherwise
 </summary>
	<value>The value indicating if the form is converted from another type of form (True); False, otherwise</value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.CurrentControl">
	<summary>
 Gets or sets the current control
 </summary>
	<value>The current control</value>
	<returns>The current control</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.DocumentCode(System.Data.DataRow)">
	<summary>
 Gets or sets the String representing the unique code of the given transaction
 </summary>
	<param name="readRow">The DataRow to be read</param>
	<value>The String representing the unique code of the given transaction</value>
	<returns>The String representing the unique code of the given transaction</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsAdd(System.Data.DataRow)">
	<summary>
 Sets the value that determines if the form will perform an add operation (True) or a read operation (False)
 </summary>
	<param name="row">The DataRow containing the information needed to add a transaction</param>
	<value>True, if the form will perform an add operation; False, if the form will perform a read operation</value>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsAdd(System.String)">
	<summary>
 Sets the value that determines if the form will perform an add operation (True) or a read operation (False)
 </summary>
	<param name="newDocumentCode">The unique code of the given transaction</param>
	<value>True, if the form will perform an add operation; False, if the form will perform a read operation</value>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsMainMenuEnabled(System.String[],System.Boolean)">
	<summary>
 Sets the value indicating if the desired menu items are enabled (True) or disabled (False)
 </summary>
	<param name="strToolKey">The String or array of Strings representing the tool key(s)</param>
	<param name="blnIncludeCommonKey">The value indicating if the common keys will be included for enabling or disabling</param>
	<value>The value indicating if the desired menu items are enabled (True) or disabled (False)</value>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsMainMenuEnabled(DevExpress.XtraBars.BarSubItem)">
	<summary>
 Sets the value indicating if the desired menu items are enabled (True) or disabled (False)
 </summary>
	<param name="subMenu">The BarSubItem subitem contained within a menu item</param>
	<value>The value indicating if the desired menu items are enabled (True) or disabled (False)</value>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsVoid(System.Data.DataRow)">
	<summary>
 Sets the value indicating if the transaction will be voided (True) or not (False)
 </summary>
	<param name="row">The DataRow with details of the concerned transaction</param>
	<value>The value indicating if the transaction will be voided (True) or not (False)</value>
</member><member name="P:Interprise.Presentation.Base.BaseForm.Heading">
	<summary>
 Gets or sets the String representing the text written on the form heading
 </summary>
	<value>The String representing the text written on the form heading</value>
	<returns>The String representing the text written on the form heading</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.SubHeading">
	<summary>
 Gets or sets the String representing the text written on the form subheading
 </summary>
	<value>The String representing the text written on the form subheading</value>
	<returns>The String representing the text written on the form subheading</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.BannerImage">
	<summary>
 Gets or sets the image of the banner header of the form
 </summary>
	<value>The image of the banner header of the form</value>
	<returns>The image of the banner header of the form</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.ButtonHelp">
	<summary>
 Gets the reference for the Help button of the form
 </summary>
	<value>The reference for the Help button of the form</value>
	<returns>The reference for the Help button of the form</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.ButtonOk">
	<summary>
 Gets the reference for the OK button of the form
 </summary>
	<value>The reference for the OK button of the form</value>
	<returns>The reference for the OK button of the form</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.ButtonCancel">
	<summary>
 Gets the reference for the Cancel button of the form
 </summary>
	<value>The reference for the Cancel button of the form</value>
	<returns>The reference for the Cancel button of the form</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.TypeButton">
	<summary>
 Gets or sets the ButtonType of the current button
 </summary>
	<value>The ButtonType of the current button</value>
	<returns>The ButtonType of the current button</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsMeasurePerformance">
	<summary>
 Sets the value indicating if the performance will be checked
 </summary>
	<value>The value indicating if the performance will be checked</value>
	<remarks>The value indicating if the performance will be checked</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.StatusText">
	<summary>
 Gets or sets the text in the status bar
 </summary>
	<value>The text in the status bar</value>
	<returns>The text in the status bar</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsReadOnly">
	<summary>
 Gets or sets the value indicating if the current control is read only (True) or not (False)
 </summary>
	<value>The value indicating if the current control is read only (True) or not (False)</value>
	<returns>The value indicating if the current control is read only (True) or not (False)</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.CustomizePopupMenu">
	<summary>
 Gets the reference to the popup menu associated with the form
 </summary>
	<value>The reference to the popup menu associated with the form</value>
	<returns>The reference to the popup menu associated with the form</returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsDesignedMode">
	<summary>
  Indicates if a form is on customization mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsLayoutMode">
	<summary>
 Indicates if a form is on customization mode.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.LayoutMenuGroupCode">
	<summary>
 Gets / sets the the form's menu group code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.LayoutUserRoleCode">
	<summary>
 Gets/sets the layout role code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.PluginFormInfo">
	<summary>
 Gets/set the plugin form  information.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsDisposed">
	<summary>
 Gets the value whether the control has been disposed of.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.Text">
	<summary>
 Gets/set the text of the form.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.DeveloperID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsSectionModified">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.EnableFormHandlerForOnSignInErrorEvent">
	<summary>
 Enable or Disable internal handling of OnSignInErrorEvent of Simple Facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.IsCustomSearch">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.TargetInstance">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.SelectedSearchRow">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseForm.SelectedSearchRows">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.ChangeFormTitleText">
	<summary>
 Change the form's title to My.Application.Info.ProductName.
 If My.Application.Info.ProductName, form title will be "Connected Business".
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.ChangeCursor(System.Windows.Forms.Cursor)">
	<summary>
 Replaces the current cursor with the replacement cursor if a handle is associated with the form
 </summary>
	<param name="replacementCursor">The replacement cursor</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.DoChangeCursor(System.Windows.Forms.Cursor)">
	<summary>
 Replaces the current cursor with the replacement cursor
 </summary>
	<param name="replacementCursor">The replacement cursor</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.Close">
	<summary>
 Closes the form.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.AddControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface)">
	<summary>
 Instantiates an Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface and passes it to the this method to 
 create a control to be added to the container control
 </summary>
	<param name="control">An Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.AddControl(System.Windows.Forms.UserControl)">
	<summary>
 Adds a control to the current container control
 </summary>
	<param name="control">A System.Windows.Forms.UserControl control</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.AddControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface,System.Windows.Forms.Control)">
	<summary>
 Instantiates an Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface and passes it to the this method to 
 create a control to be added to a specified container control
 </summary>
	<param name="control">An Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface interface</param>
	<param name="containerControl">A System.Windows.Forms.Control container control</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.AddControl(System.Windows.Forms.Control,System.Windows.Forms.Control)">
	<summary>
 Adds a control to a specified container control
 </summary>
	<param name="control">A System.Windows.Forms.Control control</param>
	<param name="containerControl">A System.Windows.Forms.Control container control</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.ShowDialog(System.Windows.Forms.IWin32Window)">
	<summary>
 Shadows the System.Windows.Forms.Form.ShowDialog function with an optional Windows.Forms.IWin32Window object;
 shows the form as a modal dialog box and the currently active window will be set as its owner if the optional
 parameter is filled up
 </summary>
	<param name="owner"> Any object that implements System.Windows.Forms.IWin32Window that represents the top-level 
 window that will own the modal dialog</param>
	<returns>One of the System.Windows.Forms.DialogResult values</returns>
</member><member name="M:Interprise.Presentation.Base.BaseForm.Show">
	<summary>
 Displays the control to the user (uses the base subroutine System.Windows.Forms.Control.Show)
 </summary>
</member><member name="M:Interprise.Presentation.Base.BaseForm.Focus">
	<summary>
 Sets input focus to the control (uses the base subroutine System.Windows.Forms.Control.Focus)
 </summary>
	<returns>True, if the input focus request was successful; otherwise, False</returns>
</member><member name="M:Interprise.Presentation.Base.BaseForm.SetBaseFormType(Interprise.Framework.Base.Shared.Enum.FormType,System.String,System.Windows.Forms.Control)">
	<summary>
 Sets the necessary values of the form according to the specified form type with other optional parameters
 (title and child control)
 </summary>
	<param name="type">The form type as specified by Interprise.Framework.Base.Shared.Enum.Enum.FormType</param>
	<param name="title">The title of the form</param>
	<param name="childControl">The child control to be added to the form</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.Activate">
	<summary>
 Activates the form and gives it focus (uses the System.Windows.Forms.Form.Activate subroutine)
 </summary>
</member><member name="P:Interprise.Presentation.Base.BaseForm.StartPosition">
	<summary>
 Gets or sets the starting position of the form at run time (uses the System.Windows.Forms.Form.StartPosition property)
 </summary>
	<value>A System.Windows.Forms.FormStartPosition that represents the starting position of the form</value>
	<returns>A System.Windows.Forms.FormStartPosition that represents the starting position of the form</returns>
</member><member name="M:Interprise.Presentation.Base.BaseForm.DrawLineBreak(System.Drawing.Graphics,System.Int32)">
	<summary>
 Draws a line break given an instance of a System.Drawing.Graphics object and an integer denoting screen height as parameters
 </summary>
	<param name="e">An instance of a System.Drawing.Graphics object</param>
	<param name="yAxis">An integer denoting screen height</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.BaseForm_Activated(System.Object,System.EventArgs)">
	<summary>
 Handles the Activated event of BaseForm; voids the current control
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.BaseForm_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Handles the Closing event of BaseForm; sets the value indicating that the form will be closing
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A CancelEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.BasePopupForm_Load(System.Object,System.EventArgs)">
	<summary>
 Handles the Load event of BasePopupForm; adds the document code to the associated control or reads the
 document code to the associated read DataSet
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.PanelBody_ControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
	<summary>
 Handles the ControlAdded event of PanelBody; saves the total height of the form
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.OnResize(System.EventArgs)">
	<summary>
 Sets the form size according to the form's current form type
 </summary>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.Banner_Resize(System.Object,System.EventArgs)">
	<summary>
 Handles the Resize event of the Banner control; calls the subroutine Invalidate on the Banner control
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.menuBase_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
 Handles the ItemClick event of MenuBase; sets the appropriate action according to the menu item clicked
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An ItemClickEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.OnSignInError(System.Object,Interprise.Framework.Base.EventArguments.SignInErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.MissingDataDictionaryDetected(System.Object,Interprise.Framework.Base.EventArguments.MissingDataDictionaryDetectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.PluginSearchButtonClick(System.Object,System.Windows.Forms.UserControl)">
	<summary>
 ???? (no procedure inside)
 </summary>
</member><member name="M:Interprise.Presentation.Base.BaseForm.RepositoryNumKey_EditValueChanged(System.Object,System.EventArgs)">
	<summary>
 Handles the EditValueChanged event of RepositoryNumKey; sets the source object's EditValue to ButtonEditNumKey's EditValue 
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.RepositoryNumKey_Enter(System.Object,System.EventArgs)">
	<summary>
 Handles the Enter event of the RepositoryNumKey; selects all text of the source object
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.RepositoryNumKey_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handles the KeyDown event of the RepositoryNumKey; changes the EditValue according to the Num key pressed and gives the edited value focus
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A KeyEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.RepositoryNumKey_ButtonClick(System.Object,DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)">
	<summary>
 Handles the ButtonClick event of the RepositoryNumKey; changes the EditValue according to the Num key pressed and gives the edited value focus
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A ButtonPressedEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.RepositoryNumKey_ButtonPressed(System.Object,DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)">
	<summary>
 Handles the ButtonPressed event of the RepositoryNumKey; changes the EditValue according to the Num key pressed and gives the edited value focus
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A ButtonPressedEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.ExamineControls(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Windows.Forms.Form)">
	<summary>
 Examines the plugin control and its parent controls for subcontrols and calls InsertFormSection accordingly
 </summary>
	<param name="pluginControl">The plugin control</param>
	<param name="parentControl">The parent control</param>
	<param name="formType">The form where the plugin control is contained</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.InsertFormSection(System.Windows.Forms.Control,System.Windows.Forms.Control,System.String,System.Windows.Forms.Form)">
	<summary>
 Inserts the information regarding the child and parent plugin controls if the information is not yet in the existing plugin DataSet 
 </summary>
	<param name="childPluginControl">The child plugin control</param>
	<param name="parentPluginControl">The parent plugin control</param>
	<param name="sectionType">A string representing the section type</param>
	<param name="formType">The form where the child plugin control is contained</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.GetDerivedInterface(System.Type,System.Type)">
	<summary>
 Returns the derived interface types of a given object type (examineType) that conforms to the criteria of a certain
 interface type (interfaceType)
 </summary>
	<param name="examineType">The object type whose derived interfaces are to be obtained</param>
	<param name="interfaceType">The interface type that is used a filter in determining the right interfaces</param>
	<returns>The derived interface (or an array of derived interfaces)</returns>
</member><member name="M:Interprise.Presentation.Base.BaseForm.InterfaceFilter(System.Type,System.Object)">
	<summary>
 Returns the value indicating if the implemented or inherited interface(s) of the given object type matches the filter criteria
 </summary>
	<param name="examineType">The object type whose implemented of inherited interface(s) are to be matched with the filter criteria</param>
	<param name="filterCriteria">The filter criteria</param>
	<returns>The value indicating if the implemented or inherited interface(s) of the given object type matches the filter criteria</returns>
</member><member name="M:Interprise.Presentation.Base.BaseForm.btnHelp_Click(System.Object,System.EventArgs)">
	<summary>
 Handles the Click event of the Help button; examines all plugin controls in the form by ExamineControls and updates the plugin facade
 DataSet accordingly
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">An EventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.BaseForm.LoadMenuLayout">
	<summary>
 Load layout of menu.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.SaveMenuLayout">
	<summary>
 Save changes made to menu layout.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.SaveMenuLayout(System.IO.MemoryStream)">
	<summary>
	</summary>
	<param name="menuLayoutStream"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.MenuBase_StartCustomization(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.MenuBase_EndCustomization(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.MenuBase_ShowToolbarsContextMenu(System.Object,DevExpress.XtraBars.ShowToolbarsContextMenuEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.mnuKeyCustomize_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.CreateListDetailControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseForm.RemoveCustomEventHandler">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.BaseForm">
	<summary>
 The base for all forms in Connected Business.
 </summary>
	<remarks>When creating additional forms for Connected Business, inherit from this form to get
 the same look and feel as the whole application.</remarks>
</member><member name="T:Interprise.Presentation.Base.BaseExtendedListDetailControl.FormType">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.AdditionalFilter">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.ControlStyle">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.SourceTable">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.DefaultSort">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.DeleteMessageText">
	<summary>
 Returns the message that will be display when record will be deleted.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.DisplayField">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.FindCaption">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.IsHostExecute">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.IsTableNameEqualToTableNames">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.ListGridView">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.RepositoryColumn">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.RepositoryDisplayField">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.RepositoryTablename">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.SelectedRow">
	<summary>
 Returns the keyfield row.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.ShowGrouping">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.Tablename">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.Tablenames">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.IsClassTemplate">
	<summary>
 Property to get/set the flag which indicates whether this class is used to maintain class templates or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.BackendTableName">
	<summary>
 Property to get/set the name of the database table which is the data source of the list.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.BackendTableIsActiveColumnName">
	<summary>
 Property to get/set the the column name of the table which flags whether a record is active or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseExtendedListDetailControl.BackendTableCountryColumnName">
	<summary>
 Property to get/set the name of country column of the table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.DeleteData">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.DeleteAll">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.EndEdit">
	<summary>
 Use to end edit of controls.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.Find">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.FocusOnNextPageControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GenerateTableChanges(System.Data.DataRowState,System.String)">
	<summary>
	</summary>
	<param name="rowState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetCurrentDocumentCode">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetCurrentTableChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetDatarowValue(System.String)">
	<summary>
	</summary>
	<param name="fieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetDefinedSortOrder(System.String[])">
	<summary>
	</summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetSortFields">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetPrimaryKey(System.Data.DataTable)">
	<summary>
	</summary>
	<param name="currentTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetPrimaryKeyValues(System.Data.DataTable,System.Boolean)">
	<summary>
	</summary>
	<param name="currentTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetPrimaryKeyAndValues">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GetRowState(System.Object)">
	<summary>
	</summary>
	<param name="updateObject"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.InitializeRepositoryEditor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.MergeChanges(System.Data.DataTable)">
	<summary>
	</summary>
	<param name="changes"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.MergeChangesToListDatasource(Interprise.Framework.Base.EventArguments.UpdateDatasetEventArgs)">
	<summary>
	</summary>
	<param name="updateArgs"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.PopulateDisplayName">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.Print">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.ReadList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.RefreshList">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.RefreshDataset">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.SetFocusedRow">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.SetInitialMenuSettings">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.SetSystemFormType(Interprise.Presentation.Base.BaseExtendedListDetailControl.FormType)">
	<summary>
	</summary>
	<param name="formtype"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.SetupColumns">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.SetSelectedRow">
	<summary>
 Set the currently selected row on the grid.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.ActivateDeactivateAllClassTemplates(System.Boolean)">
	<summary>
 Activates all class templates of a specific table in the database. Deactivate deactivates all class tempaltes except the ones for the company's country.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.BeforeDeleteData">
	<summary>
 Execute this before deletion of data in the dataset
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.BaseListDetailControl_BeforeUpdateDataset(System.Object,Interprise.Framework.Base.EventArguments.UpdateDatasetEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.BaseListDetailControl_AfterUpdateDataset(System.Object,Interprise.Framework.Base.EventArguments.UpdateDatasetEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.BaseListDetailControl_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.BaseListControl_RowSelected(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.barMngrGridContextMenu_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.cborepository_PopupClose(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GridViewList_DoubleClick(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GridViewList_FocusedColumnChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedColumnChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GridViewList_FocusedRowChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GridViewList_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GridViewList_InvalidRowException(System.Object,DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GridViewList_ShowingEditor(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.GridViewList_ValidatingEditor(System.Object,DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.listControl_RowSelected(System.Object,Interprise.Framework.Base.EventArguments.Search.RowSelectedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="eRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseExtendedListDetailControl.TabListDetail_SelectedPageChanged(System.Object,DevExpress.XtraLayout.LayoutTabPageChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.BaseControl.DocumentCodeChanged">
	<summary>
 This event is triggered when the DocumentCode property of the control is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Use this to trap the time when the transaction code is changed.</remarks>
</member><member name="E:Interprise.Presentation.Base.BaseControl.IsReadOnlyChanged">
	<summary>
 This event is triggered when the IsReadOnly property of the control is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.BaseControl.EntityNameChanged">
	<summary>
 This event is triggered when the EntityName property of the control is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Presentation.Base.BaseControl.PluginTabPageChanged">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.ChildControls">
	<summary>
 Gets the child control for a main control(the parent control of all the sections)
 </summary>
	<value>An array of controls contained in the main control.</value>
	<returns>An array of controls contained in the main control.</returns>
	<remarks>Use this if you want to execute a function or set a property through all of the sections in a control.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Presentation.Base.BaseControl.CurrentFacade">
	<summary>
 Gets the facade that is currently being used by the control.
 </summary>
	<returns>The facade to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the facade used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentFacade as
     <font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentFacade
 </font></font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font>
				<font color="blue" size="2"> As</font></para>
			<para>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentFacade
 </font></para>
			<para><font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentFacade
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentFacade</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Presentation.Base.BaseControl.Dock">
	<summary>
 This is an overriden property used to emulate the System.Windows.Forms.Controls.Dock Property
 so it still can be accessed even if the object is an interface.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.DocumentCode">
	<summary>
 The transaction code for this control.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This usually denotes the primary key/foreign key of the transaction.
 This can also be binded and used to change the Parent Form's Text property.
 (This can only be done if the control inherits from Interprise.Presentation.Base.BaseControl)</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.DocumentCodeRow">
	<summary>
 The row which was assigned in DocumentCode property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Used as handler for multiple DocumentCode codes.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.EntityName">
	<summary>
 This is the customer/supplier/inventory/bank/contact name owning the current transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Like the document code property, this can also be binded and used to change the Parent Form's Text property.
 (This can only be done if the control inherits from Interprise.Presentation.Base.BaseControl)</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.FindSearch">
	<summary>
 This property is obsolete.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.GridContextMenuEnabled">
	<summary>
 Gets or sets if the context menu for the grid enabled or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.Host">
	<summary>
 Gets or sets the main application form.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property holds the Interprise.Presentation.Main.MainForm object. 
 The main purpose of this is for the Host to call other forms using the command Host.Execute.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsDisposeCurrentFacadeAndDataset">
	<summary>
 Property to indicate to the instance of this control to dispose the objects in CurrentFacade and CurrentDataset properties when this control disposes.
 This is set to true by default.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsDisposed">
	<summary>
 Gets the value whether the control has been disposed of.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsMainMenuEnabled(System.String[],System.Boolean)">
	<summary>
 Property to enable or disable menu items from the main menu.
 </summary>
	<param name="menuItems">The menu items to enable/disable.</param>
	<param name="includeCommonMenuItems">Determines if the common keys (New, Save, etc.) are included.</param>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsMainMenuEnabled(DevExpress.XtraBars.BarSubItem)">
	<summary>
 Property to enable/disable the child menu items of a sub menu.
 </summary>
	<param name="subMenu">The sub menu to enable/disable.</param>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsMenuToolVisible(System.String[],System.Boolean)">
	<summary>
 Property to set the menu items to visible/invisible.
 </summary>
	<param name="menuItems"></param>
	<param name="includeCommonMenuItems"></param>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsMenuToolVisible(System.String[],System.String[],System.Boolean)">
	<summary>
 Property to set the menu items, menu page group, to visible or hidden.
 </summary>
	<param name="groups"></param>
	<param name="menuItems"></param>
	<param name="includeCommonMenuItems"></param>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsProductEditionISB">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsProductEditionWoohaa">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsReadOnly">
	<summary>
 Gets or sets if the control is editable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override/implement this property to control what should be made readonly. 
 (This is usually called when a transaction is posted.) </remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsWithSaveCounterIDField">
	<summary>
 IsWithSaveCounterIDField is a boolean property to flag a certain section if it has SaveCounterID Field on his data table.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>pete.a 06/26/2009

</member><member name="P:Interprise.Presentation.Base.BaseControl.LoadDataSetCallBack">
	<summary>
 Gets the delegate which will be called when the BeginLoadDataset is finished.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the control is inherited, this delegate will immediately call the EndLoadDataset method.
 Override the EndLoadDataset method to add additional implementations.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.MenuBase">
	<summary>
 Gets or sets the menu assigned to the form.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The menu used is the Developer Express BarManager.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.PluginSectionInfo">
	<summary>
 Gets/set the section information.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Presentation.Base.BaseControl.ShowErrorMessage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.StatusText">
	<summary>
 Gets or sets the status bar text of the form.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.TransactionType">
	<summary>
 Gets or sets the transaction type of the document.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is basically used to differentiate transaction type with same tables (Eg. Purchase Requisitions 
 and Purchase Orders) as well as determining what starting number is used. This is used against the 
 TransactionType field in the SystemStartingNumber table.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.UpdateDataSetCallBack">
	<summary>
 Gets the delegate which will be called when the BeginUpdateDataset is finished.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the control is inherited, this delegate will immediately call the EndUpdateDataset method.
 Override the EndUpdateDataset method to add additional implementations.</remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.RibbonPages">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.IsCustomControl">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BaseControl.Form">
	<summary>
 Retrieves the BaseRibbonForm that the control is on.
 </summary>
	<value>BaseRibbonForm</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginLoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,System.AsyncCallback,System.Object)">
	<summary>
 Asynchronously reads a table in the database using a specified command
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     Parameter1, Value1, Parameter2, Value2, ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Parameter1, Value1,
     Parameter2, Value2, ...etc.}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<param name="callBack">This delegate is triggered when the loading of the tables is 
 done.</param>
	<param name="asyncState">An object containing information to be used by the callback 
 method</param>
	<remarks>
 This is a asynchronous method. Use the callback method to catch the end of the
 method. Use this method instead of <strong>LoadDataSet</strong> if the data to be
 retrieved is very large. This overloaded method is recommended if the tables that are
 to be read have different parameters and there is only one table to be read.
 </remarks>
	<returns>Used to monitor the progress of the asynchronous call</returns>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginLoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,System.AsyncCallback,System.Object)">
	<summary>
 Asynchronously reads a table in the database using a specified command set and
 parameter set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, ...etc.}, 
 ...etc}</para>
	</param>
	<param name="parameters">
		<para>Format of the <strong>parameterSet</strong> parameter:</para>
		<para>New String()() {New String() {Parameter1, Value1},</para>
		<para>New String() {Parameter2, Value2}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<param name="callBack">This delegate is triggered when the loading of the tables is 
 done.</param>
	<param name="asyncState">An object containing information to be used by the callback 
 method</param>
	<remarks>
 This is a asynchronous method. Use the callback method to catch the end of the
 method. Use this method instead of <strong>LoadDataSet</strong> if the data to be
 retrieved is very large. This overloaded method is recommended if the tables that are
 to be read have different parameters and there is only one table to be read.
 </remarks>
	<returns>Used to monitor the progress of the asynchronous call</returns>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginLoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType,System.AsyncCallback,System.Object)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="parameters"></param>
	<param name="clearTableType"></param>
	<param name="callBack"></param>
	<param name="asyncState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginLoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType,System.Boolean,System.AsyncCallback,System.Object)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="parameters"></param>
	<param name="clearTableType"></param>
	<param name="connectionType"></param>
	<param name="useWithProgressForm"></param>
	<param name="callBack"></param>
	<param name="asyncState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginLoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,System.Boolean,System.AsyncCallback,System.Object)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="parameters"></param>
	<param name="clearTableType"></param>
	<param name="useWithProgressForm"></param>
	<param name="callBack"></param>
	<param name="asyncState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginLoadDataset(System.String,System.String[],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType,System.AsyncCallback,System.Object,System.Boolean)">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="tableNames"></param>
	<param name="parameterSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<param name="useWithProgressForm"></param>
	<param name="callBack"></param>
	<param name="asyncState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.InvokeCallBack">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.EndLoadDataSet(System.IAsyncResult)">
	<summary>Ends the asynchronous read begun by 
 <strong>BeginLoadDataset</strong>.</summary>
	<returns>Returns if the operation was successful or not.</returns>
	<remarks>
 Invoke this function when the delegate parameter passed in the
 <strong>BeginLoadDataset</strong> function is called.
 </remarks>
	<param name="result">Contains the progress information of the asynchronous 
 call.</param>
</member><member name="T:Interprise.Presentation.Base.BaseControl.DoWorkCompleted">
	<summary>
 Procedure that will be called when the asynchronous read is done.
 </summary>
	<param name="result">Contains the result of the asynchronous call.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
 Reads a table in the database using a specified command
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     Parameter1, Value1, Parameter2, Value2, ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Parameter1, Value1,
     Parameter2, Value2, ...etc.}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<remarks>
 This overloaded method is recommended if the tables that are
 to be read have different parameters and there is only one table to be read.
 </remarks>
	<returns>Used to determine if the reading was successful or not.</returns>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
 Reads a table in the database using a specified command set and
 parameter set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, ...etc.}, 
 ...etc}</para>
	</param>
	<param name="parameters">
		<para>Format of the <strong>parameterSet</strong> parameter:</para>
		<para>New String()() {New String() {Parameter1, Value1},</para>
		<para>New String() {Parameter2, Value2}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<remarks>
 This overloaded method is recommended if the tables that are
 to be read have different parameters and there is only one table to be read.
 </remarks>
	<returns>Used to determine if the reading was successful or not.</returns>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadDataSet(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
 Performs a read operation on the database according to the document code or source row.
 </summary>
	<param name="documentCode">The source document code to be used for the read operation.</param>
	<param name="row">The source row to be used for the read operation.</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<returns>Used to determine if the reading was successful or not.</returns>
	<remarks>
 This function is automatically triggered when a document code and/or row is
 passed in the <strong>DocumentCode</strong> property (<em>DocumentCode(Optional ByVal
 readRow As DataRow = Nothing</em>)) and the <strong>IsAdd</strong> and
 <strong>IsVoid</strong> properties are set to false.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="parameters"></param>
	<param name="clearTableType"></param>
	<param name="connectionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadDataset(System.String,System.String[],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="tableNames"></param>
	<param name="parameterSet"></param>
	<param name="clearTableType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadDataset(System.String,System.String[],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="tableNames"></param>
	<param name="parameterSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadDataSet(Interprise.Framework.Base.Shared.Structure.SelectedRows)">
	<summary>
	</summary>
	<param name="selectedSearchRows"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginUpdateDataSet(System.String[][],System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
	<summary>
 Asynchronously performs a update operation to the database.
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clearTable">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="callBack">This delegate is triggered when the loading of the tables is 
 done.</param>
	<param name="asyncState">An object containing information to be used by the callback 
 method</param>
	<returns>Used to monitor the progress of the asynchronous call</returns>
	<remarks>
 This is a asynchronous method. Use the callback method to catch the end of the
 method. Use this method instead of <strong>UpdateDataSet</strong> if the data to be
 saved is very large. This overloaded method is recommended if you have to use the 
 confirm, clearTable and isUseCache parameters.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginUpdateDataSet(System.String[][],System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
	<summary>
 Asynchronously reads a table in the database using a specified command
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="callBack">This delegate is triggered when the loading of the tables is 
 done.</param>
	<param name="asyncState">An object containing information to be used by the callback 
 method</param>
	<returns>Used to monitor the progress of the asynchronous call</returns>
	<remarks>
 This is a asynchronous method. Use the callback method to catch the end of the
 method. Use this method instead of <strong>UpdateDataSet</strong> if the data to be
 saved is very large. This overloaded method is recommended if you don't have to use the 
 clearTable parameters.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginUpdateDataSet(System.String[][],System.Boolean,System.AsyncCallback,System.Object)">
	<summary>
 Asynchronously reads a table in the database using a specified command
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="callBack">This delegate is triggered when the loading of the tables is 
 done.</param>
	<param name="asyncState">An object containing information to be used by the callback 
 method</param>
	<returns>Used to monitor the progress of the asynchronous call</returns>
	<remarks>
 This is a asynchronous method. Use the callback method to catch the end of the
 method. Use this method instead of <strong>UpdateDataSet</strong> if the data to be
 saved is very large. This overloaded method is recommended if you don't have to use the 
 confirm, clearTable and isUseCache parameters.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeginUpdateDataSet(System.String[][],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="confirm"></param>
	<param name="clearTable"></param>
	<param name="isUseCache"></param>
	<param name="useWithProgressForm"></param>
	<param name="callBack"></param>
	<param name="asyncState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.EndUpdateDataSet(System.IAsyncResult)">
	<summary>Ends the asynchronous read begun by 
 <strong>BeginUpdateDataset</strong>.</summary>
	<param name="result">Contains the progress information of the asynchronous 
 call.</param>
	<returns>Returns if the operation was successful or not.</returns>
	<remarks>
 Invoke this function when the delegate parameter passed in the
 <strong>BeginUpdateDataset</strong> function is called.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.DoUpdateDataSetCallBack(System.IAsyncResult)">
	<summary>
 Procedure that will be called when the asynchronous update is done.
 </summary>
	<param name="result">Contains the result of the asynchronous call.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.UpdateDataSet(System.String[][],System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clearTable">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This overloaded method is recommended if you have to use the 
 confirm, clearTable and isUseCache parameters.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.UpdateDataSet(System.String[][],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Data.CommandType,System.String,System.String[][],System.String[][]@)">
	<summary>
 Performs a update operation to the database.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clearTable">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="isCallPostDocument">Boolean flag to include the execution of PostDocument method</param>
	<param name="isPostedDocument">Boolean flag that mark if the current transaction is already posted</param>
	<param name="nonquerycommandType">commandType for the executenonquery function to be included of the update dataset</param>
	<param name="nonquerycommand">query command to execute</param>
	<param name="nonqueryparameters">the paramenter of the query</param>
	<param name="nonqueryoutputParameters">the return output of the query</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.UpdateDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 </summary>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clear">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This function is automatically triggered when the save button of the transaction
 is pressed or when the form closes.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.UpdateDataSet(System.String[][],System.Boolean)">
	<summary>
 Performs a update operation to the database.
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This overloaded method is recommended if you don't have to use the 
 confirm and clearTable parameters.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.UpdateDataSet(System.String[][],System.Boolean,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This overloaded method is recommended if you don't have to use the 
 clearTable parameter.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BeforeUpdatePluginDataSet(System.Data.DataSet@,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 </summary>
	<param name="currentHostdataset">The current host dataset.</param>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clear">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This function is automatically triggered when the save button of the transaction
 is pressed or when the form closes.
 </remarks> Added by pete.a 07/23/2010: JIRA ID - 1878: This is to get the dataset and commandset of the child plugin and merge to current dataset

</member><member name="M:Interprise.Presentation.Base.BaseControl.BeforeUpdatePluginDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 </summary>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clear">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This function is automatically triggered when the save button of the transaction
 is pressed or when the form closes.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.UpdatePluginDataset(System.Boolean@,System.String[][]@,System.Data.DataSet@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
	<summary>
 Performs a update operation to the database.
 </summary>
	<param name="ispluginControl">Flag to determines if the control is a custom plugin.</param>
	<param name="commandSet">This is the commandset of the custom plugin control to be merge to the current dataset.</param>
	<param name="pluginDataset">This is the dataset of the custom plugin control.</param>
	<param name="isstopUpdateDataset">Flag validation, so that the plguin have the control to continue the update.</param>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clear">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This function is automatically triggered when the save button of the transaction
 is pressed or when the form closes.
 </remarks> Added by pete.a 07/23/2010: JIRA ID - 1878: This is to get the dataset and commandset of the child plugin and merge to current dataset

</member><member name="M:Interprise.Presentation.Base.BaseControl.AfterUpdatePluginDataSet(System.Data.DataSet@,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 </summary>
	<param name="currentHostdataset">The current host dataset.</param>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clear">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This function is automatically triggered when the save button of the transaction
 is pressed or when the form closes.
 </remarks> Added by pete.a 07/23/2010: JIRA ID - 1878: This is to get the dataset and commandset of the child plugin and merge to current dataset

</member><member name="M:Interprise.Presentation.Base.BaseControl.AfterUpdatePluginDataSet(System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 </summary>
	<param name="confirm">Determines if a message window should popup confirming the saving of the data.</param>
	<param name="clear">Determines if the table should be cleared after saving.</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<returns>
		<para>A <strong>DialogResult</strong> enumeration.</para>
		<para><em>Yes</em> - Update operation succeeds.</para>
		<para><em>No</em> - Update operation does not succeed, but further operations are
     still executed. (Eg. Form will close even if update did not succed)</para>
		<para><em>Cancel</em> - Update operation is cancelled (Eg. Form will not close 
 even
     if update did not succeed)</para>
	</returns>
	<remarks>
 This function is automatically triggered when the save button of the transaction
 is pressed or when the form closes.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.IsCollisionOnPostedField(Interprise.Framework.Base.Exceptions.DataConcurrencyException@)">
	<summary>
 IsCollisionOnPostedField to indentify if the current modify transaction collision is coz by order status field of posted field
 </summary>
	<param name="dbCollision"></param>
	<returns></returns>
	<remarks></remarks>pete.a 06/26/2009

</member><member name="M:Interprise.Presentation.Base.BaseControl.IncrementSaveCounterID">
	<summary>
 IncrementSaveCounterID is a overridable method to increment the SaveCounterID field.
 </summary>
	<remarks></remarks>pete.a 06/26/2009

</member><member name="M:Interprise.Presentation.Base.BaseControl.AddData(System.String[])">
	<summary>
 Clears the rows specified by the relatedTables first, then adds a row to the table.
 </summary>
	<param name="relatedTables">The tables to clear.</param>
	<remarks>Use this method if the tables need to be cleared first before adding.
 This method is not triggered automatically.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AddData(System.Data.DataRow)">
	<summary>
 Adds a row using the information containted in the datarow.
 </summary>
	<param name="row">The source datarow.</param>
	<remarks>
 Use this when you need the source row for defaults. This method automatically
 triggers when the form's (inherited from the <strong>BaseForm</strong> of Interprise)
 '<strong>IsAdd(ByVal row As DataRow)</strong>' property is used.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AddData(System.String)">
	<summary>
 Adds a row to the table using the specified document code.
 </summary>
	<param name="documentCode">The source transaction code to use when adding data.</param>
	<remarks>
 Use this when you only need the source document code for defaults. This method
 automatically triggers when the form's (inherited from the <strong>BaseForm</strong> 
 of
 Interprise) '<strong>IsAdd(ByVal newDocumentCode As String)</strong>' property is
 used.
 </remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BindingManager(System.String)">
	<summary>
 Retrieves the currency manager of a specified table.
 </summary>
	<param name="tableName">The table where the binding context should be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.HandleDBConcurrencyError(Interprise.Framework.Base.Exceptions.DataConcurrencyException)">
	<summary>
 Procedure to handle concurrency issues upon update.
 </summary>
	<param name="dbCollision">The concurrency exception.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AddControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface)">
	<summary>
 Procedure to add a control.
 </summary>
	<param name="control">The control to be added.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AddControl(System.Windows.Forms.UserControl)">
	<summary>
 Procedure to add a control.
 </summary>
	<param name="control">The control to be added.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AddControl(Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface,System.Windows.Forms.Control)">
	<summary>
 Procedure to add a control to a control container.
 </summary>
	<param name="control">The control to be added.</param>
	<param name="containerControl">The container that will house the control.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AddControl(System.Windows.Forms.Control,System.Windows.Forms.Control)">
	<summary>
 Procedure to add a control to a control container.
 </summary>
	<param name="control">The control to be added.</param>
	<param name="containerControl">The container that will house the control.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AddNewPostalCode(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Procedure to create a new postal code entry in the database.
 </summary>
	<param name="postalCode">The postal code to add.</param>
	<param name="city">The city of the postal code.</param>
	<param name="state">The state of the postal code.</param>
	<param name="county">The county of the postal code.</param>
	<param name="country">The country of the postal code.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.CheckPhoneNumber(System.String,System.String[],System.Data.DataRowView)">
	<summary>
 This procedure is obsolete.
 </summary>
	<param name="postalCode"></param>
	<param name="columnNames"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.CheckPhoneNumber(System.String,System.String[],System.Data.DataRowView,System.Boolean)">
	<summary>
 This procedure is obsolete.
 </summary>
	<param name="postalCode"></param>
	<param name="columnNames"></param>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.DisableInnerButton(System.Object[],System.Boolean)">
	<summary>
 Disables/Enables buttons within the passed HyperlinkSearchComboControl, SearchComboControl, DateEdit or SpinEdit object/s.
 </summary>
	<param name="p_buttonedControls">The control on which an active button will be enabled/disabled</param>
	<param name="p_readOnlyValue">Variable on which the toggling (enabled/disabled) of a button would depend.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.DeleteData">
	<summary>
 Performs a delete operation to the database.
 </summary>
	<remarks>Function that is triggered when the delete button from the menu is clicked. To ensure
 referential integrity, use the CheckExistingData first.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Focus">
	<summary>
 This is an overriden property used to emulate the System.Windows.Forms.Controls.Focus Property
 so it still can be accessed even if the object is an interface.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Focus(System.Boolean)">
	<summary>
 Function to select the first control in the usercontrol.
 </summary>
	<param name="selectFirstControl">A <strong>Boolean</strong> that contains a value indicating to select the first control as specified in the overriding function.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.InitializeCustomField(System.Data.DataTable,System.String)">
	<summary>
 Create columns for Custom Fields.
 </summary>
	<param name="entityTable">The destination table.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadGridSettings">
	<summary>
 Procedure to setup the grid.
 </summary>
	<remarks>This is called in the Load event of the control.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadGridSettings(System.Windows.Forms.Form)">
	<summary>
 Procedure to setup the grid.
 </summary>
	<param name="ParentForm">The form housing the grid.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadGridSettings(System.Windows.Forms.Form,System.Windows.Forms.UserControl,DevExpress.XtraGrid.Views.Grid.GridView)">
	<summary>
 Procedure to setup the grid.
 </summary>
	<param name="form">The form housing the grid.</param>
	<param name="control">The control housing the grid.</param>
	<param name="gridview">The gridview of the grid.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.PluginContainerName">
	<summary>
 Get's the parent name (usually the plugincontainer name) of the control where the menu page group is added.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.UndoChanges">
	<summary>
 Discards the unsaved changes.
 </summary>
	<remarks>This method is automatically triggered when the Undo Changes button is clicked.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Void">
	<summary>
 Voids a transaction.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Void(System.Data.DataRow)">
	<summary>
 Voids a transaction.
 </summary>
	<param name="row">The transaction information that will be voided.</param>
	<remarks>This method is automatically triggered when the void button is clicked.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.EnableGridControl(System.Boolean,DevExpress.XtraGrid.Views.Grid.GridView,DevExpress.XtraGrid.Columns.GridColumn[])">
	<summary>
 Procedure to enable/disable the grid.
 </summary>
	<param name="enabled">Determines if the grid should be enabled or not.</param>
	<param name="gridview">The gridview of the grid control.</param>
	<param name="exemptColumns">The columns to be exempt from the enabling/disabling.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.EnableGridControl(DevExpress.XtraGrid.Columns.GridColumn[],System.Boolean)">
	<summary>
 Procedure to enable/disable the grid columns.
 </summary>
	<param name="gridColumns">The columns to disable/enable.</param>
	<param name="enabled">Determines if the columns are to be enabled or not.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.EnableDisableControl(System.Windows.Forms.Control,System.Boolean)">
	<summary>
 Method used to disable/enable controls for editing.
 </summary>
	<param name="UserControl">The control on which sub controls will be enabled/disabled</param>
	<param name="IsReadOnly">Indicates if control is enabled for editing.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.EnableDisableControlType(System.Windows.Forms.Control,System.Boolean)">
	<summary>
 Method used to disable/enable controls for editing.
 </summary>
	<param name="control"></param>
	<param name="IsReadOnly"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.EndCurrentEdit(System.String[])">
	<summary>
 Function that calls the EndCurrentEdit method of the CurrencyManager based on the tables specified.
 </summary>
	<param name="relatedTables">The tables that the EndCurrentEdit will called for.</param>
	<remarks>The UpdateDataSet function also uses this method before saving.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.InsertRow">
	<summary>
 Procedure to insert a new row in the grid.
 </summary>
	<remarks>Override this procedure to implement the 'Insert' menu item in the grid context menu.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Print">
	<summary>
 Function to print the transaction.
 </summary>
	<remarks>This method is automatically triggered when the print button is clicked.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Print(System.Boolean)">
	<summary>
	</summary>
	<param name="isSilent"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Print(System.Boolean,Interprise.Extendable.Base.Presentation.Generic.IBaseFormInterface)">
	<summary>
	</summary>
	<param name="isSilent"></param>
	<param name="sourceForm"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Print(Interprise.Framework.Base.Shared.Enum.ReportAction)">
	<summary>
 Function to print a document according to the report type specified.
 </summary>
	<param name="reportType">Determines what report to print.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RefreshCurrency(System.Windows.Forms.CurrencyManager,Interprise.Extendable.Base.Facade.IBaseInterface,System.Boolean)">
	<summary>
 Method to change the currency format of a control.
 </summary>
	<param name="CurrencyManager"></param>
	<param name="Facade"></param>
	<param name="IsFormatOnLoad"></param>
	<remarks>Open calling this function, controls with the FormatType of Currency will be changed
 according to the formatting defined in the SystemCurrency table. 
 Additionally, controls with the FormatType of BaseCurrency will be formatted according to the home currency currently set.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RefreshCurrency(System.Data.DataRow)">
	<summary>
 Method to change the currency format of a control.
 </summary>
	<param name="CurrencyRow">The currency code from which the formatting will be based on.</param>
	<remarks>Open calling this function, controls with the FormatType of Currency will be changed
 according to the formatting defined in the SystemCurrency table. 
 Additionally, controls with the FormatType of BaseCurrency will be formatted according to the home currency currently set.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RefreshCurrency(System.String)">
	<summary>
 Method to change the currency format of a control.
 </summary>
	<param name="currencyCode">The currency code from which the formatting will be based on.</param>
	<remarks>Open calling this function, controls with the FormatType of Currency will be changed
 according to the formatting defined in the SystemCurrency table. 
 Additionally, controls with the FormatType of BaseCurrency will be formatted according to the home currency currently set.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RefreshFormatType(System.Windows.Forms.Form,Interprise.Framework.Base.Shared.Enum.EnmFormatType,System.Globalization.NumberFormatInfo,System.String)">
	<summary>
 Procedure to refresh the currency format.
 </summary>
	<param name="Container">The parent form.</param>
	<param name="Value">The formatting type to be used.</param>
	<param name="NumberFormatProvider">The actual format to use.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetCurrencyFormat(System.String,Interprise.Framework.Base.Shared.Enum.CurrencyFormat,System.Boolean)">
	<summary>
 Procedure to generate the currency format according to a specified currency.
 </summary>
	<param name="currencyCode">The currency code where the formatting will be based on.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.InitializePictureEditContextMenu">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetPictureEditContextMenu(DevExpress.XtraEditors.PictureEdit)">
	<summary>
	</summary>
	<param name="picEdit"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AssignPhoto">
	<summary>
 Overrides this method when using the method SetPictureEditContextMenu.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadPhoto">
	<summary>
 Overrides this method when using the method SetPictureEditContextMenu.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RemovePhoto">
	<summary>
 Overrides this method when using the method SetPictureEditContextMenu.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BarManagerPhoto_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.picEdit_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetGridContextMenu(DevExpress.XtraGrid.GridControl,System.Boolean)">
	<summary>
 Procedure to set the context menu of the grid.
 </summary>
	<param name="grid">The grid control where the context menu will be set.</param>
	<param name="isIncludeInsertItem">Determines if the 'Insert' menu item will be included.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetGridOptions(DevExpress.XtraGrid.GridControl,System.Boolean,System.Boolean,System.Boolean,System.String[],System.String)">
	<summary>
 Procedure to set the grid to a uniform look.
 </summary>
	<param name="grid">The grid control to be customized.</param>
	<param name="showGroupPanel">Determines if the group panel will be shown.</param>
	<param name="showNewItemRow">Determines if an blank item row will be shown.</param>
	<param name="flag"></param>
	<param name="formatCurrencyColumns">The columns to be formatted according to the currencyField parameter.</param>
	<param name="currencyField">The field that will be used by the grid to format the formatCurrencyColumns paramter.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetGridViewOptions(DevExpress.XtraGrid.GridControl,DevExpress.XtraGrid.Views.Grid.GridView,System.Boolean,System.Boolean,System.String[],System.String)">
	<summary>
 Procedure to set the grid view to a uniform look.
 </summary>
	<param name="grid">The grid control of the view.</param>
	<param name="view">The view to be customized</param>
	<param name="showGroupPanel">Determines if the group panel will be shown.</param>
	<param name="showNewItemRow">Determines if an blank item row will be shown.</param>
	<param name="formatCurrencyColumns">The columns to be formatted according to the currencyField parameter.</param>
	<param name="currencyField">The field that will be used by the grid to format the formatCurrencyColumns paramter.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.GridView_FocusedColumnChanged(System.Object,DevExpress.XtraGrid.Views.Base.FocusedColumnChangedEventArgs)">
	<summary>
 Event triggered when a column in the grid is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetVGridContextMenu(DevExpress.XtraVerticalGrid.VGridControl,System.Boolean)">
	<summary>
 Procedure to set the context menu of the grid.
 </summary>
	<param name="vGrid">The vgrid control where the context menu will be set.</param>
	<param name="isIncludeInsertItem">Determines if the 'Insert' menu item will be included.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.VGrid_GotFocus(System.Object,System.EventArgs)">
	<summary>
 Event triggred when the grid gets the focus.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.VGrid_MouseEnter(System.Object,System.EventArgs)">
	<summary>
 Event triggred when the mouse cursor enters the grid.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.popupVGridContextMenu_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Event triggered when before the context menu of the grid is shown.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.barMngrVGridContextMenu_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
 Event triggered when a menu item in the context menu is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.DeleteDataFromVGridContextMenu(System.Boolean,DevExpress.XtraVerticalGrid.VGridHitInfo)">
	<summary>
 Delete all or specific record in the vertical grid.
 </summary>
	<param name="IsDeleteAll"></param>
	<param name="hitInfo"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetupComboBox_AddNewValue(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Procedure to trap the AddNewValue event of the SearchComboControl.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetTimeZone(DevExpress.XtraEditors.ComboBoxEdit)">
	<summary>
 Procedure to popuplate a combo box with all the time zones.
 </summary>
	<param name="cboTimeZone">The combo box to populate.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.ShowPopupForm(System.Object,System.String,System.String)">
	<summary>
 Opens a specific system manager form.
 </summary>
	<param name="sender">The sender of the function.</param>
	<param name="strTableName">The table name pertaining to the system manager form.</param>
	<param name="strValue">The value to search on the system manager form.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.ShowNewForm">
	<summary>
 Creates a new transaction.
 </summary>
	<remarks>This method is automatically triggered when the New button is clicked.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Find">
	<summary>
 Function that calls the search dashboard.
 </summary>
	<remarks>This function is automatically triggered when the find button is clicked.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.WriteLetter">
	<summary>
 Opens the word processor form.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.OpenHTMLEditor">
	<summary>
 Function to open the HTML Editor form.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.ChangeColumnReadability(DevExpress.XtraGrid.Columns.GridColumn,System.Boolean)">
	<summary>
 Procedure to set a column to readonly/not readonly.
 </summary>
	<param name="gridColumn">The grid column.</param>
	<param name="isReadOnly">Determines if the grid column will be readonly or not.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.IsDebug">
	<summary>
 Procedure to determine if in Debug mode.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RetrieveDefaultPlugin(System.String,System.Boolean@,System.String,System.String)">
	<summary>
 Procedure to get the default plugin for the group box.
 </summary>
	<param name="derivedInterface">The interface of the control.</param>
	<param name="useDefault">Determines if the plugin is the default (Interprise) control.</param>
	<param name="formClassType">The type of the form.</param>
	<param name="country">The country of the user.</param>
	<returns></returns>
	<remarks>To be used later.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.CreatePluginFile(System.String)">
	<summary>
 Procedure to create the deserialize a plugin file from the database.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RetrieveSelectedPlugin(System.String,System.String,Interprise.Extendable.Base.Facade.IBaseInterface,Interprise.Framework.Base.DatasetComponent.BaseDataset)">
	<summary>
 Procedure to get the plugin from a specified file and class type.
 </summary>
	<param name="assemblyFile">The dll file that has the class.</param>
	<param name="classType">The class type to retrieve.</param>
	<param name="facade">The facade to be passed to the  control.</param>
	<param name="dataset">The dataset to be passed to the control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RetrieveFormPlugin(System.String)">
	<summary>
 Procedure to retrieve the default form plugin.
 </summary>
	<param name="menuCode">The main menu code.</param>
	<returns></returns>
	<remarks>To be used later.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.SetFormText">
	<summary>
 Procedure to set the Form.Text according to the DocumentCode and EntityName properties.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RemoveGroupBox(Interprise.Presentation.Base.PluginContainerControl)">
	<summary>
 Sets the group box visibility to false 
 by modifying some of it's properties. 
 This is used when controls are displayed in a wizard
 </summary>
	<param name="detailGroupBox">The groupbox to remove.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.ShowJournal(System.String)">
	<summary>
 Procedure to show the journal of a posted transaction.
 </summary>
	<param name="referenceCode">The transaction code.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.OnRefreshCurrency">
	<summary>
 Procedure that triggers when the currency format is changed.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.CheckExistingData(System.String,System.String,System.Object)">
	<summary>
 Scans the database for columns with the same value as the one specified.
 </summary>
	<param name="tableName">The source table name.</param>
	<param name="columnName">The column name to search.</param>
	<param name="value">The value to search.</param>
	<returns></returns>
	<remarks>This is used for referential integrity purposes, if a table has a 
 foregin key column that has the same value as the one specified, The function will return false
 and deletion cannot be done.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.GetErrorMessage(System.Exception)">
	<summary>
	</summary>
	<param name="ex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.DisplayErrorMessage(Interprise.Framework.Base.Shared.Enum.ExceptionType,System.Exception)">
	<summary>
	</summary>
	<param name="ExceptionType"></param>
	<param name="ex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.DisplayErrorMessage(Interprise.Framework.Base.Shared.Enum.ExceptionType,System.Exception,System.String)">
	<summary>
	</summary>
	<param name="ExceptionType"></param>
	<param name="ex"></param>
	<param name="errorMessage"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.LoadColumnFields(DevExpress.XtraGrid.Views.Grid.GridView[])">
	<summary>
 Loads all fields to the grid control.
 </summary>
	<param name="gridviewCollection"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RegisterPlugin(System.String)">
	<summary>
 Register an instance of a plugin assembly file.
 </summary>
	<param name="assemblyPath">The full path of the assembly.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.OnValidate">
	<summary>
 Validate the control.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.GetType">
	<summary>
 Gets the System.Type of the current instance.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Invoke(System.Delegate,System.Object[])">
	<summary>
	</summary>
	<param name="method"></param>
	<param name="args"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RemoveCustomEventHandler">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.HideDuplicateMenuGroup(System.String,System.String)">
	<summary>
 Method that will hide the duplicate menu group(s) and will only show the current selected control's menu page group.
 </summary>
	<param name="pluginContainerName">Name of the Parent control (PluginContainer Control) of the current control selected.</param>
	<param name="menuGroupName">Name of the menu page group to be searched.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.AddEventHandler">
	<summary>
 This method will be used by the section to add the handler of the tab control - selected tab page changed event.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.RemoveEventHandler">
	<summary>
  This method will be used by the section to remove the handler of the tab control - selected tab page changed event.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.OnBaseControlLoad(System.Object,System.EventArgs)">
	<summary>
 '
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.ShowHidePageGroup(System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="pageGroupName"></param>
	<param name="show"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.GetPluginInstance(System.Type)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.GetPluginDataSet(Interprise.Presentation.Base.BaseControl)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.OnAfterLoadDataset(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BaseControl_Disposed(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the control is disposed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.BaseControl_Load(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the control is first shown.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.MoveMenuItemtoToolBar">
	<summary>
 This method moves the Menu item on the Quick Access Tool Bar
 Remove the Default Menu Page.
 This will only be used by the Wizard Controls
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Grid_GotFocus(System.Object,System.EventArgs)">
	<summary>
 Event triggred when the grid gets the focus.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Grid_MouseEnter(System.Object,System.EventArgs)">
	<summary>
 Event triggred when the mouse cursor enters the grid.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.Databindings_CollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
	<summary>
 Event triggered when the bindings for this control is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.popupGridContextMenu_BeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
 Event triggered when before the context menu of the grid is shown.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.barMngrGridContextMenu_ItemClick(System.Object,DevExpress.XtraBars.ItemClickEventArgs)">
	<summary>
 Event triggered when a menu item in the context menu is clicked.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.GridStyleChanged(System.Object,System.EventArgs)">
	<summary>
 Event triggered when the style of the grid is changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.GridView_CustomDrawCell(System.Object,DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs)">
	<summary>
 Event triggered when a cell in the grid is drawn.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This is to change the currency format according to the currency found in the row.</remarks>
</member><member name="M:Interprise.Presentation.Base.BaseControl.OnPluginTabPageChanged(System.Object,Interprise.Framework.Base.EventArguments.PluginTabPageChangedEventArgs)">
	<summary>
 Raise when a plugin a selected page has changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Presentation.Base.BaseControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.BalloonTip.Text">
	<summary>
 Sets or gets the display text.
 </summary>
</member><member name="P:Interprise.Presentation.Base.BalloonTip.Control">
	<summary>
 Sets or gets the control.
 </summary>
</member><member name="P:Interprise.Presentation.Base.Address.PhoneControl.Telephone">
	<summary>
 Gets or sets the telephone number in the Telephone text editor; raises the TelephoneChanged event upon setting
 </summary>
	<value>The telephone number in the Telephone text editor</value>
	<returns>The telephone number in the Telephone text editor</returns>
</member><member name="P:Interprise.Presentation.Base.Address.PhoneControl.Extension">
	<summary>
 Gets or sets the extension in the Extension text editor; raises the ExtensionChanged event upon setting
 </summary>
	<value>The extension in the Extension text editor</value>
	<returns>The extension in the Extension text editor</returns>
</member><member name="P:Interprise.Presentation.Base.Address.PhoneControl.IsReadOnly">
	<summary>
 Gets or sets the value indicating if the current control is read only (True) or not (False); the properties of
 TextTelephone and TextExtension is set as read-only if the value given is True and not read-only if False.
 </summary>
	<value>The value indicating if the current control is read only (True) or not (False)</value>
	<returns>The value indicating if the current control is read only (True) or not (False)</returns>
</member><member name="P:Interprise.Presentation.Base.Address.PhoneControl.Country">
	<summary>
 Gets or sets the country of the given contact; saves the appropriate country phone format 
 and raises the CountryChanged event upon setting
 </summary>
	<value>The country of the given contact</value>
	<returns>The country of the given contact</returns>
</member><member name="P:Interprise.Presentation.Base.Address.PhoneControl.LabelWidth">
	<summary>
 Gets or sets the width of the label which will display the telephone number
 </summary>
	<value>The width of the label which will display the telephone number</value>
	<returns>The width of the label which will display the telephone number</returns>
</member><member name="P:Interprise.Presentation.Base.Address.PhoneControl.NumberType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Address.PhoneControl.CountryPhoneFormat">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControl.BindingCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
	<summary>
 Handles the CollectionChanged event Me.DataBindings; calls IntilizeSettings if a binding was added to the collection
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A CollectionChangeEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControl.IntilizeSettings(System.Windows.Forms.Control,System.Windows.Forms.Binding)">
	<summary>
 Sets the binding and Help text, and calls UpdateUI 
 </summary>
	<param name="editorControl">The control to be initialized</param>
	<param name="bindingElement">The binding element</param>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControl.IsValueNumeric(System.String)">
	<summary>
	</summary>
	<param name="stringToTest"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControl.TrimEditValue(System.Object)">
	<summary>
	</summary>
	<param name="editValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControl.UpdateUI">
	<summary>
 Updates the phone and phone extension labels
 </summary>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControl.phoneNumber_Format(System.Object,System.Windows.Forms.ConvertEventArgs)">
	<summary>
 Handles the Format event of TextTelephone.DataBindings(0); sets the format of the telephone number to the country phone format
 </summary>
	<param name="sender">The source that raised the event</param>
	<param name="e">A ConvertEventArgs containing the data for the event</param>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControlDesigner.Initialize(System.ComponentModel.IComponent)">
	<summary>
 Overrides System.ComponentModel.Design.ComponentDesigner.Initialize; prepares the designer to view, edit and design the specified component
 </summary>
	<param name="component">The component for this designer</param>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControl.#ctor">
	<summary>
 Initializes a new instance of the BasePhoneControl class
 </summary>
</member><member name="M:Interprise.Presentation.Base.Address.PhoneControl.Dispose(System.Boolean)">
	<summary>
 Overrides System.Windows.Forms.Form.Dispose; disposes of all associated components 
 </summary>
	<param name="disposing">True, to release both managed and unmanaged resources; False, to release only unmanaged resources</param>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.UpdateValue(System.Object,System.String)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Presentation.Base.Address.AddressControl.CurrentFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.FindFacade(System.Windows.Forms.Control)">
	<summary>
	</summary>
	<param name="control"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.IntilizeSettings(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Windows.Forms.Binding)">
	<summary>
	</summary>
	<param name="labelControl"></param>
	<param name="editorControl"></param>
	<param name="bindingElement"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.IntilizeSettings(Interprise.Presentation.Base.ExtendedLayoutControlItem,System.Windows.Forms.Control,System.Windows.Forms.Binding)">
	<summary>
	</summary>
	<param name="labelControl"></param>
	<param name="editorControl"></param>
	<param name="bindingElement"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.UpdateCaptions">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.UpdateUI">
	<summary>
 Updates the address layout base on the country selected.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.Validate">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.comboCountry_Leave(System.Object,System.EventArgs)">
	<summary>
 '
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Presentation.Base.Address.AddressControl.textCity_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member>
</members>
</doc>