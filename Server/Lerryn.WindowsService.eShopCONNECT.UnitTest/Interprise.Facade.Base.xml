<?xml version="1.0"?>
<doc>
<assembly>
<name>
Interprise.Facade.Base
</name>
</assembly>
<members>
<member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.#ctor">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RestoreDatabaseCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetCurrentConnectionForWebServiceCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetHomeCurrencyCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateSystemCheckListStatusCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BulkUpdateImportTablesCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteSessionFileCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginAssemblyIDCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginLocationCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCacheTablesModifiedCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetTransactionsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadSearchResultsDataCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadEntityTableCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ValidateEntryCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadDataDictionaryDataCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetMaxRecordsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetClientCodeCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetUserRoleBasedOnProductEditionCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetConnectionStringCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetNewCacheDataCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedNewCacheDataCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedNewCacheDataInChunckCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTableDeleteLogCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedCacheTableDeleteLogCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedCachTableDeleteLogInChunkCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTablesToUpdateCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTablesModifiedCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetUserAccountCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CheckExistingDataCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFieldByTextCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFieldByCommandCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetRowCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetRowsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetRowCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDocumentCodeCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadCompressedDataSetCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadDataSetCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FillCompressedDataSetCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FillDataSetCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCompressedDataSetCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCompressedDataSetWithNonQueryCommandCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateDataSetCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateDataSetWithNonQueryCommandCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostDataCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindLastSalutationCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindFirstSuffixCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindPostalCodeCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyAddressCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.PostDocumentCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.PostDocumentWithCommandTimeOutCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostByCodeCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostByDateCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.TestConnectionAuthenticityCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteNonQueryCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteScriptCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AddMenuToTemplateCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateUserRoleMenuCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BulkInsertCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetScriptCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.TestScriptCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateStoredProcedureCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendEmailToTargetListCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendTestEmailCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxToTargetListCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendTestFaxCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveEmailsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedEmailsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendEmailsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyOutgoingEmailServerCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendPendingEmailsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendPendingEmailsByActionCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.MoveToFolderCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.MoveToFolderCompressedCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteEmailCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteEmailCompressedCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsValidEmailAccountSetupCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyEmailAccountSetupCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CheckAccessCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsFaxAvailableCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxExtendedCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxExtended2Completed">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveFaxesCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedFaxesCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFaxImageCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveInboundFaxesCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedInboundFaxesCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ConvertPhoneFormatCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetMessageCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingCurrentPeriodCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingPeriodCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateFiscalPeriodCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateAccountingFiscalYearCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingFiscalYearDetailCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyAccountingFRLayoutDetailCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetOrderLineItemDefaultsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPriceCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPricesCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPriceByPricingMethodCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetInventoryStockTotalCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.InsertSalesOrderToInvoiceCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.InsertQuoteToSalesOrderCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeallocateStockCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryLocationToTempCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryStockTotalCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateAccountCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDescriptionCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryCurrencyPricingDetailCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateDefaultUnitMeasureCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyKitItemsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyMatrixGroupCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryMatrixItemCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsMatrixItemInInventoryItemCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RenameItemCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDatasourceCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDatasourceByEntityCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateFilterCriteriaColumnsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportDatasourceCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportByFormCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportDatasourceWithSubreportCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateReportPreviewCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteBindTotransactionScriptCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AssignDocumentCodeCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AdjustOnOrderStockTotalsCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateBillOnHoldStatusCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAdvancedBillAllocationCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAllocationBillCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateBillLocationStockCountCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePurchaseQuoteStatusCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetPurchaseReceiptBilledCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RemoveStockCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAllocationCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAdvancedAllocationCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateLocationStockCountCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginAssemblyCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateDatabaseCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DumpBackupFileCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCurrentConnectionSettingCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DownloadFileInChunkCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AppendChunkInFileCompleted">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RestoreDatabase(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRestoreDatabase(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRestoreDatabase(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RestoreDatabaseAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RestoreDatabaseAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetCurrentConnectionForWebService(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSetCurrentConnectionForWebService(System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSetCurrentConnectionForWebService(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetCurrentConnectionForWebServiceAsync(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetCurrentConnectionForWebServiceAsync(System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetHomeCurrency(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSetHomeCurrency(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSetHomeCurrency(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetHomeCurrencyAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetHomeCurrencyAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateSystemCheckListStatus">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateSystemCheckListStatus(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateSystemCheckListStatus(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateSystemCheckListStatusAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateSystemCheckListStatusAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BulkUpdateImportTables(System.String[][],System.Byte[],System.String,System.Boolean@,System.Object[],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginBulkUpdateImportTables(System.String[][],System.Byte[],System.String,System.Boolean,System.Object[],System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndBulkUpdateImportTables(System.IAsyncResult,System.Boolean@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BulkUpdateImportTablesAsync(System.String[][],System.Byte[],System.String,System.Boolean,System.Object[],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BulkUpdateImportTablesAsync(System.String[][],System.Byte[],System.String,System.Boolean,System.Object[],System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteSessionFile(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginDeleteSessionFile(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndDeleteSessionFile(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteSessionFileAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteSessionFileAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginAssemblyID(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdatePluginAssemblyID(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdatePluginAssemblyID(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginAssemblyIDAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginAssemblyIDAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginLocation(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdatePluginLocation(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdatePluginLocation(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginLocationAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginLocationAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCacheTablesModified(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateCacheTablesModified(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateCacheTablesModified(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCacheTablesModifiedAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCacheTablesModifiedAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetTransactions(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetTransactions(System.String,System.String,System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetTransactions(System.IAsyncResult,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetTransactionsAsync(System.String,System.String,System.Int32,System.Int32,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetTransactionsAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadSearchResultsData(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginReadSearchResultsData(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String[],System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndReadSearchResultsData(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadSearchResultsDataAsync(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadSearchResultsDataAsync(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String[],System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadEntityTable(System.String,System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginReadEntityTable(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndReadEntityTable(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadEntityTableAsync(System.String,System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadEntityTableAsync(System.String,System.String,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ValidateEntry(System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginValidateEntry(System.String,System.String,System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndValidateEntry(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ValidateEntryAsync(System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ValidateEntryAsync(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadDataDictionaryData(System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginReadDataDictionaryData(System.String,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndReadDataDictionaryData(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadDataDictionaryDataAsync(System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ReadDataDictionaryDataAsync(System.String,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetMaxRecords(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetMaxRecords(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetMaxRecords(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetMaxRecordsAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetMaxRecordsAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetClientCode">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetClientCode(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetClientCode(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetClientCodeAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetClientCodeAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetUserRoleBasedOnProductEdition(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSetUserRoleBasedOnProductEdition(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSetUserRoleBasedOnProductEdition(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetUserRoleBasedOnProductEditionAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetUserRoleBasedOnProductEditionAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetConnectionString">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetConnectionString(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetConnectionString(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetConnectionStringAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetConnectionStringAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetNewCacheData(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@,System.Data.DataSet@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetNewCacheData(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Data.DataSet,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetNewCacheData(System.IAsyncResult,System.Int32@,System.Data.DataSet@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetNewCacheDataAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Data.DataSet)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetNewCacheDataAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Data.DataSet,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedNewCacheData(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetCompressedNewCacheData(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetCompressedNewCacheData(System.IAsyncResult,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedNewCacheDataAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedNewCacheDataAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedNewCacheDataInChunck(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetCompressedNewCacheDataInChunck(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetCompressedNewCacheDataInChunck(System.IAsyncResult,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedNewCacheDataInChunckAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedNewCacheDataInChunckAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTableDeleteLog(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@,System.Data.DataSet@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetCacheTableDeleteLog(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Data.DataSet,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetCacheTableDeleteLog(System.IAsyncResult,System.Int32@,System.Data.DataSet@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTableDeleteLogAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Data.DataSet)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTableDeleteLogAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Data.DataSet,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedCacheTableDeleteLog(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetCompressedCacheTableDeleteLog(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetCompressedCacheTableDeleteLog(System.IAsyncResult,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedCacheTableDeleteLogAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedCacheTableDeleteLogAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedCachTableDeleteLogInChunk(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetCompressedCachTableDeleteLogInChunk(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetCompressedCachTableDeleteLogInChunk(System.IAsyncResult,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedCachTableDeleteLogInChunkAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCompressedCachTableDeleteLogInChunkAsync(System.String,System.DateTime,System.Int32,System.Int32,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTablesToUpdate(System.Object[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetCacheTablesToUpdate(System.Object[][],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetCacheTablesToUpdate(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTablesToUpdateAsync(System.Object[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTablesToUpdateAsync(System.Object[][],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTablesModified(System.Object[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetCacheTablesModified(System.Object[][],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetCacheTablesModified(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTablesModifiedAsync(System.Object[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCacheTablesModifiedAsync(System.Object[][],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetUserAccount(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSetUserAccount(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSetUserAccount(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetUserAccountAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetUserAccountAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CheckExistingData(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginCheckExistingData(System.String,System.String,System.Object,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndCheckExistingData(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CheckExistingDataAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CheckExistingDataAsync(System.String,System.String,System.Object,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFieldByText(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetFieldByText(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetFieldByText(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFieldByTextAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFieldByTextAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFieldByCommand(System.String,System.Int32,System.String[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetFieldByCommand(System.String,System.Int32,System.String[][],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetFieldByCommand(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFieldByCommandAsync(System.String,System.Int32,System.String[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFieldByCommandAsync(System.String,System.Int32,System.String[][],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetRow(System.String[],System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetRow(System.String[],System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetRow(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetRowAsync(System.String[],System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetRowAsync(System.String[],System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetRows(System.String[],System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetRows(System.String[],System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetRows(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetRowsAsync(System.String[],System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetRowsAsync(System.String[],System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetRow(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSetRow(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSetRow(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetRowAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetRowAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDocumentCode(System.Int32,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateDocumentCode(System.Int32,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateDocumentCode(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDocumentCodeAsync(System.Int32,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDocumentCodeAsync(System.Int32,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadCompressedDataSet(System.String[][],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginLoadCompressedDataSet(System.String[][],System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndLoadCompressedDataSet(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadCompressedDataSetAsync(System.String[][],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadCompressedDataSetAsync(System.String[][],System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadDataSet(System.String[][],System.Data.DataSet@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginLoadDataSet(System.String[][],System.Data.DataSet,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndLoadDataSet(System.IAsyncResult,System.Data.DataSet@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadDataSetAsync(System.String[][],System.Data.DataSet)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadDataSetAsync(System.String[][],System.Data.DataSet,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FillCompressedDataSet(System.String,System.String,System.String[],System.String[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginFillCompressedDataSet(System.String,System.String,System.String[],System.String[][],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndFillCompressedDataSet(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FillCompressedDataSetAsync(System.String,System.String,System.String[],System.String[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FillCompressedDataSetAsync(System.String,System.String,System.String[],System.String[][],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FillDataSet(System.String,System.String,System.String[],System.String[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginFillDataSet(System.String,System.String,System.String[],System.String[][],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndFillDataSet(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FillDataSetAsync(System.String,System.String,System.String[],System.String[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FillDataSetAsync(System.String,System.String,System.String[],System.String[][],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCompressedDataSet(System.String[][],System.Byte[],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateCompressedDataSet(System.String[][],System.Byte[],System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateCompressedDataSet(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCompressedDataSetAsync(System.String[][],System.Byte[],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCompressedDataSetAsync(System.String[][],System.Byte[],System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCompressedDataSetWithNonQueryCommand(System.String[][],System.Byte[],System.Byte[],System.Boolean,System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType,Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][]@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateCompressedDataSetWithNonQueryCommand(System.String[][],System.Byte[],System.Byte[],System.Boolean,System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType,Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateCompressedDataSetWithNonQueryCommand(System.IAsyncResult,System.String[][]@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCompressedDataSetWithNonQueryCommandAsync(System.String[][],System.Byte[],System.Byte[],System.Boolean,System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType,Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateCompressedDataSetWithNonQueryCommandAsync(System.String[][],System.Byte[],System.Byte[],System.Boolean,System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType,Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateDataSet(System.String[][],System.Data.DataSet)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateDataSet(System.String[][],System.Data.DataSet,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateDataSet(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateDataSetAsync(System.String[][],System.Data.DataSet)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateDataSetAsync(System.String[][],System.Data.DataSet,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateDataSetWithNonQueryCommand(System.String[][],System.Data.DataSet,System.Boolean,System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType,Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][]@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateDataSetWithNonQueryCommand(System.String[][],System.Data.DataSet,System.Boolean,System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType,Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateDataSetWithNonQueryCommand(System.IAsyncResult,System.String[][]@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateDataSetWithNonQueryCommandAsync(System.String[][],System.Data.DataSet,System.Boolean,System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType,Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateDataSetWithNonQueryCommandAsync(System.String[][],System.Data.DataSet,System.Boolean,System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType,Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostData(System.String[],System.DateTime[],System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginBatchPostData(System.String[],System.DateTime[],System.String,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndBatchPostData(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostDataAsync(System.String[],System.DateTime[],System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostDataAsync(System.String[],System.DateTime[],System.String,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindLastSalutation(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginFindLastSalutation(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndFindLastSalutation(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindLastSalutationAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindLastSalutationAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindFirstSuffix(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginFindFirstSuffix(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndFindFirstSuffix(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindFirstSuffixAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindFirstSuffixAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindPostalCode(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginFindPostalCode(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndFindPostalCode(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindPostalCodeAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.FindPostalCodeAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyAddress(System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginVerifyAddress(System.String[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndVerifyAddress(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyAddressAsync(System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyAddressAsync(System.String[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.PostDocument(System.String,System.String,System.Int32,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginPostDocument(System.String,System.String,System.Int32,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndPostDocument(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.PostDocumentAsync(System.String,System.String,System.Int32,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.PostDocumentAsync(System.String,System.String,System.Int32,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.PostDocumentWithCommandTimeOut(System.String,System.String,System.Int32,System.String,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginPostDocumentWithCommandTimeOut(System.String,System.String,System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndPostDocumentWithCommandTimeOut(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.PostDocumentWithCommandTimeOutAsync(System.String,System.String,System.Int32,System.String,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.PostDocumentWithCommandTimeOutAsync(System.String,System.String,System.Int32,System.String,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostByCode(System.String,System.String,System.Int32,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginBatchPostByCode(System.String,System.String,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndBatchPostByCode(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostByCodeAsync(System.String,System.String,System.Int32,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostByCodeAsync(System.String,System.String,System.Int32,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostByDate(System.String,System.String,System.Int32,System.DateTime,System.DateTime)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginBatchPostByDate(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndBatchPostByDate(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostByDateAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BatchPostByDateAsync(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.TestConnectionAuthenticity">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginTestConnectionAuthenticity(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndTestConnectionAuthenticity(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.TestConnectionAuthenticityAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.TestConnectionAuthenticityAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteNonQuery(Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][]@,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginExecuteNonQuery(Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][],System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndExecuteNonQuery(System.IAsyncResult,System.String[][]@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteNonQueryAsync(Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][],System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteNonQueryAsync(Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType,System.String,System.String[][],System.String[][],System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteScript(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginExecuteScript(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndExecuteScript(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteScriptAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteScriptAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AddMenuToTemplate(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginAddMenuToTemplate(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndAddMenuToTemplate(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AddMenuToTemplateAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AddMenuToTemplateAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateUserRoleMenu(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginCreateUserRoleMenu(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndCreateUserRoleMenu(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateUserRoleMenuAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateUserRoleMenuAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BulkInsert(System.Byte[],System.String[],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginBulkInsert(System.Byte[],System.String[],System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndBulkInsert(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BulkInsertAsync(System.Byte[],System.String[],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BulkInsertAsync(System.Byte[],System.String[],System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetScript(System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetScript(System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetScript(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetScriptAsync(System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetScriptAsync(System.String,Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.TestScript(System.Byte[],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginTestScript(System.Byte[],System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndTestScript(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.TestScriptAsync(System.Byte[],System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.TestScriptAsync(System.Byte[],System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateStoredProcedure(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateStoredProcedure(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateStoredProcedure(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateStoredProcedureAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateStoredProcedureAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendEmailToTargetList(System.String,System.String,System.Int32@,System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendEmailToTargetList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendEmailToTargetList(System.IAsyncResult,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendEmailToTargetListAsync(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendEmailToTargetListAsync(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendTestEmail(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendTestEmail(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendTestEmail(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendTestEmailAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendTestEmailAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxToTargetList(System.String,System.String,System.Int32@,System.Int32,System.String,System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendFaxToTargetList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendFaxToTargetList(System.IAsyncResult,System.Int32@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxToTargetListAsync(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxToTargetListAsync(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendTestFax(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendTestFax(System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendTestFax(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendTestFaxAsync(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendTestFaxAsync(System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveEmails(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRetrieveEmails(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRetrieveEmails(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveEmailsAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveEmailsAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedEmails(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRetrieveCompressedEmails(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRetrieveCompressedEmails(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedEmailsAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedEmailsAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendEmails(System.String,System.String,System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendEmails(System.String,System.String,System.String[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendEmails(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendEmailsAsync(System.String,System.String,System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendEmailsAsync(System.String,System.String,System.String[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyOutgoingEmailServer(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginVerifyOutgoingEmailServer(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndVerifyOutgoingEmailServer(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyOutgoingEmailServerAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyOutgoingEmailServerAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendPendingEmails(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendPendingEmails(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendPendingEmails(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendPendingEmailsAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendPendingEmailsAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendPendingEmailsByAction(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendPendingEmailsByAction(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendPendingEmailsByAction(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendPendingEmailsByActionAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendPendingEmailsByActionAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.MoveToFolder(System.String,System.String,System.String,System.Int32,System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginMoveToFolder(System.String,System.String,System.String,System.Int32,System.String[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndMoveToFolder(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.MoveToFolderAsync(System.String,System.String,System.String,System.Int32,System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.MoveToFolderAsync(System.String,System.String,System.String,System.Int32,System.String[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.MoveToFolderCompressed(System.String,System.String,System.String,System.Int32,System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginMoveToFolderCompressed(System.String,System.String,System.String,System.Int32,System.String[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndMoveToFolderCompressed(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.MoveToFolderCompressedAsync(System.String,System.String,System.String,System.Int32,System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.MoveToFolderCompressedAsync(System.String,System.String,System.String,System.Int32,System.String[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteEmail(System.String,System.String[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginDeleteEmail(System.String,System.String[],System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndDeleteEmail(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteEmailAsync(System.String,System.String[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteEmailAsync(System.String,System.String[],System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteEmailCompressed(System.String,System.String[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginDeleteEmailCompressed(System.String,System.String[],System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndDeleteEmailCompressed(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteEmailCompressedAsync(System.String,System.String[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeleteEmailCompressedAsync(System.String,System.String[],System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsValidEmailAccountSetup(System.Object[],System.String@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginIsValidEmailAccountSetup(System.Object[],System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndIsValidEmailAccountSetup(System.IAsyncResult,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsValidEmailAccountSetupAsync(System.Object[],System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsValidEmailAccountSetupAsync(System.Object[],System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyEmailAccountSetup(System.Object[],System.String@,System.Object[]@,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginVerifyEmailAccountSetup(System.Object[],System.String,System.Object[],System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndVerifyEmailAccountSetup(System.IAsyncResult,System.String@,System.Object[]@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyEmailAccountSetupAsync(System.Object[],System.String,System.Object[],System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.VerifyEmailAccountSetupAsync(System.Object[],System.String,System.Object[],System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CheckAccess(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginCheckAccess(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndCheckAccess(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CheckAccessAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CheckAccessAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsFaxAvailable">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginIsFaxAvailable(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndIsFaxAvailable(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsFaxAvailableAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsFaxAvailableAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFax(System.String,System.String,System.String,System.Byte[],System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendFax(System.String,System.String,System.String,System.Byte[],System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendFax(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxAsync(System.String,System.String,System.String,System.Byte[],System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxAsync(System.String,System.String,System.String,System.Byte[],System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxExtended(System.String,System.String,System.String,System.Byte[],System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendFaxExtended(System.String,System.String,System.String,System.Byte[],System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendFaxExtended(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxExtendedAsync(System.String,System.String,System.String,System.Byte[],System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxExtendedAsync(System.String,System.String,System.String,System.Byte[],System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxExtended2(System.String,System.String,System.String,System.String,System.Byte[],System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSendFaxExtended2(System.String,System.String,System.String,System.String,System.Byte[],System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSendFaxExtended2(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxExtended2Async(System.String,System.String,System.String,System.String,System.Byte[],System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SendFaxExtended2Async(System.String,System.String,System.String,System.String,System.Byte[],System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveFaxes(System.String,System.String,System.String,System.Boolean,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRetrieveFaxes(System.String,System.String,System.String,System.Boolean,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRetrieveFaxes(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveFaxesAsync(System.String,System.String,System.String,System.Boolean,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveFaxesAsync(System.String,System.String,System.String,System.Boolean,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedFaxes(System.String,System.String,System.String,System.Boolean,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRetrieveCompressedFaxes(System.String,System.String,System.String,System.Boolean,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRetrieveCompressedFaxes(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedFaxesAsync(System.String,System.String,System.String,System.Boolean,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedFaxesAsync(System.String,System.String,System.String,System.Boolean,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFaxImage(System.String,System.String,System.Int32,System.Byte[]@,Interprise.Facade.Base.InterpriseSuiteBusinessService.FaxType,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetFaxImage(System.String,System.String,System.Int32,System.Byte[],Interprise.Facade.Base.InterpriseSuiteBusinessService.FaxType,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetFaxImage(System.IAsyncResult,System.Byte[]@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFaxImageAsync(System.String,System.String,System.Int32,System.Byte[],Interprise.Facade.Base.InterpriseSuiteBusinessService.FaxType,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetFaxImageAsync(System.String,System.String,System.Int32,System.Byte[],Interprise.Facade.Base.InterpriseSuiteBusinessService.FaxType,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveInboundFaxes(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRetrieveInboundFaxes(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRetrieveInboundFaxes(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveInboundFaxesAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveInboundFaxesAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedInboundFaxes(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRetrieveCompressedInboundFaxes(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRetrieveCompressedInboundFaxes(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedInboundFaxesAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RetrieveCompressedInboundFaxesAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ConvertPhoneFormat(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginConvertPhoneFormat(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndConvertPhoneFormat(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ConvertPhoneFormatAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ConvertPhoneFormatAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetMessage(System.Int64)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetMessage(System.Int64,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetMessage(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetMessageAsync(System.Int64)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetMessageAsync(System.Int64,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingCurrentPeriod">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetAccountingCurrentPeriod(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetAccountingCurrentPeriod(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingCurrentPeriodAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingCurrentPeriodAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingPeriod(System.DateTime)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetAccountingPeriod(System.DateTime,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetAccountingPeriod(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingPeriodAsync(System.DateTime)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingPeriodAsync(System.DateTime,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateFiscalPeriod">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateFiscalPeriod(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateFiscalPeriod(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateFiscalPeriodAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateFiscalPeriodAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateAccountingFiscalYear(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateAccountingFiscalYear(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateAccountingFiscalYear(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateAccountingFiscalYearAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateAccountingFiscalYearAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingFiscalYearDetail(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetAccountingFiscalYearDetail(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetAccountingFiscalYearDetail(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingFiscalYearDetailAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetAccountingFiscalYearDetailAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyAccountingFRLayoutDetail(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginCopyAccountingFRLayoutDetail(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndCopyAccountingFRLayoutDetail(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyAccountingFRLayoutDetailAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyAccountingFRLayoutDetailAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetOrderLineItemDefaults(System.String[][],System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetOrderLineItemDefaults(System.String[][],System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetOrderLineItemDefaults(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetOrderLineItemDefaultsAsync(System.String[][],System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetOrderLineItemDefaultsAsync(System.String[][],System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPrice(System.String,System.String@,System.String,System.String,System.String,System.Int32,System.DateTime,System.Decimal,System.Decimal,System.Boolean@,System.Decimal@,System.Boolean@,System.Decimal@,System.Decimal@,System.String@,System.Decimal@,System.Decimal@,System.Decimal@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@,System.Decimal@,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetSalesPrice(System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime,System.Decimal,System.Decimal,System.Boolean,System.Decimal,System.Boolean,System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Decimal,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetSalesPrice(System.IAsyncResult,System.String@,System.Boolean@,System.Decimal@,System.Boolean@,System.Decimal@,System.Decimal@,System.String@,System.Decimal@,System.Decimal@,System.Decimal@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@,System.Decimal@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPriceAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime,System.Decimal,System.Decimal,System.Boolean,System.Decimal,System.Boolean,System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Decimal,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPriceAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime,System.Decimal,System.Decimal,System.Boolean,System.Decimal,System.Boolean,System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Decimal,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPrices(System.String,System.String[][][],System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetSalesPrices(System.String,System.String[][][],System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetSalesPrices(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPricesAsync(System.String,System.String[][][],System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPricesAsync(System.String,System.String[][][],System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPriceByPricingMethod(System.String,System.String,System.String@,System.String,System.String,System.String,System.Decimal,System.DateTime,System.Decimal,System.Decimal,Interprise.Facade.Base.InterpriseSuiteBusinessService.DefaultPricing,Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod,System.String,System.Boolean@,System.Decimal@,System.Boolean@,System.Decimal@,System.Decimal@,System.String@,System.Decimal@,System.Decimal@,System.Decimal@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@,System.Decimal@,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetSalesPriceByPricingMethod(System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.DateTime,System.Decimal,System.Decimal,Interprise.Facade.Base.InterpriseSuiteBusinessService.DefaultPricing,Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod,System.String,System.Boolean,System.Decimal,System.Boolean,System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Decimal,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetSalesPriceByPricingMethod(System.IAsyncResult,System.String@,System.Boolean@,System.Decimal@,System.Boolean@,System.Decimal@,System.Decimal@,System.String@,System.Decimal@,System.Decimal@,System.Decimal@,System.String@,System.String@,System.String@,System.Decimal@,System.Decimal@,System.Boolean@,System.Boolean@,System.Decimal@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPriceByPricingMethodAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.DateTime,System.Decimal,System.Decimal,Interprise.Facade.Base.InterpriseSuiteBusinessService.DefaultPricing,Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod,System.String,System.Boolean,System.Decimal,System.Boolean,System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Decimal,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetSalesPriceByPricingMethodAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.DateTime,System.Decimal,System.Decimal,Interprise.Facade.Base.InterpriseSuiteBusinessService.DefaultPricing,Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod,System.String,System.Boolean,System.Decimal,System.Boolean,System.Decimal,System.Decimal,System.String,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Decimal,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetInventoryStockTotal(System.String,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSetInventoryStockTotal(System.String,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSetInventoryStockTotal(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetInventoryStockTotalAsync(System.String,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetInventoryStockTotalAsync(System.String,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.InsertSalesOrderToInvoice(System.Byte[],System.String[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginInsertSalesOrderToInvoice(System.Byte[],System.String[],System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndInsertSalesOrderToInvoice(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.InsertSalesOrderToInvoiceAsync(System.Byte[],System.String[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.InsertSalesOrderToInvoiceAsync(System.Byte[],System.String[],System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.InsertQuoteToSalesOrder(System.Byte[],System.String[],System.Boolean,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginInsertQuoteToSalesOrder(System.Byte[],System.String[],System.Boolean,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndInsertQuoteToSalesOrder(System.IAsyncResult,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.InsertQuoteToSalesOrderAsync(System.Byte[],System.String[],System.Boolean,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.InsertQuoteToSalesOrderAsync(System.Byte[],System.String[],System.Boolean,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeallocateStock(System.String,System.String,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginDeallocateStock(System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndDeallocateStock(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeallocateStockAsync(System.String,System.String,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DeallocateStockAsync(System.String,System.String,System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryLocationToTemp(System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateInventoryLocationToTemp(System.String[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateInventoryLocationToTemp(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryLocationToTempAsync(System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryLocationToTempAsync(System.String[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryStockTotal(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateInventoryStockTotal(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateInventoryStockTotal(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryStockTotalAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryStockTotalAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateAccount(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateAccount(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateAccount(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateAccountAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateAccountAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDescription(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateDescription(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateDescription(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDescriptionAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDescriptionAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryCurrencyPricingDetail(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateInventoryCurrencyPricingDetail(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateInventoryCurrencyPricingDetail(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryCurrencyPricingDetailAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryCurrencyPricingDetailAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateDefaultUnitMeasure(System.Byte[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginCreateDefaultUnitMeasure(System.Byte[],System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndCreateDefaultUnitMeasure(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateDefaultUnitMeasureAsync(System.Byte[],System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateDefaultUnitMeasureAsync(System.Byte[],System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyKitItems(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginCopyKitItems(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndCopyKitItems(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyKitItemsAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyKitItemsAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyMatrixGroup(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginCopyMatrixGroup(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndCopyMatrixGroup(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyMatrixGroupAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CopyMatrixGroupAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryMatrixItem(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateInventoryMatrixItem(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateInventoryMatrixItem(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryMatrixItemAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateInventoryMatrixItemAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsMatrixItemInInventoryItem(System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginIsMatrixItemInInventoryItem(System.String[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndIsMatrixItemInInventoryItem(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsMatrixItemInInventoryItemAsync(System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.IsMatrixItemInInventoryItemAsync(System.String[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RenameItem(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRenameItem(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRenameItem(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RenameItemAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RenameItemAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDatasource(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateDatasource(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateDatasource(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDatasourceAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDatasourceAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDatasourceByEntity(System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateDatasourceByEntity(System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateDatasourceByEntity(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDatasourceByEntityAsync(System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateDatasourceByEntityAsync(System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateFilterCriteriaColumns(System.Byte[],System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGenerateFilterCriteriaColumns(System.Byte[],System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGenerateFilterCriteriaColumns(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateFilterCriteriaColumnsAsync(System.Byte[],System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GenerateFilterCriteriaColumnsAsync(System.Byte[],System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportDatasource(System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginLoadReportDatasource(System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndLoadReportDatasource(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportDatasourceAsync(System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportDatasourceAsync(System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportByForm(System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginLoadReportByForm(System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndLoadReportByForm(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportByFormAsync(System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportByFormAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportDatasourceWithSubreport(System.String,System.Byte[],System.Byte[],System.Data.DataSet)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginLoadReportDatasourceWithSubreport(System.String,System.Byte[],System.Byte[],System.Data.DataSet,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndLoadReportDatasourceWithSubreport(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportDatasourceWithSubreportAsync(System.String,System.Byte[],System.Byte[],System.Data.DataSet)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.LoadReportDatasourceWithSubreportAsync(System.String,System.Byte[],System.Byte[],System.Data.DataSet,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateReportPreview(System.String,System.Byte[],System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateReportPreview(System.String,System.Byte[],System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateReportPreview(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateReportPreviewAsync(System.String,System.Byte[],System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateReportPreviewAsync(System.String,System.Byte[],System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteBindTotransactionScript(System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginExecuteBindTotransactionScript(System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndExecuteBindTotransactionScript(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteBindTotransactionScriptAsync(System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.ExecuteBindTotransactionScriptAsync(System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AssignDocumentCode(System.Int32,System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginAssignDocumentCode(System.Int32,System.Byte[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndAssignDocumentCode(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AssignDocumentCodeAsync(System.Int32,System.Byte[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AssignDocumentCodeAsync(System.Int32,System.Byte[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AdjustOnOrderStockTotals(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginAdjustOnOrderStockTotals(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndAdjustOnOrderStockTotals(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AdjustOnOrderStockTotalsAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AdjustOnOrderStockTotalsAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateBillOnHoldStatus(System.String,System.Boolean,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateBillOnHoldStatus(System.String,System.Boolean,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateBillOnHoldStatus(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateBillOnHoldStatusAsync(System.String,System.Boolean,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateBillOnHoldStatusAsync(System.String,System.Boolean,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAdvancedBillAllocation(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginAutomateInventoryAdvancedBillAllocation(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndAutomateInventoryAdvancedBillAllocation(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAdvancedBillAllocationAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAdvancedBillAllocationAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAllocationBill(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginAutomateInventoryAllocationBill(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndAutomateInventoryAllocationBill(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAllocationBillAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAllocationBillAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateBillLocationStockCount(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateBillLocationStockCount(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateBillLocationStockCount(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateBillLocationStockCountAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateBillLocationStockCountAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePurchaseQuoteStatus">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdatePurchaseQuoteStatus(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdatePurchaseQuoteStatus(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePurchaseQuoteStatusAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePurchaseQuoteStatusAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetPurchaseReceiptBilled(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginSetPurchaseReceiptBilled(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndSetPurchaseReceiptBilled(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetPurchaseReceiptBilledAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.SetPurchaseReceiptBilledAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RemoveStock(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginRemoveStock(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndRemoveStock(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RemoveStockAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.RemoveStockAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAllocation(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginAutomateInventoryAllocation(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndAutomateInventoryAllocation(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAllocationAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAllocationAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAdvancedAllocation(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginAutomateInventoryAdvancedAllocation(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndAutomateInventoryAdvancedAllocation(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAdvancedAllocationAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AutomateInventoryAdvancedAllocationAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateLocationStockCount(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdateLocationStockCount(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdateLocationStockCount(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateLocationStockCountAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdateLocationStockCountAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginAssembly(System.String[],System.Byte[][],System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginUpdatePluginAssembly(System.String[],System.Byte[][],System.String[],System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndUpdatePluginAssembly(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginAssemblyAsync(System.String[],System.Byte[][],System.String[])">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.UpdatePluginAssemblyAsync(System.String[],System.Byte[][],System.String[],System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateDatabase(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginCreateDatabase(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndCreateDatabase(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateDatabaseAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CreateDatabaseAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DumpBackupFile(System.String,System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginDumpBackupFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndDumpBackupFile(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DumpBackupFileAsync(System.String,System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DumpBackupFileAsync(System.String,System.String,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCurrentConnectionSetting">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginGetCurrentConnectionSetting(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndGetCurrentConnectionSetting(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCurrentConnectionSettingAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.GetCurrentConnectionSettingAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DownloadFileInChunk(System.String,System.Int64,System.Int32,System.UInt64@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginDownloadFileInChunk(System.String,System.Int64,System.Int32,System.UInt64,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndDownloadFileInChunk(System.IAsyncResult,System.UInt64@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DownloadFileInChunkAsync(System.String,System.Int64,System.Int32,System.UInt64)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.DownloadFileInChunkAsync(System.String,System.Int64,System.Int32,System.UInt64,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AppendChunkInFile(System.String,System.Byte[],System.Int64,System.UInt64@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.BeginAppendChunkInFile(System.String,System.Byte[],System.Int64,System.UInt64,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.EndAppendChunkInFile(System.IAsyncResult,System.UInt64@)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AppendChunkInFileAsync(System.String,System.Byte[],System.Int64,System.UInt64)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.AppendChunkInFileAsync(System.String,System.Byte[],System.Int64,System.UInt64,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService.CancelAsync(System.Object)">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConnectedBusinessService">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CredentialSoapHeader.BusinessRuleType">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CredentialSoapHeader.TransactionType">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CredentialSoapHeader.ConnectionStringType">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CredentialSoapHeader.LanguageCode">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CredentialSoapHeader.UserCredential">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CredentialSoapHeader.UserSession">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CredentialSoapHeader.AnyAttr">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CredentialSoapHeader">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UserCredential.UserCode">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UserCredential.Password">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UserCredential.Salt">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UserCredential.Vector">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UserCredential.Code">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UserCredential">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.None">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccessLevel">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingFiscalYear">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingPeriod">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingChartOfAccounts">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingAdvanceFSFilterCollection">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingBadDept">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingBatchPostingLog">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingGLClassTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingPettyCash">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingPrepayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingContraADJ">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingBadDebt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingWriteOff">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccoutingAccrual">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingJournalTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ActivityCategory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingPreference">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingAccrual">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingBalanceSheet">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingMultiCurrencyRevaluationHistory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingProfitAndLoss">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingTrialBalance">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingBudget">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingBudgetSplit">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccrualReversal">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingFRLayout">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingECSalesHistory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingVATAnalysisHistory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingIntrastatAnalysisHistory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingPostStockValuation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingStockRevaluationValuationHistory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AccountingRetrospectiveLayoutManager">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Address">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Asset">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AssetDisposal">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AssetType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AssetSubType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.AssetCapitalization">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BackOrder">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Banking">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingAccount">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingCheckBook">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingCheckRegister">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingCreditCard">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingCreditCardCharge">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingCreditCardReturn">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingFundTransfer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingDeposit">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingReceipt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingPettyCashReconciliation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingBankAccountReconciliation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingCreditCardReconciliation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingPayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingGLClassTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingPettyCashPayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingPettyCashReceipt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingOpeningBalancePayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BankingOpeningBalanceReceipt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BatchInvoice">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BatchCredit">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Bill">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Budget">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CCDirectCharge">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CCResponse">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Checklist">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CheckNumber">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CompanyInformationDetail">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CompanyPreference">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CreditCardAuthorization">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CreditMemo">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.LeadActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.WarehouseActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SupplierActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PersonalActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SalesRepActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ShipToActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.UserActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMActivity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMCase">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMBusinessTitle">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMCampaign">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMCampaignWave">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMTargetList">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMCompetitor">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMDepartment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMDocument">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMJobRole">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMLead">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMPreference">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMNote">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMOpportunity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMOpportunityStage">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMSuffix">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMTeam">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMTerritory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ConnectedChannel">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerClass">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerClassTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerShipToCLass">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerBackOrder">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerBackOrderPackingList">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerBackOrderPickingTicket">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PersonalContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerCreditCard">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerDetail">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerSalesRep">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerSalesRepClass">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerServiceContractType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ProspectDetail">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerDebtorLetter">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerDocumentNote">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerMultiPayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerOpeningBalance">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerReceipt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerReceiptAllocation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerRefund">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerSalesTaxScheme">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerSalesTaxComponent">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerSalesRepContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerSalesRepComsn">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerShipTo">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerShipToClassTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerShipToContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerGLClassTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerVoidReceipt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.DebitMemo">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.DefaultAccounts">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.DeliveryRoute">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Developer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.DocumentType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.DocumentNote">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ExpenseBill">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ExpenseDebitMemo">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.GeneralLedgerOpeningBalance">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.GridSettings">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryAdjustment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryAdjustmentIn">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryAdjustmentOut">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryOpeningBalance">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryBatchPricingLevel">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryBuildAssembly">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryClass">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryCategory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryDefaultWholesalePricing">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryDefaultRetailPricing">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryGLClassTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryInternalTransfer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryItem">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryBundle">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryItemAttribute">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryItemCategory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryItemClassTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryItemUnitMeasure">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryLocationItems">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryManufacturer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryPriceList">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventorySpecificCustomerPricing">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryCustomerPricingMethod">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryDiscountCategoryPriceBands">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryStockItemPricingDetailPromotionalPricing">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventorySellingDepartment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventorySellingLanguage">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventorySellingCurrency">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryPreference">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryStockTransfer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryStockTake">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryStockValuation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryUnitMeasure">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryWarehouse">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryReason">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InventoryWebRating">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Invoice">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InvoiceRegister">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.InvoiceWriteOff">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Journal">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Manufacturer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.MultiCurrency">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.NewCompany">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.LeadContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PaymentMethod">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PaymentTerm">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PriceLevel">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ProjectMonitor">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PurchaseOrder">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PurchaseReceipt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PurchaseContract">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PurchaseTax">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PurchaseTaxComponent">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PurchaseQuote">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Quote">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.OtherTax">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.OtherTaxComponent">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Report">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ReportTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ReportTemplateCategory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ReturnToVendor">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.RMA">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Relationship">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ReminderList">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SalesContract">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SalesOrder">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SalesTax">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SalesTaxComponent">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SalesTaxScheme">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ServiceLevelAgreement">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ShippingMethod">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SLABusinessCalendar">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SLAHolidayCalendar">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Source">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SpecificCustomerPricing">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemAutoNumbering">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemManufacturer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.StockAutoAllocation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.TradeCounter">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.UserAccount">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.UserPreference">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.UserReminderList">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.UserRole">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.UserMenu">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.UserSkin">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Vendor">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorBill">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorDebitMemo">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorPaymentAllocation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorSuggestedPayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorBatchPayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorCheckPayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorDetail">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorPayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorPrepayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorPurchaseOrder">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorPurchaseRequisition">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorReceipt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorReceivingList">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorReturntoSupplier">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorAgingPayables">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorClass">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SupplierContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorDocumentNote">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorOpeningBalance">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorSchedulePayables">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorPurchaseTaxScheme">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VendorPurchaseHistory">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VoidPurchaseReceipt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SupplierGLClassTemplate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.WarehouseContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PostalCode">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.WordProcessor">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Plugin">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ExceptionManager">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerCreditNote">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.UKVat">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Country">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerPreference">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SupplierFactor">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemManagerPreference">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemTaxSchemeSales">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemTaxSchemePurchases">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemAuditTrail">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemImport">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemTeam">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.OpportunityCompetitor">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemDocumentType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemDepartment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemJobRole">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemSalutation">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemSuffix">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemRelationship">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemCopyUserRole">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemPredefinedNotes">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemProductRights">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ECommerceActiveShopper">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommercePollAnswer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceAppConfig">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceStringResource">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceLocaleSetting">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommercePoll">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceCoupon">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceNews">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceGallery">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceSalesPrompt">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceSite">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceTopic">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.VoidedCheck">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SupplierRefund">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerTurnover">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Fax">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerSalesCoupon">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CustomerCardPayment">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.BaseSalesOrder">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.ProductFilter">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SupplierShipFrom">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SupplierShipFromContact">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.EcommerceURLRedirect">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.LoadUnreservedTransaction">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.LoadUnreservedPO">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemJobPlan">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.SystemJobLog">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.LoyaltyPoints">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.GiftCard">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.GiftCertificate">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.Promotion">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PromotionDetail">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PromotionRule">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.PromotionRuleDetail">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType.CRMLeadTag">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.TransactionType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType.Text">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType.StoredProcedure">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType.TableDirect">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CommandType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType.Table">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType.View">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType.StoredProcedure">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType.Trigger">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType.Function">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType.All">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DatabaseObjectType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.FaxType.Inbound">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.FaxType.Outbound">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FaxType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DefaultPricing.Wholesale">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DefaultPricing.Retail">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.DefaultPricing.None">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DefaultPricing">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod.MarkupOnLastCostPrice">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod.PriceList">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod.LastPrice">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod.None">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.PricingMethod">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RestoreDatabaseCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetCurrentConnectionForWebServiceCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetHomeCurrencyCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateSystemCheckListStatusCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BulkUpdateImportTablesCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.BulkUpdateImportTablesCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.BulkUpdateImportTablesCompletedEventArgs.isProcessFinished">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BulkUpdateImportTablesCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeleteSessionFileCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdatePluginAssemblyIDCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdatePluginAssemblyIDCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdatePluginAssemblyIDCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdatePluginLocationCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdatePluginLocationCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdatePluginLocationCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateCacheTablesModifiedCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetTransactionsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetTransactionsCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetTransactionsCompletedEventArgs.remaining">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetTransactionsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadSearchResultsDataCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadSearchResultsDataCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadSearchResultsDataCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadEntityTableCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadEntityTableCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadEntityTableCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ValidateEntryCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.ValidateEntryCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ValidateEntryCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadDataDictionaryDataCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadDataDictionaryDataCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ReadDataDictionaryDataCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetMaxRecordsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetMaxRecordsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetMaxRecordsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetClientCodeCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetClientCodeCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetClientCodeCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetUserRoleBasedOnProductEditionCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetConnectionStringCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetConnectionStringCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetConnectionStringCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetNewCacheDataCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetNewCacheDataCompletedEventArgs.remainingRecords">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetNewCacheDataCompletedEventArgs.placeHolder">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetNewCacheDataCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedNewCacheDataCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedNewCacheDataCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedNewCacheDataCompletedEventArgs.remainingRecords">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedNewCacheDataCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedNewCacheDataInChunckCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedNewCacheDataInChunckCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedNewCacheDataInChunckCompletedEventArgs.remaining">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedNewCacheDataInChunckCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTableDeleteLogCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTableDeleteLogCompletedEventArgs.remaining">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTableDeleteLogCompletedEventArgs.placeHolder">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTableDeleteLogCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedCacheTableDeleteLogCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedCacheTableDeleteLogCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedCacheTableDeleteLogCompletedEventArgs.remaining">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedCacheTableDeleteLogCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedCachTableDeleteLogInChunkCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedCachTableDeleteLogInChunkCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedCachTableDeleteLogInChunkCompletedEventArgs.remaining">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCompressedCachTableDeleteLogInChunkCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTablesToUpdateCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTablesToUpdateCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTablesToUpdateCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTablesModifiedCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTablesModifiedCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCacheTablesModifiedCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetUserAccountCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CheckExistingDataCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CheckExistingDataCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CheckExistingDataCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFieldByTextCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFieldByTextCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFieldByTextCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFieldByCommandCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFieldByCommandCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFieldByCommandCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetRowCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetRowCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetRowCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetRowsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetRowsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetRowsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetRowCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetRowCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetRowCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDocumentCodeCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDocumentCodeCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDocumentCodeCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadCompressedDataSetCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadCompressedDataSetCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadCompressedDataSetCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadDataSetCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadDataSetCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadDataSetCompletedEventArgs.dataset">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadDataSetCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FillCompressedDataSetCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.FillCompressedDataSetCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FillCompressedDataSetCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FillDataSetCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.FillDataSetCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FillDataSetCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateCompressedDataSetCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateCompressedDataSetCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateCompressedDataSetCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateCompressedDataSetWithNonQueryCommandCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateCompressedDataSetWithNonQueryCommandCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateCompressedDataSetWithNonQueryCommandCompletedEventArgs.nonqueryoutputParameters">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateCompressedDataSetWithNonQueryCommandCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateDataSetCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateDataSetCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateDataSetCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateDataSetWithNonQueryCommandCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateDataSetWithNonQueryCommandCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateDataSetWithNonQueryCommandCompletedEventArgs.nonqueryoutputParameters">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateDataSetWithNonQueryCommandCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostDataCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostDataCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostDataCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindLastSalutationCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindLastSalutationCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindLastSalutationCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindFirstSuffixCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindFirstSuffixCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindFirstSuffixCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindPostalCodeCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindPostalCodeCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.FindPostalCodeCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyAddressCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyAddressCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyAddressCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.PostDocumentCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.PostDocumentCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.PostDocumentCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.PostDocumentWithCommandTimeOutCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.PostDocumentWithCommandTimeOutCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.PostDocumentWithCommandTimeOutCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostByCodeCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostByCodeCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostByCodeCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostByDateCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostByDateCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BatchPostByDateCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.TestConnectionAuthenticityCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.TestConnectionAuthenticityCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.TestConnectionAuthenticityCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ExecuteNonQueryCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.ExecuteNonQueryCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.ExecuteNonQueryCompletedEventArgs.outputParameters">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ExecuteNonQueryCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ExecuteScriptCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.ExecuteScriptCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ExecuteScriptCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AddMenuToTemplateCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.AddMenuToTemplateCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AddMenuToTemplateCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateUserRoleMenuCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateUserRoleMenuCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateUserRoleMenuCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BulkInsertCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.BulkInsertCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.BulkInsertCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetScriptCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetScriptCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetScriptCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.TestScriptCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.TestScriptCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.TestScriptCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateStoredProcedureCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendEmailToTargetListCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendEmailToTargetListCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendEmailToTargetListCompletedEventArgs.batchIndex">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendEmailToTargetListCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendTestEmailCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxToTargetListCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxToTargetListCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxToTargetListCompletedEventArgs.batchIndex">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxToTargetListCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendTestFaxCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveEmailsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveEmailsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveEmailsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedEmailsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedEmailsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedEmailsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendEmailsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendEmailsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendEmailsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyOutgoingEmailServerCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyOutgoingEmailServerCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyOutgoingEmailServerCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendPendingEmailsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendPendingEmailsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendPendingEmailsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendPendingEmailsByActionCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendPendingEmailsByActionCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendPendingEmailsByActionCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.MoveToFolderCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.MoveToFolderCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.MoveToFolderCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.MoveToFolderCompressedCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.MoveToFolderCompressedCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.MoveToFolderCompressedCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeleteEmailCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeleteEmailCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeleteEmailCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeleteEmailCompressedCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeleteEmailCompressedCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeleteEmailCompressedCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsValidEmailAccountSetupCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsValidEmailAccountSetupCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsValidEmailAccountSetupCompletedEventArgs.message">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsValidEmailAccountSetupCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyEmailAccountSetupCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyEmailAccountSetupCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyEmailAccountSetupCompletedEventArgs.message">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyEmailAccountSetupCompletedEventArgs.serverEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.VerifyEmailAccountSetupCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CheckAccessCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CheckAccessCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CheckAccessCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsFaxAvailableCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsFaxAvailableCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsFaxAvailableCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxExtendedCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxExtendedCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxExtendedCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxExtended2CompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxExtended2CompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SendFaxExtended2CompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveFaxesCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveFaxesCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveFaxesCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedFaxesCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedFaxesCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedFaxesCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFaxImageCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFaxImageCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFaxImageCompletedEventArgs.bytImage">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetFaxImageCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveInboundFaxesCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveInboundFaxesCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveInboundFaxesCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedInboundFaxesCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedInboundFaxesCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RetrieveCompressedInboundFaxesCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConvertPhoneFormatCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConvertPhoneFormatCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ConvertPhoneFormatCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetMessageCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetMessageCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetMessageCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingCurrentPeriodCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingCurrentPeriodCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingCurrentPeriodCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingPeriodCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingPeriodCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingPeriodCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateFiscalPeriodCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateFiscalPeriodCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateFiscalPeriodCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateAccountingFiscalYearCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateAccountingFiscalYearCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateAccountingFiscalYearCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingFiscalYearDetailCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingFiscalYearDetailCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetAccountingFiscalYearDetailCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyAccountingFRLayoutDetailCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyAccountingFRLayoutDetailCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyAccountingFRLayoutDetailCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetOrderLineItemDefaultsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetOrderLineItemDefaultsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetOrderLineItemDefaultsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.currencyCode">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.byTotalQty">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.salesPrice">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.isSalesPriceInBaseCurrency">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.regularPrice">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.promotionalPrice">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.pricing">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.percent">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.discount">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.categoryDiscount">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.customerItemCode">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.customerItemDescription">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.inventoryItemDescription">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.basePricingCost">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.baseAverageCost">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.isInventorySpecialPriceExpired">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.isCustomerSpecialPriceExpired">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs.maxDiscount">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPricesCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPricesCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPricesCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.currencyCode">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.byTotalQty">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.salesPrice">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.isSalesPriceInBaseCurrency">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.regularPrice">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.promotionalPrice">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.pricing">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.percent">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.discount">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.categoryDiscount">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.customerItemCode">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.customerItemDescription">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.inventoryItemDescription">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.basePricingCost">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.baseAverageCost">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.isInventorySpecialPriceExpired">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.isCustomerSpecialPriceExpired">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs.maxDiscount">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetSalesPriceByPricingMethodCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetInventoryStockTotalCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.InsertSalesOrderToInvoiceCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.InsertSalesOrderToInvoiceCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.InsertSalesOrderToInvoiceCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.InsertQuoteToSalesOrderCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.InsertQuoteToSalesOrderCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.InsertQuoteToSalesOrderCompletedEventArgs.errMsg">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.InsertQuoteToSalesOrderCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeallocateStockCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeallocateStockCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DeallocateStockCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryLocationToTempCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryLocationToTempCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryLocationToTempCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryStockTotalCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryStockTotalCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryStockTotalCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateAccountCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateAccountCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateAccountCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDescriptionCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDescriptionCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDescriptionCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryCurrencyPricingDetailCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryCurrencyPricingDetailCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryCurrencyPricingDetailCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateDefaultUnitMeasureCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateDefaultUnitMeasureCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateDefaultUnitMeasureCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyKitItemsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyKitItemsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyKitItemsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyMatrixGroupCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyMatrixGroupCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CopyMatrixGroupCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryMatrixItemCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryMatrixItemCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateInventoryMatrixItemCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsMatrixItemInInventoryItemCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsMatrixItemInInventoryItemCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.IsMatrixItemInInventoryItemCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RenameItemCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.RenameItemCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RenameItemCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDatasourceCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDatasourceCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDatasourceCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDatasourceByEntityCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDatasourceByEntityCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateDatasourceByEntityCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateFilterCriteriaColumnsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateFilterCriteriaColumnsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GenerateFilterCriteriaColumnsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportDatasourceCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportDatasourceCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportDatasourceCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportByFormCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportByFormCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportByFormCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportDatasourceWithSubreportCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportDatasourceWithSubreportCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.LoadReportDatasourceWithSubreportCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateReportPreviewCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.ExecuteBindTotransactionScriptCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AssignDocumentCodeCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.AssignDocumentCodeCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AssignDocumentCodeCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AdjustOnOrderStockTotalsCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateBillOnHoldStatusCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AutomateInventoryAdvancedBillAllocationCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AutomateInventoryAllocationBillCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateBillLocationStockCountCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdatePurchaseQuoteStatusCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.SetPurchaseReceiptBilledCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.RemoveStockCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AutomateInventoryAllocationCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AutomateInventoryAdvancedAllocationCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdateLocationStockCountCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.UpdatePluginAssemblyCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateDatabaseCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateDatabaseCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.CreateDatabaseCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DumpBackupFileCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCurrentConnectionSettingCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCurrentConnectionSettingCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.GetCurrentConnectionSettingCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DownloadFileInChunkCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.DownloadFileInChunkCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.DownloadFileInChunkCompletedEventArgs.physicalMemory">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.DownloadFileInChunkCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AppendChunkInFileCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.InterpriseSuiteBusinessService.AppendChunkInFileCompletedEventArgs.physicalMemory">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.InterpriseSuiteBusinessService.AppendChunkInFileCompletedEventArgs">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.#ctor">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.GetAvailablePackagesCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.GetMobileAvailablePackagesCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageWithResizeCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageFileNameCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageFileNameWithoutResizingCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.SyncImageFileCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageFileNameCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageFileNamebyBatchCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.ResetCacheCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.SetAppConfigCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.SetStringResourceCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.ResetURLRedirectCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.GetUserResetPasswordTemplateCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.AssignDefaultImageToItemCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.GetCBNEntityImageFileNameDataCompleted">
	<remarks/>
</member><member name="E:Interprise.Facade.Base.ISEService.StoreFrontService.SaveCBNEntityImageFileNameCompleted">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetAvailablePackages(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetAvailablePackagesAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetAvailablePackagesAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetMobileAvailablePackages(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetMobileAvailablePackagesAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetMobileAvailablePackagesAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageWithResize(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageWithResizeAsync(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageWithResizeAsync(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImage(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageAsync(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageAsync(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageFileName(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageFileNameAsync(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageFileNameAsync(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageFileNameWithoutResizing(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageFileNameWithoutResizingAsync(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveEntityImageFileNameWithoutResizingAsync(Interprise.Facade.Base.ISEService.EntityImageData,Interprise.Facade.Base.ISEService.ImageType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImage(System.Int32,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageAsync(System.Int32,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageAsync(System.Int32,Interprise.Facade.Base.ISEService.ImageType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SyncImageFile(Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SyncImageFileAsync(Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SyncImageFileAsync(Interprise.Facade.Base.ISEService.ImageType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageFileName(System.Int32,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageFileNamebyBatch(System.Int32,Interprise.Facade.Base.ISEService.ImageType,System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageFileNameAsync(System.Int32,Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetEntityImageFileNameAsync(System.Int32,Interprise.Facade.Base.ISEService.ImageType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.ResetCache(Interprise.Facade.Base.ISEService.ResetCacheOption)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.ResetCacheAsync(Interprise.Facade.Base.ISEService.ResetCacheOption)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.ResetCacheAsync(Interprise.Facade.Base.ISEService.ResetCacheOption,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SetAppConfig(System.Int32,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SetAppConfigAsync(System.Int32,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SetAppConfigAsync(System.Int32,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SetStringResource(System.Int32,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SetStringResourceAsync(System.Int32,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SetStringResourceAsync(System.Int32,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.ResetURLRedirect">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.ResetURLRedirectAsync">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.ResetURLRedirectAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetUserResetPasswordTemplate(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetUserResetPasswordTemplateAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetUserResetPasswordTemplateAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.AssignDefaultImageToItem(System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.AssignDefaultImageToItemAsync(System.Int32)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.AssignDefaultImageToItemAsync(System.Int32,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetCBNEntityImageFileNameData(Interprise.Facade.Base.ISEService.CBNEntityImageData[],Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetCBNEntityImageFileNameDataAsync(Interprise.Facade.Base.ISEService.CBNEntityImageData[],Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.GetCBNEntityImageFileNameDataAsync(Interprise.Facade.Base.ISEService.CBNEntityImageData[],Interprise.Facade.Base.ISEService.ImageType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveCBNEntityImageFileName(Interprise.Facade.Base.ISEService.CBNEntityImageData[],Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveCBNEntityImageFileNameAsync(Interprise.Facade.Base.ISEService.CBNEntityImageData[],Interprise.Facade.Base.ISEService.ImageType)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.SaveCBNEntityImageFileNameAsync(Interprise.Facade.Base.ISEService.CBNEntityImageData[],Interprise.Facade.Base.ISEService.ImageType,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Facade.Base.ISEService.StoreFrontService.CancelAsync(System.Object)">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.StoreFrontService">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.Id">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.Icon">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.Medium">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.Large">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.MiniCart">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.Mobile">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.IconImages">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.MediumImages">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.LargeImages">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.Swatches">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.MobileImages">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageData.MinicartImages">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.EntityImageData">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImage.State">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImage.ContentType">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImage.ImageRaw">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImage.ImageFileName">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImage.HasMicroImage">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImage.HasMinicartImage">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImage.HasMobileImage">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.EntityImage">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.State.UnChanged">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.State.Added">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.State.Modified">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.State.Deleted">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.State">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.ImageRaw">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.ContentType">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.ImageFileName">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.HasIconImage">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.HasMicroImage">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.HasMediumImage">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.HasLargeImage">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.IsDefaultIcon">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.IsDefaultMedium">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImage.ImageIndex">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.CBNEntityImage">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.ItemCode">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.ItemName">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.InventoryItemId">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.ImageIndex">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.IsDefaultIcon">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.IsDefaultMedium">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.HasIcon">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.HasMicro">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.HasMedium">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.HasLarge">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.Icon">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.Medium">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.Large">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.IconImages">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.MicroImages">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.MediumImages">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.CBNEntityImageData.LargeImages">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.CBNEntityImageData">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageSwatch.Id">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageSwatch.ImageFileName">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.EntityImageSwatch.Image">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.EntityImageSwatch">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ImageType.Item">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ImageType.Category">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ImageType.Manufacturer">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ImageType.Department">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ImageType.Attribute">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.ImageType">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.AppConfig">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.StringResource">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.ImagePath">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.CategoryEntity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.ManufacturerEntity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.DepartmentEntity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.URLRedirect">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.AttributeEntity">
	<remarks/>
</member><member name="F:Interprise.Facade.Base.ISEService.ResetCacheOption.All">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.ResetCacheOption">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetAvailablePackagesCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.GetAvailablePackagesCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetAvailablePackagesCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetMobileAvailablePackagesCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.GetMobileAvailablePackagesCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetMobileAvailablePackagesCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SaveEntityImageWithResizeCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SaveEntityImageCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SaveEntityImageFileNameCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SaveEntityImageFileNameWithoutResizingCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetEntityImageCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.GetEntityImageCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetEntityImageCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SyncImageFileCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.SyncImageFileCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SyncImageFileCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetEntityImageFileNameCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetEntityImageFileNamebyBatchCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.GetEntityImageFileNameCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetEntityImageFileNameCompletedEventArgs">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.GetEntityImageFileNamebyBatchCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.ResetCacheCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SetAppConfigCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SetStringResourceCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.ResetURLRedirectCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetUserResetPasswordTemplateCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.GetUserResetPasswordTemplateCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetUserResetPasswordTemplateCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.AssignDefaultImageToItemCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetCBNEntityImageFileNameDataCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.ISEService.GetCBNEntityImageFileNameDataCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.GetCBNEntityImageFileNameDataCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Facade.Base.ISEService.SaveCBNEntityImageFileNameCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.DeveloperID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AssemblyID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.LanguageCode">
	<summary>
 Gets/sets language code.
 </summary>
	<value></value>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.MenuGroupCode">
	<summary>
 Gets/sets Menu Group code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.RoleCode">
	<summary>
 Gets/sets Role code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.UserRoleScriptFile">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.UserRoleChangesDataset">
	<summary>
 For Section Customization Purposes Only.
 </summary>
	<value></value>
	<returns>All changes made from customizing form sections.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddModule">
	<summary>
 Add  new module.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddMenuItem(System.String,System.String)">
	<summary>
 Method use to add new menu item.
 </summary>
	<param name="parentID"></param>
	<param name="childID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddMenuItem(System.String,System.String,Interprise.Framework.Base.Shared.Enum.MenuItemType)">
	<summary>
 '
 </summary>
	<param name="parentID"></param>
	<param name="childID"></param>
	<param name="menuType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddMenuItem(System.String,System.String,System.String)">
	<summary>
 Method use to add new menu item.
 </summary>
	<param name="parentID"></param>
	<param name="childID"></param>
	<param name="description"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddMenuItem(System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 Method use to add new menu item.
 </summary>
	<param name="parentID"></param>
	<param name="childID"></param>
	<param name="description"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddMenuFolder(System.String,System.String)">
	<summary>
	</summary>
	<param name="parentID"></param>
	<param name="childID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddSubFolder(System.Data.DataRow)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddUserRole(System.String)">
	<summary>
 Method use to add new user role in the data table.
 </summary>
	<param name="roleCode">Thre roleCode assign by the user.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddModule(System.Data.DataRow)">
	<summary>
 Add new module.
 </summary>
	<param name="menuGroupTemplateRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.LoadMenuGroupTemplate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ConvertRowStateToAdded(System.Data.DataTable)">
	<summary>
 Change all rows in a table to added.
 </summary>
	<param name="table">The table of datarows to be converted.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ConvertRowStateToAdded(System.Data.DataTable,System.String)">
	<summary>
 Change all rows in a table to added.
 </summary>
	<param name="table">The table of datarows to be converted.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CopyModule(System.String)">
	<summary>
	</summary>
	<param name="moduleCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CopyAllModule">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddMenuToTemplate(System.String,System.String)">
	<summary>
 Method use to create user role menu.
 </summary>
	<param name="roleCode"></param>
	<param name="userCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddUserRoleMenuFormSection(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.Boolean)">
	<summary>
 Adds new plugin section to SystemUserRoleMenuFormSection DataTable.
 </summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formMenuCode"></param>
	<param name="sectionCode"></param>
	<param name="sectionClassType"></param>
	<param name="formClassType"></param>
	<param name="sectionAssemblyName"></param>
	<param name="formAssemblyName"></param>
	<param name="parentSectionClassType"></param>
	<param name="derivedInterface"></param>
	<param name="isCustomizable"></param>
	<param name="isEnabled"></param>
	<param name="isVisible"></param>
	<param name="tabPageOrder"></param>
	<param name="formSectionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.AddUserRoleMenuFormSection(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.String,System.Boolean)">
	<summary>
 Adds new plugin section to SystemUserRoleMenuFormSection DataTable.
 </summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formMenuCode"></param>
	<param name="sectionCode"></param>
	<param name="sectionClassType"></param>
	<param name="formClassType"></param>
	<param name="sectionAssemblyName"></param>
	<param name="formAssemblyName"></param>
	<param name="parentSectionClassType"></param>
	<param name="derivedInterface"></param>
	<param name="isCustomizable"></param>
	<param name="isEnabled"></param>
	<param name="isVisible"></param>
	<param name="tabPageOrder"></param>
	<param name="formSectionType"></param>
	<param name="sectionDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsSharedMenuItem(System.String,System.String)">
	<summary>
	</summary>
	<param name="formClassType"></param>
	<param name="formAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsAllModuleLoaded">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ReplaceUserRoleMenuFormSection(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Interprise.Framework.Base.Shared.Structure.Plugin)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="origSectionClassType"></param>
	<param name="newSectionClassType"></param>
	<param name="newSectionAssemblyName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.DeleteUserRoleMenuFormSection(System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="sectionClassType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetUserRoleMenuFormSectionDescription(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="menuGroupCode"></param>
	<param name="formMenuCode"></param>
	<param name="sectionCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetUserRoleMenuFormSectionDescription(System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Gets all rows of a current section.
 </summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="SectionClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetFormMenuFormSectionDescription(System.String,System.String)">
	<summary>
 Get  the description of a plugin section .
 </summary>
	<param name="formMenuCode"></param>
	<param name="sectionCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.#ctor(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway)">
	<summary>
 Create an instance of this class.
 </summary>
	<param name="userRoleDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CreateDefaultFolders">
	<summary>
 Method use to create default folders.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CreateMenuDescription(System.Data.DataRow)">
	<summary>
 Create Description for new item menu created.
 </summary>
	<param name="menuRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CreateDefaultDashboard(System.String,System.Byte[])">
	<summary>
	</summary>
	<param name="dashboardPageImageByte"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CreateDashboardPage(System.String,System.String,Interprise.Framework.Base.Shared.Enum.DashBoardType,System.Int32,System.String[],System.Byte[])">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="dashBoardKind"></param>
	<param name="pageNumber"></param>
	<param name="languages"></param>
	<param name="dashboardPageImageByte"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CreateDashboardPage(System.String,System.String,Interprise.Framework.Base.Shared.Enum.DashBoardType,System.Int32,System.String[],System.Byte[],System.Boolean)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="dashBoardKind"></param>
	<param name="pageNumber"></param>
	<param name="languages"></param>
	<param name="dashboardPageImageByte"></param>
	<param name="isDefault"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CreateDashboardPage(Interprise.Framework.Base.Shared.Enum.DashBoardType,System.Int32,System.String[],System.Byte[])">
	<summary>
	</summary>
	<param name="dashBoardKind"></param>
	<param name="pageNumber"></param>
	<param name="languages"></param>
	<param name="dashboardPageImageByte"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.CreateUserRoleMenu(System.String,System.String)">
	<summary>
 Method use to create user role menu.
 </summary>
	<param name="roleCode"></param>
	<param name="userCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsValidNumKey(System.Int32)">
	<summary>
 Checks if a numkey is already assigned by the user.
 </summary>
	<param name="numkey"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsValidFormAction(System.String)">
	<summary>
 Checks if form action is already used by other form.
 </summary>
	<param name="action"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsValidFormAction(System.String,System.String)">
	<summary>
 Checks if form action is already used by other form.
 </summary>
	<param name="action"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsUserRoleExisting(System.String)">
	<summary>
 Check if there is user role existing.
 </summary>
	<param name="roleCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsMenuItemExpanded(System.String)">
	<summary>
	</summary>
	<param name="FormMenuCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsMenuItemExpanded(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="formMenuRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.IsMenuFolder(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="rowToCheck"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetUserRoleLanguages">
	<summary>
 Returns languages used of all sysmte. users.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetFormMenuRow(System.String)">
	<summary>
 Returns row of the form containing the the key supplied.
 </summary>
	<param name="formMenuCode">The key of the form.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetFormMenuRows(System.String,System.Boolean)">
	<summary>
 Returns all rows of same action type regardless of menugroupcode.
 </summary>
	<param name="action">The action of the form that the rows will be retrived.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetFormMenuRow(System.String,System.String)">
	<summary>
	</summary>
	<param name="action"></param>
	<param name="excludedFormMenuCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetFormMenuRows(System.String,System.String,System.Boolean)">
	<summary>
 Returns all rows of same action type regardless of menugroupcode.
 </summary>
	<param name="action">The action of the form that the rows will be retrived.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetFormMenuDescriptionRow(System.String)">
	<summary>
	</summary>
	<param name="formMenuCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetMenuGroupRow(System.String)">
	<summary>
	</summary>
	<param name="menuGroupCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetMenuGroupRow">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetMenuGroupDescription">
	<summary>
 Return menu group description
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetFormMenuDescription(System.String)">
	<summary>
	</summary>
	<param name="formmenucode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetDashboardPageRow(System.Int32)">
	<summary>
	</summary>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetDashboardPageDescriptionRow(System.Int32)">
	<summary>
	</summary>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetDashboardPageDescription(System.Int32)">
	<summary>
	</summary>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetPageContentRow(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="contentCode"></param>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetPageContentDescriptionRow(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="contentCode"></param>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetPageContentDescription(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="contentCode"></param>
	<param name="pageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetReportDescriptionTemplateRows(System.String)">
	<summary>
	</summary>
	<param name="reportCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.LoadReportDescriptionTemplateRow(System.String)">
	<summary>
	</summary>
	<param name="reportCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.MakeAllMenuEnable(System.Boolean)">
	<summary>
	</summary>
	<param name="isEnabled"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.MakeAllMenuVisible(System.Boolean)">
	<summary>
	</summary>
	<param name="isVisible"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validate a particular column value whether numkey is valid or not.
 </summary>
	<param name="row"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.FinalizeMenuGroupDescription">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ParseGridLayout(System.Data.DataRow,System.String,System.String)">
	<summary>
	</summary>
	<param name="formSectionRow"></param>
	<param name="gridViewName"></param>
	<param name="gridLayout"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetExtractedLayout(System.String,System.String)">
	<summary>
	</summary>
	<param name="gridLayout"></param>
	<param name="gridViewName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.GetGridLayout(System.String,System.String)">
	<summary>
	</summary>
	<param name="gridLayout"></param>
	<param name="gridViewName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ResetMenuLayout(System.String,System.String,System.String)">
	<summary>
  Reset menu layout.
 </summary>
	<param name="roleCode"></param>
	<param name="formClassType"></param>
	<param name="formAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ResetSectionLayout(System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ResetSectionLayout(System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ResetGridLayout(System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.ResetGridLayout(System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="sectionClassType"></param>
	<param name="sectionAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.UpdateMenuLayout(System.IO.MemoryStream,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="menuLayoutStream"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.UpdateMenuLayout(System.IO.MemoryStream,System.String,System.String,System.String,System.String)">
	<summary>
 Save menu Layout
 </summary>
	<param name="menuLayoutStream"></param>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="formAssemblyName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.LoadUserRole(System.String)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRole_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuGroupView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuGroupDescription_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuFormDescription_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuReportView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemMenuReportDescriptionTemplate_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuDashboardPage_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuDashboardPageDescription_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuDashboardPageContent_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuDashboardPageContentDescription_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuFormSection_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserRoleFacade.SystemUserRoleMenuFormSectionDescription_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.TaxFacade.OverrideTaxAmount">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.TaxFacade.ProcessTransactionTaxSummary(System.Data.DataTable,System.Data.DataTable,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Data.DataTable,System.Boolean)">
	<summary>
 Computes the summary of tax amounts for the transaction and it's line items.
 </summary>
	<param name="transactionItemTaxTable">Required parameter containing the line items tax data.</param>
	<param name="transactionTaxSummaryTable">Required parameter that will contain the summed values of both the line items and transaction data.</param>
	<param name="transaction">Required parameter defining what transaction is being processed.</param>
	<param name="transactionTaxTable">Optional parameter containing the transactions tax data.</param>
	<param name="isFromTaxDetail">Optional parameter which is a flag that informs the method that the call came from the tax detail form.</param>
	<returns>Returns a struct object that contains the summed tax and tax amount rate</returns>
	<remarks>
 This function should be whenever the system requires computation of the tax summary. 
 </remarks>
</member><member name="M:Interprise.Facade.Base.TaxFacade.UpdateTaxGroupAmount(System.String,System.Data.DataTable,System.Data.DataTable)">
	<summary>
 Returns the total taxamount and taxamountrate per tax group.
 </summary>
	<param name="currencyCode">Currency Code of the Customer/Supplier/Bank</param>
	<param name="transactionItemTaxDetail"></param>
	<param name="transactionTaxDetail"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.TaxFacade.OnOverrideTaxAmount(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemRecurrenceFacade.CalculateTemporaryOccurrences(System.Data.DataRow,Interprise.Framework.Base.Shared.Delegates.RecurTransaction)">
	<summary>
 Generates the temporary document codes to be processed in the recurring transaction wizard.
 </summary>
	<param name="recurRow"></param>
	<param name="recurDelegate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.PluginManager.PluginFacade.AssemblyName">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.PluginManager.PluginFacade.AssemblyFileVersion">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.GetAssemblyDependencies(System.String,System.Reflection.AssemblyName)">
	<summary>
 Get assembly dependencies, but check's first if the specified assembly was already loaded in the Current Domain.
 </summary>
	<param name="filePath">Assembly path</param>
	<param name="innerAssembly">Assembly to be loaded</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.ExamineFacade(System.Type)">
	<summary>
	</summary>
	<param name="examineType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.GenerateAssemblyID">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.Dispose">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.DeleteMachineAssemblyFile">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.UpdateCustomField">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.ExecuteScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.ExecuteDataDictionaryScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.GetEmbeddedResourceStream(System.String)">
	<summary>
	</summary>
	<param name="filename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.ExecuteBeforeExecutionDDScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.ConvertStreamToString(System.IO.Stream)">
	<summary>
	</summary>
	<param name="stream"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.ExecuteDataDictionaryXML">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.ExecuteUserRoleScript">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.RemovePlugin(System.String)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.RemovePlugin(System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<param name="checkIfExists"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.IsAssemblyInUsed(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.GetPluginAssemblyDependencies">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.PluginManager.PluginFacade.UpdatePluginAssembly(Interprise.Framework.Base.Shared.Structure.AssemblyInformation,Interprise.Framework.Base.Shared.Structure.AssemblyInformation[],Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="pluginAssembly"></param>
	<param name="dependencyAssembly"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Base.PluginManager.MissingModuleException">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.PluginManager.ModuleAlreadyExistsException.AssemblyName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.PluginManager.ModuleAlreadyExistsException.CurrentVersion">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Facade.Base.PluginManager.ModuleAlreadyExistsException.NewVersion">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.PluginManager.ModuleAlreadyExistsException.IsUpGradeVersion">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Base.PluginManager.ModuleAlreadyExistsException">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Interprise.Facade.Base.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Interprise.Facade.Base.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:Interprise.Facade.Base.ListControlFacade.SearchTables">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.ListControlFacade.GetCustomFilteredDataDictionary(System.String[])">
	<summary>
	</summary>
	<param name="tableNames"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.ListControlFacade.ShowOnListColumns">
	<summary>
 Show On List Columns that were defined in User Role's Search Editor
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ListControlFacade.Dispose">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ListControlFacade.GetCompressedSearchResultsData(Interprise.Framework.Base.DatasetComponent.BaseDataset,System.String,System.String,System.Int32,System.Boolean,System.String,Interprise.Framework.Base.DatasetComponent.BaseDataset@,System.Boolean)">
	<summary>
	</summary>
	<param name="tempDataset"></param>
	<param name="tableName"></param>
	<param name="whereClause"></param>
	<param name="recordCount"></param>
	<param name="viewAll"></param>
	<param name="maxRecordsFilter"></param>
	<param name="searchTableDataset"></param>
	<param name="withNoLock"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ListControlFacade.ReadCustomSearchResultsData(System.String,System.String,System.String,System.Int32,System.Boolean,System.String,Interprise.Framework.Base.DatasetComponent.BaseDataset@,System.Boolean)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="sqlQueryCommand"></param>
	<param name="whereClause"></param>
	<param name="recordCount"></param>
	<param name="viewAll"></param>
	<param name="maxRecordsFilter"></param>
	<param name="searchTableDataset"></param>
	<param name="withNoLock"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.AssemblyID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.IsEditorMode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.IsColumnChanged">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DataDictionaryFacade.AutoUpdatePK">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.#ctor(Interprise.Framework.Base.DatasetGateway.DataDictionaryDatasetGateway,System.Boolean)">
	<summary>
 Creates new instance of this class.
 </summary>
	<param name="dataDictionaryDataset">Instance for currentdataset property.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.AddTable(System.String,System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="description"></param>
	<param name="groupName"></param>
	<param name="isImportable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.ValidateColumnLength(System.Data.DataRow)">
	<summary>
 Validates the column length.
 </summary>
	<param name="row">Row to validate.</param>
	<returns>Returns True if validation has no error.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.ValidateColumnName(System.Data.DataRow)">
	<summary>
 Validates the column length.
 </summary>
	<param name="row">Row to validate.</param>
	<returns>Returns True if validation has no error.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.ValidateNumericPrecision(System.Data.DataRow)">
	<summary>
 Validates the Numeric precision. it should be between 1 and 38.
 </summary>
	<param name="row">Row to validate.</param>
	<returns>Returns True if validation has no error.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.ValidateNumericScale(System.Data.DataRow)">
	<summary>
 Validates the numeric scale. it should be between 0 and 20.
 </summary>
	<param name="row">Row to validate</param>
	<returns>Returns True if validation has no error.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.ValidateDefaultValue(System.Data.DataRow)">
	<summary>
 Validates the default value against the DataType.
 </summary>
	<param name="row">Row to validate.</param>
	<returns>Returns True if validation has no error.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.AddDataDictionaryViewScript(System.String,System.String[])">
	<summary>
	</summary>
	<param name="viewName"></param>
	<param name="columnsToInclude"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.AddObject(System.String,Interprise.Framework.Base.Shared.Enum.DatabaseObjectType,System.String)">
	<summary>
	</summary>
	<param name="p_Name"></param>
	<param name="p_type"></param>
	<param name="objectDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.AddView(System.String,System.String,System.String,System.String[])">
	<summary>
	</summary>
	<param name="viewName"></param>
	<param name="viewDescription"></param>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DataDictionaryFacade.SetIsRealTimeCaching(System.Data.DataRow,System.Boolean)">
	<summary>
	</summary>
	<param name="dataRow"></param>
	<param name="isRealTimeCaching"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Base.DataDictionaryFacade">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.StockAllocationFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Supplier.SupplierFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.#ctor(Interprise.Framework.Base.DatasetGateway.Supplier.SupplierDetailDatasetGateway)">
	<summary>
 Constructor. Assigns the UI dataset to the facade dataset.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.AddNewCostingDetailRow(System.String,System.Decimal,System.String,System.String,System.String,System.String)">
	<summary>
 Creates a new SupplierSpecialCostingView row.
 </summary>
	<param name="p_itemCode">The current item's Item Code value.</param>
	<param name="p_maxQuantity">The current item's Maximum Quantity value. Allows fractional value should it be enabled to.</param>
	<param name="p_supplierCode">The current Supplier Code.</param>
	<param name="p_unitMeasureCode">The current item's Unit Measure Code value.</param>
	<param name="p_warehouseCode">The current supplier's Warehouse Code</param>
	<remarks>Used to create a new detail row for the supplier costing details.</remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.AddNewCostingDetailRow(System.String,System.Int32,System.String,System.String,System.String,System.String)">
	<summary>
 Creates a new SupplierSpecialCostingView row.
 </summary>
	<param name="p_itemCode">The current item's Item Code value.</param>
	<param name="p_maxQuantity">The current item's Maximum Quantity value.</param>
	<param name="p_supplierCode">The current Supplier Code.</param>
	<param name="p_unitMeasureCode">The current item's Unit Measure Code value.</param>
	<param name="p_warehouseCode">The current supplier's Warehouse Code</param>
	<remarks>Used to create a new detail row for the supplier costing details.</remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.ApplySupplierClass(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Procedure to apply the supplier class template to the supplier row.
 </summary>
	<param name="classRow">The source class template row.</param>
	<param name="currentRow">The destination supplier row.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.ApplyGLClass(System.Data.DataTable)">
	<summary>
 Procedure to apply the GL class template to the supplier.
 </summary>
	<param name="classTable">The source table of the GL Class template row.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transaction">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.AssignItems(System.String,System.Data.DataRowCollection,System.Data.DataRowView@,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String)">
	<summary>
 Procedure to assign the selected item's defaults.
 </summary>
	<param name="documentCode">The unique code of the document.</param>
	<param name="sourceRows">The source item row from where the line item will be populated.</param>
	<param name="destinationRow">The destination line item row.</param>
	<param name="transaction">The transaction of the document.</param>
	<remarks>This is to populate the InventorySupplier table.</remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.AssignItems(System.String,System.Data.DataRowCollection,System.Data.DataRowView@,System.String)">
	<summary>
 Assigns selected items into its destination row.
 </summary>
	<param name="sourceRows">Selected item row/s (from the item search combo)</param>
	<param name="destinationRow">The container of the sourceRow values. </param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.Add(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to m_newRow a row to a document transaction.
 </summary>
	<param name="supplierRow">The source supplier row.</param>
	<param name="transaction">The transaction of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.AssignSpecialCostingItems(System.String,System.Data.DataRow[],System.Data.DataRowView@,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String)">
	<summary>
 Procedure to assign an item to the supplier promotional table.
 </summary>
	<param name="documentCode">The unique code of the document.</param>
	<param name="sourceRow">The source item row from where the line item will be populated.</param>
	<param name="destinationRow">The destination line item row.</param>
	<param name="transaction">The transaction of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.SupplierTable_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Procedure triggered when a column in the supplier table is triggered.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>This recalculates the available credit for the supplier.</remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.SupplierSpecialCostingMainView_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Procedure triggered when a column in the InventorySupplierPricingLevel table is triggered.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.SupplierFacade.LoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Perform to load multiple resultset
 </summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.#ctor">
	<summary>
 Constructor. 
 </summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Supplier.BaseFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.Supplier.BaseFacade.CurrentBusinessRuleType">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.Supplier.BaseFacade.CurrentTransactionType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.Supplier.BaseFacade.CurrentReportType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.AssignItems(System.String,System.Data.DataRow[],System.Data.DataRowView@,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to assign the selected item's defaults.
 </summary>
	<param name="documentCode">The unique code of the document.</param>
	<param name="sourceRow">The source item row from where the line item will be populated.</param>
	<param name="destinationRow">The destination line item row.</param>
	<param name="transaction">The transaction of the document.</param>
	<remarks>Note: FieldNames of Purchase Orders and Purchase Receipts tables must be the same,
 because this function is shared on Orders and Receipts module.</remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.AssignNonStockItems(System.Data.DataRowView@,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String)">
	<summary>
 Procedure to assign a non stock item to the item grid.
 </summary>
	<param name="destinationRow">The destination line item row.</param>
	<param name="transaction">The transaction of the document.</param>
	<param name="documentCode">The unique code of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.CalculatePricingLevel(System.String,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to calculate promotional pricing.
 </summary>
	<param name="supplierCode">The unique identifier of the supplier.</param>
	<param name="destinationRow">The destination line item row.</param>
	<param name="transaction">The transaction of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.AdjustBaseCost(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to calculate the base cost price of a transaction when the cost or exchange rate is changed.
 </summary>
	<param name="detailRow">The destination line item row.</param>
	<param name="transaction">The transaction of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.CalculateDetailTotals(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Boolean)">
	<summary>
 Procedure to compute the total of the line item row when the quantity or the cost is changed.
 </summary>
	<param name="destinationRow">The destination line item row.</param>
	<param name="transaction">The transaction of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.CalculateSubTotals(Interprise.Framework.Base.Shared.Enum.TransactionType,System.Double@,System.Double@)">
	<summary>
 Procedure to recompute the transaction totals of the document.
 </summary>
	<param name="transaction">The transaction of the document.</param>
	<param name="itemTax">The current item tax of the document.</param>
	<param name="freightTax">The current freight tax of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.ValidateItemCode(System.Data.DataRow)">
	<summary>
 Procedure to validate if the item code entered is valid or not.
 </summary>
	<param name="destinationRow">The destination line item row.</param>
	<returns>If the item code is valid or not.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.AssignSupplierDefaults(Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Procedure to assign the default entries for a transaction.
 </summary>
	<param name="transaction">The transaction of the document.</param>
	<param name="SupplierRow">The row containing the supplier information that will be used to assign the default entries.</param>
	<param name="headerRow">The destination header row.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.PopulateBillToAddress(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Procedure to fill the popuplate the bill to address according to the supplier.
 </summary>
	<param name="SupplierCode">The unique identifier of the supplier.</param>
	<param name="transaction">The transaction of the document.</param>
	<param name="transactionRow">The source row of the address information.</param>
	<param name="headerRow">The destination header row.</param>
	<returns>The address retrieved in string form.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.PopulateShipToAddress(System.Data.DataRow,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to fill the popuplate the warehouse address according to the supplier.
 </summary>
	<param name="headerRow">The destination header row.</param>
	<param name="shipToRow">The source row of the address information</param>
	<param name="transaction">The transaction of the document.</param>
	<returns>The address retrieved in string form.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.AssignWarehouse(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataTable)">
	<summary>
 Procedure to assign a warehouse to the transaction.
 </summary>
	<param name="warehouseCode">The unique identifier of the warehouse.</param>
	<param name="transaction">The transaction of the document.</param>
	<param name="detailTable">The detination detail table. (either SupplierPurchaseOrderDetail or SupplierPurchaseReceiptDetail)</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.Add(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure to add a row to a document transaction.
 </summary>
	<param name="supplierRow">The source supplier row.</param>
	<param name="transaction">The transaction of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.CalculateLandedCost(System.String,System.String,System.Decimal)">
	<summary>
 Procedure to compute the landed cost of a line item.
 </summary>
	<param name="itemCode"></param>
	<param name="supplier"></param>
	<param name="costRate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.AdjustOnOrderStockTotals(System.String,System.String)">
	<summary>
 Procedure to adjust the stock totals when an Purchase Order is entered or a Goods Received is posted.
 </summary>
	<param name="itemCode">The unique identifier of the item to be adjusted.</param>
	<param name="warehouseCode">The unique identifier of the warehouse where the item is located.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Supplier.BaseFacade.PopulateShipFromAddress(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow,System.Data.DataRow,System.String)">
	<summary>
 Procedure to fill the popuplate the ship from address according to the supplier.
 </summary>
	<param name="SupplierCode">The unique identifier of the supplier.</param>
	<param name="transaction">The transaction of the document.</param>
	<param name="transactionRow">The source row of the address information.</param>
	<param name="headerRow">The destination header row.</param>
	<param name="ShipFromCode">The unique identifier of the supplier ship from.</param>
	<returns>The address retrieved in string form.</returns>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Base.Supplier.BaseFacade">
	<summary>
 The base foundation facade of the supplier module.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Customer.NewCustomerDetailFacade.AddCustomer(System.String,System.String,System.Boolean,System.String)">
	<example>
    The following codes shows how to implement <b><i>AddCustomer</i></b> method
    <code lang="VB" title="Adding new customer detail" description="This shows how to setup a new customer">
 Dim m_newCustomerFacade As NewCustomerFacade
 Dim customerCode As String = "001"
 Dim customerName As String = "John Smith"
 Dim isProspect As Boolean
 Dim businessType As String = "Retailing"
 
 Me.m_newCustomerFacade.AddCustomer("001", "John Smith", False, "Retailing")
    </code>
		<code lang="CS" title="Adding new customer detail" description="This shows how to setup a new customer">
 NewCustomerFacade m_newCustomerFacade;
 string customerCode = "001";
 string customerName = "John Smith";
 bool isProspect;
 string businessType = "Retailing";
 
 this.m_newCustomerFacade.AddCustomer("001", "John Smith", false, "Retailing");
    </code>
	</example>
	<summary>Procedure to add new Customer Detail</summary>
</member><member name="M:Interprise.Facade.Base.Customer.NewCustomerDetailFacade.AssignCustomerCountry(System.Data.DataRow)">
	<summary>Procedure to assign country to the customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignCustomerCountry</i></b>
    method 
    <code lang="VB" title="Assigning country in a customer" description="This code shows how to assign a country in a customer">
 Dim m_newcustomerDetailFacade As NewCustomerDetailFacade
 Dim countryRow As DataRow
 
 m_newcustomerDetailFacade.AssignCustomerCountry(countryRow)
    </code>
		<code lang="CS" title="Assigning country in a Customer" description="This code shows how to assign a country in a customer">
 NewCustomerDetailFacade m_newcustomerDetailFacade;
 DataRow countryRow;
 
 m_newcustomerDetailFacade.AssignCustomerCountry(countryRow);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Base.Customer.NewCustomerDetailFacade.AssignDefaultClassTemplate(System.String,System.Boolean)">
	<summary>Procedure to assign Default Class Template to a new Customer</summary>
	<example>
    The following codes shows how to implement <b><i>AssignDefaultClassTemplate</i></b>
    method
    <code lang="VB" title="Assigning default class template" description="This shows how to assign a default class template to new customer">
 Dim m_newCustomerDetailFacade As NewCustomerDetailFacade
 Dim businessType As String = "Wholesaler"
 Dim isAssignCountry As Boolean
 
 Me.m_newCustomerDetailFacade.AssignDefaultClassTemplate("Wholesaler", False)
 </code>
		<code lang="CS" title="Assigning default class template" description="This shows how to assign a default class template to new customer">
 NewCustomerDetailFacade m_newCustomerDetailFacade;
 String businessType = "Wholesaler";
 bool isAssignCountry;
 
 this.m_newCustomerDetailFacade.AssignDefaultClassTemplate("Wholesaler", False);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Base.Customer.NewCustomerDetailFacade.AssignDiscountBand(System.Data.DataRow)">
	<summary>Procudure to assign discount band to the customer.</summary>
	<example>
    The following codes shows how to implement <b><i>AssignDiscountBand</i></b> method 
    <code lang="VB" title="Assigning Discount Band" description="This code shows how to assign a Discount Band by Pricing Level">
 Dim m_newcustomerDetailFacade As NewCustomerDetailFacade
 Dim categoryDiscountRow As DataRow
 
 m_newcustomerDetailFacade.AssignDiscountBand(categoryDiscountRow)
    </code>
		<code lang="CS" title="Assigning Discount Band" description="This code shows how to assign a Discount Band by Pricing Level">
 NewCustomerDetailFacade m_newcustomerDetailFacade;
 DataRow categoryDiscountRow;
 
 m_newcustomerDetailFacade.AssignDiscountBand(categoryDiscountRow);
    </code>
	</example>
	<param name="categoryDiscountRow">The row for the category discount</param>
</member><member name="M:Interprise.Facade.Base.Customer.NewCustomerDetailFacade.AssignGLClassTemplate(System.String)">
	<summary>
 Assigns GL Class template to the customer
 </summary>
	<example>
    The following codes shows how to implement <b><i>AssignGLClassTemplate</i></b>
    method 
    <code lang="VB" title="Assigning GLClassTemplate in a customer" description="This code shows how to assign a GLClassTemplate in a customer">
 Dim m_newCustomerDetailFacade As NewCustomerDetailFacade
 Dim classCode As String = "My Class Code"
 
 Me.m_newCustomerDetailFacade.AssignGLClassTemplate("My Class Code")
    </code>
		<code lang="CS" title="Assigning GLClassTemplate in a customer" description="This code shows how to assign a GLClassTemplate in a customer">
 NewCustomerDetailFacade m_newCustomerDetailFacade;
 string classCode = "My Class Code";
 
 this.m_newCustomerDetailFacade.AssignGLClassTemplate("My Class Code");
    </code>
	</example>
	<param name="classCode">The code that represents the template to be applied</param>
</member><member name="M:Interprise.Facade.Base.Customer.NewCustomerDetailFacade.AssignShipToGLClassTemplate(System.String)">
	<summary>
 Method that assigns GL Class Template to the ShipTo record
 </summary>
	<example>
    The following codes shows how to implement
    <strong><em>AssignShipToGLClassTemplate</em></strong> method 
    <code lang="VB" title="Assigning ShipToGLClassTemplate in a new customer" description="This code shows how to assign a ShipToGLClassTemplate in a new customer">
 Dim m_newCustomerDetailFacade As NewCustomerDetailFacade
 Dim classCode As String = "My Class Code"
 
 Me.m_newCustomerDetailFacade.AssignShipToGLClassTemplate("My ShipTo Class Code")
    </code>
		<code lang="CS" title="Assigning ShipToGLClassTemplate in a new customer" description="This code shows how to assign a ShipToGLClassTemplate in a new customer">
 NewCustomerDetailFacade m_newCustomerDetailFacade;
 string classCode = "My Class Code";
 
 this.m_newCustomerDetailFacade.AssignShipToGLClassTemplate("My ShipTo Class Code");
    </code>
	</example>
	<param name="classCode">A <strong>String</strong> that represents the code of the GL class template to be assigned</param>
</member><member name="M:Interprise.Facade.Base.Customer.NewCustomerDetailFacade.AssignShipToCountry(System.Data.DataRow)">
	<summary>Procedure to assign country to new customer shipto</summary>
	<example>
    The following codes shows how to implement <b><i>AssignShipToCountry</i></b>
    method 
    <code lang="VB" title="Assigning shipto country in a new Customer" description="This code shows how to assign a country in a customer">
 Dim m_newcustomerDetailFacade As NewCustomerDetailFacade
 Dim countryRow As DataRow
 
 m_newcustomerDetailFacade.AssignShipToCountry(countryRow)
    </code>
		<code lang="CS" title="Assigning shipto country in a new Customer" description="This code shows how to assign a country in a customer">
 NewCustomerDetailFacade m_newcustomerDetailFacade;
 DataRow countryRow;
 
 m_newcustomerDetailFacade.AssignCustomerCountry(countryRow);
    </code>
	</example>
</member><member name="M:Interprise.Facade.Base.Customer.NewCustomerDetailFacade.AssignContact(System.String,System.String)">
	<example>
    The following codes shows how to implement <b><i>AssignContact</i></b> method
    <code lang="VB" title="Assigning New Contact" description="This shows how to assign new contact to customer">
 Dim m_newCustomerDetailFacade As NewCustomerDetailFacade
 Dim contactName As String
 Dim tableName As String
 
 Me.m_newCustomerDetailFacade.AssignContact("James Smith", Customer.TableName)
    </code>
		<code lang="CS" title="Assigning New Contact" description="This shows how to assign new contact to customer">
 NewCustomerDetailFacade m_newCustomerDetailFacade;
 String contactName;
 String tableName;
 
 this.m_newCustomerDetailFacade.AssignContact("James Smith", Customer.TableName);
    </code>
	</example>
	<summary>Procedure to add a contact in a table to a new customer</summary>
</member><member name="M:Interprise.Facade.Base.Customer.CustomerGLClassTemplateFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.TargetListFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public Overridable</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.TargetListFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.TargetListFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.TargetListFacade.#ctor">
	<summary>
 Create an Instance of this class.
 </summary>
	<remarks> Empty constructor </remarks>
</member><member name="M:Interprise.Facade.Base.CRM.TargetListFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.TargetListDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_targetListDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.TargetListFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.TargetListFacade.AddTargetList(System.String)">
	<summary>Adds a TargetList based on specified values.</summary>
	<param name="targetListDescrtiption">The description for the new target list.</param>
</member><member name="E:Interprise.Facade.Base.CRM.OpportunityFacade.OpportunityStatusChanged">
	<summary>
 Triggers after opportunity status is changed
 </summary>
	<param name="p_status"> The new opportunity status </param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.OpportunityFacade.ErrorRaised">
	<summary>
 Event triggered when an error occurs in column changed event of opportunity and
 opportunityview tables.
 </summary>
	<example>
		<code lang="VB" title="ErrorRaised">
 Protected Overridable Sub m_opportunityFacade_OnErrorRaised(ByVal ex As System.Exception) Handles m_opportunityFacade.ErrorRaised
    'Just show the error message using any message box user interface you have.
    MessageWindow.Show(ex)
 End Sub
    </code>
		<code lang="CS" title="OnErrorRaised">
 Private void m_opportunityFacade_OnErrorRaised(System.Exception ex)
 {
    //Just show the Error message using any message box user Interface you have.
    MessageWindow.Show(ex);
 }
    </code>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.OpportunityFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public Overridable</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.OpportunityFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.OpportunityFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.OpportunityDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_opportunityDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.CRMOpportunity_OnOpportunityColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Performs necessary change for each value changed
 Temporarily remove handler to prevent infinite call
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.CRMOpportunityView_OnOpportunityColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Performs necessary change for each value changed
 Temporarily remove handler to prevent infinite call
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.SetRevenue(System.Data.DataColumnChangeEventArgs)">
	<summary>
 Sets the base revenue based on homecurrency and revenue rate
 </summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.SetEstRevenue(System.Data.DataColumnChangeEventArgs)">
	<summary>
 Sets the base estimated revenue based on homecurrency and estimated revenue rate
 </summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.AddOpportunity(System.String,System.String,System.String,System.String)">
	<summary>
 Procedure to Add an opportunity to the table.
 </summary>
	<example>
		<code lang="VB" title="AddOpportunity">
 Protected Overridable Sub CreateOpportunity(ByVal customerCode As String, ByVal contactCode As String)
    Dim opportunityFacade As New Interprise.Facade.Base.CRM.OpportunityFacade(New Interprise.Framework.Base.DatasetGateway.CRM.OpportunityDatasetGateway)
    
    'A call to add an opportunity record to table.
    'Each time you call this method, it will clear all opportunity rows.
    'There should be only one record in each maintenance form.
    opportunityFacade.AddOpportunity(customerCode, contactCode)
    
    If String.IsNullOrEmpty(contactCode) Then
        'If there's no contact specified, call this function to link the new opportunity to the default contact.       
        opportunityFacade.SetCustomerDefaultContact()
    End If
    
    'Add any additional codes after this call
 
 End Sub
    </code>
		<code lang="CS" title="AddOpportunity">
 private void CreateOpportunity(string customerCode, string contactCode)
 {
    Interprise.Facade.Base.CRM.OpportunityFacade opportunityFacade = new Interprise.Facade.Base.CRM.OpportunityFacade(new Interprise.Framework.Base.DatasetGateway.CRM.OpportunityDatasetGateway());
 
    //A call to add an opportunity record to table.
    //Each time you call this method, it will clear all opportunity rows.
    //There should be only one record in each maintenance form.
    opportunityFacade.AddOpportunity(customerCode, contactCode);
 
    if (string.IsNullOrEmpty(contactCode))
    {
        //If there's no contact specified, call this function to link the new opportunity to the default contact.       
        opportunityFacade.SetCustomerDefaultContact();
    }
 
    //Add any additional codes after this call
 
 }
    </code>
	</example>
	<param name="customerCode"> The customer to link </param>
	<param name="contactCode"> The contact of the customer to link </param>
	<param name="waveCode">The wave linked for this new opportunity</param>
	<param name="p_opportunityName"> The name of the opportunity </param>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.UpdateOpportunityHistory(Interprise.Framework.Base.DatasetComponent.CRM.OpportunityDataset.CRMOpportunityViewDataTable)">
	<summary>Procedure to add history recored for OpportunityView table.</summary>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.DoUpdateOpportunityHistory(System.Data.DataTable)">
	<summary>
 Procedure to add the row to the history table.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.SetCustomerDefaultContact">
	<summary>
 Sets the default contact for the current customer
 </summary>
	<example>
		<code lang="VB" title="SetCustomerDefaultContact">
 Protected Overridable Sub InitializeCustomerChange(ByVal newCustomerode  As String)
    'Link the opportunity by the new customer
    Me.m_oppotunityFacadel.SetCustomerDefaultContact()
    
    'Add any codes here relating to new customer
           
 End Sub
    </code>
		<code lang="CS" title="SetCustomerDefaultContact">
 Private void InitializeCustomerChange(String newCustomerode)
 {
    //Link the opportunity by the New customer
    this.m_oppotunityFacadel.SetCustomerDefaultContact();
 
    //Add any codes here relating To New customer
 
 }
    </code>
	</example>
</member><member name="M:Interprise.Facade.Base.CRM.OpportunityFacade.AssignDefaultValuesByEntity(System.Data.DataRow)">
	<summary>Procedure to auto assign default values whenever an entity has changed.</summary>
	<param name="opportunityRow">The Opportunity row to be used.</param>
</member><member name="P:Interprise.Facade.Base.CRM.NoteFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.NoteFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.NoteFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.NoteFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.NoteDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_noteDataset"> The note dataset to use </param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.NoteFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.NoteFacade.AddNote(System.String,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Boolean)">
	<summary>Procedure to add a note using the specified values.</summary>
	<example>
		<code lang="VB" title="AddNote">
 Protected Overridable Sub AddNoteToCustomer(ByVal customerCode As String, ByVal contactCode As String)
 
 Dim noteFacade As New Interprise.Facade.Base.CRM.NoteFacade(New Interprise.Framework.Base.DatasetGateway.CRM.NoteDatasetGateway)
 
 noteFacade.AddNote(customerCode, contactCode, TransactionType.CustomerContact)
 
 'Add any additional codes after this call
    </code>
		<code lang="CS" title="AddNote">
 private void AddNoteToCustomer(string customerCode, string contactCode) {
    Interprise.Facade.Base.CRM.NoteFacade noteFacade = new Interprise.Facade.Base.CRM.NoteFacade(new Interprise.Framework.Base.DatasetGateway.CRM.NoteDatasetGateway());
    
    noteFacade.AddNote(customerCode, contactCode, TransactionType.CustomerContact);
    // Add any additional codes after this call   
 }
    </code>
	</example>
	<param name="entityCode">The owner of this new note.</param>
	<param name="contactCode">The contact linked for this new note.</param>
	<param name="parentType">The type of note.</param>
	<param name="isDocumentManagement">obsolete.</param>
</member><member name="M:Interprise.Facade.Base.CRM.NoteFacade.Validate(System.String@,System.Boolean)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="message"></param>
	<param name="isRejectNew"></param>
	<returns>True if validate is successful. False otherwise</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="T:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.BeginSendEmailDelegate">
	<summary>
 Delegate used to send the email.
 </summary>
	<param name="senderAddress">The email address that will receive the mail</param>
	<param name="emailMessages">The content of the email.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.BeforeSendEmail">
	<summary>
 Event triggered before sending of the email.
 </summary>
</member><member name="E:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SendEmailCompleted">
	<summary>
 Event triggered when the email is completed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AfterRetrieveEmail">
	<summary>
 Event triggered after emails are retrieved from email server.
 </summary>
	<remarks>An option to either let the retrieved emails merge to current dataset or skip merging.</remarks>
	<example>
		<code lang="VB" title="AfterRetrieveEmail">
 Protected Overridable Sub m_emailMessageFacade_AfterRetrieveEmail(ByVal emailAccountCode As String, ByRef byPassDatasetMerging As Boolean) Handles m_emailMessageFacade.AfterRetrieveEmail
   'Handle this event only when you need to override merging of retrieved emails to the current list of emails.
 
   'This one line of code will override merging.
   byPassDatasetMerging = True
   
   'Usually a call to a method, which will refresh the list of emails, will take place here.
   Me.RefreshEmailList() 'A possible method to refresh the list.
   
   'You could also place a code to check the number of unread emails here.    
   
 End Sub
    </code>
		<code lang="CS" title="AfterRetrieveEmail">
 private void m_emailMessageFacade_AfterRetrieveEmail(string emailAccountCode, ref bool byPassDatasetMerging) {
   // Handle this event only when you need to override merging of retrieved emails to the current list of emails.
   // This one line of code will override merging.
   byPassDatasetMerging = true;
   this.RefreshEmailList();
   // A possible method to refresh the list.
   // You could also place a code to check the number of unread emails here.    
 }
    </code>
	</example>
</member><member name="E:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AfterSendPendingEmails">
	<summary>
	</summary>
	<param name="emailAccountCode"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.PromptServerPassowrd">
	<summary>
 Event triggered to prompt end user for their email server password. 
 Use this event to create an interface to prompt user for server password.
 </summary>
	<remarks>Triggers only when the "Remember Password" is unchecked. Applies for both incoming and outgoing server.</remarks>
	<example>
		<para><font color="blue" size="2">Private</font>
			<font color="blue" size="2">Sub</font>
			<font size="2">ShowServerPassword(</font><font color="blue" size="2">ByVal</font>
			<font size="2">sendOrReceive</font>
			<font color="blue" size="2">As</font>
			<font size="2">Framework.Base.Shared.Enum.EmailSendAndReceive,</font>
			<font color="blue" size="2">ByVal</font>
			<font size="2">emailAccountRow</font>
			<font color="blue" size="2">As</font>
			<font size="2">System.Data.DataRow,</font>
			<font color="blue" size="2">ByVal</font>
			<font size="2">cancelArg</font>
			<font color="blue" size="2">As</font>
			<font size="2">System.ComponentModel.CancelEventArgs)</font></para>
		<para><font color="blue" size="2">If</font>
			<font size="2">emailAccountRow</font>
			<font color="blue" size="2">IsNot</font>
			<font color="blue" size="2">Nothing</font>
			<font color="blue" size="2">Then</font></para>
		<para><font color="blue" size="2">Dim</font>
			<font size="2">serverPassword</font>
			<font color="blue" size="2">As</font>
			<font color="blue" size="2">New</font>
			<font size="2">Interprise.Presentation.Component.CRM.Connect.ServerPassword.ServerPasswordForm(emailAccountRow)</font></para>
		<para>serverPassword.SendOrReceive = sendOrReceive</para>
		<para><font color="blue" size="2">If</font>
			<font color="blue" size="2">Not</font>
			<font size="2">serverPassword.ShowDialog = DialogResult.OK</font>
			<font color="blue" size="2">Then</font></para>
		<para><font size="2">cancelArg.Cancel =</font>
			<font color="blue" size="2">True</font></para>
		<para><font color="blue" size="2">End</font>
			<font color="blue" size="2">If</font></para>
		<para><font color="blue" size="2">End</font>
			<font color="blue" size="2">If</font></para>
		<para><font color="blue" size="2">End</font>
			<font color="blue" size="2">Sub</font></para>
	</example>
</member><member name="E:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.ErrorRaised">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.IsFromEntity">
	<summary>Not yet functional</summary>
</member><member name="P:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AutoCheckRememberPassword">
	<summary>Not yet functional</summary>
</member><member name="P:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.IsSendingOrReceiving">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.#ctor">
	<summary>
 Create an Instance of this class.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.Connect.EMailMessageDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_emailMessageDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AddEmailAccount(System.String,System.String,Interprise.Framework.Base.Shared.Enum.EmailAccountType,System.Boolean)">
	<summary>
 Adds one email account using default values.
 </summary>
	<param name="ownerCode">The owner for this email account. Either a team or a user acount.</param>
	<param name="emailAddress">The unique email address specified for the new email account</param>
	<param name="accountType">One of the three email server type: POP3, IMAP or HTTP.</param>
	<param name="isTeamEmail">Identifies if this is used as a team email account.</param>
	<returns>Returns the new email account data row.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.GetUserEmailAccount(System.String)">
	<summary>
 Procedure to retrieve an email account row.
 </summary>
	<param name="emailAccountCode">The email account to retrieve.</param>
	<returns>The email account row</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.GetEmailAccountRow(System.String)">
	<summary>
	</summary>
	<param name="emailaccountcode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.GetEmailAccountToUse(Interprise.Framework.Base.Shared.Enum.EmailAccountType)">
	<summary>
	</summary>
	<param name="serverType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.IsIncomingPrivateByDefault(System.String)">
	<summary>
 Function to check if "Incoming emails are marked as private by default" is
 enabled.
 </summary>
	<param name="emailaccountCode">The email account to use for this process.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.IsOutgoingPrivateByDefault(System.String)">
	<summary>
 Function to check if "Outgoing emails are marked as private by default" is
 enabled.
 </summary>
	<param name="emailaccountCode">The email account to use for this process.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.LoadUserEmailAccount(System.String,System.String,System.Boolean)">
	<summary>
 Procedure to retrieve the email accounts from the database.
 </summary>
	<param name="emailAccountCode">The email account to use for this process.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.LogOnToIncomingBeforeSendingEmail(System.String)">
	<summary>
	</summary>
	<param name="emailAccountCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SendAndReceive(System.String)">
	<summary>
 Procedure to send pending emails and retreive incoming emails.
 </summary>
	<param name="emailAccountCode">The email account to use for sending and retrieving emails.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.RetrieveEmails(System.String)">
	<summary>
 Procedure to retrieve incoming emails.
 </summary>
	<param name="emailAccountCode">The email account to use for retrieving emails.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.RetrieveCompressedEmails(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="connectionString"></param>
	<param name="emailAccountCode"></param>
	<param name="userCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SendEmail(System.String,System.String[])">
	<summary>
 Procedure to send an email.
 </summary>
	<example>
		<code lang="VB" title="SendEmail">
 Protected Overridable Sub SendEmail(ByVal emailAccountCode As String, ByVal myEmailContent As String)
    Dim emailFacade As New Interprise.Facade.Base.CRM.Connect.EMailMessageFacade
    Dim emailMessage As New Interprise.Licensing.Base.Connect.EMailMessage
    Try
        'Initialize email info.
        emailMessage.SetMimeFromText(myEmailContent)
        emailMessage.FromName = "John Carlo"
        emailMessage.FromAddress = "johncarlo@email.com"
        emailMessage.BounceAddress = "johncarlo@email.com"
        emailMessage.ToAddress = "info@company.com"
        emailMessage.CcAddress = "info@anothercompany.com"
        emailMessage.BccAddress = "myboss@email.com"
        emailMessage.ReplyTo = "johncarlo@email.com"
        emailMessage.Subject = "Business Agenda"
        emailMessage.Priority = Interprise.Licensing.Base.Shared.Enum.MessagePriority.Normal
        
        'Add a header field "OriginalMessageCode" to email object.
        'This is a requirement for future reference of this email.
        emailMessage.AddHeaderField("OriginalMessageCode", System.Guid.NewGuid.ToString)
        
        'Do the actual sending
        'The email account code is the unique ID of the email account used for sending email.
        emailFacade.SendEmail(emailAccountCode, emailMessage.GetMime)
    Catch ex As System.Exception
        'Handle error here.
    
    Finally
        emailFacade.Dispose()
        emailMessage.Dispose()
    End Try
 End Sub
    </code>
		<code lang="CS" title="SendEmail">
 private void SendEmail(string emailAccountCode, string myEmailContent) {
        Interprise.Facade.Base.CRM.Connect.EMailMessageFacade emailFacade = new Interprise.Facade.Base.CRM.Connect.EMailMessageFacade();
        Interprise.Licensing.Base.Connect.EMailMessage emailMessage = new Interprise.Licensing.Base.Connect.EMailMessage();
        try {
            // Initialize email info.
            emailMessage.SetMimeFromText(myEmailContent);
            emailMessage.FromName = "John Carlo";
            emailMessage.FromAddress = "johncarlo@email.com";
            emailMessage.BounceAddress = "johncarlo@email.com";
            emailMessage.ToAddress = "info@company.com";
            emailMessage.CcAddress = "info@anothercompany.com";
            emailMessage.BccAddress = "myboss@email.com";
            emailMessage.ReplyTo = "johncarlo@email.com";
            emailMessage.Subject = "Business Agenda";
            emailMessage.Priority = Interprise.Licensing.Base.Shared.Enum.MessagePriority.Normal;
            // Add a header field "OriginalMessageCode" to email object.
            // This is a requirement for future reference of this email.
            emailMessage.AddHeaderField("OriginalMessageCode", System.Guid.NewGuid.ToString);
            // Do the actual sending
            // The email account code is the unique ID of the email account used for sending email.
            emailFacade.SendEmail(emailAccountCode, emailMessage.GetMime);
        }
        catch (System.Exception ex) {
            // Handle error here.
        }
        finally {
            emailFacade.Dispose();
            emailMessage.Dispose();
        }
    }
    </code>
	</example>
	<param name="emailAccountCode">The email account to use for sending email.</param>
	<param name="emailMessages">An array of emails stored in a mime string.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SendPendingEmails(System.String)">
	<summary>Procedure to send pending emails.</summary>
	<remarks>Pending emails in outbox folder.</remarks>
	<param name="emailAccountCode">The email address to use for sending pending emails.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SendPendingEmails(System.String,System.String)">
	<summary>Procedure to send pending emails.</summary>
	<remarks>Pending emails in outbox folder.</remarks>
	<param name="emailAccountCode">The email address to use for sending pending emails.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.ProcessDefaultEmailAccount(System.String)">
	<summary>
 Sets, automatically, user's or team's default email account
 </summary>
	<param name="ownerCode">The team or user entity</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SetDefaultEmail(System.String,System.String)">
	<summary>
 Sets user or team default email account based on given email account.
 </summary>
	<param name="ownerCode">The team or user entity</param>
	<param name="emailAccountCode">The would be default email account. This email account must be active.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.VerifyOutgoingServerConnection(System.String)">
	<summary>Function to check if the outgoing email server is available.</summary>
	<param name="emailAccountCode">The email account to use.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.ProcessEmail(System.String,System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.EMailStatus,System.String@,System.Boolean,System.Boolean)">
	<summary>
 Procedure to upload the email to the database.
 </summary>
	<param name="emailAccountCode">The email address.</param>
	<param name="mimeMessage">The message body of the email.</param>
	<param name="ownerCode">The author of the email.</param>
	<param name="folderName">The destination folder.</param>
	<param name="status">The status of the email</param>
	<param name="messageCode">The message code.</param>
	<param name="isPrivate">Tag as Private Email</param>
	<param name="isUseWeb">Process using Website</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AddMessageHeader(System.String,Interprise.Licensing.Base.Connect.EMailMessage,System.String,System.String,Interprise.Framework.Base.Shared.Enum.EMailStatus,System.Boolean@,System.Boolean,System.Boolean)">
	<summary>
 Procedure to create a message header row.
 </summary>
	<param name="emailAccountCode">The email address.</param>
	<param name="emailMessage">The content of the email.</param>
	<param name="messageCode">The message code.</param>
	<param name="folderName">The destination folder.</param>
	<param name="status">The status of the email.</param>
	<param name="isNew">Tag for new MessageHeader.</param>
	<param name="isPrivate">Tag as Private Email</param>
	<param name="isUseWeb">Process using Website</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AddMessageAttachment(Interprise.Licensing.Base.Connect.EMailMessage,System.String)">
	<summary>
 Procedure to add a message attachment.
 </summary>
	<param name="emailMessage">The content of the email.</param>
	<param name="messageCode">The message code of the email.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AddMessageBody(Interprise.Licensing.Base.Connect.EMailMessage,System.String,System.Boolean)">
	<summary>
 Procedure to add a message body.
 </summary>
	<param name="emailMessage">The content of the email.</param>
	<param name="messageCode">The message code of the email.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AttachEmailToEntity(System.String,System.String,System.String,System.String)">
	<summary>
 Procedure to assign an entity (supplier, customer, etc...) to the email.
 </summary>
	<param name="entityCode">The unique identification code of the entity</param>
	<param name="contactcode">The contact code assigned to the entity.</param>
	<param name="messageCode">The messagecode of the email.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.DeleteEmail(System.String[],System.Boolean)">
	<summary>
	</summary>
	<param name="messageCodes"></param>
	<param name="deletePermanently"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.DeleteMessageAttachment(Interprise.Licensing.Base.Connect.EMailMessage,System.String)">
	<summary>
 Removes the deleted message attachment in the database
 </summary>
	<param name="emailMessage"></param>
	<param name="messageCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.GetRecipientEntities(Interprise.Licensing.Base.Connect.EMailMessage,System.Boolean,System.String)">
	<summary>
 Gets the entities/contacts having the same email address
 </summary>
	<param name="emailMessage">The email address to evaluate</param>
	<returns>Entities and contacts</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.GetEmailHeader(System.String)">
	<summary>
	</summary>
	<param name="messageCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.GetEmailBody(System.String)">
	<summary>
 Procedure to retrieve the content of an email.
 </summary>
	<returns>The actual email message in string</returns>
	<example>
		<code lang="VB" title="GetEmailBody">
 For Each emailRow As DataRow In emailDatasetGateway.ConnectMessageHeader.Rows       
   'Create a variable to hold the email content.
   Dim emailContent As String
   emailContent = emailfacade.GetEmailBody(CStr(IsNull(emailRow(emailDatasetGateway.ConnectMessageHeader.MessageCode))))
   
   'Create an email object using the email content.
   Dim emailObject As Interprise.Licensing.Base.Connect.EMailMessage
   emailObject.SetFromMimeText(emailContent)
   
   'Handle the email object here.
   
 Next
    </code>
		<code lang="CS" title="GetEmailBody">
 foreach (DataRow emailRow in emailDatasetGateway.ConnectMessageHeader.Rows) {
   // Create a variable to hold the email content.
   string emailContent;
   emailContent = emailfacade.GetEmailBody(IsNull(emailRow(emailDatasetGateway.ConnectMessageHeader.MessageCode)).ToString());
   // Create an email object using the email content.
   Interprise.Licensing.Base.Connect.EMailMessage emailObject;
   emailObject.SetFromMimeText(emailContent);
   // Handle the email object here.
 }
    </code>
	</example>
	<param name="messageCode">The message code of the email.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.GetEmailBodyRow(System.String)">
	<summary>
	</summary>
	<param name="messageCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.IsEmailSending(System.String[])">
	<summary>
	</summary>
	<param name="messageCodes"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.IsDraftMessage(System.String)">
	<summary>Function to check if an email is a draft email</summary>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.IsUnreadEmail(System.String)">
	<summary>
	</summary>
	<param name="messageCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.MarkAllEmailAsRead(System.Boolean)">
	<summary>Marks all emails as read or unread.</summary>
	<param name="read">True to mark emails as read. False to mark as unread.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.MarkEmailAsRead(System.Boolean,System.String[])">
	<summary>Marks an array of emails as read or unread.</summary>
	<param name="read">True to mark emails as read. False to mark as unread.</param>
	<param name="messageCodes">The array of emails to mark.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SetAllEmailStatus(Interprise.Framework.Base.Shared.Enum.EMailStatus)">
	<summary>Set status of all emails to either read, unread, forwarded, replied, etc.</summary>
	<param name="status">The status use to change to all emails' status</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SetEmailStatus(Interprise.Framework.Base.Shared.Enum.EMailStatus,System.String[])">
	<summary>
 Set status of an array of emails to either read, unread, forwarded, replied,
 etc.
 </summary>
	<param name="status">The status use to change to all emails' status</param>
	<param name="messageCodes">An array of emails to change status.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SetEmailPrivacy(System.String[],System.Boolean)">
	<summary>Set's an array of emails to either private or public.</summary>
	<param name="messageCodes">The array of emails to be changed.</param>
	<param name="isPrivate">True to set as private. False to set as public email.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.GetHeaderTemplate(System.String,System.String,System.DateTime,System.String,System.String)">
	<summary>
 Function to get the template used for forwarded and replied emails. Inset this
 template at the beginning of email message.  
 </summary>
	<param name="fromName">The sender's name</param>
	<param name="fromAddress">The sender's email address</param>
	<param name="dateSent">The date when the email is received.</param>
	<param name="recipients">The recepient's email address.</param>
	<param name="subject">The email's subject.</param>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.AddCustomFolder(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="emailAccountCode"></param>
	<param name="parentFolderCode"></param>
	<param name="folderName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.SaveToFolder(System.String,System.String,Interprise.Framework.Base.Shared.Enum.EMailStatus,System.String[]@,System.String[])">
	<summary>
 Procedure to save an email to a folder.
 </summary>
	<param name="emailAccountCode">The email address.</param>
	<param name="folderName">The destination of the email.</param>
	<param name="status">The default email status.</param>
	<param name="messageCodes">The array of unique id's of to be created messages.</param>
	<param name="mimeDraftMessages">The email message.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.CBESaveToFolder(System.String,System.String,Interprise.Framework.Base.Shared.Enum.EMailStatus,System.String,System.Boolean,System.String[]@,System.String[])">
	<summary>
 Procedure to save an email to a folder.
 </summary>
	<param name="emailAccountCode">The email address.</param>
	<param name="folderName">The destination of the email.</param>
	<param name="status">The default email status.</param>
	<param name="UserCode">The Email Address UserCode</param>
	<param name="isPrivate">If Private Email</param>
	<param name="messageCodes">The array of unique id's of to be created messages.</param>
	<param name="mimeDraftMessages">The email message.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.MoveToFolder(System.String,System.String,Interprise.Framework.Base.Shared.Enum.EMailStatus,System.String[])">
	<summary>
 Procedure to move an email to a folder.
 </summary>
	<param name="emailAccountCode">The email account to use</param>
	<param name="folderCode">The destination folder.</param>
	<param name="status">The email status.</param>
	<param name="messageCodes">The email messages to move.</param>
	<returns>True if move is successful. False otherwise</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.ValidateCustomFolder(System.String)">
	<summary>
	</summary>
	<param name="folderCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.Connect.EMailMessageFacade.ValidateEmailAddress(System.String)">
	<summary>Not yet functional.</summary>
</member><member name="P:Interprise.Facade.Base.CRM.DocumentFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.DocumentFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.DocumentFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.DocumentFacade.ParentType">
	<summary>
 Gets or sets the parent type used to create documents.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.DocumentDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_documentDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.InitializeRootFolder(Interprise.Framework.Base.Shared.Enum.DocumentDisplayMode)">
	<summary>
 Sets the root folder for the document.
 </summary>
	<param name="displayMode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.AddFolder(System.String,System.String,System.Byte[],System.String,System.String,System.Boolean)">
	<summary>
 Procedure to add a folder to the document tree.
 </summary>
	<param name="p_parentCode">The parent directory of the folder.</param>
	<param name="p_folderName">The name of the folder to be added.</param>
	<param name="p_folderImage">The image of the folder.</param>
	<param name="p_entityCode">The entity code where the folder will be assiged to.</param>
	<param name="p_contactCode">The contact of the entity.</param>
	<param name="p_isDocumentManagement">Determines if the add of the folder came from the document management form.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.AssignDocument(System.Boolean,System.String,System.Data.DataRow,System.String,System.Byte[],System.String,System.String,System.String,System.Boolean)">
	<summary>
 Procedure used when assigning a document 
 </summary>
	<param name="isNew"></param>
	<param name="parentCode"></param>
	<param name="currentRow"></param>
	<param name="fileFullName"></param>
	<param name="fileByteArray"></param>
	<param name="fileType"></param>
	<param name="entityCode"></param>
	<param name="contactCode"></param>
	<param name="isDocumentManagement"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.AssignDocument(System.Boolean,System.Data.DataRow,System.Data.DataRow,System.String,System.String,System.String)">
	<summary>
 Procedure used when assigning a document from CRM Document Management
 </summary>
	<param name="isNew">Determines if this is a new document.</param>
	<param name="currentRow"></param>
	<param name="newRow"></param>
	<param name="parentFolder"></param>
	<param name="entityCode">The entity where the file is assigned to.</param>
	<param name="contactCode">The entity where the contact is assigned to.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.AssignDocument(System.Data.DataRow,System.String)">
	<summary>
 Procedure used when copying a folder or file to a folder
 </summary>
	<param name="p_sourceRow">The source of the folder.</param>
	<param name="p_targetParentCode">The target of the folder.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.AssignEntityData(System.Boolean,System.Data.DataRow,System.String,System.String,System.String,System.String)">
	<summary>
 Procedure to assign the entity to the CRMDocumentEntity table.
 </summary>
	<param name="p_isNew">Determines if the entity is to be added.</param>
	<param name="p_currentRow">The source row of the entity.</param>
	<param name="p_entityCode">The unique of the entity.</param>
	<param name="p_contactCode">The contact assigned to the entity.</param>
	<param name="p_parentCode"></param>
	<param name="p_DocumentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.AssignDocumentData(System.Boolean,System.String,System.Byte[],System.String)">
	<summary>
 Procedure to assign the document to the CRMDocument table.
 </summary>
	<param name="p_isnew">Determines if the document is to be added.</param>
	<param name="p_documentCode">The code of the document.</param>
	<param name="p_fileData">The content of the file.</param>
	<param name="p_parentCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.LoadLiveSupportDocument(System.String,System.String,Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
	</summary>
	<param name="activityCode"></param>
	<param name="criteria"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.LoadDocumentData(System.String)">
	<summary>
 Procedure to retrieve the document data from the database.
 </summary>
	<param name="documentCode">The document code to be retrieved.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.GetDocDataRow(System.Data.DataRow[]@,System.String)">
	<summary>
 Retrieves from the database the DataRows based on the document code.
 </summary>
	<param name="p_tempRows">The rows that will be returned.</param>
	<param name="p_documentCode">The document to be searched.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.GetDocumentDataRow(System.String)">
	<summary>
 Retrieves a DataRow based on a document code.
 </summary>
	<param name="p_documentCode">The document to be searched.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.GetDocumentDataRow(System.String[])">
	<summary>
 Retrieves DataRows based on a document code.
 </summary>
	<example>
		<code lang="VB" title="GetDocumentDataRow">
 Dim documentData As DataRow() = {}
 
 'Get the document data
 documentData = documentFacade.GetDocumentDataRow(documentCodes)
 
 For Each document As DataRow In documentData
    Dim Data As Byte() = DirectCast(document(CRMDOCUMENTDATA_DATA_COLUMN), Byte())
 
    'process actual file
 Next
    </code>
		<code lang="CS" title="GetDocumentDataRow">
 DataRow[] documentData;
 {
    // Get the document data  
    documentData = documentFacade.GetDocumentDataRow(documentCodes);
    
    foreach (DataRow document in documentData) {
        byte[] Data;
        document(CRMDOCUMENTDATA_DATA_COLUMN);
        Byte();
        // process actual file
    }
 }
    </code>
	</example>
	<param name="p_documentCode">The document to be searched.</param>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.OpenFile(System.Data.DataRow)">
	<summary>
 Procedure to execute a file.
 </summary>
	<example>
		<code lang="VB" title="OpenFile">
 Dim documentDataset As New Interprise.Framework.Base.DatasetGateway.CRM.DocumentDatasetGateway
 Dim documentFacade As New Interprise.Facade.Base.CRM.DocumentFacade(documentDataset)
 
 'Open all documents in a dataset
 For Each document As DataRow In documentDataset.CRMDocumentView.Rows
    'Check if document is not a folder
    If String.Compare(CStr(document(documentDataset.CRMDocumentView.TypeColumn)), "Folder", True) &lt;&gt; 0 Then
        documentFacade.OpenFile(document)
    End If
 Next
    </code>
		<code lang="CS" title="OpenFile">
 Interprise.Framework.Base.DatasetGateway.CRM.DocumentDatasetGateway documentDataset = New Interprise.Framework.Base.DatasetGateway.CRM.DocumentDatasetGateway();
 Interprise.Facade.Base.CRM.DocumentFacade documentFacade = New Interprise.Facade.Base.CRM.DocumentFacade(documentDataset);
 
 //Open all documents In a dataset
 foreach (DataRow document In documentDataset.CRMDocumentView.Rows) {
    //Check If document Is Not a folder
    If (String.Compare((String)document(documentDataset.CRMDocumentView.TypeColumn), "Folder", True) != 0)
    {
        documentFacade.OpenFile(document);
    }
 }
    </code>
	</example>
	<param name="documentRow">The actual file in document data row.</param>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.IsFileExisting(System.Boolean,System.String,System.String,System.String,System.String)">
	<summary>
 Procedure to check if the file already exists in the database.
 </summary>
	<param name="isDocumentManagement">Determines if the call came from the document management form.</param>
	<param name="parentFolder">The folder to check.</param>
	<param name="fullFileName">The filename to check.</param>
	<param name="entityCode">The entity code where the file is assigned.</param>
	<param name="contactCode">The contact assigned to the entity.</param>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.GetDocumentFileName(System.Data.DataRow)">
	<summary>
 Retrieves the document file name from a row.
 </summary>
	<example>
		<code lang="VB" title="GetDocumentFileName">
 Dim documentDataset As New Interprise.Framework.Base.DatasetGateway.CRM.DocumentDatasetGateway
 Dim documentFacade As New Interprise.Facade.Base.CRM.DocumentFacade(documentDataset)
 
 Dim documentNames As New ListBox
 Dim folderNames As New ListBox
 
 
 documentNames.Items.Clear()
 folderNames.Items.Clear()
 
 'Get all document names from dataset
 For Each document As DataRow In documentDataset.CRMDocumentView.Rows
    'Assign a document to a variable
    Dim documentName As String = documentFacade.GetDocumentFileName(document)
 
    'Check if document is a folder
    If String.Compare(CStr(document(documentDataset.CRMDocumentView.TypeColumn)), "Folder", True) = 0 Then
        folderNames.Items.Add(documentName)
    Else
        documentNames.Items.Add(documentName)
    End If
 Next
    </code>
		<code lang="CS" title="GetDocumentFileName">
 Interprise.Framework.Base.DatasetGateway.CRM.DocumentDatasetGateway documentDataset = new Interprise.Framework.Base.DatasetGateway.CRM.DocumentDatasetGateway();
 Interprise.Facade.Base.CRM.DocumentFacade documentFacade = new Interprise.Facade.Base.CRM.DocumentFacade(documentDataset);
 
 ListBox documentNames = new ListBox();
 ListBox folderNames = new ListBox();
 
 
 documentNames.Items.Clear();
 folderNames.Items.Clear();
 
 //Get all document names from dataset
 foreach (DataRow document in documentDataset.CRMDocumentView.Rows) {
    //Assign a document to a variable
    string documentName = documentFacade.GetDocumentFileName(document);
 
    //Check if document is a folder
    if (string.Compare((string)document(documentDataset.CRMDocumentView.TypeColumn), "Folder", true) == 0)
    {
        folderNames.Items.Add(documentName);
    }
    else
    {
        documentNames.Items.Add(documentName);
    }
 }
    </code>
	</example>
	<param name="p_currentRow">The source DataRow containing the file.</param>
</member><member name="M:Interprise.Facade.Base.CRM.DocumentFacade.GetNewFolderName(System.String)">
	<summary>
 Gets the name of the new folder.
 </summary>
	<param name="p_parentCode"> The folder to check for existing names </param>
	<returns></returns>
	<remarks> Function is under construction </remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ContactFacade.ParentEntityChanged">
	<summary>
 Event triggered when the entity code has been changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ContactFacade.ParentEntityChanging">
	<summary>
 Event triggered when the entity code is being changed.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.ContactFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.ContactFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.ContactFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.ContactFacade.IsContactNameOptional">
	<summary>
 Gets or Set if contact name is required when creating a new contact
 </summary>
	<value></value>
	<returns> True if contact name is optional. False otherwise </returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.ContactFacade.ContactCode">
	<summary>
 The contactCode of the currently being viewed contact
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.ContactFacade.WebSiteCode">
	<summary>
 The currently selected website code in the ContactWebOptionsControl
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.ContactDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_contactDataset"> The contact dataset to be used </param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.CRMContact_ContactColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Event triggered when the CRMActivityView table is changed.
 Performs the necessary changes for each value changed.
 Temporarily remove handler to prevent infinite call.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.AssignParentEntity(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String)">
	<summary>
 Assigns the contact to the Entity with default values.
 </summary>
	<param name="entityCode">The unique code for the entity.</param>
	<param name="transactionType">Determines the type of entity.</param>
	<param name="p_contactName">The contact to add.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.AssignParentEntity(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Int32)">
	<summary>
 Assigns the contact to the Entity with specified values.
 </summary>
	<param name="entityCode">The entity code where the contact will be assigned.</param>
 ''' <param name="country">The country of the entity.</param>
	<param name="address">The address of the entity.</param>
	<param name="city">The city of the entity.</param>
	<param name="state">The state of the entity.</param>
	<param name="postalCode">The postalCode of the entity.</param>
	<param name="county">The county of the entity.</param>
	<param name="telephone">The telephone of the entity.</param>
	<param name="telephoneLocalNumber">The local number of the telephone</param>
	<param name="telephoneExtension">The extension of the telephone</param>
	<param name="transactionType">The type of the entity.</param>
	<param name="p_contactName">The name of the contact.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.AssignParentEntity(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Int32)">
	<summary>
 This method adds a new parent entity with plus 4 postal code.
 </summary>
	<param name="entityCode"></param>
	<param name="country"></param>
	<param name="address"></param>
	<param name="city"></param>
	<param name="state"></param>
	<param name="postalCode"></param>
	<param name="plus4"></param>
	<param name="county"></param>
	<param name="addressType"></param>
	<param name="telephone"></param>
	<param name="telephoneLocalNumber"></param>
	<param name="telephoneExtension"></param>
	<param name="fax"></param>
	<param name="faxLocalNumber"></param>
	<param name="faxExtension"></param>
	<param name="emailAddress"></param>
	<param name="transactionType"></param>
	<param name="p_contactName"></param>
	<param name="rowIndex"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.AddContact(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String)">
	<summary>
 Procedure to add a contact with default values.
 </summary>
	<param name="entityCode">The entity table where the contact will be assigned.</param>
	<param name="transactionType">The type of the entity.</param>
	<param name="p_contactName">The name of the contact.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.AddContact(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to add a contact with specified values.
 </summary>
	<param name="entityCode">The entity code where the contact will be assigned.</param>
	<param name="country">The country of the entity.</param>
	<param name="address">The address of the entity.</param>
	<param name="city">The city of the entity.</param>
	<param name="state">The state of the entity.</param>
	<param name="postalCode">The postalCode of the entity.</param>
	<param name="county">The county of the entity.</param>
	<param name="telephone">The telephone of the entity.</param>
	<param name="telephoneLocalNumber">The local number of the telephone</param>
	<param name="telephoneExtension">The extension of the telephone</param>
	<param name="transactionType">The type of the entity.</param>
	<param name="p_contactName">The name of the contact.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.AddContact(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 This method adds a new contact with a plus 4 postal code.
 </summary>
	<param name="entityCode"></param>
	<param name="country"></param>
	<param name="address"></param>
	<param name="city"></param>
	<param name="state"></param>
	<param name="postalCode"></param>
	<param name="plus4"></param>
	<param name="county"></param>
	<param name="addressType"></param>
	<param name="telephone"></param>
	<param name="telephoneLocalNumber"></param>
	<param name="telephoneExtension"></param>
	<param name="fax"></param>
	<param name="faxLocalNumber"></param>
	<param name="faxExtension"></param>
	<param name="emailAddress"></param>
	<param name="transactionType"></param>
	<param name="p_contactName"></param>
	<param name="isClear"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.DeleteContactWebLog(System.String,System.String)">
	<summary>
 Deletes the log files for the current contact-website selected
 </summary>
	<param name="dateFrom">Filter data to be deleted FROM date</param>
	<param name="dateTo">Filter data to be deleted TO date</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.GenerateContactAllowedWebSites(System.String)">
	<summary>
 Creates the entries for the EcommerceCustomerActiveSites table for our new contact
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.GenerateContactAllowedWebSites(System.String,System.String)">
	<summary>
	</summary>
	<param name="entityCode"></param>
	<param name="userCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.AddNewContactWebSiteInformation">
	<summary>
 Adds the contact-website information to the current contact being created.
 </summary>
	<remarks>Default website is set as enabled as default</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ContactFacade.GetStoreFrontService(System.String)">
	<summary>
 Gets the instance of ASPDOTNET StoreFront web service
 </summary>
	<param name="webServiceURL"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.CampaignWaveFacade.OnGenerateTargetList">
	<summary>
 Triggers after the CRMCampaignWaveTargetListView table is filled or refreshed.
 </summary>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.CampaignWaveFacade.OnGenerateTargetListError">
	<summary>
 Triggers when error occurs in RefrehTargetList suboroutine.
 </summary>
	<param name="sender"></param>
	<param name="e"> The System.Exception </param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.CampaignWaveFacade.OnStatusChanged">
	<summary>
 Triggers when wave status changed
 </summary>
	<param name="sender"></param>
	<param name="Status"> The new wave status </param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.CampaignWaveFacade.EmailBatchSent">
	<summary>
 Triggers after a batch of email is sent
 </summary>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.CampaignWaveFacade.SendingEmailCompleted">
	<summary>
 Triggers when sending email has succeeded
 </summary>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.CampaignWaveFacade.SendingEmailCancelled">
	<summary>
 Triggers when sending email has failed
 </summary>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.CampaignWaveFacade.EmailServerNotAvailable">
	<summary>Triggers when connection to outgoing email server failed.</summary>
</member><member name="E:Interprise.Facade.Base.CRM.CampaignWaveFacade.EmailServerConnectionEstablished">
	<summary>Triggers when connection to outgoing email server is successful.</summary>
</member><member name="P:Interprise.Facade.Base.CRM.CampaignWaveFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.CampaignWaveFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.CampaignWaveFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.CampaignWaveFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.CampaignWaveFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.CampaignWaveFacade.IsBusy">
	<summary>
 Checks if system is currently doing a transaction like sending emails
 </summary>
	<value></value>
	<returns> True if system is busy, otherwise false </returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.CampaignWaveDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="campaignWaveDataset">The CampaignWave dataset to use.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.AddCampaignWave(System.String,System.String,System.DateTime,System.String,System.String)">
	<summary>
 Procedure to add a campaign wave row to the table.
 </summary>
	<param name="p_campaignCode">The campaign code to use.</param>
	<param name="p_waveType">The type of wave.</param>
	<param name="p_startDate">The starting date.</param>
	<param name="p_targetListCode">The target list code of the wave.</param>
	<param name="p_waveName">The name of the wave.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.VerifyEmailServer(System.String)">
	<summary>
 Checks if the outgoing email server is online.
 </summary>
	<param name="emailAccountCode">The email account to use for verification.</param>
	<returns>True if a connection is can be established.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.SendEmailToTargetList(System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String)">
	<summary>
 Procedure to bulk send email to all of the addresses in the target list.
 </summary>
	<param name="emailAccountCode">The email address to use.</param>
	<param name="delay"> The amount of time to pause for each batch </param>
	<param name="numberOfEmail"> The number of emails to send </param>
	<param name="waveCode">The wave containing the target list.</param>
	<param name="mimeMessage">The body of the message.</param>
	<param name="isFax">Determine if email will be sent to fax server.</param>
	<param name="faxServiceProvider">The fax server domain.</param>
	<remarks></remarks>
</member><member name="F:Interprise.Facade.Base.CRM.CampaignWaveFacade.m_sendEmail">
	<summary>
 Variable used for DoEmailSendingDelegate
 </summary>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Base.CRM.CampaignWaveFacade.DoEmailSendingDelegate">
	<summary>
 Delegate used for DoEmailSending
 </summary>
	<param name="emailAccountCode"> The email account code used to send emails </param>
	<param name="delay"> The amount of time to pause for each batch </param>
	<param name="numberOfEmail"> The number of emails to send </param>
	<param name="waveCode"> The current campaign wave </param>
	<param name="mimeMessage"> The actual email to send </param>
	<param name="isFax">Determine if email will be sent to fax server.</param>
	<param name="faxServiceProvider">The fax server domain.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.DoEmailSending(System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String)">
	<summary>
 Sends Email based on target list
 </summary>
	<param name="emailAccountCode"> The email account code used to send emails </param>
	<param name="delay"> The amount of time to pause for each batch </param>
	<param name="numberOfEmail"> The number of emails to send </param>
	<param name="waveCode"> The current campaign wave </param>
	<param name="mimeMessage"> The actual email to send </param>
	<param name="isFax">Determine if email will be sent to fax server.</param>
	<param name="faxServiceProvider">The fax server domain.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.DoEmailSendingCallback(System.IAsyncResult)">
	<summary>
 Callback event after asynchronous call to DoEmailSending
 </summary>
	<param name="result"> The System.IAsyncResult </param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.SendTestEmail(System.String,System.String)">
	<summary>
 Test email message to check connectivity
 </summary>
	<param name="emailAccountCode"> The email account code used to send email </param>
	<param name="emailMessage"> The actual test message </param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.CancelEmailSending">
	<summary>
 Informs the system to cancel sending emails
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.RefreshTargetList(System.String)">
	<summary>
 Procedure to reload the target list.
 </summary>
	<param name="targetListCode">The target list code to reload.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.UpdateExcludes(Interprise.Framework.Base.Shared.Enum.WaveType)">
	<summary>
 Updates the CRMCampaignWaveTargetList's exclude column based on the wave type.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.OnColumnChanging(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Event triggered when a value in the CampaignWave table is changed.
 </summary>
	<param name="sender">The CRMCampaignWave dataset.</param>
	<param name="e">The System.Data.DataColumnChangeEventArgs</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.OnColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Event triggered when a value in the CampaignWave table is changed.
 </summary>
	<param name="sender">The CRMCampaignWave dataset.</param>
	<param name="e">The System.Data.DataColumnChangeEventArgs</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.SetActualCost(System.Data.DataColumnChangeEventArgs)">
	<summary>
 Procedure to set the cost of the wave.
 </summary>
	<param name="e">The System.Data.DataColumnChangeEventArgs</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.SetBudgetCost(System.Data.DataColumnChangeEventArgs)">
	<summary>
 Procedure to set the budget cost of the wave.
 </summary>
	<param name="e">The System.Data.DataColumnChangeEventArgs</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.CampaignWaveFacade.GetTargetListInformation(System.String,System.String,System.String)">
	<summary>
 Gets the list in a form of target list to use for campaign wave activities
 </summary>
	<param name="waveCode">The campaign wave who owns the list.</param>
	<param name="targetSource">The target list record.</param>
	<param name="filter">The filter for the list.</param>
	<returns>The CRMCampaignWaveTargetListView table.</returns>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Base.CRM.CampaignWaveFacade">
	<summary>
 The business facade class used for campaign wave.
 </summary>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.ActivityTypeChanged">
	<summary>
 Event triggered when the activity type is changed.
 </summary>
	<example>
		<code inline="False">
		</code>
	</example>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.ActivityStatusChanged">
	<summary>
 Event triggered when the activity status is changed.
 </summary>
	<param name="ActivityStatus">The new activity status.</param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.ActivityEntityChanged">
	<summary>
 Event triggered when the activity entity is changed.
 </summary>
	<param name="EntityCode">The new entity code.</param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.ActivityContactChanged">
	<summary>
 Event triggered when the activity contact is changed.
 </summary>
	<param name="contactCode">The new contact code.</param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.ActivityParentTypeChanged">
	<summary>
 Event triggered when the parent type is changed.
 </summary>
	<param name="p_parentType">The new parent type.</param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.ActivityStartDateChanged">
	<summary>
 Event triggered when the start date is changed.
 </summary>
	<param name="p_startDate">The new start date.</param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.ErrorRaised">
	<summary>
 Event triggered when an error occurs in column changed event of activity and
 activityview tables.
 </summary>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.AddRemoveHandler">
	<summary>
 Event triggered when adding an activity
 </summary>
	<param name="isAddHandler"> indicates if would add/remove events in a control</param>
	<remarks></remarks>
</member><member name="E:Interprise.Facade.Base.CRM.ActivityFacade.OnRetrieveCaseDueDate">
	<summary>
 Raised during retrieval of Case's due date
 </summary>
</member><member name="P:Interprise.Facade.Base.CRM.ActivityFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public Overridable</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.ActivityFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.ActivityFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.ActivityFacade.IsLiveSupport">
	<summary>
 Gets or sets if the usage of this facade is for the Interprise application or the Live support application.
 </summary>
	<returns>True if it's LiveSupport.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.ActivityDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="activityDataset">The Activity dataset</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.CRMActivity_ActivityColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Performs the necessary changes for each value changed.
 Temporarily remove handler to prevent infinite call
 </summary>
	<param name="sender">The CRMActivity table.</param>
	<param name="e">The System.Data.DataColumnChangeEventArgs</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.CRMActivityView_ActivityColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Event triggered when the CRMActivityView table is changed.
 Performs the necessary changes for each value changed.
 Temporarily remove handler to prevent infinite call.
 </summary>
	<param name="sender">The CRMActivityView table.</param>
	<param name="e">The System.Data.DataColumnChangeEventArgs</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.LoadLiveSupportData(System.String,Interprise.Framework.Base.Shared.Enum.ClearType,System.Boolean,System.Boolean)">
	<summary>
 Fills the CRMActivity table with record from Live Support database.
 </summary>
	<param name="activityCode">The activity record to retrieve.</param>
	<param name="clearType">The clear type to use.</param>
	<param name="isLoadParent">Determines whether to load the activity table.</param>
	<param name="includeHistory">Determines whether to include the history table.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.LoadLiveSupportDashboardData(System.String,System.String,Interprise.Framework.Base.Shared.Enum.ClearType,System.Boolean,System.Boolean,System.String,System.String)">
	<summary>
 Fills the CRMActivityView table with records from Live Support database.
 </summary>
	<param name="customerCode">The customer id to use.</param>
	<param name="criteria">The criteria filter.</param>
	<param name="clearType">The clear type.</param>
	<param name="isLoadParent">Determines whether to load the activity table.</param>
	<param name="includeChartData">Determines whether to load the chart information.</param>
	<param name="chartCriteria">The criteria filter for chart.</param>
	<param name="chartDataToView">The type of data to retrieve for the chart.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Performs a update operation to the database.
 set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.UpdateActivityHistory(Interprise.Framework.Base.DatasetComponent.CRM.ActivityDataSet.CRMActivityViewDataTable)">
	<summary>Procedure to add history recored for activityview table.</summary>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.DoUpdateActivityHistory(System.Data.DataTable)">
	<summary>
 Procedure to add the row to the history table.
 </summary>
	<param name="activityTable">Either of the CRMActivity or CRMActivityView table.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.UpdateLiveSupportData(System.String[][])">
	<summary>
 Updates the changes made to the activity table to be saved in Live Support database.
 </summary>
	<param name="commandSet">The commandset of tables and stored procedures to be used for updating.</param>
	<returns>True if update succeeds.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.AddActivity(System.String,System.String,System.DateTime,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.String)">
	<summary>
 Procedure to Add an activity to the table.
 </summary>
	<param name="entityCode">The code of the entity.</param>
	<param name="contactCode">The contact code of the entity.</param>
	<param name="startDate">The starting date.</param>
	<param name="type">The type of the activity.</param>
	<param name="transaction">The transaction type of the activity.</param>
	<param name="p_opportunityCode">The opportunity code attached to the activity.</param>
	<param name="p_waveCode">The wave code attached to the activity.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.DeleteActivity(System.Data.DataRow)">
	<summary>
 Deletes an activity record.
 </summary>
	<param name="activityRow">The activity record to be deleted.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>True if current row has no validation errors.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.CreateCallback(System.DateTime,System.String,Interprise.Framework.Base.DatasetComponent.CRM.ActivityDataSet.CRMActivityViewRow)">
	<summary>
 Procedure to create a call back for the activity.
 </summary>
	<example>
		<code lang="VB" title="CreateCallback">
 Protected Overridable Sub CreateCallBackSchedule()
  'We'll use the callbackform to generate a callback activity
  'First we need to get the start date of current activity, this will be used to check if callback time is valid.
  If ActivityGateway.CRMActivity.Count = 0 Then
      'Placeholder for the current start date
      Dim currentStartDate As DateTime = CDate(ActivityGateway.CRMActivity(0)(CRMACTIVITY_STARTDATE_COLUMN))
      
      'Create the form then pass the current start date.
      Dim callbackForm As New Interprise.Presentation.Component.CRM.Activity.CallBack.CallBackForm(currentStartDate)
      
      If callbackForm.ShowDialog = DialogResult.OK Then
          'We need to store the current activity into a temporay storage, closed this activity then save.
          Dim rowItemArray() As Object = ActivityGateway.CRMActivity(0).ItemArray          
          m_activityFacade.CompleteActivity(ActivityGateway.CRMActivity(0))
          
          'The second argument clears all rows in Activity table.
          'This means the current activity will be remove from the table.
          If UpdateDataSet(False, True) = DialogResult.Yes Then
              'Create the new callback activity with the exact values from the previous activity,
              'then store this new activity in a variable.
              Dim callbackRow As Interprise.Framework.Base.DatasetComponent.CRM.ActivityDataSet.CRMActivityRow = ActivityGateway.CRMActivity.NewCRMActivityRow
              callbackRow = DirectCast(ActivityGateway.CRMActivity.LoadDataRow(rowItemArray, False), Interprise.Framework.Base.DatasetGateway.CRM.ActivityDatasetGateway.CRMActivityRow)
              
              'Get the activityCode of the previous activity so we could link this to the callback.
              Dim linkedActivityCode As String = CStr(IsNull(callbackRow(CRMACTIVITY_ACTIVITYCODE_COLUMN)))                          
              m_activityFacade.CreateCallback(callbackForm.CallBackScheduledate, linkedActivityCode, ActivityGateway.CRMActivity(0))
                                     
              'Save the new callback afterwards.
              Me.UpdateDataSet(False, False)
                        
          End If
      End If
  End If
 End Sub
    </code>
		<code lang="CS" title="CallBackScheduledate">
 private void CreateCallBackSchedule()
 {
    //We'll use the callbackform to generate a callback activity
    //First we need to get the start date of current activity, this will be used to check if callback time is valid.
    if (ActivityGateway.CRMActivity.Count == 0)
    {
        //Placeholder for the current start date
        DateTime currentStartDate = (System.DateTime)ActivityGateway.CRMActivity(0)(CRMACTIVITY_STARTDATE_COLUMN);
 
        //Create the form then pass the current start date.
        Interprise.Presentation.Component.CRM.Activity.CallBack.CallBackForm callbackForm = new Interprise.Presentation.Component.CRM.Activity.CallBack.CallBackForm(currentStartDate);
 
        if (callbackForm.ShowDialog == DialogResult.OK)
        {
            //We need to store the current activity into a temporay storage, closed this activity then save.
            object[] rowItemArray = ActivityGateway.CRMActivity(0).ItemArray;
            m_activityFacade.CompleteActivity(ActivityGateway.CRMActivity(0));
 
            //The second argument clears all rows in Activity table.
            //This means the current activity will be remove from the table.
            if (UpdateDataSet(false, true) == DialogResult.Yes)
            {
                //Create the new callback activity with the exact values from the previous activity,
                //then store this new activity in a variable.
                Interprise.Framework.Base.DatasetComponent.CRM.ActivityDataSet.CRMActivityRow callbackRow = ActivityGateway.CRMActivity.NewCRMActivityRow;
                callbackRow = (Interprise.Framework.Base.DatasetGateway.CRM.ActivityDatasetGateway.CRMActivityRow)ActivityGateway.CRMActivity.LoadDataRow(rowItemArray, false);
 
                //Get the activityCode of the previous activity so we could link this to the callback.
                string linkedActivityCode = (string)IsNull(callbackRow(CRMACTIVITY_ACTIVITYCODE_COLUMN));
                m_activityFacade.CreateCallback(callbackForm.CallBackScheduledate, linkedActivityCode, ActivityGateway.CRMActivity(0));
 
                //Save the new callback afterwards.
                this.UpdateDataSet(false, false);
 
            }
        }
    }
 }
    </code>
	</example>
	<param name="callbackDate">The date of the callback</param>
	<param name="linkedActivityCode">The activity referenced from</param>
	<param name="callbackRow">The destination data row</param>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.CompleteActivity(Interprise.Framework.Base.DatasetComponent.CRM.ActivityDataSet.CRMActivityViewRow)">
	<summary>
 Procedure to complete an activity.
 </summary>
	<param name="p_ActivityRow">The row to be modified.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.AddDefaultAttendee(System.String,System.String)">
	<summary>
 Procedure to add a default attendee to the activity.
 </summary>
	<param name="p_activityCode">The activity code.</param>
	<param name="p_userCode">The user who will attend the activity.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.AssignDefaultLocation(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="activityRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.AssignDefaultValuesByEntity(System.Data.DataRow)">
	<summary>Procedure to auto assign default values whenever an entity has changed.</summary>
	<param name="activityRow">The activity row to be used.</param>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.GetCaseDueDate(System.DateTime,System.String)">
	<summary>
 Procedure to get the due date of a case according to the SLA.
 </summary>
	<example>
		<code lang="VB" title="GetCaseDueDate">
 Dim activityFacade As New Interprise.Facade.Base.CRM.ActivityFacade(New Interprise.Framework.Base.DatasetGateway.CRM.ActivityDatasetGateway)
 Dim dueDate As Date
 Dim contractCode As String
 
 contractCode = activityFacade.GetField(CUSTOMERSERVICECONTRACT_CONTRACTCODE_COLUMN, CUSTOMERSERVICECONTRACT_TABLE, String.Format(FORMAT_FIELD_AND_VALUE, CUSTOMERSERVICECONTRACT_CONTRACTCODE_COLUMN, aCustomerCodeVariable))
 dueDate = activityFacade.GetCaseDueDate(Date.Now, contractCode)
    </code>
		<code lang="CS" title="GetCaseDueDate">
 Interprise.Facade.Base.CRM.ActivityFacade activityFacade = new Interprise.Facade.Base.CRM.ActivityFacade(new Interprise.Framework.Base.DatasetGateway.CRM.ActivityDatasetGateway());
 DateTime dueDate;
 string contractCode;
 
 contractCode = activityFacade.GetField(CUSTOMERSERVICECONTRACT_CONTRACTCODE_COLUMN, CUSTOMERSERVICECONTRACT_TABLE, string.Format(FORMAT_FIELD_AND_VALUE, CUSTOMERSERVICECONTRACT_CONTRACTCODE_COLUMN, aCustomerCodeVariable));
 dueDate = activityFacade.GetCaseDueDate(Date.Now, contractCode);
    </code>
	</example>
	<param name="startDate">The start date of the case.</param>
	<param name="contractCode">The service contract code.</param>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.InitializeSLAVariables">
	<summary>
 Procedure to set the variables to be used to calculate the due date of a case.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.CalculateDueDate(System.DateTime)">
	<summary>
 Procedure to calculate the due date according to the variables initialized.
 </summary>
	<param name="p_startDate">The starting date.</param>
	<returns></returns>
	<remarks>This method is recursive.</remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.GetStartingDate(System.DateTime)">
	<summary>
	</summary>
	<param name="startDate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.GetNextWorkingStartDate(System.DateTime,System.TimeSpan)">
	<summary>
 Procedure to get the next working start date.
 </summary>
	<param name="startDate">The starting date.</param>
	<param name="startingTime">The starting time.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.GetWorkingEndDate(System.DateTime,System.TimeSpan)">
	<summary>
 Procedure to get the ending time of the work day.
 </summary>
	<param name="startdate"></param>
	<param name="endingTime"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.CheckHoliday(System.DateTime)">
	<summary>
 Procedure to determine the day is a holiday.
 </summary>
	<param name="startDate">The current date.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.IsNotMyPrivateActivity(System.Data.DataRow)">
	<summary>
 Checks if the current activity is non-current user's Protected Overridable activity
 </summary>
	<example>
		<code lang="VB" title="IsNotMyPrivateActivity">
 For Each activityRow As Datarow In activityGateway.CRMActivity
    If activityFacade.IsNotMyPrivateActivity(activityRow)
        'Process private activities
    Else
 
    End If
 Next
    </code>
		<code lang="CS" title="IsNotMyPrivateActivity">
 foreach (Datarow activityRow In activityGateway.CRMActivity) {
    If (activityFacade.IsNotMyPrivateActivity(activityRow)) {
        // Process Private activities
    }
    Else {
        
    }
 }
    </code>
	</example>
	<param name="p_currentRow"> the current row to be checked </param>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.GetBusyUsers(System.Data.DataRow)">
	<summary>Gets the user private message to display depending on type of activity</summary>
	<returns> The Protected Overridable message to display </returns>
	<remarks> Returns nothing if type is case </remarks>
	<param name="p_currentRow"> The current row to evaluate </param>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.GetActivityDisplayTitle(System.Data.DataRow)">
	<summary>Gets the private display title for calendar and tooltip</summary>
	<returns> The Protected Overridable display message </returns>
	<param name="p_currentRow"> The current row to evaluate </param>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.GetActivityDisplayDescription(System.Data.DataRow,System.String)">
	<summary>Gets the private display description for calendar and tooltip</summary>
	<remarks> This function is specifically created for meeting </remarks>
	<param name="p_currentRow"> The current row to evaluate </param>
	<param name="p_descriptionMessage"> Used for non-case and non-meeting activity. The actual description to be used. </param>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.SetEntityDefaultContact">
	<summary>
 Sets the default contact for the specified entity
 </summary>
	<remarks> Clears the contact code/name column each time this subroutine executes </remarks>
</member><member name="M:Interprise.Facade.Base.CRM.ActivityFacade.DuplicateCRMActivityView(Interprise.Framework.Base.DatasetComponent.CRM.ActivityDataSet.CRMActivityViewRow)">
	<summary>
	</summary>
	<param name="p_duplicateActivityRow"></param>
	<remarks>To Update Duplicate CRMActivityView</remarks>
</member><member name="P:Interprise.Facade.Base.SimpleFacade.CacheDatabaseName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SimpleFacade.IsNewCache">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SimpleFacade.IsCacheDatabaseExistInLocal">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SimpleFacade.IsEnableConcurrentUserValidation">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SimpleFacade.ShowCBNErrorMessage">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SimpleFacade.DisableValidationOnAllowedUserToLogin">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.CacheHasChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.SetOfflineConnection">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.SetUserAccount(System.String,System.Boolean,System.Boolean)">
	<summary>
 Procedure which will mark the user account as either signed in or not in the application.
 </summary>
	<param name="userCode"></param>
	<param name="signIn"></param>
	<param name="userWS"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.SetUserAccountPerConnectionString(System.String,System.Boolean,System.Boolean,System.String)">
	<summary>
 Procedure which will mark the user account as either signed in or not in the application.
 </summary>
	<param name="userCode"></param>
	<param name="signIn"></param>
	<param name="userWS"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.GetNetworkTime">
	<summary>
 Gets the current DateTime from time-a.nist.gov.
 </summary>
	<returns>A DateTime containing the current time.</returns>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.GetNetworkTime(System.String)">
	<summary>
 Gets the current DateTime from <paramref name="ntpServer"/>.
 </summary>
	<param name="ntpServer">The hostname of the NTP server.</param>
	<returns>A DateTime containing the current time.</returns>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.GetNetworkTime(System.Net.IPEndPoint)">
	<summary>
 Gets the current DateTime form <paramref name="ep"/> IPEndPoint.
 </summary>
	<param name="ep">The IPEndPoint to connect to.</param>
	<returns>A DateTime containing the current time.</returns>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.ValidateProductRights(System.Data.DataRow,System.String,Interprise.Framework.Base.EventArguments.ValidateLicenseEventArgs@)">
	<summary>
 This would check if the current user has a product right with product edition of IS or Connected Business
 </summary>
	<param name="productRightsRow"></param>
	<param name="userCode"></param>
	<param name="p_ValidateLicenseEventArgs"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.UpdateCacheDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.UpdateSystemCompanyInformation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.ConfigureOnlineDatabaseName">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.ValidUserCount(System.Data.DataRow[],System.String,System.Boolean,System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.LogUser(System.String,System.Boolean,System.String,System.String)">
	<summary>
	</summary>
	<param name="userCode"></param>
	<param name="signIn"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.LogUserPerConnectionString(System.String,System.Boolean,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="userCode"></param>
	<param name="signIn"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.InitializeUserPreference(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.InitializeSystemMessage">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.InitializeSystemConfiguration">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.OnMissingDataDictionaryDetected(Interprise.Framework.Base.EventArguments.MissingDataDictionaryDetectedEventArgs)">
	<summary>
	</summary>
	<param name="args"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.ValidateCBNEnrolled">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.ValidateCommunityEdition">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SimpleFacade.ValidateSqlExpress">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.ItemKitFacade.HomeCurrencyCode">
	<summary>
 Gets the home currency.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.CreateKitOptionGroupDescription(System.String,System.String)">
	<summary>
 Method use to create the section control and attached them to the main control. 
 </summary>
	<param name="groupCode"></param>
	<param name="description"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.AssignKitDetails(System.Data.DataRow[],System.String,System.String,System.Data.DataRowView)">
	<summary>
 Method use to assign kit details. 
 </summary>
	<param name="rowsSelected"></param>
	<param name="groupCode"></param>
	<param name="currencyCode"></param>
	<param name="kitdetailView"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.CreateKitPricingDetail(System.String,System.String)">
	<summary>
 Method use to create the section control and attached them to the main control. 
 </summary>
	<param name="groupCode"></param>
	<param name="ItemCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.ComputeNewKitPercent(System.Boolean)">
	<summary>
 Method use to compute new kit percent.
 </summary>
	<param name="Isdefault"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.SetKitConfiguration(Interprise.Framework.Base.Shared.Structure.KitConfiguration,System.Boolean)">
	<summary>
 Procedure to apply the configuration info to the kit configurator.
 </summary>
	<param name="kitConfigurationInfo">A <strong>KitConfiguration</strong> containing the kit configuration info.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.CascadePricingDetail(System.Data.DataRow)">
	<summary>
 Method use to cascade pricing detail. 
 </summary>
	<param name="pricingrow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.CascadePricingDetail(System.Data.DataColumnChangeEventArgs)">
	<summary>
 Method use to cascade pricing detail. 
 </summary>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.CreateKitDetailDescription(System.String,System.String,System.String)">
	<summary>
 Method use to create the section control and attached them to the main control. 
 </summary>
	<param name="groupCode"></param>
	<param name="itemCode"></param>
	<param name="itemDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.CascadeKitDetailDescription(System.String,System.Data.DataRow)">
	<summary>
 Method use to cascade kit detail description. 
 </summary>
	<param name="columnName"></param>
	<param name="row"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.ChangeCurrency(System.String)">
	<summary>
 Method use to change currency. 
 </summary>
	<param name="currencyCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Method use to validate errors. 
 </summary>
	<param name="row"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.InventoryKitDetail_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Use to changed inventory kit detail column. 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.InventoryKitOptionGroup_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Use to changed inventory kit option group column.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ItemKitFacade.InventoryKitOptionGroupDescription_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Ise to changed inventory kit option group description. 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Win.UI.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.IsMyAccount">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.LoadCommandSet(System.String)">
	<summary>
	</summary>
	<param name="DocumentCode"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.TeamCode">
	<summary>
 Returns the Business Title sets by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.UpdateCommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
</member><member name="P:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.UserCode">
	<summary>
 Returns the User Code sets by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.AddUserAccount(System.String,System.String)">
	<summary>Adds new user account row in the SystemUserAccount Table.</summary>
	<param name="userCode">Specify the user code to be assigned in the SystemUserAccount Table.</param>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.AssignNewTeamInSystemTeamMember(System.String,System.Data.DataRow)">
	<summary>Adds the newly created user account in the selected team.</summary>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.AssignCompanySkin(System.String)">
	<summary>
	</summary>
	<param name="skin"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.AssignUnitMeasureSystem(System.String)">
	<summary>
	</summary>
	<param name="systemUnitMeasure"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.#ctor(Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserAccountDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="userAccountDataset"> Shared dataset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.EncrytPassword">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.FinalizeUserAccountAsync(System.Boolean,System.Data.DataRowState,System.Boolean[],System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="saveResult"></param>
	<param name="rowState"></param>
	<param name="isToGenerate"></param>
	<param name="userCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.FinalizeUserAccount(System.Boolean,System.Data.DataRowState,System.Boolean[],System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="saveResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.FinalizeUserCompleted(System.IAsyncResult)">
	<summary>
	</summary>
	<param name="asynResult"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.GenerateUserRoleDescription(System.String,System.String,System.String)">
	<summary>
    Generate new description in role by user language.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.GenerateDataDictionaryColumnDescription(System.String)">
	<summary>
 Generate new data dictionary column description by user language.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.GenerateMessageManagerDescription(System.String)">
	<summary>
 Generate  new set message description by user language.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.GenerateItemDescription(System.String)">
	<summary>
 Generate new set of item description by user language.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.GenerateDescriptionPerUserLanguage(System.String,System.String,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.IsPasswordSupplied">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.SetDefaultEmailAccount(System.Data.DataRow)">
	<summary>
 Method use to Set the default email address after the user created the first email address.
 </summary>
	<param name="emailAccountRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.UpdateCacheTable">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.ForceSignOut(System.String)">
	<summary>
 Signed out the user's specified IP address(es)
 </summary>
	<param name="commandText"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.UserAccountFacade.SystemUserAccount_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.User.AppBuilderFacade.#ctor(Interprise.Framework.Base.DatasetGateway.SystemManager.User.AppBuilderDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="appBuilderDataset"> Shared dataset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.RoundingRulesFacade.CurrentDataset">
	<summary> Returns Current Dataset. </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.RoundingRulesFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
</member><member name="P:Interprise.Facade.Base.SystemManager.RoundingRulesFacade.UpdateCommandSet">
	<summary>Gets the command set to be used in the function UpdateDataset().</summary>
	<value>The command set assigned in this property.</value>
</member><member name="M:Interprise.Facade.Base.SystemManager.RoundingRulesFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.RoundingRulesFacade.#ctor(Interprise.Framework.Base.DatasetGateway.SystemManager.RoundingRulesDatasetGateway)">
	<summary>
 Create an instance of this class.
 </summary>
	<param name="RoundingRulesdataset"> Shared dataaset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Supplier.PreferenceFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Supplier.PreferenceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Supplier.PreferenceFacade.CreateTemporarySSDTable">
	<summary>
 Method use create temporary SSD Table.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Supplier.PreferenceFacade.DoLoadDataset(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Supplier.PreferenceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Shared.AdvancedPreferenceFacade.UpdateCommandSet">
	<summary>Gets the command set to be used in the function UpdateDataset().</summary>
	<value>The command set assigned in this property.</value>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Shared.AdvancedPreferenceFacade.#ctor(Interprise.Framework.Base.DatasetGateway.SystemManager.Preference.AdvancedPreferenceBaseDatasetGateway)">
	<summary>
  Create an Instance of this class.
 </summary>
	<param name="preferencedataset"> Shared dataaset between user interface and business facade</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Shared.AdvancedPreferenceFacade.DoLoadDataset(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Shared.AdvancedPreferenceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Shared.AdvancedPreferenceFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns>If false there where  errors found, otherwise none.</returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Inventory.PreferenceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Inventory.PreferenceFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Inventory.PreferenceFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Inventory.PreferenceFacade.#ctor(Interprise.Framework.Base.DatasetGateway.SystemManager.Preference.InventoryPreferenceDatasetGateway)">
	<summary>
  Create an Instance of this class.
 </summary>
	<param name="preferencedataset"> Shared dataaset between user interface and business facade</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Inventory.PreferenceFacade.DoLoadDataset(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Inventory.PreferenceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Customer.CustomerPreferenceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Customer.CustomerPreferenceFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Customer.CustomerPreferenceFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Customer.CustomerPreferenceFacade.#ctor(Interprise.Framework.Base.DatasetGateway.SystemManager.Preference.CustomerPreferenceDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="customerPreferenceDataset"> Shared dataset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Customer.CustomerPreferenceFacade.DoLoadDataset(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Customer.CustomerPreferenceFacade.GenerateSearchTables">
	<summary>
 Method use to generate search tables.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Customer.CustomerPreferenceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Banking.BankingPreferenceFacade.CurrentDataset">
	<summary> Returns  CurrentDataset . </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Banking.BankingPreferenceFacade.CurrentBusinessRule">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Banking.BankingPreferenceFacade.CurrentBusinessRuleType">
	<summary> This property gets the Current Business Rule Type for the use with web services </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Banking.BankingPreferenceFacade.CurrentTransactionType">
	<summary> This property gets the current transaction type </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Banking.BankingPreferenceFacade.AssigNewPreference">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Banking.BankingPreferenceFacade.DoLoadDataset(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Banking.BankingPreferenceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Banking.BankingPreferenceFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates specified DataColumns in a row
 </summary>
	<param name="row">The row to validate.</param>
	<param name="columnName">The DataColumns to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Accounting.AccountingPreferenceFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Accounting.AccountingPreferenceFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Accounting.AccountingPreferenceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.SystemManager.Preference.Accounting.AccountingPreferenceFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Accounting.AccountingPreferenceFacade.#ctor(Interprise.Framework.Base.DatasetGateway.SystemManager.Preference.AccountingPreferenceDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_preferenceDataset"> Shared dataset between user interface and business facade.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Accounting.AccountingPreferenceFacade.DoLoadDataset(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.SystemManager.Preference.Accounting.AccountingPreferenceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.ShippingMethodCode">
	<summary>Gets or sets the code of shipping method.</summary>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.FlatCharge">
	<summary>Gets or sets the flat charge if type is Flat Charge.</summary>
	<remarks><para>The Flat Charge amount.</para></remarks>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.ValueFrom">
	<summary>Gets or sets the minimum of order value bracket.</summary>
	<remarks><para>The minimum amount of order value bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.ValueTo">
	<summary>Gets or sets the maximum amount of order value bracket.</summary>
	<remarks><para>The maximum amount of order value bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.KgFrom">
	<summary>Gets or sets the minimum value for weight bracket.</summary>
	<remarks><para>The minimum value for weight bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.KgTo">
	<summary>Gets or sets the maximum value of weight bracket.</summary>
	<remarks><para>The maximum value of weight bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.Charge">
	<summary>Gets or sets the fix amount or percentage of a bracket.</summary>
	<remarks>
 If type is Order Value(Amount) or Weight, Charge is an amount. If type is Order
 Value(Percentage), Charge is a percentage.
 <para>The fix amount or percentage of a bracket.</para>
	</remarks>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.LbsFrom">
	<summary>Gets or sets the minimum value for weight bracket.</summary>
	<remarks><para>The minimum value for weight bracket.</para></remarks>
</member><member name="F:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation.LbsTo">
	<summary>Gets or sets the maximum value of weight bracket.</summary>
	<remarks><para>The maximum value of weight bracket.</para></remarks>
</member><member name="T:Interprise.Facade.Base.Shipping.RateFacade.ShippingMethodInformation">
	<summary>
 Structure used to cache the settings of shipping method of order and invoice
 transaction.
 </summary>
</member><member name="M:Interprise.Facade.Base.Shipping.RateFacade.ComputeFreightCharge(System.String,System.Decimal,System.Decimal,System.Decimal@,System.Boolean)">
	<summary>
 Computes the freight amounts of the transaction and checks if the transaction can be freight charged
 </summary>
	<returns>True if freight amount is to be charged, otherwise False</returns>
	<remarks>System.Boolean</remarks>
	<example>
		<para>The following codes shows how to implement the ComputeFreightCharge
    method.</para>
		<code lang="VB" title="ComputeFreightCharge" description="Calls ComputeFreightCharge method to check if freight amount should be charged.">
 Dim shippingMethodCode As String = "NextDayDelivery"
 Dim subTotal As Decimal = 100
 Dim totalWeight As Decimal = 12
 Dim freight As Decimal = 13.5
 Dim m_isRefreshShippingMethodCache As Boolean = False
 
 Dim ComputeFreight As Boolean = ComputeFreightCharge(shippingMethodCode, subTotal, totalWeight, freight, m_isRefreshShippingMethodCache)
    </code>
		<code lang="CS" title="ComputeFreightCharge" description="Calls ComputeFreightCharge method to check if freight amount should be charged.">
 string shippingMethodCode = "NextDayDelivery";
 decimal subTotal = 100;
 decimal totalWeight = 12;
 decimal freight = 13.5;
 bool m_isRefreshShippingMethodCache = false;
 
 bool ComputeFreight = ComputeFreightCharge(shippingMethodCode, subTotal, totalWeight, freight, m_isRefreshShippingMethodCache);
    </code>
	</example>
	<param name="shippingMethodCode">The shipping method in use for the transaction</param>
	<param name="subTotal">The sub total of the transaction</param>
	<param name="totalWeight">The total weight of items</param>
	<param name="freight">The freight amount in home currency</param>
</member><member name="M:Interprise.Facade.Base.Shipping.RateFacade.GetShippingMethodInfo(System.String,System.Boolean)">
	<summary>
 Process shipping method for this transaction
 </summary>
	<param name="shippingMethodCode">The code that represents the shipping method</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Shipping.AddressVerificationFacade.ValidateAddress(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="p_address1"></param>
	<param name="p_address2"></param>
	<param name="p_city"></param>
	<param name="p_state"></param>
	<param name="p_zipCode"></param>
	<param name="p_countryCode"></param>
	<param name="p_isResidential"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Shipping.AddressVerificationFacade.ValidateAddress(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
	<summary>
	</summary>
	<param name="p_address1"></param>
	<param name="p_address2"></param>
	<param name="p_city"></param>
	<param name="p_state"></param>
	<param name="p_zipCode"></param>
	<param name="p_countryCode"></param>
	<param name="p_isResidential"></param>
	<param name="p_NumberOfRows"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Shipping.AddressVerificationFacade.VerifyShippingAddress1(System.String)">
	<summary>
Get the address 1 in address control. 
We will then use carriage return to indicate a new line for address.
 </summary>
	<param name="p_address"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Shipping.AddressVerificationFacade.VerifyShippingAddress2(System.String)">
	<summary>
Get the address 2 in address control. 
We will then use carriage return to indicate a new line for address.
 </summary>
	<param name="p_address"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.ReservationFacade.DropShipReservationCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ReservationFacade.MoveRowToCloneTable(System.Data.DataRow,System.Data.DataTable)">
	<summary>
 Imports the sourceRow to the destinationTable
 </summary>
	<param name="sourceRow"></param>
	<param name="destinationTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ReservationFacade.LoadItemReservation(System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.DateTime,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="poCode"></param>
	<param name="itemCode"></param>
	<param name="poLineNum"></param>
	<param name="warehouseCode"></param>
	<param name="poDueDate"></param>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ReservationFacade.MoveReservation(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String)">
	<summary>
	</summary>
	<param name="sourceTransactionCode"></param>
	<param name="newTransactionCode"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Facade.Base.MTOMHelper.WebRequest">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.MTOMHelper.ChunkSizeSampleInterval">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.MTOMHelper.MaxRequestLength">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.MTOMHelper.PreferredChunckSizeInPercent">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.MTOMHelper.CalculateChunckSize(System.UInt64)">
	<summary>
	</summary>
	<param name="availablePhysicalMemory"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.MTOMHelper.DownloadFileInChunk(Interprise.Facade.Base.ConnectedBusinessService,System.String,System.Int64)">
	<summary>
 Returns the full path of the file.
 </summary>
	<param name="webService"></param>
	<param name="fileName"></param>
	<param name="fileSize"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.MTOMHelper.ProcessWebRequestDownload(Interprise.Facade.Base.ConnectedBusinessService,System.Object,System.String)">
	<summary>
	</summary>
	<param name="webService"></param>
	<param name="webRequestResult"></param>
	<param name="userSession"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.MTOMHelper.ProcessWebRequestUpload(Interprise.Facade.Base.ConnectedBusinessService,System.Object,System.String)">
	<summary>
	</summary>
	<param name="webService"></param>
	<param name="userSession"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.MTOMHelper.ProcessWebRequest(Interprise.Facade.Base.ConnectedBusinessService,Interprise.Facade.Base.MTOMHelper.WebRequest,System.Object,System.String)">
	<summary>
	</summary>
	<param name="webService"></param>
	<param name="webRequestResult"></param>
	<param name="userSession"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.MTOMHelper.DownloadFile(Interprise.Facade.Base.ConnectedBusinessService,System.Object,System.String)">
	<summary>
	</summary>
	<param name="webService"></param>
	<param name="webRequestResult"></param>
	<param name="userSession"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.MTOMHelper.UploadInChunk(Interprise.Facade.Base.ConnectedBusinessService,System.String,System.String)">
	<summary>
 This method starts the upload process. It supports cancellation, reporting progress, and exception handling.
 The argument is the start position, usually 0
 </summary>
</member><member name="M:Interprise.Facade.Base.ConnectedBusinessService.GetWebRequest(System.Uri)">
	<summary>
	</summary>
	<param name="uri"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomTable.CustomTableFacade.CurrentBusinessRule">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomTable.CustomTableFacade.CurrentBusinessRuleType">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomTable.CustomTableFacade.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomTable.CustomTableFacade.CurrentTransactionType">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomTable.CustomTableFacade.CurrentReportType">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomTable.CustomTableFacade.TableName">
	<summary>
 Gets or sets tbe tablename use for custom table trnsaction.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomTable.CustomTableFacade.#ctor(Interprise.Framework.Base.DatasetGateway.BaseDatasetGateway)">
	<summary>
 Create an instance of the custom field facade.
 </summary>
	<param name="customTableDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomTable.CustomTableFacade.AddRow">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomTable.CustomTableFacade.GetDisplayField(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomTable.CustomTableFacade.GetPrimaryKey(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomTable.CustomTableFacade.GetTableSchema(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomTable.CustomTableFacade.RetrieveEntityTable(System.String,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomTable.CustomTableFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CriteriaBuilderFacade.SetCriteria(System.String[][],System.String)">
	<summary>
	</summary>
	<param name="fieldValue"></param>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomFieldFacade.CurrentBusinessRule">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomFieldFacade.CurrentBusinessRuleType">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomFieldFacade.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomFieldFacade.CurrentTransactionType">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CustomFieldFacade.CurrentReportType">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomFieldFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CustomFieldDatasetGateway)">
	<summary>
 Create an instance of the custom field facade.
 </summary>
	<param name="customFieldDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomFieldFacade.GetLayout(System.String,System.String)">
	<summary>
 Retrieves the layout from the database.
 </summary>
	<param name="roleCode"></param>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomFieldFacade.RestoreLayout(System.String)">
	<summary>
	</summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CustomFieldFacade.SaveLayout(System.IO.MemoryStream,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="layoutStream"></param>
	<param name="roleCode"></param>
	<param name="tableName"></param>
	<param name="formName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.CreditCardGatewayMerchantAccountFacade.CurrentDataset">
	<summary>
		<para>Gets the instance of
    Interprise.Framework.Customer.DatasetGateway.CreditCardGatewayDatasetGateway
    class.</para>
	</summary>
</member><member name="M:Interprise.Facade.Base.Customer.CreditCardGateway.CreditCardGatewayMerchantAccountFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CreditCardGatewayDatasetGateway)">
	<summary>
 Initializes a new instance of CreditCardGatewayMerchantAccountFacade
 class.
 </summary>
	<param name="gatewayCreditCardGatewayDataset">
 The instance of
 Interprise.Framework.Customer.DatasetGateway.CreditCardGatewayDatasetGateway
 class.
 </param>
</member><member name="M:Interprise.Facade.Base.Customer.CreditCardGateway.CreditCardGatewayMerchantAccountFacade.AddMerchantAccount(System.String,System.String)">
	<summary>Creates the record to set up gateway merchant account.</summary>
	<param name="gatewayAssemblyName">The name of the assembly of credit card gateway plug-in.</param>
	<param name="gatewayType">The class name of credit card gateway control plug-in.</param>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CreditCardGatewayDataset">
	<summary>Gets the dataset gateway that contains merchant account information.</summary>
	<value>
 An Interprise.Framework.Customer.DatasetGateway.CreditCardGatewayDatasetGateway
 object that contains merchant account information
 </value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CardNumber">
	<summary>Get or sets the credit card number.</summary>
	<value>The number of the credit card.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CV2">
	<summary>Get or sets the CV2.</summary>
	<value>The additional characters printed or embossed on the card signature line following the credit card account number on the back of the credit card.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CardType">
	<summary>Get or sets the card type.</summary>
	<value>Type of credit card being used in this transaction.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ExpirationMonth">
	<summary>Gets or sets the expiration month of a credit card.</summary>
	<value>The expiration month of a credit card.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ExpirationYear">
	<summary>Gets or sets the expiration year of a credit card.</summary>
	<value>The expiration year of a credit card.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerCode">
	<summary>Gets or sets the customer code of credit card payment.</summary>
	<value>Customer code of credit card payment.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerAddress">
	<summary>
 Gets or sets the credit card holder's address that can be used in address
 verification.
 </summary>
	<value>The address of credit card holder.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerCity">
	<summary>
 Gets or sets the credit card holder's city that can be used in address
 verification.
 </summary>
	<value>The city of credit card holder.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerState">
	<summary>
 Gets or sets the credit card holder's state that can be used in address
 verification.
 </summary>
	<value>The state of credit card holder.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerPlus4">
	<summary>
 Gets or sets the credit card holder's postal code plus 4 value.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The postal code plus 4 of the credit card holder.</remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerPostalCode">
	<summary>
 Gets or sets the credit card holder's postal code that can be used in address
 verification.
 </summary>
	<value>The postal code of credit card holder.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerCountry">
	<summary>
 Gets or sets the credit card holder's country that can be used in address
 verification.
 </summary>
	<value>The country of credit card holder.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerFirstName">
	<summary>Gets or sets the first name of credit card holder.</summary>
	<value>The first name of credit card holder.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerLastName">
	<summary>Gets or sets the last name of credit card holder.</summary>
	<value>The last name of credit card holder.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CustomerEmailAddress">
	<summary>Get or sets the last name of credit card holder</summary>
	<value>The email address of credit card holder</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.MerchantLogin">
	<summary>Gets or sets the merchant login name.</summary>
	<value>The login name of merchant.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.MerchantPassword">
	<summary>Gets or sets the merchant password.</summary>
	<value>The password of merchant.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.TransactionAmount">
	<summary>Gets or sets the amount of credit card transaction.</summary>
	<value>
 The amount of credit card transaction. The amount is formatted base on gateway
 specification.
 </value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.TransactionCode">
	<summary>Gets or sets the transaction id of capture, void and credit transactions.</summary>
	<value>The transaction id of capture, void and credit transactions.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.TransactionDescription">
	<summary>Gets or sets the transaction description of capture, void and credit transactions.</summary>
	<value>The transaction description of capture, void and credit transactions.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.TransactionInvoice">
	<summary>Gets or sets the InvoiceNumber of capture, void and credit transactions.</summary>
	<value>The InvoiceNumber of capture, void and credit transactions.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ResponseApprovalCode">
	<summary>Gets the authorization code when a transaction has been approved.</summary>
	<value>The authorization code of approved transaction.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ResponseAVS">
	<summary>Gets the Address Verification System result code.</summary>
	<value>The Address Verification System result code.</value>
	<remarks>
		<para>This one character field contains the Address Verification Service (AVS)
    result code. An AVS result code can provide additional information concerning the
    authentication of a particular transaction for which cardholder address
    verification was requested. An AVS result code of "0" will be returned in the
    response message when no address verification has been requested. The value
    returned should be stored for later retrieval, as it may be required when voiding
    or refunding a transaction. Valid AVS response codes are listed below, and are
    identical across all <a href="ICharge_p_Gateway.htm">Gateway</a>s. (Note that some
    gateways do not return an AVS response)</para>
		<para>
			<para>
				<center>
					<list type="table">
						<item>
							<term>Code</term>
							<description>Description</description>
						</item>
						<item>
							<term>A</term>
							<description>
								<a href="ICharge_p_CustomerAddress.htm">CustomerAddress</a>
                        matches, <a href="ICharge_p_CustomerZip.htm">CustomerZip</a>
                        does not.</description>
						</item>
						<item>
							<term>E</term>
							<description>AVS error.</description>
						</item>
						<item>
							<term>N</term>
							<description>No match on
                        <a href="ICharge_p_CustomerAddress.htm">CustomerAddress</a> or
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a>.</description>
						</item>
						<item>
							<term>P</term>
							<description>AVS not applicable for this
                        transaction.</description>
						</item>
						<item>
							<term>R</term>
							<description>Retry - Issuer system unavailable.</description>
						</item>
						<item>
							<term>S</term>
							<description>Service not supported by issuer.</description>
						</item>
						<item>
							<term>U</term>
							<description>Address information is unavailable.</description>
						</item>
						<item>
							<term>W</term>
							<description>Nine digit
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a> matches,
                        <a href="ICharge_p_CustomerAddress.htm">CustomerAddress</a>
                        does not.</description>
						</item>
						<item>
							<term>X</term>
							<description>Exact AVS match, nine digit
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a>.</description>
						</item>
						<item>
							<term>Y</term>
							<description>Exact AVS match, five digit
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a>.</description>
						</item>
						<item>
							<term>Z</term>
							<description>Five digit
                        <a href="ICharge_p_CustomerZip.htm">CustomerZip</a> matches,
                        <a href="ICharge_p_CustomerAddress.htm">CustomerAddress</a>
                        does not.</description>
						</item>
					</list>
				</center>
				<para>Note: The above table does not apply to the WorldPay gateway. For
            Worldpay, this property will contain a 4-character string, which contains
            the AVS checks for the following fields:</para>
				<para>
					<para>
						<center>
							<list type="table">
								<item>
									<term>1st Character</term>
									<description>Card Verification Value (CVV)
                                check</description>
								</item>
								<item>
									<term>2nd Character</term>
									<description>Postal/Zip Code AVS check</description>
								</item>
								<item>
									<term>3rd Character</term>
									<description>Address AVS check</description>
								</item>
								<item>
									<term>4th Character</term>
									<description>Country Comparison check</description>
								</item>
							</list>
						</center>
						<para>The possible values for each result character are:</para>
						<para>
							<para>
								<center>
									<list type="table">
										<item>
											<term>0</term>
											<description>Not Supported.</description>
										</item>
										<item>
											<term>1</term>
											<description>Not Checked.</description>
										</item>
										<item>
											<term>2</term>
											<description>Matched.</description>
										</item>
										<item>
											<term>4</term>
											<description>No Match.</description>
										</item>
										<item>
											<term>8</term>
											<description>Partial Match.</description>
										</item>
									</list>
								</center>
							</para>
						</para>
					</para>
				</para>
			</para>
		</para>
	</remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ResponseCode">
	<summary>Gets the status of authorization request.</summary>
	<remarks>
		<para>This field contains the actual response code as returned by the
    <a href="ECheck_p_Gateway.htm">Gateway</a>. Unlike the
    <a href="ECheck_p_TransactionApproved.htm">TransactionApproved</a> property, this
    <b><font style="BACKGROUND-COLOR: #316ac5" color="white">ResponseCode</font></b>
    property provides more details about why a transaction was declined. Therefore, it
    is recommended that developers check the <b><font style="BACKGROUND-COLOR: #316ac5" color="white">ResponseCode</font></b> as well as the
    <a href="ECheck_p_TransactionApproved.htm">TransactionApproved</a> property. The
    Point of Sale system should evaluate this response code and NOT the
    <a href="ECheck_p_ResponseText.htm">ResponseText</a> to determine nature of a
    response message. The current (at the time of this release) response codes for the
    supported Gateways are listed below. Please see the individual specifications for
    each Gateway (available from the Gateway itself) for an updated list of these
    codes.</para>
		<para>
			<b>Authorize.Net:</b> (works with Authorize.net, ECX, MPCS, Planet Payment, and
        RTWare) 
        <para>
				<center>
					<list type="table">
						<item>
							<term>Code</term>
							<description>Description</description>
						</item>
						<item>
							<term>1</term>
							<description>Approved.</description>
						</item>
						<item>
							<term>2</term>
							<description>Declined.</description>
						</item>
						<item>
							<term>3</term>
							<description>Error.</description>
						</item>
					</list>
				</center>
				<para>
					<b>ITransact:</b>
					<para>
						<center>
							<list type="table">
								<item>
									<term>Code</term>
									<description>Description</description>
								</item>
								<item>
									<term>0</term>
									<description>Approved.</description>
								</item>
								<item>
									<term>1</term>
									<description>Declined or error condition.</description>
								</item>
							</list>
						</center>
						<para>
							<b>NetBilling:</b>
							<para>
								<center>
									<list type="table">
										<item>
											<term>Code</term>
											<description>Description</description>
										</item>
										<item>
											<term>I (letter I) = Incomplete</term>
											<description>These are transactions that are
                                        successful, but may fail at a later date, ie:
                                        An ACH transaction is approved, but then is
                                        later denied due to NSF.</description>
										</item>
										<item>
											<term>1 (number 1) = Approved, Good</term>
											<description>This is a transaction that is
                                        approved and charged.</description>
										</item>
										<item>
											<term>R = Refunded</term>
											<description>This transaction has been
                                        refunded. It is extremely unlikely you will
                                        ever see this return code in this context,
                                        although you may see it when browsing old
                                        transactions in the NetBilling database (via
                                        the Admin tools).</description>
										</item>
										<item>
											<term>T = Ticket</term>
											<description>This is returned when an
                                        Authorize-Only or AVS-Only transaction is
                                        good.</description>
										</item>
										<item>
											<term>F or 0 = Failure</term>
											<description>The number zero "0" or the letter
                                        "F" indicates that the transaction failed. A
                                        more detailed message will be available in the
                                        <a href="ECheck_p_ResponseText.htm">ResponseText</a>
                                        field.</description>
										</item>
										<item>
											<term>Other Code</term>
											<description>Any other non-zero, non-null codes
                                        should be interpreted as success for
                                        compatibility with future response
                                        codes.</description>
										</item>
									</list>
								</center>
								<para>
									<b>USAePay:</b>
									<para>
										<center>
											<list type="table">
												<item>
													<term>Code</term>
													<description>Description</description>
												</item>
												<item>
													<term>Approved</term>
													<description>Transaction
                                                approved.</description>
												</item>
												<item>
													<term>Declined</term>
													<description>Transaction
                                                declined.</description>
												</item>
												<item>
													<term>Error</term>
													<description>There is an error in the
                                                data received.</description>
												</item>
											</list>
										</center>
										<para>
											<b>TrustCommerce:</b>
											<para>
												<center>
													<list type="table">
														<item>
															<term>approved</term>
															<description>The transaction
                                                        was successfully
                                                        authorized.</description>
														</item>
														<item>
															<term>accepted</term>
															<description>The transaction
                                                        has been successfully accepted
                                                        into the system.</description>
														</item>
														<item>
															<term>decline</term>
															<description>The transaction
                                                        was declined. See
                                                        <a href="ECheck_p_ResponseText.htm">
                                                        ResponseText</a> for more
                                                        details.</description>
														</item>
														<item>
															<term>baddata</term>
															<description>Invalid parameters
                                                        passed. See
                                                        <a href="ECheck_p_ResponseData.htm">
                                                        ResponseData</a> for more
                                                        details.</description>
														</item>
														<item>
															<term>error</term>
															<description>System error when
                                                        processing transaction. See
                                                        <a href="ECheck_p_ResponseData.htm">
                                                        ResponseData</a> for more
                                                        details.</description>
														</item>
													</list>
												</center>
												<para>
													<b>MerchantAnywhere</b>
													<para>
														<center>
															<list type="table">
																<item>
																	<term>0</term>
																	<description>
                                                                Transaction
                                                                Approved.</description>
																</item>
																<item>
																	<term>1</term>
																	<description>
                                                                Transaction
                                                                Declined.</description>
																</item>
															</list>
														</center>
													</para>
												</para>
											</para>
										</para>
									</para>
								</para>
							</para>
						</para>
					</para>
				</para>
			</para>
		</para>
	</remarks>
	<value>The status of authorization request.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ResponseCVV2">
	<summary>Gets the CVV2 result code if it was requested.</summary>
	<remarks>
		<para>This field contains the host returned CVV2 result code as requested in
    <a href="ICharge_p_CardCVV2Data.htm">CardCVV2Data</a>. The following is a list of
    current result codes:</para>
		<para>
			<para>
				<center>
					<list type="table">
						<item>
							<term>M</term>
							<description>CVV2 Match.</description>
						</item>
						<item>
							<term>N</term>
							<description>CVV2 No Match.</description>
						</item>
						<item>
							<term>P</term>
							<description>Not Processed.</description>
						</item>
						<item>
							<term>S</term>
							<description>Merchant has indicated that CVV2 is not present on
                        card.</description>
						</item>
						<item>
							<term>U</term>
							<description>Issuer not certified and/or has not provided Visa
                        encryption keys.</description>
						</item>
					</list>
				</center>
				<para>A gateway may also support custom codes or human-readable response
            messages in this field. Please consult your gateway documentation to
            determine if CVV2 codes are supported.</para>
			</para>
		</para>
		<para>Warning: Setting a value here does nothing.  You need to have your own implementation by inheritance and overriding the property.</para>
	</remarks>
	<value>The CVV2 result code.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ResponseInvoiceNumber">
	<summary>Gets the invoice number submitted in authorization request.</summary>
	<value>The invoice number submitted in authorization request.</value>
	<remarks>
		<para>This field contains the InvoiceNumber submitted in the original transaction.
    This only applies to gateways that support the InvoiceNumber property. Please check
    the <a href="ICharge_p_Gateway.htm">Gateway</a> property for a list of properties
    that are supported by each gateway. If the ResponseInvoiceNumber does not match the
    InvoiceNumber originally submitted for this transaction, this transaction must not
    be settled by your processor.</para>
	</remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ResponseTransactionCode">
	<summary>Gets the Visa Transaction Identifier or MasterCard Reference Number.</summary>
	<value>The Visa Transaction Identifier or MasterCard Reference Number.</value>
	<remarks>
 This character field contains a transaction identifier or reference number. The
 Point of Sale (POS) device should not attempt to interpret the meaning of any data
 appearing in this field. Data returned in this field (if any) should be recorded and
 used to submit a modification of this transaction at a later time. (such as voiding the
 transaction or capturing an authorization-only transaction, if applicable).
 </remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ResponseText">
	<summary>Gets the text information that describes each response code.</summary>
	<remarks>
		<para>This field contains a response or display text message. This message can be
    used by the terminal to display the authorization result. The display text must not
    be used to determine the nature of a response message. A Gateway may translate the
    response according to the language indicated in the merchant account setup (if
    applicable).</para>
	</remarks>
	<value>The text information that describes each response code.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ResponseData">
	<summary>Gets the entire response returned from the gateway processor.</summary>
	<value>The entire response returned from the gateway processor.</value>
	<remarks>
		<para>This field contains the entire response returned from the gateway processor.
    You may use this to parse additional information that is not returned in the
    standard response properties.</para>
	</remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ReceivableCode">
	<summary>Gets or sets the document code of credit card payment.</summary>
	<value>The document code of credit card payment</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ErrorOccured">
	<summary>Indicates an error occurred on card authorization.</summary>
	<value>
		<strong>true</strong> if an error occurred; otherwise
 <strong>false</strong>.
 </value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CreditCardGatewayAssemblyName">
	<summary>Gets or sets the assemblyname of a card gateway plug-in.</summary>
	<value>The assemblyname of a card gateway plug-in.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CreditCardGatewayType">
	<summary>Gets or sets the class name of credit card gateway.</summary>
	<value>The class name of credit card gateway.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.CurrencyCode">
	<summary>Gets or sets the currency of credit card transaction.</summary>
	<value>The currency of credit card transaction.</value>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.ReferenceCode">
	<summary>
 Gets the Visa Transaction Identifier or MasterCard Reference Number.
 <!--DXMETADATA end -->
		<!--DXMETADATA start type="TaggedComment" source="Item" id="##OVERLOADS" format="%%comment%%" --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="OVERLOAD_LIST" namespace="property" source="Item" filter="" format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=overloadlist,caption=$$OverloadList$$%%%%filtereditemlist%%</div>" --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="SYNTAX" namespace="language" filter="type=all" NoHeader="True" NoFooter="True" format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=syntax,caption=$$Syntax$$%%%%FilteredItemList%%" -->
	</summary>
	<value>
 Gets the Visa Transaction Identifier or MasterCard Reference Number.
 <!--DXMETADATA end -->
		<!--DXMETADATA start type="TaggedComment" source="Item" id="##OVERLOADS" format="%%comment%%" --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="OVERLOAD_LIST" namespace="property" source="Item" filter="" format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=overloadlist,caption=$$OverloadList$$%%%%filtereditemlist%%</div>" --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="SYNTAX" namespace="language" filter="type=all" NoHeader="True" NoFooter="True" format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=syntax,caption=$$Syntax$$%%%%FilteredItemList%%" -->
	</value>
	<remarks>
 This character field contains a transaction identifier or reference number. The
 Point of Sale (POS) device should not attempt to interpret the meaning of any data
 appearing in this field. Data returned in this field (if any) should be recorded and
 used to submit a modification of this transaction at a later time. (such as voiding the
 transaction or capturing an authorization-only transaction, if applicable).
 </remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.IsVoiding">
	<summary>
 Property is set to True when currently voiding a credit card payment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.IsEcommerce">
	<summary>
 Set by ISE to determine which account type to be passed on the gateway. 
 </summary>
	<value>False</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Is3DSecure">
	<summary>
 Set to true when the merchant account is in 3D Secure authorization.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Secure3DStatusDetail">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Secure3DStatus">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Secure3DMD">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Secure3DACSURL">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Secure3DPAReq">
	<summary>
 Use in 3D Secure Authorization
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Secure3DAuthorizationResult">
	<summary>
 This property is for 3D secure feature and for CBE only.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.#ctor">
	<summary>Initializes a new instance of BaseCreditCardGatewayFacade class.</summary>
</member><member name="M:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.PreAuthorize(System.String@)">
	<summary>Runs pre-authorization checks on the customer's credit card data.</summary>
	<remarks>
		<para>This method performs several checks on the customer information to determine
    if the card information submitted <i>could be</i> valid before proceeding with the
    actual transaction. If the pre-authorization was unsuccessful, the method throws an
    IPWorksException . The tests performed are listed below:</para>
		<para>
			<para>
				<center>
					<list type="table">
						<item>
							<term>Luhn Digit Check</term>
							<description>This process checks the digits of the
                        <a href="ICharge_p_CardNumber.htm">CardNumber</a> to make sure
                        that it <i>could be</i> a valid card number. The mathematical
                        algorithm used to determine validity is outlined in the Visa
                        External Interface Specification: Authorization Record Formats
                        Version 5.8, page 63.</description>
						</item>
						<item>
							<term>Card Type Check</term>
							<description>This process checks the prefix digits of the
                        <a href="ICharge_p_CardNumber.htm">CardNumber</a> to determine
                        if it is a valid card type. If the number prefix does not
                        correspond to a valid Visa, MasterCard, AMEX, Discover, or
                        Diner's Club card, the method throws an IPWorksException
                        .</description>
						</item>
						<item>
							<term>Expiration Date Check</term>
							<description>The date given in
                        <a href="ICharge_p_CardExpMonth.htm">CardExpMonth</a> and
                        <a href="ICharge_p_CardExpYear.htm">CardExpYear</a> is compared
                        to the current system date to make sure that the card is still
                        valid.</description>
						</item>
					</list>
				</center>
				<para>Please note that some Check Cards and foreign credit cards may not
            necessarily conform to either the Luhn Digit Check or Card Type Check.
            These pre-authorization checks are merely to help merchants reduce fees
            from invalid transactions and may not work for every credit card.</para>
			</para>
		</para>
	</remarks>
	<param name="result">
		<strong>true</strong> if pre-authorization is successful; otherwise
 <strong>false</strong>.
 </param>
</member><member name="M:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Authorize(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.CreditCardTransaction,System.String@)">
	<summary>Initiates an authorization request transaction.</summary>
	<remarks>This method sends an authorization request to the specified gateway.</remarks>
</member><member name="M:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.IsTransactionSupported(Interprise.Framework.Base.Shared.Enum.CreditCardTransaction)">
	<summary>
 Checks if the credit card transaction is supported by the specified
 gateway.
 </summary>
	<param name="transactionType">
		<strong>true</strong> if the specified gateway supports the transaction;
 otherwise <strong>false</strong>.
 </param>
</member><member name="M:Interprise.Facade.Base.Customer.CreditCardGateway.BaseCreditCardGatewayFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.SystemManager.SLAFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public Overridable</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.SystemManager.SLAFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.SystemManager.SLAFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.SystemManager.SLAFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.SystemManager.SLADatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_slaDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.SystemManager.SLAFacade.AddSLA(System.String)">
	<summary>
 Adds a new row to SLA Table with default values
 </summary>
	<param name="p_slaName">The name for the new SLA</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.SystemManager.SLAFacade.AddBusinessCalendar(System.String)">
	<summary>
 Adds new row to BusinessCalednar Table
 </summary>
	<param name="p_businessCalendarName">The name for the new business calendar</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.SystemManager.SLAFacade.AddHolidayCalendar(System.String)">
	<summary>
 Adds new row to HolidayCalendar Table
 </summary>
	<param name="p_holidayCalendarName">The name for the new business calendar</param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CRM.PreferenceFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the facade.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public Overridable</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.CRM.PreferenceFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.CRM.PreferenceFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.PreferenceFacade.#ctor(Interprise.Framework.Base.DatasetGateway.CRM.PreferenceDatasetGateway)">
	<summary>
 Create an Instance of this class.
 </summary>
	<param name="p_PreferenceDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.PreferenceFacade.AddPreference">
	<summary>
 Adds a row with default values to the preference table
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.PreferenceFacade.AddPreferenceFilter(System.String,Interprise.Framework.Base.Shared.Enum.CRMPreferenceType)">
	<summary>
 Adds a row with default values to the preference filter table
 </summary>
	<param name="filterName"> The name for the filter </param>
	<param name="filterType"> The type of preference </param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.PreferenceFacade.IsFilterNameExisting(System.String,Interprise.Framework.Base.Shared.Enum.CRMPreferenceType)">
	<summary>
 Checks if filter name is already existing
 </summary>
	<param name="p_filterName"> The filter name to search </param>
	<param name="p_preferenceType"> The preference type to serach </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.PreferenceFacade.DoLoadDataset(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CRM.PreferenceFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ClassTemplateFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="transactionDescription"></param>
	<param name="isUseCache"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.ClassTemplateFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn in a row.
 </summary>
	<param name="row">A <strong>System.Data.DataRow</strong> that contains the row to be validated</param>
	<param name="columnName">A <strong>String</strong> description of the DataColumn to be validated.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.CurrentDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.CurrentReportType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.CurrentTransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.IsCustomDLL(System.String)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.IsPlanAlreadyApproved">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.JobDetailCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.JobItem">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.LoadCommandSet(System.String)">
	<summary>
	</summary>
	<param name="documentCode"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.IsCustomize">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.JobSchedulerFacade.UpdateCommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.#ctor(Interprise.Framework.Base.DatasetGateway.JobSchedulerDatasetGateway)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.Dispose">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AddJobItemRow(Interprise.Framework.Base.Shared.Structure.JobItem)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AssignJobItemClassType(System.String,System.Reflection.MethodInfo)">
	<summary>
	</summary>
	<param name="jobitemClassType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.CreateInputParameter(System.Reflection.MemberInfo)">
	<summary>
	</summary>
	<param name="jobItemClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.CreateJobParameter(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobItemParameterDataTable)">
	<summary>
	</summary>
	<param name="systemJobItemParameter"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.GetJobMethodInfo">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.LoadJobItem(System.String)">
	<summary>
	</summary>
	<param name="jobItemCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.TestExecuteJobItem(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateJobItemRow(System.String,Interprise.Framework.Base.Shared.Structure.JobItem)">
	<summary>
	</summary>
	<param name="jobItem"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.ValidateJobItemExist(Interprise.Framework.Base.Shared.Structure.JobItem)">
	<summary>
 Returns the JobItemCode
 </summary>
	<param name="jobItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AddJobPlan">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AddPreference">
	<summary>
 Adds a row with default values to the preference table
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AssignDependency(System.Data.DataRowView,System.Data.DataRow)">
	<summary>
	</summary>
	<param name="newItemRowView"></param>
	<param name="itemRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AssignCriteriaCode(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobPlanDetailRow,System.String)">
	<summary>
	</summary>
	<param name="criteriaCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AssignDate(System.String,System.DateTime,System.DateTime)">
	<summary>
	</summary>
	<param name="columnName"></param>
	<param name="dateValue"></param>
	<param name="timeValue"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AssignOperator(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="userRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AssignRunDay(System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="columnName"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DeleteAllJobPlanDetail">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DiscoverJobItemClassTypeWithVerb">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.ExamineForm(System.Type,System.String)">
	<summary>
	</summary>
	<param name="examineType"></param>
	<param name="jobItemClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.LoadJobPlan(System.String)">
	<summary>
	</summary>
	<param name="jobPlanCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.LoadGanttData(Interprise.Framework.Base.Shared.Enum.JobGanttViewType)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.PlanActivationChanged">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.RemoveSystemJobExecutionQueue(System.String)">
	<summary>
	</summary>
	<param name="planCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateParentJobOccurrenceCode(System.String,System.String)">
	<summary>
	</summary>
	<param name="jobOccurrenceCode"></param>
	<param name="parentJobOccurrenceCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateSortOrder(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="jobOccurrenceCode"></param>
	<param name="sortOrder"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateJobItemDescription(System.String,System.String)">
	<summary>
	</summary>
	<param name="jobItemCode"></param>
	<param name="proposeJobItemDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateJobItemDescription(Interprise.Framework.Base.DatasetGateway.JobSchedulerDatasetGateway,System.String)">
	<summary>
	</summary>
	<param name="jobSchedulerGateway"></param>
	<param name="proposeDescription"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.VerifyIsActiveModified">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.CancelJobExecution(System.String)">
	<summary>
	</summary>
	<param name="executionQueueCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.CreateJobExecutionQueue">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AssignNotes(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow,System.Exception)">
	<summary>
	</summary>
	<param name="jobItemRow"></param>
	<param name="exception"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DeseriliazeParameter(System.Byte[])">
	<summary>
	</summary>
	<param name="parameter"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DeserializeInputParameter(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DeserializeOutputParameter(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DeserializeJobItemFacade(System.String,System.String[],System.Object[])">
	<summary>
	</summary>
	<param name="pluginInfo"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DeserializeJobItemClassType(System.String,System.String,System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DeserializePresentationPlugin(System.String)">
	<summary>
	</summary>
	<param name="pluginAssemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.JobItemClassType_PluginSerializationError(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.DiscoverFacadeInstance(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow)">
	<summary>
	</summary>
	<param name="jobItemRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.AssignJobItemClassTypCriteriaCode(System.Int32,System.Object,System.String)">
	<summary>
	</summary>
	<param name="facadeInstance"></param>
	<param name="criteriaCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.ExecuteJobItem">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.ExecuteJobItem(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow,System.Object)">
	<summary>
	</summary>
	<param name="jobItemRow"></param>
	<param name="facadeInstance"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.GenerateInputParameters(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.GenerateOutputParameters(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.GenerateParameters(Interprise.Framework.Base.Shared.Enum.JobType,Interprise.Framework.Base.DatasetGateway.JobSchedulerDatasetGateway)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.GetJobExecutionMethodParameter(Interprise.Framework.Base.DatasetGateway.JobSchedulerDatasetGateway)">
	<summary>
	</summary>
	<param name="parameterDataset"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.InvokeFunction(System.Object,System.Reflection.MethodInfo,System.Object[])">
	<summary>
	</summary>
	<param name="facadeInstance"></param>
	<param name="executeJobItemMethodInfo"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.IsCustomPlugin(System.String)">
	<summary>
	</summary>
	<param name="pluginClassType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.SendNotification(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow,Interprise.Framework.Base.Shared.Enum.JobNotification)">
	<summary>
	</summary>
	<param name="notification"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateDependencyOutputParameters(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow,System.Object)">
	<summary>
	</summary>
	<param name="outputParameter"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateJobCompleted(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateJobExecutionTime(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow,System.DateTime)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateJobStarted(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateJobStatus(Interprise.Framework.Base.DatasetComponent.JobSchedulerDataset.SystemJobExecutionQueueDetailViewRow,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.WriteToEventLog(System.String,System.Int32,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="message"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
	</summary>
	<param name="transactionType"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.UpdateDataSet">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.JobSchedulerFacade.SystemJobTable_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Inventory.SpecialItemAttributeFacade.UpdateDataDictionaryObjects(Interprise.Framework.Base.DatasetGateway.DataDictionaryDatasetGateway,Interprise.Extendable.Base.Facade.IBaseInterface)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.Inventory.SpecialItemAttributeFacade.GenerateXmlStrSOItemCodeValuePair(System.Data.DataTable,System.String[]@,System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Boolean)">
	<summary>
	</summary>
	<param name="sourceTable"></param>
	<param name="itemCodes"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.AutoGeneratePODropmessageError">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.CurrentDataset">
	<summary>
 Returns the current business dataset value.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.CurrentBusinessRuleType">
	<summary>
 Returns the current business rule type value.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.CurrentReportType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.CurrentTransactionType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.IsCreatePOFromCustomer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.IsIgnoreStockLevel">
	<summary>
 Check if ignore stock level
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.ItemOptionFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.PurchaseReceiptWarehouseCode">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.ReservationFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.ReservationDataset">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.SSDPreference">
	<summary>
 Get Supplier Preference
 </summary>
	<value></value>
	<returns>(0) NOTC (1) TermsOfDelivery (2) IsTractAvailableDiscount
 (3) IsUseSupplierNominalCodesForLineItem (4) IsUseSupplierTaxCodeLineItems</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.TransactionType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.DropShipOrderFacade.UnitMeasureSystemPerUser">
	<summary>
    Returns the measuring system used by the user
    (Imperial or Metric)
 </summary>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.#ctor(Interprise.Framework.Base.DatasetGateway.Customer.DropShipOrderDatasetGateway)">
	<summary>
	</summary>
	<param name="purchaseOrderDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.Add(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Procedure for adding new record values depending on the transaction type (Purchase Quote, Purchase Order or Contract Order).
 </summary>
	<example>
		<code lang="VB" title="Adds new row on the SupplierPurchaseOrder data table.">
		</code>
		<code lang="VB" title="Adds new row on the SupplierPurchaseOrder Data Table">
 Dim PurchaseOrderFacade As Interprise.Facade.Supplier.PurchaseOrderFacade
 Dim PurchaseOrderDataset As Interprise.Framework.Supplier.DatasetGateway.DropShipOrderDatasetGateway
 'creates new instance of the facade and dataset.
 PurchaseOrderDataset = New Interprise.Framework.Supplier.DatasetGateway.DropShipOrderDatasetGateway
 PurchaseOrderFacade = New Interprise.Facade.Supplier.PurchaseOrderFacade(PurchaseOrderDataset)
 'creates new row to be used in adding new row in SupplierPurchaseOrder
 Dim purchaseOrderRow As Interprise.Framework.Supplier.DatasetGateway.DropShipOrderDatasetGateway.SupplierPurchaseOrderRow = _ 
 PurchaseOrderDataset.SupplierPurchaseOrder.NewSupplierPurchaseOrderRow
 'this should be existing to your current database.
 'assign the supplier code, 
 purchaseOrderRow.SupplierCode = "SUP-000001"
 'assign the supplier name, 
 purchaseOrderRow.SupplierName = "Wesley Go"
 'assign the supplier currencyCode, 
 purchaseOrderRow.CurrencyCode = "GBP"
 'call the add method in PurchaseOrderFacade
 'assign the created purchaseOrderRow to the supllierRow parameter
 'assign transactype you want o the second parameter
 'sample; Purchase Order,Purchase Quote,PurchaseContract
 PurchaseOrderFacade.Add(purchaseOrderRow,Interprise.Framework.Base.Shared.Enum.TransactionType.PurchaseOrder)
    </code>
		<code lang="CS" title="Adds new row on the SupplierPurchaseOrder Data Table">
 Interprise.Facade.Supplier.PurchaseOrderFacade PurchaseOrderFacade;
 Interprise.Framework.Supplier.DatasetGateway.DropShipOrderDatasetGateway PurchaseOrderDataset;
 //creates new instance of the facade and dataset.
 PurchaseOrderDataset = new Interprise.Framework.Supplier.DatasetGateway.DropShipOrderDatasetGateway();
 PurchaseOrderFacade = new Interprise.Facade.Supplier.PurchaseOrderFacade(PurchaseOrderDataset);
 //creates new row to be used in adding new row in SupplierPurchaseOrder
 Interprise.Framework.Supplier.DatasetGateway.DropShipOrderDatasetGateway.SupplierPurchaseOrderRow purchaseOrderRow = _ 
 PurchaseOrderDataset.SupplierPurchaseOrder.NewSupplierPurchaseOrderRow;
 //this should be existing to your current database.
 //assign the supplier code,
 purchaseOrderRow.SupplierCode = "SUP-000001";
 //assign the supplier name,
 purchaseOrderRow.SupplierName = "Wesley Go";
 //assign the supplier currencyCode,
 purchaseOrderRow.CurrencyCode = "GBP";
 //call the add method in PurchaseOrderFacade
 //assign the created purchaseOrderRow to the supllierRow parameter
 //assign transactype you want o the second parameter
 //sample; Purchase Order,Purchase Quote,PurchaseContract
 PurchaseOrderFacade.Add(purchaseOrderRow, Interprise.Framework.Base.Shared.Enum.TransactionType.PurchaseOrder);
    </code>
	</example>
	<param name="SupplierRow">The source row.</param>
	<param name="transaction">The transaction type being used.</param>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.AdjustOnOrderStockTotals(System.String,System.String)">
	<summary>
 Procedure to adjust the stock totals when the purchase order is saved or the goods received is posted.
 </summary>
	<param name="itemCode">Specifies the item code to be adjusted</param>
	<param name="warehouseCode">Specifies the warehouse code to be adjusted</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.AssignSupplierDefaults(Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Assigns the supplier default values (accounts, currency, payment term, shipping
 method, etc.)
 </summary>
	<param name="transaction">Obsolete</param>
	<param name="SupplierRow">The datarow where the supplier information is stored. (Uses the SupplierView view)</param>
	<param name="headerRow">The destination header row. (Either the SupplierPurchaseOrder or SupplierPurchaseReceipt)</param>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.AddHandlerReservationQuantityChanged">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.AssignQuantityReserved(System.Data.DataRow,System.Decimal)">
	<summary>
	</summary>
	<param name="lineItemRow"></param>
	<param name="proposeQuantityReserved"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.AssignWarehouse(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataTable)">
	<summary>
 Procedure to assign the warehouses to the line items. 
 </summary>
	<param name="strWarehouseCode">Specifies the warehouse code.</param>
	<param name="enmTransaction">Determines the document which is using this method. Set either to
 Interprise.Framework.Base.Shared.TransactionType.PurchaseQuote,
 Interprise.Framework.Base.Shared.TransactionType.PurchaseOrder and
 Interprise.Framework.Base.Shared.TransactionType.PurchaseReceipt (Goods
 Received)</param>
	<param name="detailTable">Specifies the current data table. (Either the SupplierPurchaseOrderDetail or SupplierPurchaseReceiptDetail)</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.AutoReserveSalesOrderToPO(System.String,Interprise.Framework.Base.DatasetComponent.Customer.DropShipOrderDataset.SupplierPurchaseOrderDetailRow)">
	<summary>
	</summary>
	<param name="salesOrderCode"></param>
	<param name="orderDetailRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.BuildCustomItemDescription(System.Boolean,System.Data.DataColumn[],System.Data.DataColumn,System.Text.StringBuilder@,System.String,System.Data.DataRow,System.String[]@,Interprise.Framework.Base.DatasetComponent.Customer.DropShipOrderDataset.SupplierPurchaseOrderDetailRow)">
	<summary>
	</summary>
	<param name="canAddCustomItemDescription"></param>
	<param name="includedDynamicColumns"></param>
	<param name="col"></param>
	<param name="customItemDescription"></param>
	<param name="formatDeveloperID"></param>
	<param name="optionRow"></param>
	<param name="optionHelper"></param>
	<param name="poDetailRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.CalculateCostLevels(System.Decimal,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Decimal@)">
	<summary>
 Calculates the cost of the line item with respect to the price level of the
 supplier.
 </summary>
	<returns>Caculated pricing cost.</returns>
	<param name="exchangeRate">The exchange of the currency that will be used in caculating the cost.</param>
	<param name="supplierCode">
 The supplier code to be used in getting the cost in the <font color="maroon" size="2"><font color="black">InventorySupplierPricingLevel</font></font> table
 </param>
	<param name="itemCode">
 The item code to be used in getting the cost in the <font color="maroon" size="2"><font color="black">InventorySupplierPricingLevel</font></font> table
 </param>
	<param name="unitMeasureCode">
 The unit measure code to be used in getting the cost in the
 <font color="maroon" size="2"><font color="black">InventorySupplierPricingLevel</font></font> table
 </param>
	<param name="warehouseCode">
 The warehouse code to be used in getting the default cost in the
 InventorySupplier table.
 </param>
	<param name="unitMeasureQty">
 The unit measure qty to be used in getting the base cost of the item in the
 <font color="black" size="2">InventorySupplierPricingLevel
 <font size="1">table.</font></font>
	</param>
	<param name="quantity">
 The quantity to be used in getting the cost in the <font color="maroon" size="2"><font color="black">InventorySupplierPricingLevel</font></font> table
 </param>
	<param name="baseUnitCost">The computed base unit cost per item.</param>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.CalculateDetailTotals(System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Boolean)">
	<summary>
 Calculates the totals and taxes of the line item. 
 </summary>
	<param name="destinationRow">The line item row (Either the SupplierPurchaseOrderDetail or SupplierPurchaseReceiptDetail)</param>
	<param name="transaction">Determines the document which is using this method. Set either to
 Interprise.Framework.Base.Shared.TransactionType.PurchaseQuote,
 Interprise.Framework.Base.Shared.TransactionType.PurchaseOrder and
 Interprise.Framework.Base.Shared.TransactionType.PurchaseReceipt (Goods
 Received)</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.CalculateNetTotal(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Calculates the "Net Total" additional column.
 </summary>
	<param name="transactionType">Specifies the current transaction type.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.CalculateSubTotals(Interprise.Framework.Base.Shared.Enum.TransactionType,System.Double@,System.Double@)">
	<summary>
 Calculates the header totals.
 </summary>
	<param name="transaction">Specifies the transaction type.</param>
	<param name="itemTax">Specifies the tax of the particular item.</param>
	<param name="freightTax">Specifies the freight tax of the document.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.ClearTransactionReservation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.CopyItemOption(System.String,System.String[],Interprise.Framework.Base.DatasetComponent.BaseDataset,Interprise.Framework.Base.DatasetComponent.BaseDataset@)">
	<summary>
	</summary>
	<param name="parentTableName"></param>
	<param name="childTableNames"></param>
	<param name="sourceDS"></param>
	<param name="destinationDS"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.CreateDropShipments(Interprise.Framework.Base.DatasetComponent.Customer.DropShipOrderDataset.SupplierDropShipItemsDataTable)">
	<summary>
 Creates the purchase orders based on the items selected.
 </summary>
	<param name="SupplierDropShipItemsTable"></param>
	<returns>The transaction numbers for the newly created purchase orders.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.CreateDynamicTableCommandSet(System.String[][]@,System.Boolean@)">
	<summary>
	</summary>
	<param name="param"></param>
	<param name="itemOptionHasChanges"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.DeleteItemReservation(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.Dispose(System.Boolean)">
	<summary>
 Release the resources from all the datasets used by the System.ComponentModel.MarshalByValueComponent
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.GenerateXmlStrSOItemCodeValuePair(System.Data.DataTable,System.String[])">
	<summary>
	</summary>
	<param name="specialOrderTable"></param>
	<param name="itemCodes"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.LoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Perform to load multiple resultset
 </summary>
	<param name="commandSet"></param>
	<param name="clearTableType"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.MergeTransactionReservation">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.PopulateBillToAddress(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Method that supplies the bill to address.
 </summary>
	<param name="SupplierCode">Specifies the current supplier code.</param>
	<param name="transaction">Determines the document which is using this method. Set either to
 Interprise.Framework.Base.Shared.TransactionType.PurchaseQuote,
 Interprise.Framework.Base.Shared.TransactionType.PurchaseOrder and
 Interprise.Framework.Base.Shared.TransactionType.PurchaseReceipt (Goods
 Received)</param>
	<param name="transactionRow">Specifies the current header row (Either SupplierPurchaseOrder or SupplierPurchaseReceipt)</param>
	<param name="headerRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.PopulateShipFromAddress(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataRow,System.Data.DataRow,System.String)">
	<summary>
 Method that supplies the ship from address.
 </summary>
	<param name="SupplierCode">Specifies the current supplier code.</param>
	<param name="transaction">Determines the document which is using this method. Set either to
 Interprise.Framework.Base.Shared.TransactionType.PurchaseQuote,
 Interprise.Framework.Base.Shared.TransactionType.PurchaseOrder and
 Interprise.Framework.Base.Shared.TransactionType.PurchaseReceipt (Goods
 Received)</param>
	<param name="transactionRow">Specifies the current header row (Either SupplierPurchaseOrder or SupplierPurchaseReceipt)</param>
	<param name="headerRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.PopulateShipToAddress(System.Data.DataRow,System.Data.DataRow,Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Method that supplies the bill to address.
 </summary>
	<param name="headerRow"></param>
	<param name="shipToRow"></param>
	<param name="transaction">Determines the document which is using this method. Set either to
 Interprise.Framework.Base.Shared.TransactionType.PurchaseQuote,
 Interprise.Framework.Base.Shared.TransactionType.PurchaseOrder and
 Interprise.Framework.Base.Shared.TransactionType.PurchaseReceipt (Goods
 Received)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.ProcessItemOption(System.Data.DataTable,Interprise.Framework.Base.DatasetGateway.Customer.DropShipOrderDatasetGateway,System.String[],System.String[][]@,System.Boolean,System.Collections.Hashtable)">
	<summary>
	</summary>
	<param name="specialOrderTable"></param>
	<param name="purchaseOrderDataset"></param>
	<param name="distinctItemCodes"></param>
	<param name="commandSet"></param>
	<param name="offline"></param>
	<param name="itemCodeAndTableNameValuePair"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.RecalculateFreightCharge(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>Calculates the freight according to the shipping method used.</summary>
	<remarks>
 If the field <strong>IsFreightOverridable</strong> is set to <em>true</em>, it
 will not call the <strong>SetFreightRateValue</strong> method.
 </remarks>
	<param name="transaction">Determines the document which is using this method. 
 Set either to Interprise.Framework.Base.Shared.TransactionType.PurchaseQuote, 
 Interprise.Framework.Base.Shared.TransactionType.PurchaseOrder and 
 Interprise.Framework.Base.Shared.TransactionType.PurchaseReceipt (Goods Received)</param>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.RemoveHandlerAllocationReservationChanged">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.ReservationFacade_AllocationReservationChanged(System.Object,Interprise.Framework.Base.EventArguments.ReserveQuantityChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assign generated document code for the specified transaction.
 </summary>
	<param name="transaction"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.SetFreightRateValue(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
		<para>Does the actual calculation of the freight charge according to the shipping
    method</para>
	</summary>
	<param name="transaction">
 Determines the document which is using this method. Set either to
 Interprise.Framework.Base.Shared.TransactionType.PurchaseQuote,
 Interprise.Framework.Base.Shared.TransactionType.PurchaseOrder and
 Interprise.Framework.Base.Shared.TransactionType.PurchaseReceipt (Goods
 Received)
 </param>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.tableColumnChanged_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
 Handles a table's column changed events.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Data entry validations are made here.</remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.tableColumnChanged_ColumnChanging(System.Object,System.Data.DataColumnChangeEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.UpdateItemReservation(System.Data.DataRow)">
	<summary>
	</summary>
	<param name="currentRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.Validate(System.String@,System.Boolean)">
	<summary>
 Performs data entry validations.
 </summary>
	<param name="message"></param>
	<param name="isRejectNew"></param>
	<returns>Returns true if no error occured.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.DropShipOrderFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Performs data entry validations.
 </summary>
	<returns>Returns true if no error occured.</returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CacheHasChanges">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CacheManagerRule">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CacheTableToUpdate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CacheTablesModified">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CurrentBusinessRule">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CurrentBusinessRuleType">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.IsSkipCachingOnPluginTablesWithAssembly">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.NewCache">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CurrentDataset">
	<summary>Gets the dataset that is currently being used by the facade.</summary>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CurrentReportType">
	<summary>Gets the report type of the UI that is using this facade.</summary>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CurrentTransactionType">
	<summary>Gets the transaction type of the UI that is using this facade.</summary>
</member><member name="P:Interprise.Facade.Base.CacheManagerFacade.CreatingCacheInProgress">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.CreateCacheTablesDeleteLog(System.Data.SqlClient.SqlConnection)">
	<summary>
	</summary>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.CreateTemporaryTable(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetPKColumns(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.CheckWebServer">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.AborCreateCacheDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.CreateCacheDatabase(System.String)">
	<summary>
	</summary>
	<param name="cacheDatabaseName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.ManageCacheManagerRuleHandler(System.Boolean)">
	<summary>
	</summary>
	<param name="add"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetCacheDate(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetCacheDeleteLog(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cachedate"></param>
	<param name="batchIndex"></param>
	<param name="noOfRecords"></param>
	<param name="remaining"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetCacheTablesModified(System.Object[][])">
	<summary>
	</summary>
	<param name="cacheData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetCacheTablesToUpdate(System.String,System.DateTime)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cacheDate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetCompressedNewCacheData(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cachedate"></param>
	<param name="batchIndex"></param>
	<param name="noOfRecords"></param>
	<param name="remaining"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetCompressedCacheTableDeleteLog(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cachedate"></param>
	<param name="batchIndex"></param>
	<param name="noOfRecords"></param>
	<param name="remaining"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetNewCacheDataInBCPFormat(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cachedate"></param>
	<param name="batchIndex"></param>
	<param name="noOfRecords"></param>
	<param name="remaining"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetNewCBNCacheData(System.String,System.DateTime)">
	<summary>
	</summary>
	<param name="cbnTableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetNewPluginData(System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cachedate"></param>
	<param name="batchIndex"></param>
	<param name="noOfRecords"></param>
	<param name="remaining"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.GetTotalNoOfRecordToUpdate(System.String,System.DateTime)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.DropCacheDatabase(System.String)">
	<summary>
	</summary>
	<param name="CacheDatabaseName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.OnProgressEventChanged(System.String,System.Int32,System.Int32,System.Int32,Interprise.Facade.Base.CacheManagerFacade.ApplyingCachingCommand)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="remainingRecords"></param>
	<param name="noOfRecords"></param>
	<param name="totalRecordsToUpdate"></param>
	<param name="applyingCachingCommand"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.ValidateSkipCachingOnPluginTablesWithAssembly(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.UpdateCacheData(System.String[])">
	<summary>Update the cache records based on the changes made to the data source.</summary>
	<param name="cacheTables">Array of table name to be updated.</param>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.UpdateCacheData(System.Data.DataTable,System.String)">
	<summary>Update the cache records based on the data tables records.</summary>
	<param name="cacheData">Cache data container.</param>
	<param name="destinationTable">Cache table to be updated.</param>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.ApplyDeletedCacheData(System.String,System.DateTime,System.Data.SqlClient.SqlConnection)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cacheDate"></param>
	<param name="offlineConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.ApplyDeletedCacheData(System.String,System.DateTime,System.Data.SqlClient.SqlConnection,System.DateTime@,System.Int32)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cacheDate"></param>
	<param name="offlineConnection"></param>
	<param name="deletedCacheDate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.ApplyUpdateCacheData(System.String,System.Data.DataSet,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.SqlClient.SqlConnection)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="cacheData"></param>
	<param name="cacheDate"></param>
	<param name="remainingRecords"></param>
	<param name="batchIndex"></param>
	<param name="noOfRecords"></param>
	<param name="totalRecordsToUpdate"></param>
	<param name="offlineConnection"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.BulkInsertData(System.Data.SqlClient.SqlConnection,System.String,System.String)">
	<summary>
	</summary>
	<param name="connection"></param>
	<param name="bcpFilePath"></param>
	<param name="destinationTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.UpdateCacheDate(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="offlineConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.UpdatePluginAssemblyID(System.String,System.String,System.DateTime)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<param name="assemblyID"></param>
	<param name="dateModified"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.UpdatePluginLocation(System.String,System.String,System.DateTime)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<param name="location"></param>
	<param name="dateModified"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.UpdateCacheTablesModified(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.VerifyConnection">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.CacheMangerRule_CreatingCacheDatabaseCompleted(System.Object,Interprise.Framework.Base.EventArguments.CachingCompletedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.CacheMangerRule_CreatingCacheDatabaseFailed(System.Object,Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CacheManagerFacade.CacheMangerRule_CreatingCacheDatabaseProgress(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.ConnectionString">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CustomCommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.EnableCompression">
	<summary>
 Flag to determine if the data to Read or Send to or from the database will be compressed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.LiveSupportEnableCompression">
	<summary>
 Flag to determine if the data to Read or Send to or from the live support database will be compressed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CurrentDataset">
	<summary>
 Gets the dataset that is currently being used by the control.
 </summary>
	<returns>The dataset to be used for reading and saving.</returns>
	<remarks>This property must be overriden or implemented as it will be the dataset used 
 for the LoadDataSet and UpdateDataSet functions.</remarks>
	<example>
		<font size="2">Dim m_CurrentDataset as
     Interprise.Framework.Base.DatasetComponent.BaseDatset</font>
		<para>
			<para><font color="blue" size="2">Public</font>
				<font color="blue" size="2"> ReadOnly</font>
				<font color="blue" size="2"> Property</font>
				<font size="2"> CurrentDataset()</font><font color="blue" size="2"> As</font>
				<font size="2"> Interprise.Framework.Base.DatasetComponent.BaseDataset</font>
				<font color="blue" size="2"> Implements</font>
				<font size="2"> Interprise.Extendable.Base.Presentation.Generic.IBaseFormSectionInterface.CurrentDataset
 </font></para>
			<para><font color="blue" size="2">Get</font></para>
			<para><font color="blue" size="2"><font color="black">Return
         m_CurrentDataset</font></font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Get</font></para>
			<para><font color="blue" size="2">End</font>
				<font color="blue" size="2"> Property</font></para>
		</para>
	</example>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CurrentBusinessRule">
	<summary>
 Gets the business rule for this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CurrentBusinessRuleType">
	<summary>
 Gets what business rule to use. (used by the web service)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Override this only if there is a specific business rule designed for this facade.</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CurrentTransactionType">
	<summary>
 Gets the transaction type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CurrentReportType">
	<summary>
 Gets the report type of the UI that is using this facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This property is obsolete.</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.StreamData">
	<summary>
 Gets of sets the memory stream that holds the dataset information 
 to be sent/received by the facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the stream is compressed, it must be uncompressed first before 
 being converted to a dataset.</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.StreamSchema">
	<summary>
 Gets of sets the memory stream that holds the dataset schema information 
 to be sent/received by the facade.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the stream is compressed, it must be uncompressed first before 
 being converted to a dataset schema.</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.TemporaryDataset">
	<summary>
 Gets the dataset that will temporarily hold the retreived data.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>So as not to replace the current contents of the CurrentDataset property, 
 the data is first placed here and merged back to the CurrentDataset.</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.ModelConnectionString">
	<summary>
 Gets the connection string that will be used to connect to the model database server.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.OnlineConnectionString">
	<summary>
 Gets the connection string that will be used to connect to the main database server.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This connection string is formed according to the Sign In form's 'Online Connection via Local Area Network' group
 (if the connection is set to LAN) or 'Online Connection via Internet Web Services' group. (if the connection is set to Internet)</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.OfflineConnectionString">
	<summary>
 Gets the connection string that will be used to connect to the cache database server.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This connection string is formed according to the Sign In form's 'Offline Connection via Local Area Network' group</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.LiveSupportConnectionString">
	<summary>
 Gets the connection string that will be used to connect to the cache database server.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This connection string is formed according to the Sign In form's 'Interprise Live Support Connection by Internet Web Services' group</remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.LastErrorOccured">
	<summary>
 Gets or set the message of the last error.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.HasErrorAutoAddPostal">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.ValidateAutoAddPostal">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.ConfigurationManager">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.BusinessServiceURL">
	<summary>
 Returns the business service url to used to connect via web service. Not applicable in the shared function GetBusinessServiceProxy.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.PluginFileVersion(System.String)">
	<summary>
	</summary>
	<param name="mainAssemblyName"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.PluginAssemblyID(System.String)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsAllowFractional">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Interprise.Facade.Base.BaseFacade.m_hostAction">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsSystemStillCaching">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.GroupCode">
	<summary>
 Gets or sets the current selected menu group
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.isHostExecute">
	<summary>
 Gets or sets the current selected menu group
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.UserCustomizedSectionInfo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CustomUpdateCommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CustomLoadCommandSet">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.ParentChildRelations">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.HasCustomTable(System.Boolean)">
	<summary>
	</summary>
	<param name="isUpdate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CustomTableDefaultRows">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsCustomTable(System.String)">
	<summary>
	</summary>
	<param name="tableName">Table name of the custom table</param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.LoadedCustomTable">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsReloadSectionDetail">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CBNCacheTables">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsCBNCacheTable(System.String)">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsAudit(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsRealTimeCaching(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsCacheTable(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.CacheDate(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.SmallDateTimeMax">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.SmallDateTimeMaxValue">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.DateTimeMax">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.DateTimeMaxValue">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.PluginInformation">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsAccessDBEngineInstalled">
	<summary>
 Validates the client machine if the required Access Database Engine is installed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.IsValidOfficeVersion">
	<summary>
 Validates if the required MS Office version is installed on the client machine.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreateCacheDatabase">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.SynchronizeCacheData(System.String[])">
	<summary>
	</summary>
	<param name="cacheTables"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateCacheData(System.Data.DataTable,System.String)">
	<summary>
	</summary>
	<param name="data"></param>
	<param name="destinationTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateCacheData(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="data"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadCompressedDataSet(System.String[][],System.Byte[],Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="dsSchemaData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.FillCompressedDataset(System.String,System.String,System.String[],Interprise.Framework.Base.Shared.Enum.ConnectionStringType,System.String[][])">
	<summary>
	</summary>
	<param name="commandType"></param>
	<param name="commandText"></param>
	<param name="tableNames"></param>
	<param name="param"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.FilterDateByLastClosedPeriod(System.DateTime)">
	<summary>
 Check if there is a closed period and then
 Check if Transaction Date is in a closed period.
 </summary>
	<param name="JournalDate"></param>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Reads a table in the database using a specified command set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     Table1ReadStoredProcedureParameter1, Table1ReadStoredProcedureValue1, Table1ReadStoredProcedureParameter2, Table1ReadStoredProcedureValue2, ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2ReadStoredProcedureParameter1, Table2ReadStoredProcedureValue1,
     Table2ReadStoredProcedureParameter2, Table2ReadStoredProcedureValue2, ...etc.}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<param name="connStringType">Determines the database where reading will be done.</param>
	<remarks>
 This overloaded method is recommended if the tables that are
 to be read have different parameters or there is only one table to be read.
 </remarks>
	<returns>Used to determine if the reading was successful or not.</returns>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadDataSet(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Reads a table in the database using a specified command set and
 parameter set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, ...etc.}, 
 ...etc}</para>
	</param>
	<param name="parameters">
		<para>Format of the <strong>parameterSet</strong> parameter:</para>
		<para>New String()() {New String() {Parameter1, Value1},</para>
		<para>New String() {Parameter2, Value2}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<param name="connStringType">Determines if the reading should be done in the cache database.</param>
	<remarks>
 This overloaded method is recommended if the tables that are
 to be read have same parameters.
 </remarks>
	<returns>Used to determine if the reading was successful or not.</returns>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadDataSet(System.Data.CommandType,System.String,System.String[],System.String[][])">
	<summary>
 Reads a table from the database using a specified stored procedure or TSQL query.
 </summary>
	<param name="commandType">Specifies if the command to be sent to the database is a 
 Stored procedure or TSQL query.</param>
	<param name="commandText">The name of the Stored procedure or the actual 
 TSQL query</param>
	<param name="tableNames">The tables to be searched on.</param>
	<param name="param">The parameters needed for the Stored procedure.</param>
	<returns>The dataset containing the retrieved data.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadDataSet(System.Data.CommandType,System.String,System.String[],System.String[][],Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Reads a table from the database using a specified stored procedure or TSQL query.
 </summary>
	<param name="commandType">Specifies if the command to be sent to the database is a 
 Stored procedure or TSQL query.</param>
	<param name="commandText">The name of the Stored procedure or the actual 
 TSQL query</param>
	<param name="tableNames">The tables to be searched on.</param>
	<param name="param">The parameters needed for the Stored procedure.</param>
	<param name="connStringType">Determine the connection to use.</param>
	<returns>The dataset containing the retrieved data.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadDataset(System.String,System.String[],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Reads a table from the database using a specified stored procedure.
 </summary>
	<param name="commandText">The name of the Stored procedure.</param>
	<param name="tableNames">The listing of tables being read in the stored procedure.</param>
	<param name="parameterSet">The parameters defined in the stored procedure with its values</param>
	<param name="clearTableType">Determine if tables in the listing are to be cleared of any existing data.</param>
	<param name="connStringType">Determine the connection to use.</param>
	<returns>Boolean value if reading of the data was successful.</returns>
	<remarks>A variation of the LoadDataSet(CommandType, String, String(), String()(), ConnectionStringType) signature of the LoadDataset method.
 This method will only accept a stored procedure name and not a T-SQL query.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadDatasetFromModel(System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
 Reads a table in the model database using a specified command set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     Table1ReadStoredProcedureParameter1, Table1ReadStoredProcedureValue1, Table1ReadStoredProcedureParameter2, Table1ReadStoredProcedureValue2, ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2ReadStoredProcedureParameter1, Table2ReadStoredProcedureValue1,
     Table2ReadStoredProcedureParameter2, Table2ReadStoredProcedureValue2, ...etc.}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<remarks>
 This overloaded method is recommended if the tables that are
 to be read have different parameters or there is only one table to be read.
 </remarks>
	<returns>Used to determine if the reading was successful or not.</returns>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadDatasetFromModel(System.String[][],System.String[][],Interprise.Framework.Base.Shared.Enum.ClearType)">
	<summary>
 Reads a table in the database using a specified command set and
 parameter set.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1ReadStoredProcedure,
     ...etc.},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, ...etc.}, 
 ...etc}</para>
	</param>
	<param name="parameterSet">
		<para>Format of the <strong>parameterSet</strong> parameter:</para>
		<para>New String()() {New String() {Parameter1, Value1},</para>
		<para>New String() {Parameter2, Value2}, ...etc}</para>
	</param>
	<param name="clearTableType">
		<para>This is a enumeration that determines what tables to clear:</para>
		<para><em>None</em> - No tables will be cleared.</para>
		<para><em>Specific</em> - Only the tables specified will be cleared.</para>
		<para><em>All</em> - All tables will be cleared.</para>
	</param>
	<remarks>
 This overloaded method is recommended if the tables that are
 to be read have same parameters.
 </remarks>
	<returns>Used to determine if the reading was successful or not.</returns>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadDatasetFromModel(System.Data.CommandType,System.String,System.String[],System.String[][])">
	<summary>
 Reads a table from the database using a specified stored procedure or TSQL query.
 </summary>
	<param name="commandType">Specifies if the command to be sent to the database is a 
 Stored procedure or TSQL query.</param>
	<param name="commandText">The name of the Stored procedure or the actual 
 TSQL query</param>
	<param name="tableNames">The tables to be searched on.</param>
	<param name="param">The parameters needed for the Stored procedure.</param>
	<returns>The dataset containing the retrieved data.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<returns>
 If true, the saving succeeds, if false, it fails.
 </returns>
	<remarks>
	</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.String,System.Boolean,System.Boolean,System.Boolean,System.Data.CommandType,System.String,System.String[][],System.String[][]@)">
	<summary>
 Procedure to send the changes made to data source.
 </summary>
	<param name="commandSet">
		<para>Format of the <strong>commandSet</strong> parameter:</para>
		<para>New String()() {New String() {Table1Name, Table1CreateStoredProcedure,
     Table1UpdateStoredProcedure, Table1DeleteStoredProcedure},</para>
		<para>New String() {Table2Name, Table2ReadStoredProcedure, Table2UpdateStoredProcedure,
     Table2DeleteStoredProcedure}}}</para>
	</param>
	<param name="isUseCache">Determines if the saving of the tables should be done in the cache database.</param>
	<param name="transactionDescription">Describes what purpose of the update. (To be used by the Audit Trail)</param>
	<param name="transactionType">The transaction type of the UI.</param>
	<param name="isCallPostDocument">Boolean flag to include the execution of PostDocument method</param>
	<param name="isPostedDocument">Boolean flag that mark if the current transaction is already posted</param>
	<param name="nonquerycommandType">commandType for the executenonquery function to be included of the update dataset</param>
	<param name="nonquerycommand">query command to execute</param>
	<param name="nonqueryparameters">the paramenter of the query</param>
	<param name="nonqueryoutputParameters">the return output of the query</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateCompressedDataSet(System.String[][],Interprise.Framework.Base.Shared.Enum.TransactionType,System.Byte[],System.Byte[],System.Int32)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="transactionType"></param>
	<param name="data"></param>
	<param name="schema"></param>
	<param name="fileSize"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetChanges(System.String[])">
	<summary>
 Get the changes based on the given tableNames().
 </summary>
	<param name="tableNames">Array of tables to get the changes.</param>
	<returns>Dataset of modified records.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.PrepareCommandSet(System.String[][]@)">
	<summary>
 Extract the tables/commands applicable for the database update request.
 </summary>
	<param name="commandSet">Set of database request such as updating, inserting and deleting.</param>
	<returns>Array of modified tableNames()</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.InitializeDataset">
	<summary>
 Procedure to configure the dataset according to the DataDictionary.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.InitializeTable(System.String[])">
	<summary>
 Procedure to configure the DataTable according to the DataDictionary.
 </summary>
	<param name="tableNames">The tables to configure.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.InitializeTable(System.String)">
	<summary>
 Procedure to configure the DataTable according to the DataDictionary.
 </summary>
	<param name="tableName">The table to configure.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.InitializeTable(System.Data.DataTable)">
	<summary>
 Procedure to configure the DataTable according to the DataDictionary.
 </summary>
	<param name="table">The table to configure.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.InitializeUserCredentials(System.String,System.String)">
	<summary>
	</summary>
	<param name="userCode"></param>
	<param name="password"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreateTable(System.String)">
	<summary>
 Procedure to create a DataTable according to the DataDictionary.
 </summary>
	<param name="tableName">The table to create.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreateColumn(System.String,System.String)">
	<summary>
 Procedure to create a column according to datatype.
 </summary>
	<param name="columnName">The column to create.</param>
	<param name="sqlType">The type of column to create.</param>
	<returns></returns>
	<remarks>This is used in conjuction with the CreateTable procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreateColumn(System.String,System.String,System.Int32,System.Boolean,System.Object,System.Boolean,System.Boolean)">
	<summary>
 Procedure to create a column
 </summary>
	<param name="columnName">The string that represents the name of the column to be created.</param>
	<param name="sqlType">The supported System.Data.DataColumn.DataType.</param>
	<param name="maxLength">The maximum length of a text column</param>
	<param name="allowDBNull">The value that indicates whether null values are allowed in this column for rows that belong to the table.</param>
	<param name="defaultValue">The default value for the column when you are creating new rows.</param>
	<param name="isIdentity">The value that indicates whether the column is an identity or not.</param>
	<param name="isPrimaryKey">The value that indicates whether the column is a primaryKey or not.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.DropCacheDatabase(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.AssignDefaults(System.Object[][],System.Data.DataRowView@,System.Boolean,System.Boolean)">
	<summary>
 Assign values on a datarow.
 </summary>
	<param name="values">Object array containing the field/value combination. 
 Eg. (New Object()() {New Object() {"SupplierCode", "SUP-0000002"}}</param>
	<param name="destinationRow">The row where the values will be assigned to.</param>
	<param name="beginEdit">Determines if the DataRow.BeginEdit procedure will be called.</param>
	<param name="endEdit">Determines if the DataRow.EndEdit procedure will be called.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.AssignDefaults(System.Object[][],System.Data.DataRow@,System.Boolean,System.Boolean)">
	<summary>
 Assign values on a datarow.
 </summary>
	<param name="values">Object array containing the field/value combination. 
 Eg. (New Object()() {New Object() {"SupplierCode", "SUP-0000002"}}</param>
	<param name="destinationRow">The row where the values will be assigned to.</param>
	<param name="beginEdit">Determines if the DataRow.BeginEdit procedure will be called.</param>
	<param name="endEdit">Determines if the DataRow.EndEdit procedure will be called.</param>
	<remarks>This procedure is overloaded as the DataRowView can 
 contain a Row that is nothing. Passing the actual DataRow is safer. </remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.AssignDefaults(System.Object[][],System.Data.DataTable)">
	<summary>
 Procedure to assign the default values in the columns.
 </summary>
	<param name="values">Object array containing the field/value combination. 
 Eg. (New Object()() {New Object() {"SupplierCode", "SUP-0000002"}}</param>
	<param name="table">The DataTable where the default values will be assigned.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.AssignDefaults(System.Object[][],System.Data.DataTable[])">
	<summary>
 Procedure to assign the default values in the columns.
 </summary>
	<param name="values">Object array containing the field/value combination. 
 Eg. (New Object()() {New Object() {"SupplierCode", "SUP-0000002"}}</param>
	<param name="tables">The DataTables where the default values will be assigned.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetAccountCode(System.String[][],System.String)">
	<summary>
 Procedure to retrieve the account code from a multi dimensional array.
 </summary>
	<param name="accounts">The array containing the account codes.</param>
	<param name="postingCode">The unique posting code that will be used to retrieve the account code.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetAccountDescription(System.String[][],System.String)">
	<summary>
 Procedure to retrieve the account description from a multi dimensional array.
 </summary>
	<param name="accounts">The array containing the account description.</param>
	<param name="postingCode">The unique posting code that will be used to retrieve the account description.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetCacheField(System.String,System.String,System.String)">
	<summary>
 Procedure to retrieve a field from the cache database.
 </summary>
	<param name="field">The field to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<returns>The value of the field.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetCacheField(System.String,System.Data.CommandType,System.String[][])">
	<summary>
	</summary>
	<param name="commandText"></param>
	<param name="commandType"></param>
	<param name="param"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetCacheRow(System.String[],System.String,System.String)">
	<summary>
 Procedure to retrieve fields from the cache database.
 </summary>
	<param name="fields">The fields to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<returns>An array containing the values of the fields specified.</returns>
	<remarks>The order of the fields is dependent on the order of the array.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetCacheRows(System.String[],System.String,System.String)">
	<summary>
 Procedure to retrieve multiple rows from the cache database.
 </summary>
	<param name="fields">The fields to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<returns>An 2 dimensional array with the first array 
 reprensenting the row and the second array representing the field values.</returns>
	<remarks>The order of the fields is dependent on the order of the array.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetField(System.String,System.String,System.String)">
	<summary>
 Procedure to retrieve a field from the main database using TSQL query.
 </summary>
	<param name="field">The field to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<returns>The value of the field.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetField(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Procedure to retrieve a field from the main database using TSQL query.
 </summary>
	<param name="field">The field to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<param name="isAutoFormatCondition">Indicates if the condition string will be corrected for single quote (') instances.  Example John's -&gt; John''s.</param>
	<returns>The value of the field.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetField(System.String,System.Data.CommandType,System.String[][])">
	<summary>
 Procedure to retrieve a field from the main database using a command.
 </summary>
	<param name="commandText">The stored procedure name/TSQL query.</param>
	<param name="commandType">Determines if the command is a stored procedure or a TSQL query.</param>
	<param name="param">The parameters for the command.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetField(System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="field"></param>
	<param name="table"></param>
	<param name="condition"></param>
	<param name="connectionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetField(System.String,System.String,System.String,System.Boolean,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="field"></param>
	<param name="table"></param>
	<param name="condition"></param>
	<param name="connectionType"></param>
	<param name="isAutoFormatCondition">Indicates if the condition string will be corrected for single quote (') instances.  Example John's -&gt; John''s.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetRow(System.String[],System.String,System.String,System.Boolean)">
	<summary>
 Procedure to retrieve fields from the cache database.
 </summary>
	<param name="fields">The fields to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<param name="isUseCache">Determines if the searching should be in the cache database.</param>
	<returns>An array containing the values of the fields specified.</returns>
	<remarks>The order of the fields is dependent on the order of the array.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetRow(System.String[],System.String,System.String,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Procedure to retrieve fields from the database.
 </summary>
	<param name="fields">The fields to retrieve.</param>
	<param name="tableName">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<param name="connectionType">Type of connection to use.</param>
	<returns>An array containing the values of the fields specified.</returns>
	<remarks>The order of the fields is dependent on the order of the array.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetRows(System.String[],System.String,System.String,System.Boolean)">
	<summary>
 Procedure to retrieve multiple rows from the cache database.
 </summary>
	<param name="fields">The fields to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<param name="isUseCache">Determines if the searching should be in the cache database.</param>
	<returns>An 2 dimensional array with the first array 
 reprensenting the row and the second array representing the field values.</returns>
	<remarks>The order of the fields is dependent on the order of the array.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetRows(System.String[],System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 Procedure to retrieve multiple rows from the cache database.
 </summary>
	<param name="fields">The fields to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<param name="isUseCache">Determines if the searching should be in the cache database.</param>
	<param name="isAutoFormatCondition">Indicates if the condition string will be corrected for single quote (') instances.  Example John's -&gt; John''s.</param>
	<returns>An 2 dimensional array with the first array 
 reprensenting the row and the second array representing the field values.</returns>
	<remarks>The order of the fields is dependent on the order of the array.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetRows(System.String[],System.String,System.String,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Procedure to retrieve multiple rows from the cache database.
 </summary>
	<param name="fields">The fields to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<param name="connectionType">Determines the type of connection where to retrive the records.</param>
	<returns>A 2 dimensional array with the first array 
 reprensenting the row and the second array representing the field values.</returns>
	<remarks>The order of the fields is dependent on the order of the array.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetRows(System.String[],System.String,System.String,System.Boolean,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Procedure to retrieve multiple rows from the cache database.
 </summary>
	<param name="fields">The fields to retrieve.</param>
	<param name="table">The table to search on.</param>
	<param name="condition">The filtering of the table.</param>
	<param name="connectionType">Determines the type of connection where to retrive the records.</param>
	<param name="isAutoFormatCondition">Indicates if the condition string will be corrected for single quote (') instances.  Example John's -&gt; John''s.</param>
	<returns>A 2 dimensional array with the first array 
 reprensenting the row and the second array representing the field values.</returns>
	<remarks>The order of the fields is dependent on the order of the array.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetItemUnitMeasure(System.String)">
	<summary>
 Retrieves the Unit Measure for the InventoryUnitMeasure table.
 </summary>
	<param name="ItemCode">The item code from where the unit measure will be retrieved.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetExchangerate(System.String)">
	<summary>
 Retrieves the exchange rate from a specified currency.
 </summary>
	<param name="CurrencyCode">The currency code.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetMultiCurrency">
	<summary>
 Retrieves the currency codes from the database.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetItemUnitMeasureQuantity(System.String,System.String)">
	<summary>
 Retrieves the unit measure quantity field from a specified item and unite measure.
 </summary>
	<param name="ItemCode">The item code.</param>
	<param name="UnitMeasureCode">The unit measure code.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.SetRow(System.String,System.String,System.String)">
	<summary>
 Updates a specific row of a table in the database.
 </summary>
	<param name="fieldsAndValue">The fields and value to be updated.</param>
	<param name="tableName">The table to be updated.</param>
	<param name="condition">The filtering condition set to the table.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.SetRow(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Updates a specific row of a table in the database.
 </summary>
	<param name="fieldsAndValue">The fields and value to be updated.</param>
	<param name="tableName">The table to be updated.</param>
	<param name="condition">The filtering condition set to the table.</param>
	<param name="isAutoFormatCondition">Indicates if the condition string will be corrected for single quote (') instances.  Example John's -&gt; John''s.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.SetRowPerConnectionString(System.String,System.String,System.String,System.Boolean,System.String)">
	<summary>
 Updates a specific row of a table in the database.
 </summary>
	<param name="fieldsAndValue">The fields and value to be updated.</param>
	<param name="tableName">The table to be updated.</param>
	<param name="condition">The filtering condition set to the table.</param>
	<param name="isAutoFormatCondition">Indicates if the condition string will be corrected for single quote (') instances.  Example John's -&gt; John''s.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataSetErrors(System.Data.DataSet)">
	<summary>
 Get the errors found in the dataset.
 </summary>
	<param name="dataset"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataSetErrors(System.Data.DataTable)">
	<summary>
 Get the errors found in the dataset.
 </summary>
	<param name="table">The table to search for errors.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GenerateDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType,System.String)">
	<summary>
 Retrieves a newly generated document code according to transaction type.
 </summary>
	<param name="transactionType">The transaction to generate a code for.</param>
	<param name="checkBookCode">Obsolete, was previously used to get the next check number.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GenerateDocumentCode(System.String)">
	<summary>
 Retrieves a newly generated document code according to transaction type.
 </summary>
	<param name="transactionType">The transaction to generate a code for.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetCurrencyRow(System.String)">
	<summary>
 Retrieves a currency row from the database.
 </summary>
	<param name="currencyCode">The currency code to search.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDisplayName(System.String,System.String)">
	<summary>
 Retrieves the display name for a field in a table.
 </summary>
	<param name="tableName">The table to search on.</param>
	<param name="columnName">The column to search on.</param>
	<returns></returns>
	<remarks>This method is used to get the text for the labels in the UI.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetHelpText(System.String,System.String)">
	<summary>
 Retrieves the help tool tip for a field.
 </summary>
	<param name="tableName">The table to search on.</param>
	<param name="columnName">The column to search on.</param>
	<returns></returns>
	<remarks>This method is used to get the tool tip for the controls in the UI.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataDictionaryColumnRow(System.String,System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataDictionaryColumnRows(System.String)">
	<summary>
 Return the array of rows in the datadictionary column table.
 </summary>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataDictionaryColumnRows(System.String,System.String)">
	<summary>
  Return the array of rows in the datadictionary column table.
 </summary>
	<param name="tableName">The name of the table where the records will be retrieve.</param>
	<param name="sort">A string specifying the column and sort direction.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataDictionaryColumnRows(System.String,System.Boolean)">
	<summary>
 Return the array of rows in the datadictionary column table.
 </summary>
	<param name="tableName"></param>
	<param name="forceLoad">True to force retrieving of table data even if it's not yet existing in the current dataset</param>
	<returns></returns>
	<remarks>This signature is used for Assign Custom Table To Form feature</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.SetDocumentCode(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document code to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document code is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.SetDocumentId(Interprise.Framework.Base.Shared.Enum.TransactionType)">
	<summary>
 Assigns the generated document id to the field.
 </summary>
	<param name="transactionType">The transaction type of the row.</param>
	<remarks>Override this is a generated document id is needed, as this is automatically
 invoked in the UpdateDataset procedure.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ParseName(System.String,System.String@,System.String@,System.String@,System.String@,System.String@)">
	<summary>
 Parse full name into salutation, first name, middle name, last name and suffix.
 </summary>
	<param name="fullName"></param>
	<param name="salutation"></param>
	<param name="firstName"></param>
	<param name="middleName"></param>
	<param name="lastName"></param>
	<param name="suffix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ExtractSalutation(System.String@)">
	<summary>
 Gets the salutation from a given name
 </summary>
	<returns></returns>
	<remarks>Depends on SystemSalutation table</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ExtractSuffix(System.String@)">
	<summary>
 Procedure to extract the suffix from the name string.
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks>Depends on SystemSuffix table</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ExtractFirstWord(System.String@)">
	<summary>
 Gets the first word based on first instance of a comma or a space character
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ExtractLastWord(System.String@)">
	<summary>
 Gets the last word based on last instance of a space character
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetWordCount(System.String)">
	<summary>
 Gets the number of words in a name delimited by spaces.
 </summary>
	<param name="name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.FindPostalCode(System.String)">
	<summary>
 Returns the address of a specified postal code.
 </summary>
	<param name="address">The postal code to be search on.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.VerifyAddress(System.String[])">
	<summary>
 Determines if the address given is correct.
 </summary>
	<param name="address">The address to verify.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ComputeInterest(System.DateTime,System.DateTime,System.Decimal,System.Decimal)">
	<summary>
 Compute the Interest according to Payment Term.
 </summary>
	<param name="paymentDate">The date of the payment.</param>
	<param name="dueDate">The due date of the payment.</param>
	<param name="interestPecent">The percentage of interest to be place upon the amount.</param>
	<param name="amount">The amount of the payment.</param>
	<returns>The amount with the interest placed upon it.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate">
	<summary>
 Validates the CurrentDataset tables.
 </summary>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataTable[])">
	<summary>
 Validates a specified DataTable array.
 </summary>
	<param name="tables">The tables to be validated.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.String[])">
	<summary>
 Validates a specified array containing the table names.
 </summary>
	<param name="tableNames">The tables to be validated.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Int32[])">
	<summary>
 Validates a specified array containing the index of the tables.
 </summary>
	<param name="tableIndexes">The index of the tables to be validated.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataTable)">
	<summary>
 Validates a specified DataTable.
 </summary>
	<param name="table">The DataTable to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.String)">
	<summary>
 Validates a DataTable with a specified tableName.
 </summary>
	<param name="tableName">The table name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Int32)">
	<summary>
 Validates a DataTable with a specified tableIndex.
 </summary>
	<param name="tableIndex">The tableIndex to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataRow)">
	<summary>
 Validates a dataRow.
 </summary>
	<param name="row">The row to be validated.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataRow,System.Data.DataColumn[])">
	<summary>
 Validates specified DataColumns in a row
 </summary>
	<param name="row">The row to validate.</param>
	<param name="columns">The DataColumns to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataRow,System.String[])">
	<summary>
 Validates the DataColumns with specified column names in a row.
 </summary>
	<param name="row">The row to validate.</param>
	<param name="columnNames">The column names to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataRow,System.Int32[])">
	<summary>
 Validates the DataColumns with specified column indexes in a row.
 </summary>
	<param name="row">The row to validate.</param>
	<param name="columnIndexes">The column indexes to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataRow,System.Data.DataColumn)">
	<summary>
 Validates a DataColumn in a row.
 </summary>
	<param name="row">The row to validate</param>
	<param name="column">The DataColumn to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataRow,System.Int32)">
	<summary>
 Validates a DataColumn with a specified column index in a row.
 </summary>
	<param name="row">The row to validate.</param>
	<param name="columnIndex">The columnIndex to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.Data.DataRow,System.String)">
	<summary>
 Validates a DataColumn with a specified column name
 </summary>
	<param name="row">The row to validate</param>
	<param name="columnName">The column name to validate.</param>
	<returns></returns>
	<remarks>If set to true, there were no errors found.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.Validate(System.String@,System.Boolean)">
	<summary>
 Validates a form.
 </summary>
	<param name="message"></param>
	<param name="isRejectNew"></param>
	<returns></returns>
	<remarks>Thie function is obsolete. Use the Validate() function instead.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.PostDocument(System.String,System.String,Interprise.Framework.Base.Shared.Enum.DocumentType,System.String)">
	<summary>
 Submits a document for posting to the ledger.
 </summary>
	<param name="userCode">The user who called the posting.</param>
	<param name="batchCode">The batch code (for batch posting only)</param>
	<param name="documentType">The type of posting to do.</param>
	<param name="documentCode">The transaction code.</param>
	<returns></returns>
	<remarks>If the function returns an empty string, the posting was successful.
 Else, the error message is returned.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.BatchPostByCode(System.String,System.String,Interprise.Framework.Base.Shared.Enum.DocumentType,System.String,System.String)">
	<summary>
 Submits a batch of documents for posting using document codes.
 </summary>
	<param name="userCode">The user who called the posting.</param>
	<param name="batchCode">The batch code (for batch posting only)</param>
	<param name="documentType">The type of posting to do.</param>
	<param name="documentCodeFrom">The starting document code.</param>
	<param name="documentCodeTo">The ending document code.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.BatchPostByDate(System.String,System.String,Interprise.Framework.Base.Shared.Enum.DocumentType,System.DateTime,System.DateTime)">
	<summary>
 Submits a batch of documents for posting using document dates.
 </summary>
	<param name="userCode">The user who called the posting.</param>
	<param name="batchCode">The batch code (for batch posting only)</param>
	<param name="documentType">The type of posting to do.</param>
	<param name="documentDateFrom">The starting date.</param>
	<param name="documentDateTo">The ending date.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetNonstockItem">
	<summary>
 Procedure to retrieve the non stock item.
 </summary>
	<returns>The inventory item row containing the non stock item.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.TestWSConnectionAuthenticity(System.String,System.String)">
	<summary>
 Procedure to test if the connection can be made to the online server.
 </summary>
	<returns></returns>
	<remarks>The connection succeeds if the return value is true.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.TestLANConnectionAuthenticity(System.String)">
	<summary>
 Procedure to test if the connection can be made to the online server.
 </summary>
	<returns></returns>
	<remarks>The connection succeeds if the return value is true.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDateRange(Interprise.Framework.Base.Shared.Enum.ReportDateSelection,System.DateTime@,System.DateTime@)">
	<summary>
 Method that returns the date range by specifying only the rangeType, 
 i.e. ThisMonth will return the starting and endding date for the current month
 </summary>
	<param name="rangeType">The date range.</param>
	<param name="dateStart">The starting date to be returned.</param>
	<param name="dateEnd">The ending date to be returned..</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetAccountingPeriod(System.DateTime,System.DateTime@,System.DateTime@)">
	<summary>
 Gets the current accounting period.
 </summary>
	<param name="currentDate">Today's date.</param>
	<param name="dateStart">The start date.</param>
	<param name="dateEnd">The end date.</param>
	<remarks>This method is not yet in use.</remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetThisWeek(System.DateTime,System.DateTime@,System.DateTime@,System.Int32@)">
	<summary>
 Get the current date.
 </summary>
	<param name="currentDate">Today's date.</param>
	<param name="weekStart">The start of the week.</param>
	<param name="weekEnd">The end of the week.</param>
	<param name="weekNo">The number of weeks.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.RoundCurrency(System.Decimal,System.String,Interprise.Framework.Base.Shared.Enum.CurrencyFormat,System.Boolean,System.Boolean)">
	<summary>
 Round Currency number to the nearest decimal specified.
 </summary>
	<param name="value">The value to be rounded.</param>
	<param name="currencyCode">The currency code to be used for rounding.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetMessage(System.String,System.String[],System.String)">
	<summary>
 Retrieves the message specified by the mesasge code in the SystemMessageManager table.
 </summary>
	<param name="messageCode">The message code to be searched.</param>
	<param name="parameters">The string value that will replace the placeholders.</param>
	<param name="systemMessage"></param>
	<returns>The retrieved message.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ConvertCurrency(System.Decimal,System.Decimal,System.Boolean,System.String,Interprise.Framework.Base.Shared.Enum.CurrencyFormat,System.Boolean,System.Boolean)">
	<summary>
 Converts a currency amount to base currency and vice versa.
 </summary>
	<param name="exchangeRate">The exchange rate to be used.</param>
	<param name="amount">The amount to convert.</param>
	<param name="isForeignToBase">Determines if the conversion is to base currency.</param>
	<param name="foreignCurrencyCode">The currency code.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ConvertCurrencyExact6(System.Decimal,System.Decimal,System.Boolean)">
	<summary>
 Converts a currency amount to base currency and vice versa with exact 6 digits decimal places.
 </summary>
	<param name="exchangeRate">The exchange rate to be used.</param>
	<param name="amount">The amount to convert.</param>
	<param name="isForeignToBase">Determines if the conversion is to base currency.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ApplyClassTemplate(System.String,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Data.DataTable)">
	<summary>
 Procedure to apply a class template to an entity.
 </summary>
	<param name="classCode">The class code of the template.</param>
	<param name="classType">The entity to apply the class template.</param>
	<param name="tableEntity">The destination table.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetJoinTableSchema(System.String[],System.String[])">
	<summary>
 Get the schema from multiple tables.
 </summary>
	<param name="tables">The tables to retrieve the schema.</param>
	<param name="displayTables">The name of the tables to display.</param>
	<returns>The datatable containing the schema.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetJoinTableData(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Retrieves the data from a query with a table join.
 </summary>
	<param name="parentTable">The table with the primary key.</param>
	<param name="childTable">The table with the foreign key.</param>
	<param name="primaryKey">The field which identifies the parent table.</param>
	<param name="foreignKey">The field which connects the parent and child tables.</param>
	<param name="whereClause">The filter to use when retrieving the data.</param>
	<returns>The datatable containing the joined table data.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetJoinTableScript(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Retrieves the SQL script of 2 joined tables.
 </summary>
	<param name="parentTable">The table with the primary key.</param>
	<param name="childTable">The table with the foreign key.</param>
	<param name="primaryKey">The field which identifies the parent table.</param>
	<param name="foreignKey">The field which connects the parent and child tables.</param>
	<param name="whereClause">The filter to use when retrieving the data.</param>
	<returns>The datatable containing the joined table data.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ExecuteNonQuery(System.Data.CommandType,System.String,System.String[][],System.String[][]@,System.Boolean,System.Int32)">
	<summary>
 Executes a command from the database.
 </summary>
	<param name="commandType">Determines if the command type is a Stored Procedure or a TSQL query.</param>
	<param name="command">The name of the Stored Procedure/TSQL query.</param>
	<param name="parameters">The parameters of the Stored Procedure.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ExecuteScript(System.String,System.Boolean,System.Boolean)">
	<summary>
 Executes a TSQL script to the database.
 </summary>
	<param name="command">The name of the Stored Procedure/TSQL query.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetHomeCurrency">
	<summary>
 Returns the home currency of the company.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.OnInvalidatedOnSaving(System.Object,System.String)">
	<summary>
 Triggered when the validation fails while saving.
 </summary>
	<param name="sender"></param>
	<param name="errorMessage">The error message return by the validation.</param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CheckExistingData(System.String,System.String,System.Object)">
	<summary>
 Checks if the value passed is already being used in other tables.
 </summary>
	<param name="tableName">The table where the value is found.</param>
	<param name="columnName">The field column of the value.</param>
	<param name="value">The value to be searched.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.PickCurrencyType(System.String)">
	<summary>
 Retrieves the currency description of the currency.
 </summary>
	<param name="p_currencyCode">The currency code to be searched on.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.IsDocumentCodeExists(System.String,System.String,System.String)">
	<summary>
 Method to check if particular document code is existing.
 </summary>
	<param name="value"></param>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.IsDocumentCodeExists(System.String,System.String,System.String,System.String,System.String@)">
	<summary>
 Method to check if particular document code is existing.
 </summary>
	<param name="value"></param>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<param name="documentCodeColumnName"></param>
	<param name="returnedDocumentCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.IsDocumentCodeExists(System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Method to check if particular document code is existing.
 </summary>
	<param name="value"></param>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.IsDocumentCodeExists(System.String,System.String,System.String,System.String,System.String@,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Method to check if particular document code is existing.
 </summary>
	<param name="value"></param>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<param name="documentCodeColumnName"></param>
	<param name="returnedDocumentCode"></param>
	<param name="connStringType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.IsValidDocumentCode(System.String)">
	<summary>
 Checks if code has invalid characters.
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.DiscoverPlugin(System.String,System.Object[])">
	<summary>
 Discovers and returns the plugin for the plugin container.
 </summary>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetRegisteredPluginForm(System.String,System.String,System.String,System.Object[])">
	<summary>
	</summary>
	<param name="formClassType"></param>
	<param name="formAssemblyName"></param>
	<param name="menuGroupCode"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.DiscoverPluginForm(System.String,System.String,System.String,System.Object[])">
	<summary>
	</summary>
	<param name="formClassType"></param>
	<param name="formAssemblyName"></param>
	<param name="menuGroupCode"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetLoadedPluginAssembly(System.String,System.String)">
	<summary>
 Return the assembly of the loaded plugin.
 </summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreateSerializedPluginInstance(System.String,System.String[],System.String,System.Object[])">
	<summary>
	</summary>
	<param name="pluginInfo"></param>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.AttchAssemblyIDWithVersion(System.String,System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetWorkingDirectory">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.AttachPluginFolder(System.String,System.String)">
	<summary>
	</summary>
	<param name="pluginDirectory"></param>
	<param name="assemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetPluginDirectory(System.String)">
	<summary>
 Procedure to create the deserialize a plugin file from the database.
 </summary>
	<param name="assemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.OnPluginSerializationError(Interprise.Framework.Base.EventArguments.ErrorEventArgs)">
	<summary>
	</summary>
	<param name="errorEventArgs"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.IsPathTooLong(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="pluginDirectory"></param>
	<param name="assemblyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreatePluginFile(System.String,System.String,System.Boolean,System.String,System.String)">
	<summary>
 Procedure to create the deserialize a plugin file from the database.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.SetAutoAddPostalValidation(System.String,System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GenerateCheckNumber(System.String)">
	<summary>
 Generate a new check number for the current transaction.
 </summary>
	<param name="bankAccountCode">Reference of the bankaccount.</param>
	<returns>Returns the generated check number.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateDataDictionaryColumnLanguage(System.String,System.String,System.String)">
	<summary>
 Update displayname of DataDictionaryColumnLanguage table for all languages.
 </summary>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<param name="displayName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateDataDictionaryColumnLanguage(System.String,System.String,System.String,System.String)">
	<summary>
 Update displayname of DataDictionaryColumnLanguage table for specific language.
 </summary>
	<param name="tableName"></param>
	<param name="columnName"></param>
	<param name="displayName"></param>
	<param name="languageCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreateConfigurationManager(System.Windows.Forms.Form)">
	<summary>
	</summary>
	<param name="AnyForm"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.DisposeConfigurationManager">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDeveloperCode">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.RetrieveOrigSaveCounterID(Interprise.Framework.Base.Exceptions.DataConcurrencyException@)">
	<summary>
 Undo to Original SaveCounterID data
 </summary>
	<param name="dbCollision"></param>
	<remarks></remarks>Pete.A 06/26/2009

</member><member name="M:Interprise.Facade.Base.BaseFacade.SetUserRoleBasedOnProductEdition(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="activationCode"></param>
	<param name="salt"></param>
	<param name="vector"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.DisposeDataDictionary">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.DisposeUserRole">
	<summary>
 Disposes the UserRoleDatasetGateway
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataRows(System.String[],System.String,System.String,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="fields"></param>
	<param name="tableName"></param>
	<param name="condition"></param>
	<param name="connectionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataRows(System.String[],System.String,System.String,System.Boolean,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="fields"></param>
	<param name="tableName"></param>
	<param name="condition"></param>
	<param name="connectionType"></param>
	<param name="isAutoFormatCondition">Indicates if the condition string will be corrected for single quote (') instances.  Example John's -&gt; John''s.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataDictionaryCustomFields(System.String)">
	<summary>
	</summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.InitializeExceptionDataset">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.AddExceptionRow(System.Data.DataSet,System.String)">
	<summary>
	</summary>
	<param name="exceptionDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreateExceptionDataset(System.Exception)">
	<summary>
	</summary>
	<param name="exception"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdatePluginAssemblyID(System.String,System.String)">
	<summary>
	</summary>
	<param name="assemblyID"></param>
	<param name="assemblyName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdatePluginLocation(System.String,System.String)">
	<summary>
	</summary>
	<param name="assemblyName"></param>
	<param name="location"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CompareDataRow(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 Compares two System.Data.Datarow objects by using a column-by-column, value-based comparison.
 </summary>
	<param name="leftRow"></param>
	<param name="rightRow"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetZone(System.String,Interprise.Framework.Base.Shared.Enum.ZoneType)">
	<summary>
 Gets the zone code of the current warehouse code and zone type.
 </summary>
	<param name="warehouseCode">The warehouse code to be searched, if no warehouse code is specified, 
 the default warehouse code from the inventory preference will be used.</param>
	<param name="zone">The zone type to be searched, 'Normal' zone type will be used by default.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.RefreshDataDictionary(System.String[])">
	<summary>
	</summary>
	<param name="tableNames"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.RefreshDataDictionaryObjects(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetColumnType(System.String,System.String)">
	<summary>
 Method that will get the column type
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetParentTableName(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.BuildCustomCommandSet(System.String[][]@,System.String[][],System.Boolean)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateCustomDocumentCode(System.String[][])">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetFormSectionDocumentCode(System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formMenuCode"></param>
	<param name="sectionCode"></param>
	<param name="pluginContainerName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.UpdateCustomDefaultRow(System.Data.DataTable,System.Boolean)">
	<summary>
	</summary>
	<param name="isRestoreDefaultRow"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ProcessCacheLoadDataset(System.String[][],System.Data.DataSet)">
	<summary>
	</summary>
	<param name="commandSet"></param>
	<param name="resultDataset"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ProcessCacheLoadDataset(System.String,System.Data.CommandType,System.String,System.String[],System.String[][])">
	<summary>
	</summary>
	<param name="offlineConnectionString"></param>
	<param name="commandType"></param>
	<param name="commandText"></param>
	<param name="tableNames"></param>
	<param name="param"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetJobItemClassType(System.Type)">
	<summary>
	</summary>
	<param name="assemblyType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ManageJobItem(Interprise.Framework.Base.Shared.Structure.JobItem)">
	<summary>
	</summary>
	<param name="jobItem"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CreateJobOutputParameter(Interprise.Framework.Base.Shared.Structure.JobMethodParameter[])">
	<summary>
	</summary>
	<param name="parameters"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.FormatConditionString(System.String)">
	<summary>
 FormatConditionString
 </summary>
	<param name="condition">String parameter used as condition on sql where clauses.</param>
	<returns>String</returns>
	<remarks>This function removes the single quotes (') on the condition string to prevent errors during getfield/getrow type operations.
 Limitations (for now cannot support the following):
 1. CustomerName = 'Harold's and Kumar'' [2 possesive nouns in one filter]
 2. ( CustomerName = 'Johann's' ) [filters with spaces after the last single quote (') that's why just use FORMAT_FILTER_0 instead of FORMAT_FILTER_1]
 </remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDataDictionaryTableInfo(System.String)">
	<summary>
	</summary>
	<param name="tableName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GenerateUserCredential">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GenerateUserCredentials">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetBusinessServiceProxy(Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="connectionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetBusinessServiceProxy(System.Boolean,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Retrieves the Business Service for the facade.
 </summary>
	<param name="connectionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetBusinessServiceProxy(Interprise.Framework.Base.Shared.Enum.BusinessRuleType,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Web.Services.Protocols.SoapProtocolVersion,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
	</summary>
	<param name="businessRuleType"></param>
	<param name="transactionType"></param>
	<param name="soapVer"></param>
	<param name="connectionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetBusinessServiceProxy(System.Boolean,Interprise.Framework.Base.Shared.Enum.BusinessRuleType,Interprise.Framework.Base.Shared.Enum.TransactionType,System.Web.Services.Protocols.SoapProtocolVersion,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Retrieves the Business Service for the facade.
 </summary>
	<param name="verifyUserCredential"></param>
	<param name="businessRuleType"></param>
	<param name="transactionType"></param>
	<param name="soapVer"></param>
	<param name="connectionType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.BaseFacade.SoapVersion">
	<summary>
 Gets the version of the soap protocol.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.RegisterPlugin(System.String,Interprise.Framework.Base.Shared.Structure.Plugin[])">
	<summary>
 Register plugin to the database.
 </summary>
	<param name="plugin">An info of the plugin to be registered.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.RegisterForm(Interprise.Facade.Base.SystemManager.User.UserRoleFacade,Interprise.Framework.Base.DatasetGateway.SystemManager.User.UserRoleDatasetGateway,System.String,System.String,System.String,System.String)">
	<summary>
 Register the form and add to the dataset.
 </summary>
	<param name="userRoleFacade"></param>
	<param name="userRoleDataset"></param>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formClassType"></param>
	<param name="formAssemblyName"></param>
	<returns>Returns the form menu code of the form.</returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetMenuGroupCode(System.String,System.String)">
	<summary>
 Gets the menugroup from a section classtype.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetClassType(System.String,System.String)">
	<summary>
 Retrieve the type of a control. 
 </summary>
	<param name="assemblyName">Fully qualified assembly name where the control can be found.</param>
	<param name="classType">Fully qualified class name of the control.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetPluginSection(System.String,System.String,System.String,System.String,Interprise.Framework.Base.Shared.Structure.Plugin)">
	<summary>
 Gets the information of a plugin section.
 <para>Indexing
 0 = SectionClassType
 1 = IsCustom Assembly
 2 = TabPageOrder
 3 = SectionAssembly
 4 = Description
 5 = IsCustomizable
 6 = SectionLayout
 7 = GridLayout
 8 = IsVisible
 9 = IsEnabled
 10 = SectionCode 
 11 = FormMenuCode
 12 = Description
 </para>
	</summary>
	<param name="roleCode">The role where the plugin will be retrieved.</param>
	<param name="parentSectionName">The parent class type of a plugin section.</param>
	<param name="formClassType">The fully qualified name of the form where the plugin section will be found.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetPluginForm(System.String,System.String,System.String,System.String,Interprise.Framework.Base.Shared.Enum.ConnectionStringType)">
	<summary>
 Gets the information of a plugin form.
 <para>Indexing
 0 = FormClassType
 1 = True
 2 = ''
 3 = FormAssemblyName
 4 = Description
 5 = FormMenuCode
 </para>
	</summary>
	<param name="roleCode">The role where the plugin will be retrieved.</param>
	<param name="formClassType">The fully qualified name of the form.</param>
	<param name="formAssemblyName">The fully qualified assembly name of the form.</param>
	<param name="connectionType">Type of connection where the info will be retrived.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.AddToCBNTable(System.String)">
	<summary>
	</summary>
	<param name="caheTable"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.ValidateUseCacheOnCBN">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.CBNLogin">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.LoadFormSection(System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="formMenuCode"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetDefaultPluginSection(Interprise.Framework.Base.Shared.Structure.Plugin)">
	<summary>
	</summary>
	<param name="plugin"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseFacade.GetSystemUserRoleMenuFormSectionDescriptionViewRow(System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="roleCode"></param>
	<param name="menuGroupCode"></param>
	<param name="formMenuCode"></param>
	<param name="sectionCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.AttachDocumentFacade.ParentType">
	<summary>
 Gets or sets the parent type used to create documents.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Facade.Base.ConcurrencyFacade.TransactionFacade">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNTransactionFacade.ConfirmStockCount(System.String,System.String,System.String)">
	<summary>
 This method is used in ISE shopping cart page prior to checkout.  This will confirm available stocks upon creating the order
 </summary>
	<param name="inventoryItemId"></param>
	<param name="QtyOrdered"></param>
	<param name="unitMeasureName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNTransactionFacade.GetRetailerNetworkID(System.String,System.String)">
	<summary>
 This method is used in CBE to get the retailers network ID
 </summary>
	<param name="supplierID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNTransactionFacade.CheckSupplierAvailableStock(System.String,System.String)">
	<summary>
 This method is used in ISE product page to check the initial stock availability.
 </summary>
	<param name="inventoryItemId"></param>
	<param name="unitMeasureName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNTransactionFacade.GetWStandardData(System.String,System.String)">
	<summary>
 Gets local data and returns the woohaa mapped data
 </summary>
	<param name="Type">type of data for mapping</param>
	<param name="value">value of local data / unmapped value</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNTransactionFacade.LoadMappingData">
	<summary>
 Loads all system data used for transaction
 this will be used by method GetWStandardData
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNBaseFacade.CBNLogin(System.String)">
	<summary>
 Login request to CBN server, this will generate new session ID
 </summary>
	<param name="ID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNBaseFacade.CompressData(System.Byte[])">
	<summary>
 ChilKat data compression
 </summary>
	<param name="data"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNBaseFacade.DecompressStreamToEntity``1(System.IO.Stream)">
	<summary>
 ChilKat DecompressStreamToEntity
 </summary>
	<param name="data"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNBaseFacade.DecompressByteArray(System.Byte[])">
	<summary>
 ChilKat DecompressByteArray
 </summary>
	<param name="data"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.CBN.CBNBaseFacade.DecompressData(System.Byte[],System.Boolean)">
	<summary>
 Gzip or Deflate data decompression.
 </summary>
	<param name="data">Gzip or Deflate compressed data.</param>
	<param name="isGzip">TRUE to decompress with Gzip, otherwise with Deflate. </param>
	<returns>byte[]</returns>
</member><member name="M:Interprise.Facade.Base.BaseConnectorFacade.CreateException(System.String)">
	<summary>
	</summary>
	<param name="exception"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseConnectorFacade.JsonToDataset(System.String)">
	<summary>
 Converts the contents of a JSON string into a dataset
 </summary>
	<param name="jsonString"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Facade.Base.BaseConnectorFacade.MergeSourceToDataset(System.Data.DataSet@,System.Data.DataSet)">
	<summary>
 Transfer all the contents of the sourceDataset over to the targetDataset
 </summary>
	<param name="targetDataset">The dataset schema where the data from the sourceDataset will be transferred</param>
	<param name="sourceDataset">The schema that contains the data to be transferred over to the targetDataset</param>
	<returns>True if the process was successfully performed</returns>
	<remarks>
 The process will do as follows:
 1. Loops all tables within the sourceDataset not yet processed
 2. Check if a table name in the source exists in the target
    a. Yes - Move to 3
    b. No - Move to 1 next table
 3. Loop all rows from source assigning values per column
 4. Check if column exists on both the source and target
    a. Yes - assign the value of the source to the target
    b. No - Move to the next column
 5. Process Finished!
 </remarks>
</member>
</members>
</doc>