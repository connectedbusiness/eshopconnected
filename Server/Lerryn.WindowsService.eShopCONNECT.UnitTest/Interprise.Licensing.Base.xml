<?xml version="1.0"?>
<doc>
<assembly>
<name>
Interprise.Licensing.Base
</name>
</assembly>
<members>
<member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.#ctor">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.CheckSerialNumberCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateSerialNumberCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateConfirmationCodeCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateIPAddressCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.IsEmailUsedCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GenerateActivationCodeCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.RegisterInfoCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetRegistrationInfoCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.SaveActivationCodeCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AssignLeadCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AssignCommunityLeadCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.PingCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetLeadInformationCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetProductRightsCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetEShopConnectItemsCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateExpirationDateCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UpdateCustomerInfoCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AddContactCompleted">
	<remarks/>
</member><member name="E:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UpdateCustomerProductVersionCompleted">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.CheckSerialNumber(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginCheckSerialNumber(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndCheckSerialNumber(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.CheckSerialNumberAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.CheckSerialNumberAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateSerialNumber(System.String,System.Boolean@)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginValidateSerialNumber(System.String,System.Boolean,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndValidateSerialNumber(System.IAsyncResult,System.Boolean@)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateSerialNumberAsync(System.String,System.Boolean)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateSerialNumberAsync(System.String,System.Boolean,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateConfirmationCode(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginValidateConfirmationCode(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndValidateConfirmationCode(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateConfirmationCodeAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateConfirmationCodeAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateIPAddress(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginValidateIPAddress(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndValidateIPAddress(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateIPAddressAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateIPAddressAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateExpirationDate(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginValidateExpirationDate(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndValidateExpirationDate(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateExpirationDateAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.ValidateExpirationDateAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.IsEmailUsed(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginIsEmailUsed(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndIsEmailUsed(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.IsEmailUsedAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.IsEmailUsedAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GenerateActivationCode(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGenerateActivationCode(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGenerateActivationCode(System.IAsyncResult,System.String@,System.String@,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GenerateActivationCodeAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GenerateActivationCodeAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.RegisterInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginRegisterInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndRegisterInfo(System.IAsyncResult,System.String@,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.RegisterInfoAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.RegisterInfoAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetRegistrationInfo(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGetRegistrationInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGetRegistrationInfo(System.IAsyncResult,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetRegistrationInfoAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetRegistrationInfoAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.SaveActivationCode(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginSaveActivationCode(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndSaveActivationCode(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.SaveActivationCodeAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.SaveActivationCodeAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AssignLead(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginAssignLead(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndAssignLead(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AssignLeadAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AssignLeadAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AssignCommunityLead(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginAssignCommunityLead(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndAssignCommunityLead(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AssignCommunityLeadAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AssignCommunityLeadAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.Ping">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginPing(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndPing(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.PingAsync">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.PingAsync(System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetLeadInformation(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGetLeadInformation(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGetLeadInformation(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetLeadInformationAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetLeadInformationAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetProductRights(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGetProductRights(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGetProductRights(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetProductRightsAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetProductRightsAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetEShopConnectItems(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGetEShopConnectItems(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGetEShopConnectItems(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetEShopConnectItemsAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetEShopConnectItemsAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UpdateCustomerInfo(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginUpdateCustomerInfo(System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndUpdateCustomerInfo(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UpdateCustomerInfoAsync(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UpdateCustomerInfoAsync(System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AddContact(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginAddContact(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndAddContact(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AddContactAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AddContactAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UpdateCustomerProductVersion(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginUpdateCustomerProductVersion(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndUpdateCustomerProductVersion(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UpdateCustomerProductVersionAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UpdateCustomerProductVersionAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerSubscriptionExpirationDate(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGetCustomerSubscriptionExpirationDate(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGetCustomerSubscriptionExpirationDate(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerSubscriptionExpirationDateAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerSubscriptionExpirationDateAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerDatabaseLicenseRegistrationCount(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGetCustomerDatabaseLicenseRegistrationCount(System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGetCustomerDatabaseLicenseRegistrationCount(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerDatabaseLicenseRegistrationCountAsync(System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerDatabaseLicenseRegistrationCountAsync(System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGetCustomerDatabaseLicenseRegistrationMaxCount(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGetCustomerDatabaseLicenseRegistrationMaxCount(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerDatabaseLicenseRegistrationMaxCountAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerDatabaseLicenseRegistrationMaxCountAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginAddCustomerLicenseRegistration(System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndAddCustomerLicenseRegistration(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AddCustomerLicenseRegistrationAsync(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.AddCustomerLicenseRegistrationAsync(System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginDatabaseToRegisterExists(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndDatabaseToRegisterExists(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.DatabaseToRegisterExistsAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.DatabaseToRegisterExistsAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginUnRegisterDatabase(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndUnRegisterDatabase(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UnRegisterDatabaseAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.UnRegisterDatabaseAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginIsDatabaseRegistered(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndIsDatabaseRegistered(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.IsDatabaseRegisteredAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.IsDatabaseRegisteredAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerUserLicenseInfo(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.BeginGetCustomerUserLicenseInfo(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.EndGetCustomerUserLicenseInfo(System.IAsyncResult)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerUserLicenseInfoAsync(System.String)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.GetCustomerUserLicenseInfoAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService.CancelAsync(System.Object)">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ConnectedLicensingService">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader.BusinessRuleType">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader.TransactionType">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader.ReportAction">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader.OnlineConnectionString">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader.CryptoSalt">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader.CryptoVector">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader.LanguageCode">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader.AnyAttr">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CredentialSoapHeader">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.CompanyName">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.CompanyCode">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.DeveloperCode">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.Country">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.Address">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.City">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.PostalCode">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.County">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.Telephone">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.TelephoneExtension">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.Fax">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.Email">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.Website">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.ConfirmationCode">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.IsValid">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.ProductEdition">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.DatabaseType">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.CustomerLicenseType">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.SubscriptionExpirationDate">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.HasWebsite">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense.IsMultilocationItem">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CompanyLicense">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CheckSerialNumberCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CheckSerialNumberCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.CheckSerialNumberCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateSerialNumberCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateSerialNumberCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateSerialNumberCompletedEventArgs.isRequireRegistration">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateSerialNumberCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateConfirmationCodeCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateConfirmationCodeCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateConfirmationCodeCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateIPAddressCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateIPAddressCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateIPAddressCompletedEventArgs">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateExpirationDateCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.ValidateExpirationDateCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.IsEmailUsedCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.IsEmailUsedCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.IsEmailUsedCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GenerateActivationCodeCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GenerateActivationCodeCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GenerateActivationCodeCompletedEventArgs.encryptedActivationCode">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GenerateActivationCodeCompletedEventArgs.cryptoSalt">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GenerateActivationCodeCompletedEventArgs.cryptoVector">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GenerateActivationCodeCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.RegisterInfoCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.RegisterInfoCompletedEventArgs.Result">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.RegisterInfoCompletedEventArgs.serialNumber">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.RegisterInfoCompletedEventArgs.errMsg">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.RegisterInfoCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.companyName">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.country">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.address">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.city">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.state">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.postalCode">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.county">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.telephone">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.telephoneExt">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.fax">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.email">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs.webSite">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetRegistrationInfoCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.SaveActivationCodeCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.SaveActivationCodeCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.SaveActivationCodeCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AssignLeadCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AssignLeadCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AssignLeadCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AssignCommunityLeadCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AssignCommunityLeadCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AssignCommunityLeadCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.PingCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetLeadInformationCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetLeadInformationCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetLeadInformationCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetProductRightsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetProductRightsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetProductRightsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetEShopConnectItemsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetEShopConnectItemsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetEShopConnectItemsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.UpdateCustomerInfoCompletedEventHandler">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AddContactCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AddContactCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AddContactCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.UpdateCustomerProductVersionCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.UpdateCustomerProductVersionCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.UpdateCustomerProductVersionCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerSubscriptionExpirationDateCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerSubscriptionExpirationDateCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerSubscriptionExpirationDateCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerDatabaseLicenseRegistrationCountCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerDatabaseLicenseRegistrationCountCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerDatabaseLicenseRegistrationCountCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerDatabaseLicenseRegistrationMaxCountCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerDatabaseLicenseRegistrationMaxCountCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerDatabaseLicenseRegistrationMaxCountCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AddCustomerLicenseRegistrationCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AddCustomerLicenseRegistrationCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.AddCustomerLicenseRegistrationCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.DatabaseToRegisterExistsCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.DatabaseToRegisterExistsCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.DatabaseToRegisterExistsCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.UnRegisterDatabaseCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.UnRegisterDatabaseCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.UnRegisterDatabaseCompletedEventArgs">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.IsDatabaseRegisteredCompletedEventHandler">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.IsDatabaseRegisteredCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.IsDatabaseRegisteredCompletedEventArgs">
	<remarks/>
</member><member name="P:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerUserLicenseInfoCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:Interprise.Licensing.Base.InterpriseSuiteLicensingService.GetCustomerUserLicenseInfoCompletedEventArgs">
	<remarks/>
</member><member name="M:Interprise.Licensing.Base.TrialSplash.buttonContinue_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.TrialSplash.ApplySkinBaseOnOperatingSystem">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Shared.Common.IsTrialLicense(System.String,System.String)">
	<summary>
 Checks if the license provided is licensed or trial.
 </summary>
	<param name="serialNumber"></param>
	<param name="confirmationCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Shared.Common.IsTrialSerialNumber(System.String)">
	<summary>
 Checks if a trial serial number.
 </summary>
	<param name="serialNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Shared.Common.IsTrialConfirmationCode(System.String)">
	<summary>
 Checks if a trial confirmation code.
 </summary>
	<param name="confirmationCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Shared.Common.GetDescryptedDeveloper(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="activationCode"></param>
	<param name="salt"></param>
	<param name="vector"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Shared.Common.IsValidLicensedCustomer(System.String)">
	<summary>
	</summary>
	<param name="customerCode"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Services.CryptoServiceProvider.Encrypt(System.String,System.String@,System.String@)">
	<summary>
	</summary>
	<param name="password"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Services.CryptoServiceProvider.Encrypt(System.String,System.Byte[]@,System.Byte[]@,System.String@)">
	<summary>
	</summary>
	<param name="message"></param>
	<param name="salt"></param>
	<param name="vector"></param>
	<param name="code"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Services.CryptoServiceProvider.Encrypt(System.String,System.Byte[]@,System.Byte[]@,System.String@,System.Boolean)">
	<summary>
	</summary>
	<param name="message"></param>
	<param name="salt"></param>
	<param name="vector"></param>
	<param name="code"></param>
	<param name="includePrivate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Services.CryptoServiceProvider.Decrypt(System.String,System.String,System.String)">
	<summary>
 Returns decrypted password based on salt and iv
 </summary>
	<param name="password"></param>
	<param name="passwordSalt"></param>
	<param name="passwordIV"></param>
	<returns></returns>
	<remarks>Returns nothing if decryption fails</remarks>
</member><member name="M:Interprise.Licensing.Base.Services.CryptoServiceProvider.Decrypt(System.String,System.Byte[],System.Byte[],System.String@)">
	<summary>
	</summary>
	<param name="message"></param>
	<param name="encryptedSalt"></param>
	<param name="vector"></param>
	<param name="code"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Progress.ProgressForm.GetProgressControl">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressForm.Maximum">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressForm.Minimum">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressForm.ProgressKind">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressForm.Status">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressForm.Value">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressControl.Maximum">
	<summary>
 Gets or sets the progress maximum value. 
 <para>Applies when progresskind is default</para>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressControl.Minimum">
	<summary>
 Gets or sets the progress minimum value. 
 <para>Applies when progresskind is default</para>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressControl.Value">
	<summary>
 Gets or sets the current progress value. 
 <para>Applies when progresskind is default</para>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Progress.ProgressControl.InitializeControl">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Progress.ProgressControl.GetValue">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Progress.ProgressControl.GetMinimum">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Progress.ProgressControl.GetMaximum">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Progress.ProgressControl.ProgressKind">
	<summary>
 Gets or sets the type of progress bar to display.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Progress.ProgressControl.SetValue(System.Int32)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Progress.ProgressControl.SetMinimum(System.Int32)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Progress.ProgressControl.SetMaximum(System.Int32)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.DataFixerUKprinterSettings">
	<summary>
  Looks up a localized string similar to IF EXISTS (SELECT 1 from SystemcompanyInformation where Country in  ('United Kingdom','Australia'))
Update report set AdaptStandardSize = 1
GO.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.DeleteEcommerceModule">
	<summary>
  Looks up a localized string similar to 
--DECLARE @MenuGroupCode NVARCHAR(150) = "'Ecommerce','Shipping','CRM'"
--DECLARE @LanguageCode NVARCHAR(150) = (select companylanguage from SystemCompanyInformation)

delete FROM SystemUserRoleMenuForm  
WHERE MenuGroupCode in ('Ecommerce','Shipping','CRM')

delete FROM SystemUserRoleMenuFormDescription   
WHERE MenuGroupCode in ('Ecommerce','Shipping','CRM')
--AND  LanguageCode in (@LanguageCode)


delete  FROM SystemUserRoleMenuGroup
WHERE MenuGroupCode in ('Ecommerce','Shipping','CRM')

 [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.DropTempEcommerceTable">
	<summary>
  Looks up a localized string similar to IF EXISTS (SELECT 1 FROM SYS.TABLES WHERE NAME = 'SystemUserRoleMenuFormTemp')
BEGIN
DROP TABLE SystemUserRoleMenuFormTemp
END
IF EXISTS (SELECT 1 FROM SYS.TABLES WHERE NAME = 'SystemUserRoleMenuFormDescriptionTemp')
BEGIN
DROP TABLE SystemUserRoleMenuFormDescriptionTemp
END
IF EXISTS (SELECT 1 FROM SYS.TABLES WHERE NAME = 'SystemUserRoleMenuDashboardPageTemp')
BEGIN
DROP TABLE SystemUserRoleMenuDashboardPageTemp
END
IF EXISTS (SELECT 1 FROM SYS.TABLES WHERE NAME = 'SystemUserRoleMenuDashboardPa [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.EMail">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.IERefresh">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.LiveSupport">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.Online">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.RestoreEcommerceModule">
	<summary>
  Looks up a localized string similar to 
INSERT INTO SystemUserRoleMenuGroup        
(        	
RoleCode,MenuGroupCode,IsEnabled,IsVisible,SortOrder,SmallImage,LargeImage,TopicCode,UserCreated,DateCreated,UserModified 
,DateModified,DeveloperID,AssemblyID,MenuGroupKeyTips,IsCustomizable,VersionCreated,VersionModified
)        
SELECT 
A.RoleCode,A.MenuGroupCode,A.IsEnabled,A.IsVisible,A.SortOrder,A.SmallImage,A.LargeImage,A.TopicCode,A.UserCreated,A.DateCreated,'Admin' AS UserModified
,GetDate() AS DateModified,A.DeveloperID,A.AssemblyID, [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.splash_nfr">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.splash_trial">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.SystemUserRoleMenuDashboardPage">
	<summary>
  Looks up a localized string similar to SELECT * INTO SystemUserRoleMenuDashboardPageTemp FROM SystemUserRoleMenuDashboardPage
DELETE FROM [dbo].[SystemUserRoleMenuDashboardPageTemp]

INSERT [dbo].[SystemUserRoleMenuDashboardPageTemp] ([RoleCode], [MenuGroupCode], [PageNumber], [IsDefault], [DashBoardType], [WorFlowURL], [DisplayImage], [ColumnCount], [RowCount], [SortOrder], [TopicCode], [UserCreated], [DateCreated], [UserModified], [DateModified], [DeveloperID], [AssemblyID], [IsCustomizable], [VersionCreated], [VersionModified]) VALUES (N'A [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.SystemUserRoleMenuDashboardPageContent">
	<summary>
  Looks up a localized string similar to SELECT * INTO SystemUserRoleMenuDashboardPageContentTemp FROM SystemUserRoleMenuDashboardPageContent
DELETE FROM [dbo].[SystemUserRoleMenuDashboardPageContentTemp]

INSERT [dbo].[SystemUserRoleMenuDashboardPageContentTemp] ([RoleCode], [MenuGroupCode], [ContentCode], [PageNumber], [DashboardAssemblyName], [DashboardClassType], [LocationColumn], [LocationRow], [RowSpan], [ColumnSpan], [IsEnabled], [IsVisible], [TopicCode], [UserCreated], [DateCreated], [UserModified], [DateModified], [DeveloperID], [Assem [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.SystemUserRoleMenuDashboardPageContentDescription">
	<summary>
  Looks up a localized string similar to SELECT * INTO SystemUserRoleMenuDashboardPageContentDescriptionTemp FROM SystemUserRoleMenuDashboardPageContentDescription
DELETE FROM [dbo].[SystemUserRoleMenuDashboardPageContentDescriptionTemp]

INSERT [dbo].[SystemUserRoleMenuDashboardPageContentDescriptionTemp] ([RoleCode], [MenuGroupCode], [ContentCode], [LanguageCode], [PageNumber], [Description], [UserCreated], [DateCreated], [UserModified], [DateModified], [IsCustomizable], [VersionCreated], [VersionModified]) VALUES (N'Administrator', N'Account [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.SystemUserRoleMenuDashboardPageDescription">
	<summary>
  Looks up a localized string similar to SELECT * INTO SystemUserRoleMenuDashboardPageDescriptionTemp FROM SystemUserRoleMenuDashboardPageDescription
DELETE FROM [dbo].[SystemUserRoleMenuDashboardPageDescriptionTemp]

INSERT [dbo].[SystemUserRoleMenuDashboardPageDescriptionTemp] ([RoleCode], [MenuGroupCode], [PageNumber], [LanguageCode], [Description], [UserCreated], [DateCreated], [UserModified], [DateModified], [IsCustomizable], [VersionCreated], [VersionModified]) VALUES (N'Administrator', N'Accounting', 1, N'English - United Kingdom', N'Spl [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.SystemUserRoleMenuForm">
	<summary>
  Looks up a localized string similar to SELECT * INTO SystemUserRoleMenuFormTemp FROM SystemUserRoleMenuForm
DELETE FROM [dbo].[SystemUserRoleMenuFormTemp]

INSERT [dbo].[SystemUserRoleMenuFormTemp] ([RoleCode], [MenuGroupCode], [FormMenuCode], [TreeParentID], [TreeChildID], [FormAssemblyName], [FormClassType], [FormModuleClassType], [IsEnabled], [IsVisible], [SortOrder], [IsCustomFolder], [IsFolder], [FormAction], [MenuLayout], [IsExpanded], [IsDashboard], [FormModuleAssemblyName], [TopicCode], [UserCreated], [DateCreated], [UserModified], [D [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.SystemUserRoleMenuFormDescription">
	<summary>
  Looks up a localized string similar to SELECT * INTO SystemUserRoleMenuFormDescriptionTemp FROM SystemUserRoleMenuFormDescription
DELETE FROM [dbo].[SystemUserRoleMenuFormDescriptionTemp]

INSERT [dbo].[SystemUserRoleMenuFormDescriptionTemp] ([RoleCode], [MenuGroupCode], [FormMenuCode], [LanguageCode], [Description], [UserCreated], [DateCreated], [UserModified], [DateModified], [IsCustomizable], [VersionCreated], [VersionModified]) VALUES (N'Administrator', N'Accounting', N'00D04645-B5B2-4C20-B5FB-ACB8D4BA3899', N'English - United Kingdom', N [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.SystemUserRoleMenuGroup">
	<summary>
  Looks up a localized string similar to SELECT * INTO SystemUserRoleMenuGroupTemp FROM SystemUserRoleMenuGroup
DELETE FROM [dbo].[SystemUserRoleMenuGroupTemp]

INSERT [dbo].[SystemUserRoleMenuGroupTemp] ([RoleCode], [MenuGroupCode], [IsEnabled], [IsVisible], [SortOrder], [SmallImage], [LargeImage], [TopicCode], [UserCreated], [DateCreated], [UserModified], [DateModified], [DeveloperID], [AssemblyID], [MenuGroupKeyTips], [IsCustomizable], [VersionCreated], [VersionModified]) VALUES (N'Administrator', N'Accounting', 1, 1, 8, 0x89504E470D0A1A0A00 [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.SystemUserRoleMenuGroupDescription">
	<summary>
  Looks up a localized string similar to SELECT * INTO SystemUserRoleMenuGroupDescriptionTemp FROM SystemUserRoleMenuGroupDescription
DELETE FROM [dbo].[SystemUserRoleMenuGroupDescriptionTemp]

INSERT [dbo].[SystemUserRoleMenuGroupDescriptionTemp] ([RoleCode], [MenuGroupCode], [LanguageCode], [Description], [UserCreated], [DateCreated], [UserModified], [DateModified], [IsCustomizable], [VersionCreated], [VersionModified]) VALUES (N'Administrator', N'Accounting', N'English - United Kingdom', N'Accounting', N'admin', CAST(0x00009D9600DB9BD5 AS Da [rest of string was truncated]";.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.UserRole">
	<summary>
  Looks up a localized string similar to SystemUserRole
SystemUserRoleMenuGroup
SystemUserRoleRule
SystemUserRoleFacade
SystemUserRoleMenuGroupDescription
SystemUserRoleMenuDashboardPage
SystemUserRoleMenuDashboardPageDescription
SystemUserRoleMenuDashboardPageContent
SystemUserRoleMenuDashboardPageContentDescription
SystemUserRoleMenuForm
SystemUserRoleMenuFormDescription
SystemUserRoleMenuFormSection
SystemUserRoleMenuFormSectionDescription



.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.WizardLeftLogo">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.WizardLeftSignage">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.WizardSideBanner">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:Interprise.Licensing.Base.My.Resources.Resources.WizardTopLogo">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:Interprise.Licensing.Base.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:Interprise.Licensing.Base.Licensing.TrialGenerator.Create">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.TrialGenerator.CreateCommunityEdition(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
	<summary>
	</summary>
	<param name="context"></param>
	<param name="type"></param>
	<param name="instance"></param>
	<param name="allowExceptions"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseProvider.LoadActivationForm">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseManager.GetLicenseInfo(System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="encryptedActivationCode"></param>
	<param name="salt"></param>
	<param name="vector"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseManager.ShowTrialLicense">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseManager.GetLicense">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.ProductCode">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.ProductDescription">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.ProductEdition">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.LicenseType">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.CustomerCode">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.CustomerName">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.UserCount">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.SupportPlan">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.SupportUserCount">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.SupportExpirationDate">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.DateActivated">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.ExpirationDate">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.WebServiceEnabled">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.PowerUser">
	<summary>
	</summary>
	<value>User Code</value>
	<returns>Assigned power User value</returns>
	<remarks>Get Assigne Power User</remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.CustomerLicenseType">
	<summary>
	</summary>
	<value>Can be either Named User or Subscription</value>
	<returns>static data for the License Changes</returns>
	<remarks>we need this since the new license type is dependent to the customer and not per item</remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.SubscriptionExpirationDate">
	<summary>
	</summary>
	<value>Subscription End Date</value>
	<returns>subscription end date value</returns>
	<remarks>Gets the subscription limit</remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.EshopActivationResult">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.IsMultilocationItem">
	<summary>
	</summary>
	<value>IsMultilocationItem</value>
	<returns>True if license has multiple location</returns>
	<remarks>Check if license has multiple location item</remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseInformation.#ctor(System.String)">
	<summary>
	</summary>
	<param name="activationCode"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.SupportInformation.Enabled">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.SupportInformation.UserCount">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseInformation.SupportInformation.ExpirationDate">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="T:Interprise.Licensing.Base.Licensing.LicenseInformation.SupportInformation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseGenerator.GenerateLicense(System.String,System.String,System.String)">
	<summary>
 Generate license dll for the machine. 
 </summary>
	<param name="key"></param>
	<param name="developerID"></param>
	<param name="customerID"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseGenerator.GenerateLicense(System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="key"></param>
	<param name="developerID"></param>
	<param name="customerID"></param>
	<param name="dateLicensed"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.Licensing.LicenseGenerator.GenerateLicenseFile(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Generate licensing dll for the user machine.
 </summary>
	<param name="publicKey"></param>
	<param name="privateKey"></param>
	<param name="machineKey"></param>
	<param name="developerID"></param>
	<param name="customerID"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.Licensing.LicenseGenerator.LicenseFileName">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingValidationAttribute.#ctor(System.Boolean)">
	<summary>
	</summary>
	<param name="enableConcurrentUserValidation"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.Execute(System.String,Interprise.Licensing.Base.Shared.Enum.ProductEdition)">
	<summary>
	</summary>
	<param name="connectionString"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GenerateScript(System.String,System.String[],Interprise.Licensing.Base.Shared.Enum.ProductEdition,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
	<summary>
	</summary>
	<param name="currentDatabase"></param>
	<param name="userRoleTables"></param>
	<param name="productEdition"></param>
	<param name="usedUKSetting"></param>
	<param name="companyCountry"></param>
	<param name="companyLanguage"></param>
	<param name="isISBExist"></param>
	<param name="sqlConnection"></param>
	<param name="sqlTransaction"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GenerateUserRoleScript(System.String,Interprise.Licensing.Base.Shared.Enum.ProductEdition,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetColumns(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="schema"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetCompanyInfo(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetCompanySchema(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
	<summary>
	</summary>
	<param name="sqlConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetPrimaryKeys(System.Data.DataSet)">
	<summary>
	</summary>
	<param name="schema"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetRow(System.Data.DataSet,System.Boolean)">
	<summary>
	</summary>
	<param name="schema"></param>
	<param name="getColumn"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetSchema(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
	<summary>
	</summary>
	<param name="sqlConnection"></param>
	<param name="sqlTransaction"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetSystemTableList">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetTableSchema(System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
	<summary>
	</summary>
	<param name="userRoleTable"></param>
	<param name="sqlConnection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicensingScriptGenerator.GetErrorMessage(System.Exception,System.String)">
	<summary>
	</summary>
	<param name="ex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.ErrorMessage">
	<summary>
 Generated activation code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.ActivationCode">
	<summary>
 Generated activation code.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.Cancelled">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.Crypto">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.DateLicensed">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.DBConnectionStrings">
	<summary>
 Property that holds the connection string passed from the Connected Business installation.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.IntepriseDatabases">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.IsRegistered">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.IsLicensed">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.IsCommunity">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.IsDatabaseCommunity">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.RegisterFromInstallation">
	<summary>
 Checks if the registration is called from installation.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.SkipRegistration">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.SoapVersion">
	<summary>
 Gets the version of the soap protocol.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.LicenseActivationForm.IsCommunityCustomerCode">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.ApplySkinBaseOnOperatingSystem">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.AssignCustomerInfo">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.AssignLead(System.String)">
	<summary>
 Create or modify a lead.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.AssignLead">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.BuildSQLConnectionString(System.String)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.EnableDisableControl(System.Boolean)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.ExecuteQuery(System.String,System.String)">
	<summary>
	</summary>
	<param name="dbName"></param>
	<param name="commandText"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.ExecuteScalar(System.String,System.String)">
	<summary>
	</summary>
	<param name="dbName"></param>
	<param name="commandText"></param>
	<returns></returns>
	<remarks></remarks>
 Unused Function

</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.FinalizeRegistration(System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.GenerateActivationCode">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.GetProductRights(System.String)">
	<summary>
 Retrieve all product rights of a customer
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.BeginInitWebService">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.IsCacheDatabase(System.String)">
	<summary>
	</summary>
	<param name="dbName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.GetEncryptedActivationXML(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="activationCode"></param>
	<param name="salt"></param>
	<param name="vector"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.RetrieveActivationCode">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Interprise.Licensing.Base.LicenseActivationForm.RetrieveCustomerInfoFromActivationCodeDelegate">
	<summary>
	</summary>
	<param name="xmlDoc"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.HandleException(System.Exception)">
	<summary>
	</summary>
	<param name="ex"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.GetErrorMessage(System.Exception,System.String)">
	<summary>
	</summary>
	<param name="ex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.ValidRegistrationInfo">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.UpdateServerDatabases">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.GenerateRestoreEcommerceScript">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.GenerateRemoveEcommerceScript">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.UpdateReportSetting">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.SetUserRoleBasedOnProductEdition(System.String,System.String,System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.ValidateServerName">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.GetISSIMODELName(System.String)">
	<summary>
	</summary>
	<param name="dbName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.UpdateProductRights(System.String)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.UpdateLerrynImportExportConfig_DEV000221Active(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.DateTime)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.btnRefreshServerList_Click(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.cboAuthentication_SelectedValueChanged(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.cboServerName_ButtonPressed(System.Object,DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:Interprise.Licensing.Base.LicenseActivationForm.GenerateMachineLicenseFileDelegate">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.LicenseActivationForm_Load(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.WizardLicenseActivation_BeforePageDisplayed(System.Object,Interprise.Licensing.Base.ExtendedXtraTabContol.SelectedPageChangingEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.LicenseActivationForm.WizardLicenseActivation_SkipClicked(System.Object,System.ComponentModel.CancelEventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:Interprise.Licensing.Base.ExtendedXtraTabContol.WizardControl.SkipButtonVisible">
	<summary>
	</summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.SharedControl.BasePhoneControl.Clear">
	<summary>
 Clears the text displayed in the control.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.AddressControl.Clear">
	<summary>
 Clears the text displayed in the control.
 </summary>
	<remarks></remarks>
</member><member name="M:Interprise.Licensing.Base.AddressControl.ClearErrors">
	<summary>
 Clear all errors in the text boxes.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>